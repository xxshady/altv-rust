use altv_wasm_shared::natives_result::*;
use altv_sdk::ffi as sdk;
use autocxx::prelude::*;

pub struct WasmNatives;

impl wasm_host::gen::imports::extra_interfaces::wasm_natives for WasmNatives {
    fn native_app_get_float(&self, property_: Option<String>) -> ResultOf_app_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_float(
            &mut native_return,
property_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_app_get_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_set_float(&self, property_: Option<String>,
value_: f32) -> ResultOf_app_set_float {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = value_;
        let success = sdk::natives::app_set_float(
            property_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_app_set_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_block(&self, blockName_: Option<String>) -> ResultOf_app_set_block {
    unsafe {
        let mut blockName_ = sdk_helpers::create_c_string_ptr(blockName_);
        let success = sdk::natives::app_set_block(
            blockName_.as_ref().unwrap(),
        );
        
        
        ResultOf_app_set_block {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_string(&self, property_: Option<String>,
value_: Option<String>) -> ResultOf_app_set_string {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::app_set_string(
            property_.as_ref().unwrap(),
value_.as_ref().unwrap(),
        );
        
        
        ResultOf_app_set_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_delete_app_data(&self, appName_: Option<String>) -> ResultOf_app_delete_app_data {
    unsafe {
        let mut native_return = Default::default();
let mut appName_ = sdk_helpers::create_c_string_ptr(appName_);
        let success = sdk::natives::app_delete_app_data(
            &mut native_return,
appName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_app_delete_app_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_clear_block(&self, ) -> ResultOf_app_clear_block {
    unsafe {
        
        let success = sdk::natives::app_clear_block(
            
        );
        
        
        ResultOf_app_clear_block {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_int(&self, property_: Option<String>,
value_: i32) -> ResultOf_app_set_int {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = value_;
        let success = sdk::natives::app_set_int(
            property_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_app_set_int {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_has_linked_social_club_account(&self, ) -> ResultOf_app_has_linked_social_club_account {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_has_linked_social_club_account(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_app_has_linked_social_club_account {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_get_string(&self, property_: Option<String>) -> ResultOf_app_get_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_string(
            native_return.pin_mut(),
property_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_app_get_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_data_valid(&self, ) -> ResultOf_app_data_valid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_data_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_app_data_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_save_data(&self, ) -> ResultOf_app_save_data {
    unsafe {
        
        let success = sdk::natives::app_save_data(
            
        );
        
        
        ResultOf_app_save_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_get_deleted_file_status(&self, ) -> ResultOf_app_get_deleted_file_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_get_deleted_file_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_app_get_deleted_file_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_has_synced_data(&self, appName_: Option<String>) -> ResultOf_app_has_synced_data {
    unsafe {
        let mut native_return = Default::default();
let mut appName_ = sdk_helpers::create_c_string_ptr(appName_);
        let success = sdk::natives::app_has_synced_data(
            &mut native_return,
appName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_app_has_synced_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_set_app(&self, appName_: Option<String>) -> ResultOf_app_set_app {
    unsafe {
        let mut appName_ = sdk_helpers::create_c_string_ptr(appName_);
        let success = sdk::natives::app_set_app(
            appName_.as_ref().unwrap(),
        );
        
        
        ResultOf_app_set_app {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_get_int(&self, property_: Option<String>) -> ResultOf_app_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_int(
            &mut native_return,
property_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_app_get_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_close_app(&self, ) -> ResultOf_app_close_app {
    unsafe {
        
        let success = sdk::natives::app_close_app(
            
        );
        
        
        ResultOf_app_close_app {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_close_block(&self, ) -> ResultOf_app_close_block {
    unsafe {
        
        let success = sdk::natives::app_close_block(
            
        );
        
        
        ResultOf_app_close_block {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_audio_scene(&self, scene_: Option<String>) -> ResultOf_start_audio_scene {
    unsafe {
        let mut native_return = Default::default();
let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::start_audio_scene(
            &mut native_return,
scene_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_start_audio_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unrequest_tennis_banks(&self, ) -> ResultOf_unrequest_tennis_banks {
    unsafe {
        
        let success = sdk::natives::unrequest_tennis_banks(
            
        );
        
        
        ResultOf_unrequest_tennis_banks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_audio_body_damage_factor(&self, vehicle_: u32,
intensity_: f32) -> ResultOf_set_vehicle_audio_body_damage_factor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut intensity_ = intensity_;
        let success = sdk::natives::set_vehicle_audio_body_damage_factor(
            vehicle_,
intensity_,
        );
        
        
        ResultOf_set_vehicle_audio_body_damage_factor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ambient_zone_enabled(&self, ambientZone_: Option<String>) -> ResultOf_is_ambient_zone_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut ambientZone_ = sdk_helpers::create_c_string_ptr(ambientZone_);
        let success = sdk::natives::is_ambient_zone_enabled(
            &mut native_return,
ambientZone_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_ambient_zone_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_default_horn(&self, vehicle_: u32) -> ResultOf_get_vehicle_default_horn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_default_horn(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_default_horn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prepare_synchronized_audio_event_for_scene(&self, sceneID_: i32,
audioEvent_: Option<String>) -> ResultOf_prepare_synchronized_audio_event_for_scene {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
let mut audioEvent_ = sdk_helpers::create_c_string_ptr(audioEvent_);
        let success = sdk::natives::prepare_synchronized_audio_event_for_scene(
            &mut native_return,
sceneID_,
audioEvent_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_prepare_synchronized_audio_event_for_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_position_audio_mute(&self, p0_: bool) -> ResultOf_set_radio_position_audio_mute {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_radio_position_audio_mute(
            p0_,
        );
        
        
        ResultOf_set_radio_position_audio_mute {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_radio_station_track_list(&self, radioStation_: Option<String>,
trackListName_: Option<String>) -> ResultOf_unlock_radio_station_track_list {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut trackListName_ = sdk_helpers::create_c_string_ptr(trackListName_);
        let success = sdk::natives::unlock_radio_station_track_list(
            radioStation_.as_ref().unwrap(),
trackListName_.as_ref().unwrap(),
        );
        
        
        ResultOf_unlock_radio_station_track_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_vehicle_receive_cb_radio(&self, vehicle_: u32) -> ResultOf_can_vehicle_receive_cb_radio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_vehicle_receive_cb_radio(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_can_vehicle_receive_cb_radio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_horn_sound_index(&self, vehicle_: u32,
value_: i32) -> ResultOf_set_vehicle_horn_sound_index {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_horn_sound_index(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_vehicle_horn_sound_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_alarm(&self, alarmName_: Option<String>,
p2_: bool) -> ResultOf_start_alarm {
    unsafe {
        let mut alarmName_ = sdk_helpers::create_c_string_ptr(alarmName_);
let mut p2_ = p2_;
        let success = sdk::natives::start_alarm(
            alarmName_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_start_alarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_portal_settings_override(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOf_set_portal_settings_override {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_portal_settings_override(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_portal_settings_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_current_conversation(&self, ped_: u32) -> ResultOf_is_ped_in_current_conversation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_current_conversation(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_current_conversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_radio_faded_out(&self, ) -> ResultOf_is_radio_faded_out {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radio_faded_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_radio_faded_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_panic_walla(&self, ) -> ResultOf_force_ped_panic_walla {
    unsafe {
        
        let success = sdk::natives::force_ped_panic_walla(
            
        );
        
        
        ResultOf_force_ped_panic_walla {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_footsteps_events_enabled(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_footsteps_events_enabled {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_footsteps_events_enabled(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_footsteps_events_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_update_door_audio(&self, doorHash_: u32,
toggle_: bool) -> ResultOf_set_script_update_door_audio {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_update_door_audio(
            doorHash_,
toggle_,
        );
        
        
        ResultOf_set_script_update_door_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_conversation_audio_controlled_by_anim(&self, p0_: bool) -> ResultOf_set_conversation_audio_controlled_by_anim {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_conversation_audio_controlled_by_anim(
            p0_,
        );
        
        
        ResultOf_set_conversation_audio_controlled_by_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_voice_group_from_race_to_pvg(&self, ped_: u32,
voiceGroupHash_: u32) -> ResultOf_set_ped_voice_group_from_race_to_pvg {
    unsafe {
        let mut ped_ = ped_;
let mut voiceGroupHash_ = voiceGroupHash_;
        let success = sdk::natives::set_ped_voice_group_from_race_to_pvg(
            ped_,
voiceGroupHash_,
        );
        
        
        ResultOf_set_ped_voice_group_from_race_to_pvg {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_radio_on(&self, vehicle_: u32) -> ResultOf_is_vehicle_radio_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_radio_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_radio_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_mission_audio_bank(&self, ) -> ResultOf_release_mission_audio_bank {
    unsafe {
        
        let success = sdk::natives::release_mission_audio_bank(
            
        );
        
        
        ResultOf_release_mission_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_player_veh_have_radio(&self, ) -> ResultOf_does_player_veh_have_radio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::does_player_veh_have_radio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_does_player_veh_have_radio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mobile_radio_enabled_during_gameplay(&self, toggle_: bool) -> ResultOf_set_mobile_radio_enabled_during_gameplay {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mobile_radio_enabled_during_gameplay(
            toggle_,
        );
        
        
        ResultOf_set_mobile_radio_enabled_during_gameplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_unhint_named_script_audio_bank(&self, audioBank_: Option<String>) -> ResultOf_unhint_named_script_audio_bank {
    unsafe {
        let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
        let success = sdk::natives::unhint_named_script_audio_bank(
            audioBank_.as_ref().unwrap(),
        );
        
        
        ResultOf_unhint_named_script_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ambient_zone_list_state(&self, ambientZone_: Option<String>,
p1_: bool) -> ResultOf_clear_ambient_zone_list_state {
    unsafe {
        let mut ambientZone_ = sdk_helpers::create_c_string_ptr(ambientZone_);
let mut p1_ = p1_;
        let success = sdk::natives::clear_ambient_zone_list_state(
            ambientZone_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_clear_ambient_zone_list_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_special_effect_mode(&self, mode_: i32) -> ResultOf_set_audio_special_effect_mode {
    unsafe {
        let mut mode_ = mode_;
        let success = sdk::natives::set_audio_special_effect_mode(
            mode_,
        );
        
        
        ResultOf_set_audio_special_effect_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_trevor_rage(&self, voiceEffect_: Option<String>) -> ResultOf_override_trevor_rage {
    unsafe {
        let mut voiceEffect_ = sdk_helpers::create_c_string_ptr(voiceEffect_);
        let success = sdk::natives::override_trevor_rage(
            voiceEffect_.as_ref().unwrap(),
        );
        
        
        ResultOf_override_trevor_rage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_walla_density(&self, p0_: f32,
p1_: f32) -> ResultOf_set_ped_walla_density {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_walla_density(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_walla_density {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_entity_to_audio_mix_group(&self, entity_: u32,
groupName_: Option<String>,
p2_: f32) -> ResultOf_add_entity_to_audio_mix_group {
    unsafe {
        let mut entity_ = entity_;
let mut groupName_ = sdk_helpers::create_c_string_ptr(groupName_);
let mut p2_ = p2_;
        let success = sdk::natives::add_entity_to_audio_mix_group(
            entity_,
groupName_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_add_entity_to_audio_mix_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_radio_signal_level(&self, p0_: i32) -> ResultOf_set_global_radio_signal_level {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_global_radio_signal_level(
            p0_,
        );
        
        
        ResultOf_set_global_radio_signal_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_custom_radio_track_list(&self, radioStation_: Option<String>) -> ResultOf_clear_custom_radio_track_list {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::clear_custom_radio_track_list(
            radioStation_.as_ref().unwrap(),
        );
        
        
        ResultOf_clear_custom_radio_track_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_conversation_ongoing(&self, ) -> ResultOf_is_scripted_conversation_ongoing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scripted_conversation_ongoing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_conversation_ongoing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_entity_from_audio_mix_group(&self, entity_: u32,
p1_: f32) -> ResultOf_remove_entity_from_audio_mix_group {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_entity_from_audio_mix_group(
            entity_,
p1_,
        );
        
        
        ResultOf_remove_entity_from_audio_mix_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_complete_playing(&self, ) -> ResultOf_is_mission_complete_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mission_complete_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mission_complete_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unhint_ambient_audio_bank(&self, ) -> ResultOf_unhint_ambient_audio_bank {
    unsafe {
        
        let success = sdk::natives::unhint_ambient_audio_bank(
            
        );
        
        
        ResultOf_unhint_ambient_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_user_radio_control_enabled(&self, toggle_: bool) -> ResultOf_set_user_radio_control_enabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_user_radio_control_enabled(
            toggle_,
        );
        
        
        ResultOf_set_user_radio_control_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_race_and_voice_group(&self, ped_: u32,
p1_: i32,
voiceGroup_: u32) -> ResultOf_set_ped_race_and_voice_group {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut voiceGroup_ = voiceGroup_;
        let success = sdk::natives::set_ped_race_and_voice_group(
            ped_,
p1_,
voiceGroup_,
        );
        
        
        ResultOf_set_ped_race_and_voice_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_blip_siren(&self, vehicle_: u32) -> ResultOf_blip_siren {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::blip_siren(
            vehicle_,
        );
        
        
        ResultOf_blip_siren {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_radio_station(&self, vehicle_: u32,
radioStation_: Option<String>) -> ResultOf_set_veh_radio_station {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::set_veh_radio_station(
            vehicle_,
radioStation_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_veh_radio_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_vehicle_fanbelt_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_enable_vehicle_fanbelt_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_vehicle_fanbelt_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_enable_vehicle_fanbelt_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_state_persistent(&self, ambientZone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOf_set_ambient_zone_state_persistent {
    unsafe {
        let mut ambientZone_ = sdk_helpers::create_c_string_ptr(ambientZone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_state_persistent(
            ambientZone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOf_set_ambient_zone_state_persistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_prepare_music_event(&self, eventName_: Option<String>) -> ResultOf_prepare_music_event {
    unsafe {
        let mut native_return = Default::default();
let mut eventName_ = sdk_helpers::create_c_string_ptr(eventName_);
        let success = sdk::natives::prepare_music_event(
            &mut native_return,
eventName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_prepare_music_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_ringtone_playing(&self, ped_: u32) -> ResultOf_is_ped_ringtone_playing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ringtone_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_ringtone_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_stream(&self, streamName_: Option<String>,
soundSet_: Option<String>) -> ResultOf_load_stream {
    unsafe {
        let mut native_return = Default::default();
let mut streamName_ = sdk_helpers::create_c_string_ptr(streamName_);
let mut soundSet_ = sdk_helpers::create_c_string_ptr(soundSet_);
        let success = sdk::natives::load_stream(
            &mut native_return,
streamName_.as_ref().unwrap(),
soundSet_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_load_stream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_siren_with_no_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_siren_with_no_driver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_siren_with_no_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_siren_with_no_driver {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_position(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_play_stream_from_position {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::play_stream_from_position(
            x_,
y_,
z_,
        );
        
        
        ResultOf_play_stream_from_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ambient_zone_state(&self, zoneName_: Option<String>,
p1_: bool) -> ResultOf_clear_ambient_zone_state {
    unsafe {
        let mut zoneName_ = sdk_helpers::create_c_string_ptr(zoneName_);
let mut p1_ = p1_;
        let success = sdk::natives::clear_ambient_zone_state(
            zoneName_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_clear_ambient_zone_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_alarm_playing(&self, alarmName_: Option<String>) -> ResultOf_is_alarm_playing {
    unsafe {
        let mut native_return = Default::default();
let mut alarmName_ = sdk_helpers::create_c_string_ptr(alarmName_);
        let success = sdk::natives::is_alarm_playing(
            &mut native_return,
alarmName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_alarm_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_preloaded_conversation(&self, ) -> ResultOf_start_preloaded_conversation {
    unsafe {
        
        let success = sdk::natives::start_preloaded_conversation(
            
        );
        
        
        ResultOf_start_preloaded_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_script_phone_conversation(&self, p0_: bool,
p1_: bool) -> ResultOf_start_script_phone_conversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::start_script_phone_conversation(
            p0_,
p1_,
        );
        
        
        ResultOf_start_script_phone_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_cloth_events_enabled(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_cloth_events_enabled {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_cloth_events_enabled(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_cloth_events_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_unblock_speech_context_group(&self, p0_: Option<String>) -> ResultOf_unblock_speech_context_group {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::unblock_speech_context_group(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_unblock_speech_context_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radio_station_favourited(&self, radioStation_: Option<String>) -> ResultOf_is_radio_station_favourited {
    unsafe {
        let mut native_return = Default::default();
let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::is_radio_station_favourited(
            &mut native_return,
radioStation_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_radio_station_favourited {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_vehicle_exhaust_pops(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_enable_vehicle_exhaust_pops {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_vehicle_exhaust_pops(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_enable_vehicle_exhaust_pops {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_frontend_fade_time(&self, fadeTime_: f32) -> ResultOf_set_radio_frontend_fade_time {
    unsafe {
        let mut fadeTime_ = fadeTime_;
        let success = sdk::natives::set_radio_frontend_fade_time(
            fadeTime_,
        );
        
        
        ResultOf_set_radio_frontend_fade_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_track_with_start_offset(&self, radioStationName_: Option<String>,
mixName_: Option<String>,
p2_: i32) -> ResultOf_set_radio_track_with_start_offset {
    unsafe {
        let mut radioStationName_ = sdk_helpers::create_c_string_ptr(radioStationName_);
let mut mixName_ = sdk_helpers::create_c_string_ptr(mixName_);
let mut p2_ = p2_;
        let success = sdk::natives::set_radio_track_with_start_offset(
            radioStationName_.as_ref().unwrap(),
mixName_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_set_radio_track_with_start_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_audio_is_scripted_music_playing(&self, ) -> ResultOf_audio_is_scripted_music_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::audio_is_scripted_music_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_audio_is_scripted_music_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_network_id_from_sound_id(&self, soundId_: i32) -> ResultOf_get_network_id_from_sound_id {
    unsafe {
        let mut native_return = Default::default();
let mut soundId_ = soundId_;
        let success = sdk::natives::get_network_id_from_sound_id(
            &mut native_return,
soundId_,
        );
        let native_return = native_return;
        
        ResultOf_get_network_id_from_sound_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_all_alarms(&self, stop_: bool) -> ResultOf_stop_all_alarms {
    unsafe {
        let mut stop_ = stop_;
        let success = sdk::natives::stop_all_alarms(
            stop_,
        );
        
        
        ResultOf_stop_all_alarms {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_script_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_request_script_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_script_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_request_script_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_variable_on_stream(&self, unkVariable_: Option<String>,
p1_: f32) -> ResultOf_set_variable_on_stream {
    unsafe {
        let mut unkVariable_ = sdk_helpers::create_c_string_ptr(unkVariable_);
let mut p1_ = p1_;
        let success = sdk::natives::set_variable_on_stream(
            unkVariable_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_set_variable_on_stream {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_positional_speech_playing(&self, ) -> ResultOf_is_any_positional_speech_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_any_positional_speech_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_any_positional_speech_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_position_for_null_conv_ped(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_set_position_for_null_conv_ped {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_position_for_null_conv_ped(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_position_for_null_conv_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_freeze_radio_station(&self, radioStation_: Option<String>) -> ResultOf_freeze_radio_station {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::freeze_radio_station(
            radioStation_.as_ref().unwrap(),
        );
        
        
        ResultOf_freeze_radio_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_track_sound_name(&self, radioStationName_: Option<String>) -> ResultOf_get_current_track_sound_name {
    unsafe {
        let mut native_return = Default::default();
let mut radioStationName_ = sdk_helpers::create_c_string_ptr(radioStationName_);
        let success = sdk::natives::get_current_track_sound_name(
            &mut native_return,
radioStationName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_current_track_sound_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_ped_ambient_speech_with_voice_native(&self, ped_: u32,
speechName_: Option<String>,
voiceName_: Option<String>,
speechParam_: Option<String>,
p4_: bool) -> ResultOf_play_ped_ambient_speech_with_voice_native {
    unsafe {
        let mut ped_ = ped_;
let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
let mut voiceName_ = sdk_helpers::create_c_string_ptr(voiceName_);
let mut speechParam_ = sdk_helpers::create_c_string_ptr(speechParam_);
let mut p4_ = p4_;
        let success = sdk::natives::play_ped_ambient_speech_with_voice_native(
            ped_,
speechName_.as_ref().unwrap(),
voiceName_.as_ref().unwrap(),
speechParam_.as_ref().unwrap(),
p4_,
        );
        
        
        ResultOf_play_ped_ambient_speech_with_voice_native {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_sound_id(&self, soundId_: i32) -> ResultOf_release_sound_id {
    unsafe {
        let mut soundId_ = soundId_;
        let success = sdk::natives::release_sound_id(
            soundId_,
        );
        
        
        ResultOf_release_sound_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aggressive_horns(&self, toggle_: bool) -> ResultOf_set_aggressive_horns {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_aggressive_horns(
            toggle_,
        );
        
        
        ResultOf_set_aggressive_horns {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_static_emitter_enabled(&self, emitterName_: Option<String>,
toggle_: bool) -> ResultOf_set_static_emitter_enabled {
    unsafe {
        let mut emitterName_ = sdk_helpers::create_c_string_ptr(emitterName_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_static_emitter_enabled(
            emitterName_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_static_emitter_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_music_vol_slider(&self, ) -> ResultOf_get_music_vol_slider {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_music_vol_slider(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_music_vol_slider {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_vehicle_door_open_sound(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_play_vehicle_door_open_sound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::play_vehicle_door_open_sound(
            vehicle_,
doorId_,
        );
        
        
        ResultOf_play_vehicle_door_open_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_script_conversation(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_preload_script_conversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::preload_script_conversation(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_preload_script_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_audio_override(&self, name_: Option<String>) -> ResultOf_set_cutscene_audio_override {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_cutscene_audio_override(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_cutscene_audio_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_radio_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_radio_enabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_radio_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_radio_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_active(&self, active_: bool) -> ResultOf_set_gps_active {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_gps_active(
            active_,
        );
        
        
        ResultOf_set_gps_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_veh_horn(&self, vehicle_: u32,
override_: bool,
hornHash_: i32) -> ResultOf_override_veh_horn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut override_ = override_;
let mut hornHash_ = hornHash_;
        let success = sdk::natives::override_veh_horn(
            vehicle_,
override_,
hornHash_,
        );
        
        
        ResultOf_override_veh_horn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_has_normal_radio(&self, vehicle_: u32) -> ResultOf_set_veh_has_normal_radio {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_veh_has_normal_radio(
            vehicle_,
        );
        
        
        ResultOf_set_veh_has_normal_radio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_track_play_time(&self, radioStationName_: Option<String>) -> ResultOf_get_current_track_play_time {
    unsafe {
        let mut native_return = Default::default();
let mut radioStationName_ = sdk_helpers::create_c_string_ptr(radioStationName_);
        let success = sdk::natives::get_current_track_play_time(
            &mut native_return,
radioStationName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_current_track_play_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hint_mission_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_hint_mission_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_mission_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_hint_mission_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_voice_full(&self, ped_: u32) -> ResultOf_set_ped_voice_full {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_voice_full(
            ped_,
        );
        
        
        ResultOf_set_ped_voice_full {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_sound_id(&self, ) -> ResultOf_get_sound_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_sound_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_sound_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_siren_can_be_controlled_by_audio(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_siren_can_be_controlled_by_audio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_siren_can_be_controlled_by_audio(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_siren_can_be_controlled_by_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_radio_station(&self, radioStationName_: Option<String>,
toggle_: bool) -> ResultOf_lock_radio_station {
    unsafe {
        let mut radioStationName_ = sdk_helpers::create_c_string_ptr(radioStationName_);
let mut toggle_ = toggle_;
        let success = sdk::natives::lock_radio_station(
            radioStationName_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_lock_radio_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_unlockable_dj_radio_tracks(&self, enableMixes_: bool) -> ResultOf_update_unlockable_dj_radio_tracks {
    unsafe {
        let mut enableMixes_ = enableMixes_;
        let success = sdk::natives::update_unlockable_dj_radio_tracks(
            enableMixes_,
        );
        
        
        ResultOf_update_unlockable_dj_radio_tracks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_scripted_conversation_line(&self, ) -> ResultOf_get_current_scripted_conversation_line {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_scripted_conversation_line(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_scripted_conversation_line {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_context_exist_for_this_ped(&self, ped_: u32,
speechName_: Option<String>,
p2_: bool) -> ResultOf_does_context_exist_for_this_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
let mut p2_ = p2_;
        let success = sdk::natives::does_context_exist_for_this_ped(
            &mut native_return,
ped_,
speechName_.as_ref().unwrap(),
p2_,
        );
        let native_return = native_return;
        
        ResultOf_does_context_exist_for_this_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_boost_active(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_boost_active {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_boost_active(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_boost_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_tennis_banks(&self, ped_: u32) -> ResultOf_request_tennis_banks {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::request_tennis_banks(
            ped_,
        );
        
        
        ResultOf_request_tennis_banks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_station_as_favourite(&self, radioStation_: Option<String>,
toggle_: bool) -> ResultOf_set_radio_station_as_favourite {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_station_as_favourite(
            radioStation_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_radio_station_as_favourite {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_music_track_list(&self, radioStation_: Option<String>,
trackListName_: Option<String>,
milliseconds_: i32) -> ResultOf_force_music_track_list {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut trackListName_ = sdk_helpers::create_c_string_ptr(trackListName_);
let mut milliseconds_ = milliseconds_;
        let success = sdk::natives::force_music_track_list(
            radioStation_.as_ref().unwrap(),
trackListName_.as_ref().unwrap(),
milliseconds_,
        );
        
        
        ResultOf_force_music_track_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_custom_radio_track_list(&self, radioStation_: Option<String>,
trackListName_: Option<String>,
p2_: bool) -> ResultOf_set_custom_radio_track_list {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut trackListName_ = sdk_helpers::create_c_string_ptr(trackListName_);
let mut p2_ = p2_;
        let success = sdk::natives::set_custom_radio_track_list(
            radioStation_.as_ref().unwrap(),
trackListName_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_set_custom_radio_track_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_stream_play_time(&self, ) -> ResultOf_get_stream_play_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_stream_play_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_stream_play_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_use_audio_game_object(&self, vehicle_: u32,
audioName_: Option<String>) -> ResultOf_force_use_audio_game_object {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
        let success = sdk::natives::force_use_audio_game_object(
            vehicle_,
audioName_.as_ref().unwrap(),
        );
        
        
        ResultOf_force_use_audio_game_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_audible_music_track_text_id(&self, ) -> ResultOf_get_audible_music_track_text_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_audible_music_track_text_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_audible_music_track_text_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_loaded_mp_data_set(&self, ) -> ResultOf_has_loaded_mp_data_set {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_loaded_mp_data_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_loaded_mp_data_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_distant_cop_car_sirens(&self, value_: bool) -> ResultOf_distant_cop_car_sirens {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::distant_cop_car_sirens(
            value_,
        );
        
        
        ResultOf_distant_cop_car_sirens {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_radio_track(&self, radioName_: Option<String>,
radioTrack_: Option<String>,
p2_: Option<String>,
p3_: Option<String>) -> ResultOf_set_next_radio_track {
    unsafe {
        let mut radioName_ = sdk_helpers::create_c_string_ptr(radioName_);
let mut radioTrack_ = sdk_helpers::create_c_string_ptr(radioTrack_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::set_next_radio_track(
            radioName_.as_ref().unwrap(),
radioTrack_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_next_radio_track {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_conversations_persist(&self, p0_: bool,
p1_: bool) -> ResultOf_set_vehicle_conversations_persist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_conversations_persist(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_conversations_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_frontend(&self, ) -> ResultOf_play_stream_frontend {
    unsafe {
        
        let success = sdk::natives::play_stream_frontend(
            
        );
        
        
        ResultOf_play_stream_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_stream_with_start_offset(&self, streamName_: Option<String>,
startOffset_: i32,
soundSet_: Option<String>) -> ResultOf_load_stream_with_start_offset {
    unsafe {
        let mut native_return = Default::default();
let mut streamName_ = sdk_helpers::create_c_string_ptr(streamName_);
let mut startOffset_ = startOffset_;
let mut soundSet_ = sdk_helpers::create_c_string_ptr(soundSet_);
        let success = sdk::natives::load_stream_with_start_offset(
            &mut native_return,
streamName_.as_ref().unwrap(),
startOffset_,
soundSet_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_load_stream_with_start_offset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_audio_engine_damage_factor(&self, vehicle_: u32,
damageFactor_: f32) -> ResultOf_set_vehicle_audio_engine_damage_factor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut damageFactor_ = damageFactor_;
        let success = sdk::natives::set_vehicle_audio_engine_damage_factor(
            vehicle_,
damageFactor_,
        );
        
        
        ResultOf_set_vehicle_audio_engine_damage_factor {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_music_event(&self, eventName_: Option<String>) -> ResultOf_cancel_music_event {
    unsafe {
        let mut native_return = Default::default();
let mut eventName_ = sdk_helpers::create_c_string_ptr(eventName_);
        let success = sdk::natives::cancel_music_event(
            &mut native_return,
eventName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_cancel_music_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_loaded_sp_data_set(&self, ) -> ResultOf_has_loaded_sp_data_set {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_loaded_sp_data_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_loaded_sp_data_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_from_entity_hash(&self, soundId_: i32,
model_: u32,
entity_: u32,
soundSetHash_: u32,
p4_: i32,
p5_: i32) -> ResultOf_play_sound_from_entity_hash {
    unsafe {
        let mut soundId_ = soundId_;
let mut model_ = model_;
let mut entity_ = entity_;
let mut soundSetHash_ = soundSetHash_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound_from_entity_hash(
            soundId_,
model_,
entity_,
soundSetHash_,
p4_,
p5_,
        );
        
        
        ResultOf_play_sound_from_entity_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_refresh_closest_ocean_shoreline(&self, ) -> ResultOf_refresh_closest_ocean_shoreline {
    unsafe {
        
        let success = sdk::natives::refresh_closest_ocean_shoreline(
            
        );
        
        
        ResultOf_refresh_closest_ocean_shoreline {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_audibly_damaged(&self, vehicle_: u32) -> ResultOf_is_vehicle_audibly_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_audibly_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_audibly_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ambient_voice_name_hash(&self, ped_: u32) -> ResultOf_get_ambient_voice_name_hash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ambient_voice_name_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ambient_voice_name_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_veh_radio_enable(&self, ) -> ResultOf_is_player_veh_radio_enable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_veh_radio_enable(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_player_veh_radio_enable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_preload_script_phone_conversation(&self, p0_: bool,
p1_: bool) -> ResultOf_preload_script_phone_conversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::preload_script_phone_conversation(
            p0_,
p1_,
        );
        
        
        ResultOf_preload_script_phone_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_conversation_audio_placeholder(&self, p0_: bool) -> ResultOf_set_conversation_audio_placeholder {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_conversation_audio_placeholder(
            p0_,
        );
        
        
        ResultOf_set_conversation_audio_placeholder {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_vehicle_door_close_sound(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_play_vehicle_door_close_sound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::play_vehicle_door_close_sound(
            vehicle_,
doorId_,
        );
        
        
        ResultOf_play_vehicle_door_close_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_link_static_emitter_to_entity(&self, emitterName_: Option<String>,
entity_: u32) -> ResultOf_link_static_emitter_to_entity {
    unsafe {
        let mut emitterName_ = sdk_helpers::create_c_string_ptr(emitterName_);
let mut entity_ = entity_;
        let success = sdk::natives::link_static_emitter_to_entity(
            emitterName_.as_ref().unwrap(),
entity_,
        );
        
        
        ResultOf_link_static_emitter_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ambient_audio_bank(&self, ) -> ResultOf_release_ambient_audio_bank {
    unsafe {
        
        let success = sdk::natives::release_ambient_audio_bank(
            
        );
        
        
        ResultOf_release_ambient_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_siren_audio(&self, vehicle_: u32) -> ResultOf_trigger_siren_audio {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::trigger_siren_audio(
            vehicle_,
        );
        
        
        ResultOf_trigger_siren_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_news_story_unlocked(&self, newsStory_: i32) -> ResultOf_is_mission_news_story_unlocked {
    unsafe {
        let mut native_return = Default::default();
let mut newsStory_ = newsStory_;
        let success = sdk::natives::is_mission_news_story_unlocked(
            &mut native_return,
newsStory_,
        );
        let native_return = native_return;
        
        ResultOf_is_mission_news_story_unlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_frontend(&self, soundId_: i32,
audioName_: Option<String>,
audioRef_: Option<String>,
p3_: bool) -> ResultOf_play_sound_frontend {
    unsafe {
        let mut soundId_ = soundId_;
let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
let mut audioRef_ = sdk_helpers::create_c_string_ptr(audioRef_);
let mut p3_ = p3_;
        let success = sdk::natives::play_sound_frontend(
            soundId_,
audioName_.as_ref().unwrap(),
audioRef_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_play_sound_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_script_conversation(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_start_script_conversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::start_script_conversation(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_start_script_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_ringtone(&self, ped_: u32) -> ResultOf_stop_ped_ringtone {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_ped_ringtone(
            ped_,
        );
        
        
        ResultOf_stop_ped_ringtone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_voice_name(&self, ped_: u32,
name_: Option<String>) -> ResultOf_set_ambient_voice_name {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_ambient_voice_name(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ambient_voice_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_game_in_control_of_music(&self, ) -> ResultOf_is_game_in_control_of_music {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_game_in_control_of_music(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_game_in_control_of_music {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_skip_radio_forward(&self, ) -> ResultOf_skip_radio_forward {
    unsafe {
        
        let success = sdk::natives::skip_radio_forward(
            
        );
        
        
        ResultOf_skip_radio_forward {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_complete_ready_for_ui(&self, ) -> ResultOf_is_mission_complete_ready_for_ui {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mission_complete_ready_for_ui(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mission_complete_ready_for_ui {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_vehicle_alarm_audio_active(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_player_vehicle_alarm_audio_active {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_vehicle_alarm_audio_active(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_player_vehicle_alarm_audio_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_music_event(&self, eventName_: Option<String>) -> ResultOf_trigger_music_event {
    unsafe {
        let mut native_return = Default::default();
let mut eventName_ = sdk_helpers::create_c_string_ptr(eventName_);
        let success = sdk::natives::trigger_music_event(
            &mut native_return,
eventName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_trigger_music_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_overrides_wind_elevation(&self, p0_: bool,
p1_: i32) -> ResultOf_script_overrides_wind_elevation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::script_overrides_wind_elevation(
            p0_,
p1_,
        );
        
        
        ResultOf_script_overrides_wind_elevation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_speech_playing(&self, ped_: u32) -> ResultOf_is_any_speech_playing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_any_speech_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_speech_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_variable_on_under_water_stream(&self, unkVariableName_: Option<String>,
value_: f32) -> ResultOf_set_variable_on_under_water_stream {
    unsafe {
        let mut unkVariableName_ = sdk_helpers::create_c_string_ptr(unkVariableName_);
let mut value_ = value_;
        let success = sdk::natives::set_variable_on_under_water_stream(
            unkVariableName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_variable_on_under_water_stream {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_mission_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_request_mission_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_mission_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_request_mission_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_phone_call_ongoing(&self, ) -> ResultOf_is_mobile_phone_call_ongoing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_phone_call_ongoing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mobile_phone_call_ongoing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_sound_id_from_network_id(&self, netId_: i32) -> ResultOf_get_sound_id_from_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::get_sound_id_from_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_get_sound_id_from_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_microphone_settings(&self, hash_: u32,
toggle_: bool) -> ResultOf_override_microphone_settings {
    unsafe {
        let mut hash_ = hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::override_microphone_settings(
            hash_,
toggle_,
        );
        
        
        ResultOf_override_microphone_settings {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_horn_enabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_horn_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_horn_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_station_music_only(&self, radioStation_: Option<String>,
toggle_: bool) -> ResultOf_set_radio_station_music_only {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_station_music_only(
            radioStation_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_radio_station_music_only {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_named_script_audio_bank(&self, audioBank_: Option<String>) -> ResultOf_release_named_script_audio_bank {
    unsafe {
        let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
        let success = sdk::natives::release_named_script_audio_bank(
            audioBank_.as_ref().unwrap(),
        );
        
        
        ResultOf_release_named_script_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_script_audio_bank(&self, ) -> ResultOf_release_script_audio_bank {
    unsafe {
        
        let success = sdk::natives::release_script_audio_bank(
            
        );
        
        
        ResultOf_release_script_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_current_playing_speech(&self, ped_: u32) -> ResultOf_stop_current_playing_speech {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_current_playing_speech(
            ped_,
        );
        
        
        ResultOf_stop_current_playing_speech {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_voice_group(&self, ped_: u32,
voiceGroupHash_: u32) -> ResultOf_set_ped_voice_group {
    unsafe {
        let mut ped_ = ped_;
let mut voiceGroupHash_ = voiceGroupHash_;
        let success = sdk::natives::set_ped_voice_group(
            ped_,
voiceGroupHash_,
        );
        
        
        ResultOf_set_ped_voice_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_sound_coord(&self, soundId_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_update_sound_coord {
    unsafe {
        let mut soundId_ = soundId_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::update_sound_coord(
            soundId_,
x_,
y_,
z_,
        );
        
        
        ResultOf_update_sound_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_sound(&self, soundId_: i32,
audioName_: Option<String>,
audioRef_: Option<String>,
p3_: bool,
p4_: i32,
p5_: bool) -> ResultOf_play_sound {
    unsafe {
        let mut soundId_ = soundId_;
let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
let mut audioRef_ = sdk_helpers::create_c_string_ptr(audioRef_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound(
            soundId_,
audioName_.as_ref().unwrap(),
audioRef_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_play_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene_audio(&self, ) -> ResultOf_stop_cutscene_audio {
    unsafe {
        
        let success = sdk::natives::stop_cutscene_audio(
            
        );
        
        
        ResultOf_stop_cutscene_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_audio_is_music_playing(&self, ) -> ResultOf_audio_is_music_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::audio_is_music_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_audio_is_music_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_scripted_conversation(&self, p0_: bool) -> ResultOf_pause_scripted_conversation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_scripted_conversation(
            p0_,
        );
        
        
        ResultOf_pause_scripted_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_initial_player_station(&self, radioStation_: Option<String>) -> ResultOf_set_initial_player_station {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::set_initial_player_station(
            radioStation_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_initial_player_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_ped(&self, ped_: u32) -> ResultOf_play_stream_from_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::play_stream_from_ped(
            ped_,
        );
        
        
        ResultOf_play_stream_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_for_null_conv_ped(&self, p0_: i32,
entity_: u32) -> ResultOf_set_entity_for_null_conv_ped {
    unsafe {
        let mut p0_ = p0_;
let mut entity_ = entity_;
        let success = sdk::natives::set_entity_for_null_conv_ped(
            p0_,
entity_,
        );
        
        
        ResultOf_set_entity_for_null_conv_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_interrupt_conversation_and_pause(&self, ped_: u32,
p1_: Option<String>,
speaker_: Option<String>) -> ResultOf_interrupt_conversation_and_pause {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut speaker_ = sdk_helpers::create_c_string_ptr(speaker_);
        let success = sdk::natives::interrupt_conversation_and_pause(
            ped_,
p1_.as_ref().unwrap(),
speaker_.as_ref().unwrap(),
        );
        
        
        ResultOf_interrupt_conversation_and_pause {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_audio_event(&self, sceneID_: i32) -> ResultOf_play_synchronized_audio_event {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::play_synchronized_audio_event(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_play_synchronized_audio_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_interior_walla_density(&self, p0_: f32,
p1_: f32) -> ResultOf_set_ped_interior_walla_density {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_interior_walla_density(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_interior_walla_density {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_radio_station_index(&self, stationNameHash_: u32) -> ResultOf_find_radio_station_index {
    unsafe {
        let mut native_return = Default::default();
let mut stationNameHash_ = stationNameHash_;
        let success = sdk::natives::find_radio_station_index(
            &mut native_return,
stationNameHash_,
        );
        let native_return = native_return;
        
        ResultOf_find_radio_station_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_from_coord(&self, soundId_: i32,
audioName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
audioRef_: Option<String>,
isNetwork_: bool,
range_: i32,
p8_: bool) -> ResultOf_play_sound_from_coord {
    unsafe {
        let mut soundId_ = soundId_;
let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut audioRef_ = sdk_helpers::create_c_string_ptr(audioRef_);
let mut isNetwork_ = isNetwork_;
let mut range_ = range_;
let mut p8_ = p8_;
        let success = sdk::natives::play_sound_from_coord(
            soundId_,
audioName_.as_ref().unwrap(),
x_,
y_,
z_,
audioRef_.as_ref().unwrap(),
isNetwork_,
range_,
p8_,
        );
        
        
        ResultOf_play_sound_from_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ped_ambient_speech_native(&self, ped_: u32,
speechName_: Option<String>,
speechParam_: Option<String>,
p3_: i32) -> ResultOf_play_ped_ambient_speech_native {
    unsafe {
        let mut ped_ = ped_;
let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
let mut speechParam_ = sdk_helpers::create_c_string_ptr(speechParam_);
let mut p3_ = p3_;
        let success = sdk::natives::play_ped_ambient_speech_native(
            ped_,
speechName_.as_ref().unwrap(),
speechParam_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_play_ped_ambient_speech_native {
            success,
            ret: (),
            
        }
    }
}

    fn native_hint_ambient_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_hint_ambient_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_ambient_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_hint_ambient_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ambient_speech_playing(&self, ped_: u32) -> ResultOf_is_ambient_speech_playing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ambient_speech_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ambient_speech_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_synchronized_audio_event(&self, sceneID_: i32) -> ResultOf_stop_synchronized_audio_event {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::stop_synchronized_audio_event(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_stop_synchronized_audio_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ambient_speech_disabled(&self, ped_: u32) -> ResultOf_is_ambient_speech_disabled {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ambient_speech_disabled(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ambient_speech_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_synch_scene_audio_with_entity(&self, audioEvent_: Option<String>,
entity_: u32) -> ResultOf_init_synch_scene_audio_with_entity {
    unsafe {
        let mut audioEvent_ = sdk_helpers::create_c_string_ptr(audioEvent_);
let mut entity_ = entity_;
        let success = sdk::natives::init_synch_scene_audio_with_entity(
            audioEvent_.as_ref().unwrap(),
entity_,
        );
        
        
        ResultOf_init_synch_scene_audio_with_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_is_drunk(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_is_drunk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_is_drunk(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_is_drunk {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_ped_to_conversation(&self, index_: i32,
ped_: u32,
p2_: Option<String>) -> ResultOf_add_ped_to_conversation {
    unsafe {
        let mut index_ = index_;
let mut ped_ = ped_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::add_ped_to_conversation(
            index_,
ped_,
p2_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_ped_to_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_to_next_scripted_conversation_line(&self, ) -> ResultOf_skip_to_next_scripted_conversation_line {
    unsafe {
        
        let success = sdk::natives::skip_to_next_scripted_conversation_line(
            
        );
        
        
        ResultOf_skip_to_next_scripted_conversation_line {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_list_state(&self, ambientZone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOf_set_ambient_zone_list_state {
    unsafe {
        let mut ambientZone_ = sdk_helpers::create_c_string_ptr(ambientZone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_list_state(
            ambientZone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOf_set_ambient_zone_list_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_reverse_warning(&self, p0_: i32,
p1_: i32) -> ResultOf_set_vehicle_force_reverse_warning {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_force_reverse_warning(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_force_reverse_warning {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_voice_name_hash(&self, ped_: u32,
hash_: u32) -> ResultOf_set_ambient_voice_name_hash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ambient_voice_name_hash(
            ped_,
hash_,
        );
        
        
        ResultOf_set_ambient_voice_name_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_unhint_script_audio_bank(&self, ) -> ResultOf_unhint_script_audio_bank {
    unsafe {
        
        let success = sdk::natives::unhint_script_audio_bank(
            
        );
        
        
        ResultOf_unhint_script_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_restart_scripted_conversation(&self, ) -> ResultOf_restart_scripted_conversation {
    unsafe {
        
        let success = sdk::natives::restart_scripted_conversation(
            
        );
        
        
        ResultOf_restart_scripted_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_conversations_persist_new(&self, p0_: bool,
p1_: bool,
p2_: bool) -> ResultOf_set_vehicle_conversations_persist_new {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_conversations_persist_new(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_vehicle_conversations_persist_new {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_permanently_on(&self, vehicle_: u32) -> ResultOf_set_horn_permanently_on {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_horn_permanently_on(
            vehicle_,
        );
        
        
        ResultOf_set_horn_permanently_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_permanently_on_time(&self, vehicle_: u32,
time_: f32) -> ResultOf_set_horn_permanently_on_time {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
        let success = sdk::natives::set_horn_permanently_on_time(
            vehicle_,
time_,
        );
        
        
        ResultOf_set_horn_permanently_on_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_speaking(&self, ped_: u32,
shaking_: bool) -> ResultOf_stop_ped_speaking {
    unsafe {
        let mut ped_ = ped_;
let mut shaking_ = shaking_;
        let success = sdk::natives::stop_ped_speaking(
            ped_,
shaking_,
        );
        
        
        ResultOf_stop_ped_speaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_horn_active(&self, vehicle_: u32) -> ResultOf_is_horn_active {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_horn_active(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_horn_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prepare_alarm(&self, alarmName_: Option<String>) -> ResultOf_prepare_alarm {
    unsafe {
        let mut native_return = Default::default();
let mut alarmName_ = sdk_helpers::create_c_string_ptr(alarmName_);
        let success = sdk::natives::prepare_alarm(
            &mut native_return,
alarmName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_prepare_alarm {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_interrupt_conversation(&self, ped_: u32,
voiceline_: Option<String>,
speaker_: Option<String>) -> ResultOf_interrupt_conversation {
    unsafe {
        let mut ped_ = ped_;
let mut voiceline_ = sdk_helpers::create_c_string_ptr(voiceline_);
let mut speaker_ = sdk_helpers::create_c_string_ptr(speaker_);
        let success = sdk::natives::interrupt_conversation(
            ped_,
voiceline_.as_ref().unwrap(),
speaker_.as_ref().unwrap(),
        );
        
        
        ResultOf_interrupt_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_music_oneshot_playing(&self, ) -> ResultOf_is_music_oneshot_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_music_oneshot_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_music_oneshot_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_radio_retuning(&self, ) -> ResultOf_is_radio_retuning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radio_retuning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_radio_retuning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_alarm(&self, alarmName_: Option<String>,
toggle_: bool) -> ResultOf_stop_alarm {
    unsafe {
        let mut alarmName_ = sdk_helpers::create_c_string_ptr(alarmName_);
let mut toggle_ = toggle_;
        let success = sdk::natives::stop_alarm(
            alarmName_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_stop_alarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_sound(&self, soundId_: i32) -> ResultOf_stop_sound {
    unsafe {
        let mut soundId_ = soundId_;
        let success = sdk::natives::stop_sound(
            soundId_,
        );
        
        
        ResultOf_stop_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_stream(&self, ) -> ResultOf_stop_stream {
    unsafe {
        
        let success = sdk::natives::stop_stream(
            
        );
        
        
        ResultOf_stop_stream {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_gender(&self, ped_: u32,
p1_: bool) -> ResultOf_set_ped_gender {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_gender(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_gender {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_radio_station_genre(&self, ) -> ResultOf_get_player_radio_station_genre {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_radio_station_genre(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_radio_station_genre {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_audio_script_cleanup_time(&self, time_: i32) -> ResultOf_set_audio_script_cleanup_time {
    unsafe {
        let mut time_ = time_;
        let success = sdk::natives::set_audio_script_cleanup_time(
            time_,
        );
        
        
        ResultOf_set_audio_script_cleanup_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_to_station_index(&self, radioStation_: i32) -> ResultOf_set_radio_to_station_index {
    unsafe {
        let mut radioStation_ = radioStation_;
        let success = sdk::natives::set_radio_to_station_index(
            radioStation_,
        );
        
        
        ResultOf_set_radio_to_station_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_unregister_script_with_audio(&self, ) -> ResultOf_unregister_script_with_audio {
    unsafe {
        
        let success = sdk::natives::unregister_script_with_audio(
            
        );
        
        
        ResultOf_unregister_script_with_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_speech_context_group(&self, p0_: Option<String>,
p1_: i32) -> ResultOf_block_speech_context_group {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::block_speech_context_group(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_block_speech_context_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_ped_pain_audio(&self, ped_: u32,
toggle_: bool) -> ResultOf_disable_ped_pain_audio {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_ped_pain_audio(
            ped_,
toggle_,
        );
        
        
        ResultOf_disable_ped_pain_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_variation_chosen_for_scripted_line(&self, p0_: i32) -> ResultOf_get_variation_chosen_for_scripted_line {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::get_variation_chosen_for_scripted_line(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_get_variation_chosen_for_scripted_line {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stop_ped_speaking_synced(&self, ped_: u32,
p1_: bool) -> ResultOf_stop_ped_speaking_synced {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_ped_speaking_synced(
            ped_,
p1_,
        );
        
        
        ResultOf_stop_ped_speaking_synced {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_default_horn_ignore_mods(&self, vehicle_: u32) -> ResultOf_get_vehicle_default_horn_ignore_mods {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_default_horn_ignore_mods(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_default_horn_ignore_mods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_emitter_radio_station(&self, emitterName_: Option<String>,
radioStation_: Option<String>,
p2_: i32) -> ResultOf_set_emitter_radio_station {
    unsafe {
        let mut emitterName_ = sdk_helpers::create_c_string_ptr(emitterName_);
let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut p2_ = p2_;
        let success = sdk::natives::set_emitter_radio_station(
            emitterName_.as_ref().unwrap(),
radioStation_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_set_emitter_radio_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_variable_on_sound(&self, soundId_: i32,
unkVariable_: Option<String>,
p2_: f32) -> ResultOf_set_variable_on_sound {
    unsafe {
        let mut soundId_ = soundId_;
let mut unkVariable_ = sdk_helpers::create_c_string_ptr(unkVariable_);
let mut p2_ = p2_;
        let success = sdk::natives::set_variable_on_sound(
            soundId_,
unkVariable_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_set_variable_on_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_mission_complete_audio(&self, audioName_: Option<String>) -> ResultOf_play_mission_complete_audio {
    unsafe {
        let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
        let success = sdk::natives::play_mission_complete_audio(
            audioName_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_mission_complete_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_mission_news_story(&self, newsStory_: i32) -> ResultOf_unlock_mission_news_story {
    unsafe {
        let mut newsStory_ = newsStory_;
        let success = sdk::natives::unlock_mission_news_story(
            newsStory_,
        );
        
        
        ResultOf_unlock_mission_news_story {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_radio_station_name(&self, radioStation_: i32) -> ResultOf_get_radio_station_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut radioStation_ = radioStation_;
        let success = sdk::natives::get_radio_station_name(
            native_return.pin_mut(),
radioStation_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_radio_station_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_broken_glass(&self, ) -> ResultOf_clear_all_broken_glass {
    unsafe {
        
        let success = sdk::natives::clear_all_broken_glass(
            
        );
        
        
        ResultOf_clear_all_broken_glass {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mobile_phone_radio_active(&self, ) -> ResultOf_is_mobile_phone_radio_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_phone_radio_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mobile_phone_radio_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_track(&self, radioStation_: Option<String>,
radioTrack_: Option<String>) -> ResultOf_set_radio_track {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut radioTrack_ = sdk_helpers::create_c_string_ptr(radioTrack_);
        let success = sdk::natives::set_radio_track(
            radioStation_.as_ref().unwrap(),
radioTrack_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_radio_track {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_portal_settings_override(&self, p0_: Option<String>) -> ResultOf_remove_portal_settings_override {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::remove_portal_settings_override(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_portal_settings_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_all_police_reports(&self, ) -> ResultOf_cancel_all_police_reports {
    unsafe {
        
        let success = sdk::natives::cancel_all_police_reports(
            
        );
        
        
        ResultOf_cancel_all_police_reports {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_no_ducking_for_conversation(&self, p0_: bool) -> ResultOf_set_no_ducking_for_conversation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_no_ducking_for_conversation(
            p0_,
        );
        
        
        ResultOf_set_no_ducking_for_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_audio_scene_active(&self, scene_: Option<String>) -> ResultOf_is_audio_scene_active {
    unsafe {
        let mut native_return = Default::default();
let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::is_audio_scene_active(
            &mut native_return,
scene_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_audio_scene_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_microphone_position(&self, toggle_: bool,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32) -> ResultOf_set_microphone_position {
    unsafe {
        let mut toggle_ = toggle_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
        let success = sdk::natives::set_microphone_position(
            toggle_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
        );
        
        
        ResultOf_set_microphone_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_vehicle(&self, vehicle_: u32) -> ResultOf_play_stream_from_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::play_stream_from_vehicle(
            vehicle_,
        );
        
        
        ResultOf_play_stream_from_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stunt_jump_audio(&self, ) -> ResultOf_enable_stunt_jump_audio {
    unsafe {
        
        let success = sdk::natives::enable_stunt_jump_audio(
            
        );
        
        
        ResultOf_enable_stunt_jump_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_current_playing_ambient_speech(&self, ped_: u32) -> ResultOf_stop_current_playing_ambient_speech {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_current_playing_ambient_speech(
            ped_,
        );
        
        
        ResultOf_stop_current_playing_ambient_speech {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_flag(&self, flagName_: Option<String>,
toggle_: bool) -> ResultOf_set_audio_flag {
    unsafe {
        let mut flagName_ = sdk_helpers::create_c_string_ptr(flagName_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_audio_flag(
            flagName_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_audio_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_audio_scenes(&self, ) -> ResultOf_stop_audio_scenes {
    unsafe {
        
        let success = sdk::natives::stop_audio_scenes(
            
        );
        
        
        ResultOf_stop_audio_scenes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_radio_loud(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_radio_loud {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_radio_loud(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_radio_loud {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_pain(&self, ped_: u32,
painID_: i32,
p1_: i32,
p3_: i32) -> ResultOf_play_pain {
    unsafe {
        let mut ped_ = ped_;
let mut painID_ = painID_;
let mut p1_ = p1_;
let mut p3_ = p3_;
        let success = sdk::natives::play_pain(
            ped_,
painID_,
p1_,
p3_,
        );
        
        
        ResultOf_play_pain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_variable_on_synch_scene_audio(&self, unkVariableName_: Option<String>,
value_: f32) -> ResultOf_set_variable_on_synch_scene_audio {
    unsafe {
        let mut unkVariableName_ = sdk_helpers::create_c_string_ptr(unkVariableName_);
let mut value_ = value_;
        let success = sdk::natives::set_variable_on_synch_scene_audio(
            unkVariableName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_variable_on_synch_scene_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_state(&self, zoneName_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOf_set_ambient_zone_state {
    unsafe {
        let mut zoneName_ = sdk_helpers::create_c_string_ptr(zoneName_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_state(
            zoneName_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOf_set_ambient_zone_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_skip_minigun_spin_up_audio(&self, p0_: bool) -> ResultOf_set_skip_minigun_spin_up_audio {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_skip_minigun_spin_up_audio(
            p0_,
        );
        
        
        ResultOf_set_skip_minigun_spin_up_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mobile_phone_radio_state(&self, state_: bool) -> ResultOf_set_mobile_phone_radio_state {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_mobile_phone_radio_state(
            state_,
        );
        
        
        ResultOf_set_mobile_phone_radio_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_footstep_script_sweeteners(&self, ped_: u32,
p1_: bool,
hash_: u32) -> ResultOf_use_footstep_script_sweeteners {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut hash_ = hash_;
        let success = sdk::natives::use_footstep_script_sweeteners(
            ped_,
p1_,
hash_,
        );
        
        
        ResultOf_use_footstep_script_sweeteners {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stall_warning_sounds(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_enable_stall_warning_sounds {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_stall_warning_sounds(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_enable_stall_warning_sounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_forced_radio_this_frame(&self, vehicle_: u32) -> ResultOf_set_veh_forced_radio_this_frame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_veh_forced_radio_this_frame(
            vehicle_,
        );
        
        
        ResultOf_set_veh_forced_radio_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_auto_unfreeze(&self, toggle_: bool) -> ResultOf_set_radio_auto_unfreeze {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_auto_unfreeze(
            toggle_,
        );
        
        
        ResultOf_set_radio_auto_unfreeze {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_animal_vocalization_playing(&self, pedHandle_: u32) -> ResultOf_is_animal_vocalization_playing {
    unsafe {
        let mut native_return = Default::default();
let mut pedHandle_ = pedHandle_;
        let success = sdk::natives::is_animal_vocalization_playing(
            &mut native_return,
pedHandle_,
        );
        let native_return = native_return;
        
        ResultOf_is_animal_vocalization_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_line_to_conversation(&self, index_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: i32,
p4_: i32,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: i32,
p10_: bool,
p11_: bool,
p12_: bool) -> ResultOf_add_line_to_conversation {
    unsafe {
        let mut index_ = index_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::add_line_to_conversation(
            index_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        
        
        ResultOf_add_line_to_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_audible_beat(&self, out1_: f32,
out2_: f32,
out3_: i32) -> ResultOf_get_next_audible_beat {
    unsafe {
        let mut native_return = Default::default();
let mut out1_ = Default::default();
let mut out2_ = Default::default();
let mut out3_ = Default::default();
        let success = sdk::natives::get_next_audible_beat(
            &mut native_return,
&mut out1_,
&mut out2_,
&mut out3_,
        );
        let native_return = native_return;
let out1_ = out1_;
let out2_ = out2_;
let out3_ = out3_;
        
        ResultOf_get_next_audible_beat {
            success,
            ret: native_return,
            out1_,
out2_,
out3_
        }
    }
}

    fn native_play_ped_ambient_speech_and_clone_native(&self, ped_: u32,
speechName_: Option<String>,
speechParam_: Option<String>,
p3_: i32) -> ResultOf_play_ped_ambient_speech_and_clone_native {
    unsafe {
        let mut ped_ = ped_;
let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
let mut speechParam_ = sdk_helpers::create_c_string_ptr(speechParam_);
let mut p3_ = p3_;
        let success = sdk::natives::play_ped_ambient_speech_and_clone_native(
            ped_,
speechName_.as_ref().unwrap(),
speechParam_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_play_ped_ambient_speech_and_clone_native {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_to_station_name(&self, stationName_: Option<String>) -> ResultOf_set_radio_to_station_name {
    unsafe {
        let mut stationName_ = sdk_helpers::create_c_string_ptr(stationName_);
        let success = sdk::natives::set_radio_to_station_name(
            stationName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_radio_to_station_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_script_with_audio(&self, p0_: i32) -> ResultOf_register_script_with_audio {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::register_script_with_audio(
            p0_,
        );
        
        
        ResultOf_register_script_with_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_prepare_synchronized_audio_event(&self, audioEvent_: Option<String>,
p1_: i32) -> ResultOf_prepare_synchronized_audio_event {
    unsafe {
        let mut native_return = Default::default();
let mut audioEvent_ = sdk_helpers::create_c_string_ptr(audioEvent_);
let mut p1_ = p1_;
        let success = sdk::natives::prepare_synchronized_audio_event(
            &mut native_return,
audioEvent_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_prepare_synchronized_audio_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_interference_active(&self, ) -> ResultOf_is_mobile_interference_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_interference_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mobile_interference_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_synch_scene_audio_with_position(&self, audioEvent_: Option<String>,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_init_synch_scene_audio_with_position {
    unsafe {
        let mut audioEvent_ = sdk_helpers::create_c_string_ptr(audioEvent_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::init_synch_scene_audio_with_position(
            audioEvent_.as_ref().unwrap(),
x_,
y_,
z_,
        );
        
        
        ResultOf_init_synch_scene_audio_with_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_vehicle_audio_bank(&self, vehicleModel_: u32) -> ResultOf_preload_vehicle_audio_bank {
    unsafe {
        let mut vehicleModel_ = vehicleModel_;
        let success = sdk::natives::preload_vehicle_audio_bank(
            vehicleModel_,
        );
        
        
        ResultOf_preload_vehicle_audio_bank {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_deferred_sound_frontend(&self, soundName_: Option<String>,
soundsetName_: Option<String>) -> ResultOf_play_deferred_sound_frontend {
    unsafe {
        let mut soundName_ = sdk_helpers::create_c_string_ptr(soundName_);
let mut soundsetName_ = sdk_helpers::create_c_string_ptr(soundsetName_);
        let success = sdk::natives::play_deferred_sound_frontend(
            soundName_.as_ref().unwrap(),
soundsetName_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_deferred_sound_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_animal_mood(&self, animal_: u32,
mood_: i32) -> ResultOf_set_animal_mood {
    unsafe {
        let mut animal_ = animal_;
let mut mood_ = mood_;
        let success = sdk::natives::set_animal_mood(
            animal_,
mood_,
        );
        
        
        ResultOf_set_animal_mood {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_speech_playing(&self, p0_: u32) -> ResultOf_is_scripted_speech_playing {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_scripted_speech_playing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_speech_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_end_credits_music(&self, play_: bool) -> ResultOf_play_end_credits_music {
    unsafe {
        let mut play_ = play_;
        let success = sdk::natives::play_end_credits_music(
            play_,
        );
        
        
        ResultOf_play_end_credits_music {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_weapon_audio(&self, ) -> ResultOf_release_weapon_audio {
    unsafe {
        
        let success = sdk::natives::release_weapon_audio(
            
        );
        
        
        ResultOf_release_weapon_audio {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_audio_slowmo_mode(&self, mode_: Option<String>) -> ResultOf_activate_audio_slowmo_mode {
    unsafe {
        let mut mode_ = sdk_helpers::create_c_string_ptr(mode_);
        let success = sdk::natives::activate_audio_slowmo_mode(
            mode_.as_ref().unwrap(),
        );
        
        
        ResultOf_activate_audio_slowmo_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stream_playing(&self, ) -> ResultOf_is_stream_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stream_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_stream_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_new_scripted_conversation(&self, ) -> ResultOf_create_new_scripted_conversation {
    unsafe {
        
        let success = sdk::natives::create_new_scripted_conversation(
            
        );
        
        
        ResultOf_create_new_scripted_conversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_player_ground_material(&self, hash_: u32,
toggle_: bool) -> ResultOf_override_player_ground_material {
    unsafe {
        let mut hash_ = hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::override_player_ground_material(
            hash_,
toggle_,
        );
        
        
        ResultOf_override_player_ground_material {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_startup_rev_sound(&self, vehicle_: u32) -> ResultOf_reset_vehicle_startup_rev_sound {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::reset_vehicle_startup_rev_sound(
            vehicle_,
        );
        
        
        ResultOf_reset_vehicle_startup_rev_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_horn_sound_index(&self, vehicle_: u32) -> ResultOf_get_vehicle_horn_sound_index {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_horn_sound_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_horn_sound_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_freeze_microphone(&self, ) -> ResultOf_freeze_microphone {
    unsafe {
        
        let success = sdk::natives::freeze_microphone(
            
        );
        
        
        ResultOf_freeze_microphone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_scripted_conversation(&self, p0_: bool) -> ResultOf_stop_scripted_conversation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stop_scripted_conversation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stop_scripted_conversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_positioned_player_vehicle_radio_emitter_enabled(&self, p0_: i32) -> ResultOf_set_positioned_player_vehicle_radio_emitter_enabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_positioned_player_vehicle_radio_emitter_enabled(
            p0_,
        );
        
        
        ResultOf_set_positioned_player_vehicle_radio_emitter_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_retune_down(&self, ) -> ResultOf_set_radio_retune_down {
    unsafe {
        
        let success = sdk::natives::set_radio_retune_down(
            
        );
        
        
        ResultOf_set_radio_retune_down {
            success,
            ret: (),
            
        }
    }
}

    fn native_deactivate_audio_slowmo_mode(&self, mode_: Option<String>) -> ResultOf_deactivate_audio_slowmo_mode {
    unsafe {
        let mut mode_ = sdk_helpers::create_c_string_ptr(mode_);
        let success = sdk::natives::deactivate_audio_slowmo_mode(
            mode_.as_ref().unwrap(),
        );
        
        
        ResultOf_deactivate_audio_slowmo_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_conversation_loaded(&self, ) -> ResultOf_is_scripted_conversation_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scripted_conversation_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_conversation_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_audio_scene(&self, scene_: Option<String>) -> ResultOf_stop_audio_scene {
    unsafe {
        let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::stop_audio_scene(
            scene_.as_ref().unwrap(),
        );
        
        
        ResultOf_stop_audio_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_police_report(&self, name_: Option<String>,
p1_: f32) -> ResultOf_play_police_report {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::play_police_report(
            &mut native_return,
name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_play_police_report {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_smoke_grenade_explosion_sounds(&self, ) -> ResultOf_stop_smoke_grenade_explosion_sounds {
    unsafe {
        
        let success = sdk::natives::stop_smoke_grenade_explosion_sounds(
            
        );
        
        
        ResultOf_stop_smoke_grenade_explosion_sounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_vehicle_priority(&self, vehicle_: u32,
p1_: i32) -> ResultOf_set_audio_vehicle_priority {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_audio_vehicle_priority(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_audio_vehicle_priority {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_sound_from_entity(&self, soundId_: i32,
audioName_: Option<String>,
entity_: u32,
audioRef_: Option<String>,
isNetwork_: bool,
p5_: i32) -> ResultOf_play_sound_from_entity {
    unsafe {
        let mut soundId_ = soundId_;
let mut audioName_ = sdk_helpers::create_c_string_ptr(audioName_);
let mut entity_ = entity_;
let mut audioRef_ = sdk_helpers::create_c_string_ptr(audioRef_);
let mut isNetwork_ = isNetwork_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound_from_entity(
            soundId_,
audioName_.as_ref().unwrap(),
entity_,
audioRef_.as_ref().unwrap(),
isNetwork_,
p5_,
        );
        
        
        ResultOf_play_sound_from_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_preloaded_conversation_ready(&self, ) -> ResultOf_get_is_preloaded_conversation_ready {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_preloaded_conversation_ready(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_preloaded_conversation_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_trevor_rage(&self, ) -> ResultOf_reset_trevor_rage {
    unsafe {
        
        let success = sdk::natives::reset_trevor_rage(
            
        );
        
        
        ResultOf_reset_trevor_rage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_music_playtime(&self, ) -> ResultOf_get_music_playtime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_music_playtime(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_music_playtime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_radio_station_index(&self, ) -> ResultOf_get_player_radio_station_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_radio_station_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_radio_station_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_angry(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_player_angry {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_angry(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_player_angry {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_object(&self, object_: u32) -> ResultOf_play_stream_from_object {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::play_stream_from_object(
            object_,
        );
        
        
        ResultOf_play_stream_from_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ambient_speech_from_position_native(&self, speechName_: Option<String>,
voiceName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
speechParam_: Option<String>) -> ResultOf_play_ambient_speech_from_position_native {
    unsafe {
        let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
let mut voiceName_ = sdk_helpers::create_c_string_ptr(voiceName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speechParam_ = sdk_helpers::create_c_string_ptr(speechParam_);
        let success = sdk::natives::play_ambient_speech_from_position_native(
            speechName_.as_ref().unwrap(),
voiceName_.as_ref().unwrap(),
x_,
y_,
z_,
speechParam_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_ambient_speech_from_position_native {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_animal_vocalization(&self, pedHandle_: u32,
p1_: i32,
speechName_: Option<String>) -> ResultOf_play_animal_vocalization {
    unsafe {
        let mut pedHandle_ = pedHandle_;
let mut p1_ = p1_;
let mut speechName_ = sdk_helpers::create_c_string_ptr(speechName_);
        let success = sdk::natives::play_animal_vocalization(
            pedHandle_,
p1_,
speechName_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_animal_vocalization {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_scene_variable(&self, scene_: Option<String>,
unkVariable_: Option<String>,
value_: f32) -> ResultOf_set_audio_scene_variable {
    unsafe {
        let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
let mut unkVariable_ = sdk_helpers::create_c_string_ptr(unkVariable_);
let mut value_ = value_;
        let success = sdk::natives::set_audio_scene_variable(
            scene_.as_ref().unwrap(),
unkVariable_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_audio_scene_variable {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_death_jingle(&self, toggle_: bool) -> ResultOf_block_death_jingle {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::block_death_jingle(
            toggle_,
        );
        
        
        ResultOf_block_death_jingle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_unlocked_radio_stations(&self, ) -> ResultOf_get_num_unlocked_radio_stations {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_unlocked_radio_stations(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_unlocked_radio_stations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_startup_rev_sound(&self, vehicle_: u32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOf_set_vehicle_startup_rev_sound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::set_vehicle_startup_rev_sound(
            vehicle_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_vehicle_startup_rev_sound {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_underwater_stream(&self, p0_: Option<String>,
p1_: bool) -> ResultOf_override_underwater_stream {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::override_underwater_stream(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_override_underwater_stream {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_missile_warning_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_missile_warning_enabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_missile_warning_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_missile_warning_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_list_state_persistent(&self, ambientZone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOf_set_ambient_zone_list_state_persistent {
    unsafe {
        let mut ambientZone_ = sdk_helpers::create_c_string_ptr(ambientZone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_list_state_persistent(
            ambientZone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOf_set_ambient_zone_list_state_persistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_audio_flags(&self, ped_: u32) -> ResultOf_reset_ped_audio_flags {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_audio_flags(
            ped_,
        );
        
        
        ResultOf_reset_ped_audio_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_siren_bypass_mp_driver_check(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_siren_bypass_mp_driver_check {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_siren_bypass_mp_driver_check(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_siren_bypass_mp_driver_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_radio_station_name(&self, ) -> ResultOf_get_player_radio_station_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_player_radio_station_name(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_player_radio_station_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_frontend_radio_active(&self, active_: bool) -> ResultOf_set_frontend_radio_active {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_frontend_radio_active(
            active_,
        );
        
        
        ResultOf_set_frontend_radio_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_all_speech_from_ped(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOf_block_all_speech_from_ped {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::block_all_speech_from_ped(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOf_block_all_speech_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ped_ringtone(&self, ringtoneName_: Option<String>,
ped_: u32,
p2_: bool) -> ResultOf_play_ped_ringtone {
    unsafe {
        let mut ringtoneName_ = sdk_helpers::create_c_string_ptr(ringtoneName_);
let mut ped_ = ped_;
let mut p2_ = p2_;
        let success = sdk::natives::play_ped_ringtone(
            ringtoneName_.as_ref().unwrap(),
ped_,
p2_,
        );
        
        
        ResultOf_play_ped_ringtone {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_siren_as_horn(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_use_siren_as_horn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::use_siren_as_horn(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_use_siren_as_horn {
            success,
            ret: (),
            
        }
    }
}

    fn native_hint_script_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_hint_script_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_script_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_hint_script_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_record_broken_glass(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_record_broken_glass {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::record_broken_glass(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_record_broken_glass {
            success,
            ret: (),
            
        }
    }
}

    fn native_unfreeze_radio_station(&self, radioStation_: Option<String>) -> ResultOf_unfreeze_radio_station {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
        let success = sdk::natives::unfreeze_radio_station(
            radioStation_.as_ref().unwrap(),
        );
        
        
        ResultOf_unfreeze_radio_station {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_sound_finished(&self, soundId_: i32) -> ResultOf_has_sound_finished {
    unsafe {
        let mut native_return = Default::default();
let mut soundId_ = soundId_;
        let success = sdk::natives::has_sound_finished(
            &mut native_return,
soundId_,
        );
        let native_return = native_return;
        
        ResultOf_has_sound_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ambient_audio_bank(&self, audioBank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOf_request_ambient_audio_bank {
    unsafe {
        let mut native_return = Default::default();
let mut audioBank_ = sdk_helpers::create_c_string_ptr(audioBank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_ambient_audio_bank(
            &mut native_return,
audioBank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_request_ambient_audio_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_retune_up(&self, ) -> ResultOf_set_radio_retune_up {
    unsafe {
        
        let success = sdk::natives::set_radio_retune_up(
            
        );
        
        
        ResultOf_set_radio_retune_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_radio_station_track_list(&self, radioStation_: Option<String>,
trackListName_: Option<String>) -> ResultOf_lock_radio_station_track_list {
    unsafe {
        let mut radioStation_ = sdk_helpers::create_c_string_ptr(radioStation_);
let mut trackListName_ = sdk_helpers::create_c_string_ptr(trackListName_);
        let success = sdk::natives::lock_radio_station_track_list(
            radioStation_.as_ref().unwrap(),
trackListName_.as_ref().unwrap(),
        );
        
        
        ResultOf_lock_radio_station_track_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_all_world_brains_that_are_waiting_till_out_of_range(&self, ) -> ResultOf_reactivate_all_world_brains_that_are_waiting_till_out_of_range {
    unsafe {
        
        let success = sdk::natives::reactivate_all_world_brains_that_are_waiting_till_out_of_range(
            
        );
        
        
        ResultOf_reactivate_all_world_brains_that_are_waiting_till_out_of_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_object_script_brain(&self, scriptName_: Option<String>,
modelHash_: u32,
p2_: i32,
activationRange_: f32,
p4_: i32,
p5_: i32) -> ResultOf_register_object_script_brain {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut modelHash_ = modelHash_;
let mut p2_ = p2_;
let mut activationRange_ = activationRange_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::register_object_script_brain(
            scriptName_.as_ref().unwrap(),
modelHash_,
p2_,
activationRange_,
p4_,
p5_,
        );
        
        
        ResultOf_register_object_script_brain {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_script_brain_set(&self, brainSet_: i32) -> ResultOf_disable_script_brain_set {
    unsafe {
        let mut brainSet_ = brainSet_;
        let success = sdk::natives::disable_script_brain_set(
            brainSet_,
        );
        
        
        ResultOf_disable_script_brain_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_world_point_script_brain(&self, scriptName_: Option<String>,
activationRange_: f32,
p2_: i32) -> ResultOf_register_world_point_script_brain {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut activationRange_ = activationRange_;
let mut p2_ = p2_;
        let success = sdk::natives::register_world_point_script_brain(
            scriptName_.as_ref().unwrap(),
activationRange_,
p2_,
        );
        
        
        ResultOf_register_world_point_script_brain {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_all_object_brains_that_are_waiting_till_out_of_range(&self, ) -> ResultOf_reactivate_all_object_brains_that_are_waiting_till_out_of_range {
    unsafe {
        
        let success = sdk::natives::reactivate_all_object_brains_that_are_waiting_till_out_of_range(
            
        );
        
        
        ResultOf_reactivate_all_object_brains_that_are_waiting_till_out_of_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_script_to_random_ped(&self, name_: Option<String>,
model_: u32,
p2_: f32,
p3_: f32) -> ResultOf_add_script_to_random_ped {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut model_ = model_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::add_script_to_random_ped(
            name_.as_ref().unwrap(),
model_,
p2_,
p3_,
        );
        
        
        ResultOf_add_script_to_random_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_script_brain_set(&self, brainSet_: i32) -> ResultOf_enable_script_brain_set {
    unsafe {
        let mut brainSet_ = brainSet_;
        let success = sdk::natives::enable_script_brain_set(
            brainSet_,
        );
        
        
        ResultOf_enable_script_brain_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_named_world_brains_waiting_till_out_of_range(&self, scriptName_: Option<String>) -> ResultOf_reactivate_named_world_brains_waiting_till_out_of_range {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::reactivate_named_world_brains_waiting_till_out_of_range(
            scriptName_.as_ref().unwrap(),
        );
        
        
        ResultOf_reactivate_named_world_brains_waiting_till_out_of_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_named_object_brains_waiting_till_out_of_range(&self, scriptName_: Option<String>) -> ResultOf_reactivate_named_object_brains_waiting_till_out_of_range {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::reactivate_named_object_brains_waiting_till_out_of_range(
            scriptName_.as_ref().unwrap(),
        );
        
        
        ResultOf_reactivate_named_object_brains_waiting_till_out_of_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_world_point_within_brain_activation_range(&self, ) -> ResultOf_is_world_point_within_brain_activation_range {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_world_point_within_brain_activation_range(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_world_point_within_brain_activation_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_within_brain_activation_range(&self, object_: u32) -> ResultOf_is_object_within_brain_activation_range {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_within_brain_activation_range(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_within_brain_activation_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_gameplay_cam_shaking(&self, ) -> ResultOf_is_gameplay_cam_shaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_gameplay_cam_shaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_max_motion_blur_strength_this_update(&self, p0_: f32) -> ResultOf_set_gameplay_cam_max_motion_blur_strength_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_max_motion_blur_strength_this_update(
            p0_,
        );
        
        
        ResultOf_set_gameplay_cam_max_motion_blur_strength_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_active(&self, cam_: i32,
active_: bool) -> ResultOf_set_cam_active {
    unsafe {
        let mut cam_ = cam_;
let mut active_ = active_;
        let success = sdk::natives::set_cam_active(
            cam_,
active_,
        );
        
        
        ResultOf_set_cam_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_spline_paused(&self, cam_: i32) -> ResultOf_is_cam_spline_paused {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_spline_paused(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_is_cam_spline_paused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_rendering(&self, cam_: i32) -> ResultOf_is_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_rendering(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_is_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_interpolating(&self, cam_: i32) -> ResultOf_is_cam_interpolating {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_interpolating(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_is_cam_interpolating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_dof_strength(&self, cam_: i32) -> ResultOf_get_cam_dof_strength {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_dof_strength(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_dof_strength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_render_script_cams(&self, render_: bool,
ease_: bool,
easeTime_: i32,
p3_: bool,
p4_: bool,
p5_: i32) -> ResultOf_render_script_cams {
    unsafe {
        let mut render_ = render_;
let mut ease_ = ease_;
let mut easeTime_ = easeTime_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::render_script_cams(
            render_,
ease_,
easeTime_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_render_script_cams {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node_using_camera_frame(&self, cam_: i32,
cam2_: i32,
length_: i32,
p3_: i32) -> ResultOf_add_cam_spline_node_using_camera_frame {
    unsafe {
        let mut cam_ = cam_;
let mut cam2_ = cam2_;
let mut length_ = length_;
let mut p3_ = p3_;
        let success = sdk::natives::add_cam_spline_node_using_camera_frame(
            cam_,
cam2_,
length_,
p3_,
        );
        
        
        ResultOf_add_cam_spline_node_using_camera_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_vehicle_cam_stunt_settings_this_update(&self, ) -> ResultOf_force_vehicle_cam_stunt_settings_this_update {
    unsafe {
        
        let success = sdk::natives::force_vehicle_cam_stunt_settings_this_update(
            
        );
        
        
        ResultOf_force_vehicle_cam_stunt_settings_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_near_clip_this_update(&self, p0_: f32) -> ResultOf_set_first_person_aim_cam_near_clip_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_first_person_aim_cam_near_clip_this_update(
            p0_,
        );
        
        
        ResultOf_set_first_person_aim_cam_near_clip_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_gameplay_cam_shaking(&self, p0_: bool) -> ResultOf_stop_gameplay_cam_shaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_cam_shaking(
            p0_,
        );
        
        
        ResultOf_stop_gameplay_cam_shaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node_using_camera(&self, cam_: i32,
cam2_: i32,
length_: i32,
p3_: i32) -> ResultOf_add_cam_spline_node_using_camera {
    unsafe {
        let mut cam_ = cam_;
let mut cam2_ = cam2_;
let mut length_ = length_;
let mut p3_ = p3_;
        let success = sdk::natives::add_cam_spline_node_using_camera(
            cam_,
cam2_,
length_,
p3_,
        );
        
        
        ResultOf_add_cam_spline_node_using_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_shooter_camera_heading(&self, yaw_: f32) -> ResultOf_set_first_person_shooter_camera_heading {
    unsafe {
        let mut yaw_ = yaw_;
        let success = sdk::natives::set_first_person_shooter_camera_heading(
            yaw_,
        );
        
        
        ResultOf_set_first_person_shooter_camera_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_flash_effect_vehicle_model_hash(&self, vehicleModel_: u32) -> ResultOf_set_first_person_flash_effect_vehicle_model_hash {
    unsafe {
        let mut vehicleModel_ = vehicleModel_;
        let success = sdk::natives::set_first_person_flash_effect_vehicle_model_hash(
            vehicleModel_,
        );
        
        
        ResultOf_set_first_person_flash_effect_vehicle_model_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_cam_far_clip_this_update(&self, p0_: f32) -> ResultOf_set_cutscene_cam_far_clip_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_cam_far_clip_this_update(
            p0_,
        );
        
        
        ResultOf_set_cutscene_cam_far_clip_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_duration(&self, cam_: i32,
timeDuration_: i32) -> ResultOf_set_cam_spline_duration {
    unsafe {
        let mut cam_ = cam_;
let mut timeDuration_ = timeDuration_;
        let success = sdk::natives::set_cam_spline_duration(
            cam_,
timeDuration_,
        );
        
        
        ResultOf_set_cam_spline_duration {
            success,
            ret: (),
            
        }
    }
}

    fn native_hard_attach_cam_to_ped_bone(&self, cam_: i32,
ped_: u32,
boneIndex_: i32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: bool) -> ResultOf_hard_attach_cam_to_ped_bone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut boneIndex_ = boneIndex_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::hard_attach_cam_to_ped_bone(
            cam_,
ped_,
boneIndex_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_hard_attach_cam_to_ped_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_coord(&self, ) -> ResultOf_get_gameplay_cam_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_gameplay_cam_coord(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_gameplay_cam_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_motion_blur_strength(&self, ) -> ResultOf_get_final_rendered_cam_motion_blur_strength {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_motion_blur_strength(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_motion_blur_strength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_use_shallow_dof_mode(&self, cam_: i32,
toggle_: bool) -> ResultOf_set_cam_use_shallow_dof_mode {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_use_shallow_dof_mode(
            cam_,
toggle_,
        );
        
        
        ResultOf_set_cam_use_shallow_dof_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_slow_mo_this_update(&self, ) -> ResultOf_disable_cinematic_slow_mo_this_update {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::disable_cinematic_slow_mo_this_update(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_disable_cinematic_slow_mo_this_update {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_entity_hint(&self, entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
p4_: bool,
time_: i32,
easeInTime_: i32,
easeOutTime_: i32,
p8_: i32) -> ResultOf_set_gameplay_entity_hint {
    unsafe {
        let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut easeInTime_ = easeInTime_;
let mut easeOutTime_ = easeOutTime_;
let mut p8_ = p8_;
        let success = sdk::natives::set_gameplay_entity_hint(
            entity_,
xOffset_,
yOffset_,
zOffset_,
p4_,
time_,
easeInTime_,
easeOutTime_,
p8_,
        );
        
        
        ResultOf_set_gameplay_entity_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_zoom_level(&self, zoomLevel_: i32) -> ResultOf_set_follow_vehicle_cam_zoom_level {
    unsafe {
        let mut zoomLevel_ = zoomLevel_;
        let success = sdk::natives::set_follow_vehicle_cam_zoom_level(
            zoomLevel_,
        );
        
        
        ResultOf_set_follow_vehicle_cam_zoom_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_active_view_mode_context(&self, ) -> ResultOf_get_cam_active_view_mode_context {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cam_active_view_mode_context(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_active_view_mode_context {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_aim_cam_this_update(&self, ) -> ResultOf_disable_aim_cam_this_update {
    unsafe {
        
        let success = sdk::natives::disable_aim_cam_this_update(
            
        );
        
        
        ResultOf_disable_aim_cam_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_debug_name(&self, camera_: i32,
name_: Option<String>) -> ResultOf_set_cam_debug_name {
    unsafe {
        let mut camera_ = camera_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_cam_debug_name(
            camera_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_cam_debug_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_script_global_shaking(&self, p0_: bool) -> ResultOf_stop_script_global_shaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_script_global_shaking(
            p0_,
        );
        
        
        ResultOf_stop_script_global_shaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_in_vehicle_mobile_phone_camera_rendering(&self, ) -> ResultOf_is_in_vehicle_mobile_phone_camera_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_in_vehicle_mobile_phone_camera_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_in_vehicle_mobile_phone_camera_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hard_attach_cam_to_entity(&self, cam_: i32,
entity_: u32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
isRelative_: bool) -> ResultOf_hard_attach_cam_to_entity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut isRelative_ = isRelative_;
        let success = sdk::natives::hard_attach_cam_to_entity(
            cam_,
entity_,
xRot_,
yRot_,
zRot_,
xOffset_,
yOffset_,
zOffset_,
isRelative_,
        );
        
        
        ResultOf_hard_attach_cam_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_flash_effect_vehicle_model_name(&self, vehicleName_: Option<String>) -> ResultOf_set_first_person_flash_effect_vehicle_model_name {
    unsafe {
        let mut vehicleName_ = sdk_helpers::create_c_string_ptr(vehicleName_);
        let success = sdk::natives::set_first_person_flash_effect_vehicle_model_name(
            vehicleName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_first_person_flash_effect_vehicle_model_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cinematic_cam_shaking(&self, p0_: bool) -> ResultOf_stop_cinematic_cam_shaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cinematic_cam_shaking(
            p0_,
        );
        
        
        ResultOf_stop_cinematic_cam_shaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_phase(&self, cam_: i32,
p1_: f32) -> ResultOf_set_cam_spline_phase {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_spline_phase(
            cam_,
p1_,
        );
        
        
        ResultOf_set_cam_spline_phase {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_code_gameplay_hint(&self, p0_: bool) -> ResultOf_stop_code_gameplay_hint {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_code_gameplay_hint(
            p0_,
        );
        
        
        ResultOf_stop_code_gameplay_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_far_dof(&self, cam_: i32) -> ResultOf_get_cam_far_dof {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_far_dof(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_far_dof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_remote_player_cam_rot(&self, player_: u32,
rotationOrder_: i32) -> ResultOf_get_final_rendered_remote_player_cam_rot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_final_rendered_remote_player_cam_rot(
            native_return.pin_mut(),
player_,
rotationOrder_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_final_rendered_remote_player_cam_rot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_motion_blur_decay(&self, p0_: i32,
p1_: bool) -> ResultOf_allow_motion_blur_decay {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::allow_motion_blur_decay(
            p0_,
p1_,
        );
        
        
        ResultOf_allow_motion_blur_decay {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_script_cam_for_ambient_population_origin_this_frame(&self, p0_: bool,
p1_: bool) -> ResultOf_use_script_cam_for_ambient_population_origin_this_frame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::use_script_cam_for_ambient_population_origin_this_frame(
            p0_,
p1_,
        );
        
        
        ResultOf_use_script_cam_for_ambient_population_origin_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_bonnet_camera_relative_heading_and_pitch(&self, p0_: f32,
p1_: f32) -> ResultOf_force_bonnet_camera_relative_heading_and_pitch {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_bonnet_camera_relative_heading_and_pitch(
            p0_,
p1_,
        );
        
        
        ResultOf_force_bonnet_camera_relative_heading_and_pitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_view_mode_for_context(&self, context_: i32,
viewMode_: i32) -> ResultOf_set_cam_view_mode_for_context {
    unsafe {
        let mut context_ = context_;
let mut viewMode_ = viewMode_;
        let success = sdk::natives::set_cam_view_mode_for_context(
            context_,
viewMode_,
        );
        
        
        ResultOf_set_cam_view_mode_for_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_ignore_entity_collision_this_update(&self, entity_: u32) -> ResultOf_set_gameplay_cam_ignore_entity_collision_this_update {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_gameplay_cam_ignore_entity_collision_this_update(
            entity_,
        );
        
        
        ResultOf_set_gameplay_cam_ignore_entity_collision_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_ped_hint(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
p4_: bool,
duration_: i32,
blendOutDuration_: i32,
blendInDuration_: i32) -> ResultOf_set_gameplay_ped_hint {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut p4_ = p4_;
let mut duration_ = duration_;
let mut blendOutDuration_ = blendOutDuration_;
let mut blendInDuration_ = blendInDuration_;
        let success = sdk::natives::set_gameplay_ped_hint(
            ped_,
x1_,
y1_,
z1_,
p4_,
duration_,
blendOutDuration_,
blendInDuration_,
        );
        
        
        ResultOf_set_gameplay_ped_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_max_near_in_focus_distance_blend_level(&self, camera_: i32,
p1_: f32) -> ResultOf_set_cam_dof_max_near_in_focus_distance_blend_level {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_max_near_in_focus_distance_blend_level(
            camera_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_max_near_in_focus_distance_blend_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_relative_heading_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOf_set_first_person_aim_cam_relative_heading_limits_this_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_relative_heading_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOf_set_first_person_aim_cam_relative_heading_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interpolating_from_script_cams(&self, ) -> ResultOf_is_interpolating_from_script_cams {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interpolating_from_script_cams(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_interpolating_from_script_cams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_cutscene_cam_shaking(&self, p0_: i32) -> ResultOf_stop_cutscene_cam_shaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cutscene_cam_shaking(
            p0_,
        );
        
        
        ResultOf_stop_cutscene_cam_shaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_ped_cam_zoom_level(&self, ) -> ResultOf_get_follow_ped_cam_zoom_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_ped_cam_zoom_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_follow_ped_cam_zoom_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_tightspace_custom_framing_this_update(&self, ) -> ResultOf_force_tightspace_custom_framing_this_update {
    unsafe {
        
        let success = sdk::natives::force_tightspace_custom_framing_this_update(
            
        );
        
        
        ResultOf_force_tightspace_custom_framing_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_cam_rendering(&self, ) -> ResultOf_is_gameplay_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_gameplay_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gameplay_cam_relative_pitch(&self, ) -> ResultOf_get_gameplay_cam_relative_pitch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_relative_pitch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_gameplay_cam_relative_pitch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_planes(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOf_set_cam_dof_planes {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_cam_dof_planes(
            cam_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_cam_dof_planes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_near_dof(&self, cam_: i32,
nearDOF_: f32) -> ResultOf_set_cam_near_dof {
    unsafe {
        let mut cam_ = cam_;
let mut nearDOF_ = nearDOF_;
        let success = sdk::natives::set_cam_near_dof(
            cam_,
nearDOF_,
        );
        
        
        ResultOf_set_cam_near_dof {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_custom_vehicle_drive_by_cam_this_update(&self, p0_: bool) -> ResultOf_set_allow_custom_vehicle_drive_by_cam_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_allow_custom_vehicle_drive_by_cam_this_update(
            p0_,
        );
        
        
        ResultOf_set_allow_custom_vehicle_drive_by_cam_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_cam_spline_velocity(&self, cam_: i32,
p1_: i32,
p2_: f32,
p3_: f32) -> ResultOf_override_cam_spline_velocity {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::override_cam_spline_velocity(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_override_cam_spline_velocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_anim_current_phase(&self, cam_: i32,
phase_: f32) -> ResultOf_set_cam_anim_current_phase {
    unsafe {
        let mut cam_ = cam_;
let mut phase_ = phase_;
        let success = sdk::natives::set_cam_anim_current_phase(
            cam_,
phase_,
        );
        
        
        ResultOf_set_cam_anim_current_phase {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_aim_cam_near_clip_this_update(&self, p0_: f32) -> ResultOf_set_third_person_aim_cam_near_clip_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_third_person_aim_cam_near_clip_this_update(
            p0_,
        );
        
        
        ResultOf_set_third_person_aim_cam_near_clip_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_dedicated_stunt_camera_this_update(&self, camName_: Option<String>) -> ResultOf_use_dedicated_stunt_camera_this_update {
    unsafe {
        let mut camName_ = sdk_helpers::create_c_string_ptr(camName_);
        let success = sdk::natives::use_dedicated_stunt_camera_this_update(
            camName_.as_ref().unwrap(),
        );
        
        
        ResultOf_use_dedicated_stunt_camera_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_this_update(&self, camName_: Option<String>,
p1_: i32) -> ResultOf_set_follow_ped_cam_this_update {
    unsafe {
        let mut native_return = Default::default();
let mut camName_ = sdk_helpers::create_c_string_ptr(camName_);
let mut p1_ = p1_;
        let success = sdk::natives::set_follow_ped_cam_this_update(
            &mut native_return,
camName_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_set_follow_ped_cam_this_update {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_inherit_roll_vehicle(&self, cam_: i32,
p1_: bool) -> ResultOf_set_cam_inherit_roll_vehicle {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_inherit_roll_vehicle(
            cam_,
p1_,
        );
        
        
        ResultOf_set_cam_inherit_roll_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scripted_camera_is_first_person_this_frame(&self, p0_: bool) -> ResultOf_set_scripted_camera_is_first_person_this_frame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_scripted_camera_is_first_person_this_frame(
            p0_,
        );
        
        
        ResultOf_set_scripted_camera_is_first_person_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_focal_length_multiplier(&self, camera_: i32,
multiplier_: f32) -> ResultOf_set_cam_dof_focal_length_multiplier {
    unsafe {
        let mut camera_ = camera_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_cam_dof_focal_length_multiplier(
            camera_,
multiplier_,
        );
        
        
        ResultOf_set_cam_dof_focal_length_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_camera_relative_heading_and_pitch(&self, roll_: f32,
pitch_: f32,
yaw_: f32) -> ResultOf_force_camera_relative_heading_and_pitch {
    unsafe {
        let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
        let success = sdk::natives::force_camera_relative_heading_and_pitch(
            roll_,
pitch_,
yaw_,
        );
        
        
        ResultOf_force_camera_relative_heading_and_pitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_widescreen_borders_active(&self, ) -> ResultOf_are_widescreen_borders_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_widescreen_borders_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_widescreen_borders_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_motion_blur_scaling_this_update(&self, p0_: f32) -> ResultOf_set_gameplay_cam_motion_blur_scaling_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_motion_blur_scaling_this_update(
            p0_,
        );
        
        
        ResultOf_set_gameplay_cam_motion_blur_scaling_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cam_collision_for_object(&self, entity_: u32) -> ResultOf_disable_cam_collision_for_object {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::disable_cam_collision_for_object(
            entity_,
        );
        
        
        ResultOf_disable_cam_collision_for_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_coord(&self, cam_: i32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_cam_coord {
    unsafe {
        let mut cam_ = cam_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_cam_coord(
            cam_,
posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_cam_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_first_person_vehicle_interior_cam_rendering(&self, ) -> ResultOf_is_cinematic_first_person_vehicle_interior_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_first_person_vehicle_interior_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_first_person_vehicle_interior_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_horizontal_response(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_set_fly_cam_horizontal_response {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_fly_cam_horizontal_response(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_fly_cam_horizontal_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_fov(&self, FOV_: f32) -> ResultOf_set_gameplay_hint_fov {
    unsafe {
        let mut FOV_ = FOV_;
        let success = sdk::natives::set_gameplay_hint_fov(
            FOV_,
        );
        
        
        ResultOf_set_gameplay_hint_fov {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_button_active(&self, p0_: bool) -> ResultOf_set_cinematic_button_active {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cinematic_button_active(
            p0_,
        );
        
        
        ResultOf_set_cinematic_button_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rendering_cam(&self, ) -> ResultOf_get_rendering_cam {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_rendering_cam(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_rendering_cam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_point_cam_at_entity(&self, cam_: i32,
entity_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOf_point_cam_at_entity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::point_cam_at_entity(
            cam_,
entity_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_point_cam_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_first_person_flash_effect_this_update(&self, ) -> ResultOf_disable_first_person_flash_effect_this_update {
    unsafe {
        
        let success = sdk::natives::disable_first_person_flash_effect_this_update(
            
        );
        
        
        ResultOf_disable_first_person_flash_effect_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_near_clip_scan_this_update(&self, ) -> ResultOf_disable_near_clip_scan_this_update {
    unsafe {
        
        let success = sdk::natives::disable_near_clip_scan_this_update(
            
        );
        
        
        ResultOf_disable_near_clip_scan_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_view_mode(&self, viewMode_: i32) -> ResultOf_set_follow_ped_cam_view_mode {
    unsafe {
        let mut viewMode_ = viewMode_;
        let success = sdk::natives::set_follow_ped_cam_view_mode(
            viewMode_,
        );
        
        
        ResultOf_set_follow_ped_cam_view_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_screen_faded_in(&self, ) -> ResultOf_is_screen_faded_in {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_faded_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_screen_faded_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_rot(&self, rotationOrder_: i32) -> ResultOf_get_final_rendered_cam_rot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_final_rendered_cam_rot(
            native_return.pin_mut(),
rotationOrder_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_final_rendered_cam_rot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_flash_effect_type(&self, p0_: i32) -> ResultOf_set_first_person_flash_effect_type {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_first_person_flash_effect_type(
            p0_,
        );
        
        
        ResultOf_set_first_person_flash_effect_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_fly_cam_constrained_on_previous_udpate(&self, cam_: i32) -> ResultOf_was_fly_cam_constrained_on_previous_udpate {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::was_fly_cam_constrained_on_previous_udpate(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_was_fly_cam_constrained_on_previous_udpate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_fading_in(&self, ) -> ResultOf_is_screen_fading_in {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_fading_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_screen_fading_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_follow_vehicle_cam_seat_this_update(&self, seatIndex_: i32) -> ResultOf_set_follow_vehicle_cam_seat_this_update {
    unsafe {
        let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::set_follow_vehicle_cam_seat_this_update(
            seatIndex_,
        );
        
        
        ResultOf_set_follow_vehicle_cam_seat_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_camera_relative_side_offset(&self, xOffset_: f32) -> ResultOf_set_gameplay_hint_camera_relative_side_offset {
    unsafe {
        let mut xOffset_ = xOffset_;
        let success = sdk::natives::set_gameplay_hint_camera_relative_side_offset(
            xOffset_,
        );
        
        
        ResultOf_set_gameplay_hint_camera_relative_side_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_vehicle_part_broken_camera_shake(&self, vehicle_: u32,
p1_: i32,
p2_: f32) -> ResultOf_trigger_vehicle_part_broken_camera_shake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::trigger_vehicle_part_broken_camera_shake(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_trigger_vehicle_part_broken_camera_shake {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_first_person_aim_cam_active(&self, ) -> ResultOf_is_first_person_aim_cam_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_first_person_aim_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_first_person_aim_cam_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_camera(&self, camHash_: u32,
p1_: bool) -> ResultOf_create_camera {
    unsafe {
        let mut native_return = Default::default();
let mut camHash_ = camHash_;
let mut p1_ = p1_;
        let success = sdk::natives::create_camera(
            &mut native_return,
camHash_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_create_camera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_strength(&self, cam_: i32,
dofStrength_: f32) -> ResultOf_set_cam_dof_strength {
    unsafe {
        let mut cam_ = cam_;
let mut dofStrength_ = dofStrength_;
        let success = sdk::natives::set_cam_dof_strength(
            cam_,
dofStrength_,
        );
        
        
        ResultOf_set_cam_dof_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_remote_player_cam_fov(&self, player_: u32) -> ResultOf_get_final_rendered_remote_player_cam_fov {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_final_rendered_remote_player_cam_fov(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_remote_player_cam_fov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_cam_spline_node_using_gameplay_frame(&self, cam_: i32,
length_: i32,
p2_: i32) -> ResultOf_add_cam_spline_node_using_gameplay_frame {
    unsafe {
        let mut cam_ = cam_;
let mut length_ = length_;
let mut p2_ = p2_;
        let success = sdk::natives::add_cam_spline_node_using_gameplay_frame(
            cam_,
length_,
p2_,
        );
        
        
        ResultOf_add_cam_spline_node_using_gameplay_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_cam_to_ped_bone(&self, cam_: i32,
ped_: u32,
boneIndex_: i32,
x_: f32,
y_: f32,
z_: f32,
heading_: bool) -> ResultOf_attach_cam_to_ped_bone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut boneIndex_ = boneIndex_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::attach_cam_to_ped_bone(
            cam_,
ped_,
boneIndex_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOf_attach_cam_to_ped_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_camera_prevent_collision_settings_for_triplehead_in_interiors_this_update(&self, ) -> ResultOf_camera_prevent_collision_settings_for_triplehead_in_interiors_this_update {
    unsafe {
        
        let success = sdk::natives::camera_prevent_collision_settings_for_triplehead_in_interiors_this_update(
            
        );
        
        
        ResultOf_camera_prevent_collision_settings_for_triplehead_in_interiors_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_vehicle_idle_mode_this_update(&self, ) -> ResultOf_disable_cinematic_vehicle_idle_mode_this_update {
    unsafe {
        
        let success = sdk::natives::disable_cinematic_vehicle_idle_mode_this_update(
            
        );
        
        
        ResultOf_disable_cinematic_vehicle_idle_mode_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_vehicle_cam_stunt_settings_this_update(&self, ) -> ResultOf_use_vehicle_cam_stunt_settings_this_update {
    unsafe {
        
        let success = sdk::natives::use_vehicle_cam_stunt_settings_this_update(
            
        );
        
        
        ResultOf_use_vehicle_cam_stunt_settings_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_fov(&self, ) -> ResultOf_get_gameplay_cam_fov {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_fov(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_gameplay_cam_fov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_controls_mini_map_heading(&self, cam_: i32,
toggle_: bool) -> ResultOf_set_cam_controls_mini_map_heading {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_controls_mini_map_heading(
            cam_,
toggle_,
        );
        
        
        ResultOf_set_cam_controls_mini_map_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_point_cam_at_ped_bone(&self, cam_: i32,
ped_: u32,
boneIndex_: i32,
x_: f32,
y_: f32,
z_: f32,
p6_: bool) -> ResultOf_point_cam_at_ped_bone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut boneIndex_ = boneIndex_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p6_ = p6_;
        let success = sdk::natives::point_cam_at_ped_bone(
            cam_,
ped_,
boneIndex_,
x_,
y_,
z_,
p6_,
        );
        
        
        ResultOf_point_cam_at_ped_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_aim_cam_active(&self, ) -> ResultOf_is_aim_cam_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aim_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_aim_cam_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shake_cam(&self, cam_: i32,
type_: Option<String>,
amplitude_: f32) -> ResultOf_shake_cam {
    unsafe {
        let mut cam_ = cam_;
let mut type_ = sdk_helpers::create_c_string_ptr(type_);
let mut amplitude_ = amplitude_;
        let success = sdk::natives::shake_cam(
            cam_,
type_.as_ref().unwrap(),
amplitude_,
        );
        
        
        ResultOf_shake_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_camera_with_params(&self, camHash_: u32,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
fov_: f32,
p8_: bool,
p9_: i32) -> ResultOf_create_camera_with_params {
    unsafe {
        let mut native_return = Default::default();
let mut camHash_ = camHash_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut fov_ = fov_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_camera_with_params(
            &mut native_return,
camHash_,
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
fov_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_create_camera_with_params {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_shaking(&self, cam_: i32) -> ResultOf_is_cam_shaking {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_shaking(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_is_cam_shaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_relative_pitch(&self, angle_: f32,
scalingFactor_: f32) -> ResultOf_set_gameplay_cam_relative_pitch {
    unsafe {
        let mut angle_ = angle_;
let mut scalingFactor_ = scalingFactor_;
        let success = sdk::natives::set_gameplay_cam_relative_pitch(
            angle_,
scalingFactor_,
        );
        
        
        ResultOf_set_gameplay_cam_relative_pitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_motion_blur_strength(&self, cam_: i32,
strength_: f32) -> ResultOf_set_cam_motion_blur_strength {
    unsafe {
        let mut cam_ = cam_;
let mut strength_ = strength_;
        let success = sdk::natives::set_cam_motion_blur_strength(
            cam_,
strength_,
        );
        
        
        ResultOf_set_cam_motion_blur_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interpolating_to_script_cams(&self, ) -> ResultOf_is_interpolating_to_script_cams {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interpolating_to_script_cams(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_interpolating_to_script_cams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_aim_cam_zoom_factor(&self, zoomFactor_: f32) -> ResultOf_set_first_person_aim_cam_zoom_factor {
    unsafe {
        let mut zoomFactor_ = zoomFactor_;
        let success = sdk::natives::set_first_person_aim_cam_zoom_factor(
            zoomFactor_,
        );
        
        
        ResultOf_set_first_person_aim_cam_zoom_factor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_cam_looking_behind(&self, ) -> ResultOf_is_gameplay_cam_looking_behind {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_looking_behind(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_gameplay_cam_looking_behind {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_gameplay_cam_full_attach_parent_transform_timer(&self, ) -> ResultOf_reset_gameplay_cam_full_attach_parent_transform_timer {
    unsafe {
        
        let success = sdk::natives::reset_gameplay_cam_full_attach_parent_transform_timer(
            
        );
        
        
        ResultOf_reset_gameplay_cam_full_attach_parent_transform_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_hi_dof_on_synced_scene_this_update(&self, ) -> ResultOf_set_use_hi_dof_on_synced_scene_this_update {
    unsafe {
        
        let success = sdk::natives::set_use_hi_dof_on_synced_scene_this_update(
            
        );
        
        
        ResultOf_set_use_hi_dof_on_synced_scene_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cinematic_shot(&self, p0_: u32,
time_: i32,
p2_: bool,
entity_: u32) -> ResultOf_create_cinematic_shot {
    unsafe {
        let mut p0_ = p0_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut entity_ = entity_;
        let success = sdk::natives::create_cinematic_shot(
            p0_,
time_,
p2_,
entity_,
        );
        
        
        ResultOf_create_cinematic_shot {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_relative_heading(&self, ) -> ResultOf_get_gameplay_cam_relative_heading {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_relative_heading(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_gameplay_cam_relative_heading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_aim_cam_active_in_accurate_mode(&self, ) -> ResultOf_is_aim_cam_active_in_accurate_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aim_cam_active_in_accurate_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_aim_cam_active_in_accurate_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_shooter_camera_pitch(&self, pitch_: f32) -> ResultOf_set_first_person_shooter_camera_pitch {
    unsafe {
        let mut pitch_ = pitch_;
        let success = sdk::natives::set_first_person_shooter_camera_pitch(
            pitch_,
        );
        
        
        ResultOf_set_first_person_shooter_camera_pitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cinematic_shot(&self, p0_: u32) -> ResultOf_stop_cinematic_shot {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cinematic_shot(
            p0_,
        );
        
        
        ResultOf_stop_cinematic_shot {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_debug_cam(&self, ) -> ResultOf_get_debug_cam {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_debug_cam(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_debug_cam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_fading_out(&self, ) -> ResultOf_is_screen_fading_out {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_fading_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_screen_fading_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_table_games_camera_this_update(&self, hash_: u32) -> ResultOf_set_table_games_camera_this_update {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::set_table_games_camera_this_update(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_set_table_games_camera_this_update {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ignore_menu_preference_for_bonnet_camera_this_update(&self, ) -> ResultOf_ignore_menu_preference_for_bonnet_camera_this_update {
    unsafe {
        
        let success = sdk::natives::ignore_menu_preference_for_bonnet_camera_this_update(
            
        );
        
        
        ResultOf_ignore_menu_preference_for_bonnet_camera_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_node_extra_flags(&self, cam_: i32,
p1_: i32,
flags_: i32) -> ResultOf_set_cam_spline_node_extra_flags {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut flags_ = flags_;
        let success = sdk::natives::set_cam_spline_node_extra_flags(
            cam_,
p1_,
flags_,
        );
        
        
        ResultOf_set_cam_spline_node_extra_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_rot(&self, cam_: i32,
rotationOrder_: i32) -> ResultOf_get_cam_rot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cam_ = cam_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_cam_rot(
            native_return.pin_mut(),
cam_,
rotationOrder_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_cam_rot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_cam_spline_motion_blur(&self, cam_: i32,
p1_: i32,
p2_: f32,
p3_: f32) -> ResultOf_override_cam_spline_motion_blur {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::override_cam_spline_motion_blur(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_override_cam_spline_motion_blur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_fnumber_of_lens(&self, camera_: i32,
p1_: f32) -> ResultOf_set_cam_dof_fnumber_of_lens {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_fnumber_of_lens(
            camera_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_fnumber_of_lens {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_person_aim_cam_zoom_factor(&self, ) -> ResultOf_get_first_person_aim_cam_zoom_factor {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_first_person_aim_cam_zoom_factor(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_first_person_aim_cam_zoom_factor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_death_fail_effect_state(&self, p0_: i32) -> ResultOf_set_cam_death_fail_effect_state {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cam_death_fail_effect_state(
            p0_,
        );
        
        
        ResultOf_set_cam_death_fail_effect_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_fov(&self, ) -> ResultOf_get_final_rendered_cam_fov {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_fov(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_fov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gameplay_cam_rot(&self, rotationOrder_: i32) -> ResultOf_get_gameplay_cam_rot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_gameplay_cam_rot(
            native_return.pin_mut(),
rotationOrder_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_gameplay_cam_rot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_spline_node_ease(&self, cam_: i32,
easingFunction_: i32,
p2_: i32,
p3_: f32) -> ResultOf_set_cam_spline_node_ease {
    unsafe {
        let mut cam_ = cam_;
let mut easingFunction_ = easingFunction_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cam_spline_node_ease(
            cam_,
easingFunction_,
p2_,
p3_,
        );
        
        
        ResultOf_set_cam_spline_node_ease {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_object_hint(&self, object_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
p4_: bool,
time_: i32,
easeInTime_: i32,
easeOutTime_: i32) -> ResultOf_set_gameplay_object_hint {
    unsafe {
        let mut object_ = object_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut easeInTime_ = easeInTime_;
let mut easeOutTime_ = easeOutTime_;
        let success = sdk::natives::set_gameplay_object_hint(
            object_,
xOffset_,
yOffset_,
zOffset_,
p4_,
time_,
easeInTime_,
easeOutTime_,
        );
        
        
        ResultOf_set_gameplay_object_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_rot(&self, cam_: i32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
rotationOrder_: i32) -> ResultOf_set_cam_rot {
    unsafe {
        let mut cam_ = cam_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::set_cam_rot(
            cam_,
rotX_,
rotY_,
rotZ_,
rotationOrder_,
        );
        
        
        ResultOf_set_cam_rot {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node(&self, camera_: i32,
x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
length_: i32,
smoothingStyle_: i32,
rotationOrder_: i32) -> ResultOf_add_cam_spline_node {
    unsafe {
        let mut camera_ = camera_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut length_ = length_;
let mut smoothingStyle_ = smoothingStyle_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::add_cam_spline_node(
            camera_,
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
length_,
smoothingStyle_,
rotationOrder_,
        );
        
        
        ResultOf_add_cam_spline_node {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_cam(&self, cam_: i32,
bScriptHostCam_: bool) -> ResultOf_destroy_cam {
    unsafe {
        let mut cam_ = cam_;
let mut bScriptHostCam_ = bScriptHostCam_;
        let success = sdk::natives::destroy_cam(
            cam_,
bScriptHostCam_,
        );
        
        
        ResultOf_destroy_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_screen_fade_out(&self, duration_: i32) -> ResultOf_do_screen_fade_out {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::do_screen_fade_out(
            duration_,
        );
        
        
        ResultOf_do_screen_fade_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_focus_ped_on_screen(&self, p0_: f32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOf_get_focus_ped_on_screen {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_focus_ped_on_screen(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_get_focus_ped_on_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_follow_ped_this_update(&self, ped_: u32) -> ResultOf_set_gameplay_cam_follow_ped_this_update {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_gameplay_cam_follow_ped_this_update(
            ped_,
        );
        
        
        ResultOf_set_gameplay_cam_follow_ped_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_get_max_distance_allowed_from_player(&self, ) -> ResultOf_replay_get_max_distance_allowed_from_player {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::replay_get_max_distance_allowed_from_player(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_replay_get_max_distance_allowed_from_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_affects_aiming(&self, cam_: i32,
toggle_: bool) -> ResultOf_set_cam_affects_aiming {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_affects_aiming(
            cam_,
toggle_,
        );
        
        
        ResultOf_set_cam_affects_aiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_ped_cam_view_mode(&self, ) -> ResultOf_get_follow_ped_cam_view_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_ped_cam_view_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_follow_ped_cam_view_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_cam_to_vehicle_bone(&self, cam_: i32,
vehicle_: u32,
boneIndex_: i32,
relativeRotation_: bool,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
fixedDirection_: bool) -> ResultOf_attach_cam_to_vehicle_bone {
    unsafe {
        let mut cam_ = cam_;
let mut vehicle_ = vehicle_;
let mut boneIndex_ = boneIndex_;
let mut relativeRotation_ = relativeRotation_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut fixedDirection_ = fixedDirection_;
        let success = sdk::natives::attach_cam_to_vehicle_bone(
            cam_,
vehicle_,
boneIndex_,
relativeRotation_,
rotX_,
rotY_,
rotZ_,
offsetX_,
offsetY_,
offsetZ_,
fixedDirection_,
        );
        
        
        ResultOf_attach_cam_to_vehicle_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_all_cams(&self, bScriptHostCam_: bool) -> ResultOf_destroy_all_cams {
    unsafe {
        let mut bScriptHostCam_ = bScriptHostCam_;
        let success = sdk::natives::destroy_all_cams(
            bScriptHostCam_,
        );
        
        
        ResultOf_destroy_all_cams {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_cam_relative_heading_limits_this_update(&self, minimum_: f32,
maximum_: f32) -> ResultOf_set_third_person_cam_relative_heading_limits_this_update {
    unsafe {
        let mut minimum_ = minimum_;
let mut maximum_ = maximum_;
        let success = sdk::natives::set_third_person_cam_relative_heading_limits_this_update(
            minimum_,
maximum_,
        );
        
        
        ResultOf_set_third_person_cam_relative_heading_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_high_angle_mode_this_update(&self, p0_: bool) -> ResultOf_set_follow_vehicle_cam_high_angle_mode_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_follow_vehicle_cam_high_angle_mode_this_update(
            p0_,
        );
        
        
        ResultOf_set_follow_vehicle_cam_high_angle_mode_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_far_dof(&self, ) -> ResultOf_get_final_rendered_cam_far_dof {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_far_dof(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_far_dof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_cam_anim(&self, cam_: i32,
animName_: Option<String>,
animDictionary_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
p9_: bool,
p10_: i32) -> ResultOf_play_cam_anim {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::play_cam_anim(
            &mut native_return,
cam_,
animName_.as_ref().unwrap(),
animDictionary_.as_ref().unwrap(),
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
p9_,
p10_,
        );
        let native_return = native_return;
        
        ResultOf_play_cam_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_follow_vehicle_cam_high_angle_mode_every_update(&self, p0_: bool,
p1_: bool) -> ResultOf_set_follow_vehicle_cam_high_angle_mode_every_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_follow_vehicle_cam_high_angle_mode_every_update(
            p0_,
p1_,
        );
        
        
        ResultOf_set_follow_vehicle_cam_high_angle_mode_every_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_invalidate_cinematic_vehicle_idle_mode(&self, ) -> ResultOf_invalidate_cinematic_vehicle_idle_mode {
    unsafe {
        
        let success = sdk::natives::invalidate_cinematic_vehicle_idle_mode(
            
        );
        
        
        ResultOf_invalidate_cinematic_vehicle_idle_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_first_person_orientation_reset_this_update(&self, ) -> ResultOf_block_first_person_orientation_reset_this_update {
    unsafe {
        
        let success = sdk::natives::block_first_person_orientation_reset_this_update(
            
        );
        
        
        ResultOf_block_first_person_orientation_reset_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_active_with_interp(&self, camTo_: i32,
camFrom_: i32,
duration_: i32,
easeLocation_: i32,
easeRotation_: i32) -> ResultOf_set_cam_active_with_interp {
    unsafe {
        let mut camTo_ = camTo_;
let mut camFrom_ = camFrom_;
let mut duration_ = duration_;
let mut easeLocation_ = easeLocation_;
let mut easeRotation_ = easeRotation_;
        let success = sdk::natives::set_cam_active_with_interp(
            camTo_,
camFrom_,
duration_,
easeLocation_,
easeRotation_,
        );
        
        
        ResultOf_set_cam_active_with_interp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_near_dof(&self, ) -> ResultOf_get_final_rendered_cam_near_dof {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_near_dof(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_near_dof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_anim_current_phase(&self, cam_: i32) -> ResultOf_get_cam_anim_current_phase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_anim_current_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_anim_current_phase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_hi_dof(&self, ) -> ResultOf_set_use_hi_dof {
    unsafe {
        
        let success = sdk::natives::set_use_hi_dof(
            
        );
        
        
        ResultOf_set_use_hi_dof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_coord(&self, ) -> ResultOf_get_final_rendered_cam_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_final_rendered_cam_coord(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_final_rendered_cam_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_vehicle_hint(&self, vehicle_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
p4_: bool,
time_: i32,
easeInTime_: i32,
easeOutTime_: i32) -> ResultOf_set_gameplay_vehicle_hint {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut easeInTime_ = easeInTime_;
let mut easeOutTime_ = easeOutTime_;
        let success = sdk::natives::set_gameplay_vehicle_hint(
            vehicle_,
offsetX_,
offsetY_,
offsetZ_,
p4_,
time_,
easeInTime_,
easeOutTime_,
        );
        
        
        ResultOf_set_gameplay_vehicle_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_animated_shake_cam(&self, cam_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: Option<String>,
amplitude_: f32) -> ResultOf_animated_shake_cam {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut amplitude_ = amplitude_;
        let success = sdk::natives::animated_shake_cam(
            cam_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
amplitude_,
        );
        
        
        ResultOf_animated_shake_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_is_inside_vehicle(&self, cam_: i32,
toggle_: bool) -> ResultOf_set_cam_is_inside_vehicle {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_is_inside_vehicle(
            cam_,
toggle_,
        );
        
        
        ResultOf_set_cam_is_inside_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_cam(&self, cam_: i32) -> ResultOf_detach_cam {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::detach_cam(
            cam_,
        );
        
        
        ResultOf_detach_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cinematic_rendering_this_update(&self, toggle_: bool) -> ResultOf_force_cinematic_rendering_this_update {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_cinematic_rendering_this_update(
            toggle_,
        );
        
        
        ResultOf_force_cinematic_rendering_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_vehicle_cam_view_mode(&self, ) -> ResultOf_get_follow_vehicle_cam_view_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_vehicle_cam_view_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_follow_vehicle_cam_view_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_third_person_cam_relative_pitch_limits_this_update(&self, minimum_: f32,
maximum_: f32) -> ResultOf_set_third_person_cam_relative_pitch_limits_this_update {
    unsafe {
        let mut minimum_ = minimum_;
let mut maximum_ = maximum_;
        let success = sdk::natives::set_third_person_cam_relative_pitch_limits_this_update(
            minimum_,
maximum_,
        );
        
        
        ResultOf_set_third_person_cam_relative_pitch_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_node_velocity_scale(&self, cam_: i32,
p1_: i32,
scale_: f32) -> ResultOf_set_cam_spline_node_velocity_scale {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut scale_ = scale_;
        let success = sdk::natives::set_cam_spline_node_velocity_scale(
            cam_,
p1_,
scale_,
        );
        
        
        ResultOf_set_cam_spline_node_velocity_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_bypass_camera_collision_buoyancy_test_this_update(&self, ) -> ResultOf_bypass_camera_collision_buoyancy_test_this_update {
    unsafe {
        
        let success = sdk::natives::bypass_camera_collision_buoyancy_test_this_update(
            
        );
        
        
        ResultOf_bypass_camera_collision_buoyancy_test_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cam_exist(&self, cam_: i32) -> ResultOf_does_cam_exist {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::does_cam_exist(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_does_cam_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_shake_amplitude(&self, amplitude_: f32) -> ResultOf_set_gameplay_cam_shake_amplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::set_gameplay_cam_shake_amplitude(
            amplitude_,
        );
        
        
        ResultOf_set_gameplay_cam_shake_amplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cam_far_clip(&self, cam_: i32,
p1_: f32) -> ResultOf_force_cam_far_clip {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::force_cam_far_clip(
            cam_,
p1_,
        );
        
        
        ResultOf_force_cam_far_clip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_view_mode(&self, viewMode_: i32) -> ResultOf_set_follow_vehicle_cam_view_mode {
    unsafe {
        let mut viewMode_ = viewMode_;
        let success = sdk::natives::set_follow_vehicle_cam_view_mode(
            viewMode_,
        );
        
        
        ResultOf_set_follow_vehicle_cam_view_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_bonnet_camera_this_update(&self, ) -> ResultOf_disable_cinematic_bonnet_camera_this_update {
    unsafe {
        
        let success = sdk::natives::disable_cinematic_bonnet_camera_this_update(
            
        );
        
        
        ResultOf_disable_cinematic_bonnet_camera_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_far_clip(&self, cam_: i32,
farClip_: f32) -> ResultOf_set_cam_far_clip {
    unsafe {
        let mut cam_ = cam_;
let mut farClip_ = farClip_;
        let success = sdk::natives::set_cam_far_clip(
            cam_,
farClip_,
        );
        
        
        ResultOf_set_cam_far_clip {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_first_person_camera_water_clipping_test_this_update(&self, ) -> ResultOf_disable_first_person_camera_water_clipping_test_this_update {
    unsafe {
        
        let success = sdk::natives::disable_first_person_camera_water_clipping_test_this_update(
            
        );
        
        
        ResultOf_disable_first_person_camera_water_clipping_test_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_fov(&self, cam_: i32,
fieldOfView_: f32) -> ResultOf_set_cam_fov {
    unsafe {
        let mut cam_ = cam_;
let mut fieldOfView_ = fieldOfView_;
        let success = sdk::natives::set_cam_fov(
            cam_,
fieldOfView_,
        );
        
        
        ResultOf_set_cam_fov {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_cam_rendering(&self, ) -> ResultOf_is_cinematic_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_faded_out(&self, ) -> ResultOf_is_screen_faded_out {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_faded_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_screen_faded_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_spline_node_index(&self, cam_: i32) -> ResultOf_get_cam_spline_node_index {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_node_index(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_spline_node_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_relative_heading(&self, heading_: f32) -> ResultOf_set_gameplay_cam_relative_heading {
    unsafe {
        let mut heading_ = heading_;
        let success = sdk::natives::set_gameplay_cam_relative_heading(
            heading_,
        );
        
        
        ResultOf_set_gameplay_cam_relative_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cam_with_params(&self, camName_: Option<String>,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
fov_: f32,
p8_: bool,
p9_: i32) -> ResultOf_create_cam_with_params {
    unsafe {
        let mut native_return = Default::default();
let mut camName_ = sdk_helpers::create_c_string_ptr(camName_);
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut fov_ = fov_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_cam_with_params(
            &mut native_return,
camName_.as_ref().unwrap(),
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
fov_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_create_cam_with_params {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_spline_phase(&self, cam_: i32) -> ResultOf_get_cam_spline_phase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_spline_phase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_far_clip(&self, cam_: i32) -> ResultOf_get_cam_far_clip {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_far_clip(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_far_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_coord(&self, cam_: i32) -> ResultOf_get_cam_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_coord(
            native_return.pin_mut(),
cam_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_cam_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cinematic_cam_shaking(&self, ) -> ResultOf_is_cinematic_cam_shaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_cam_shaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_aim_cam_relative_pitch_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOf_set_first_person_aim_cam_relative_pitch_limits_this_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_relative_pitch_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOf_set_first_person_aim_cam_relative_pitch_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cam_shaking(&self, cam_: i32,
p1_: bool) -> ResultOf_stop_cam_shaking {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_cam_shaking(
            cam_,
p1_,
        );
        
        
        ResultOf_stop_cam_shaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_code_gameplay_hint_active(&self, ) -> ResultOf_is_code_gameplay_hint_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_code_gameplay_hint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_code_gameplay_hint_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_params(&self, cam_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
fieldOfView_: f32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32) -> ResultOf_set_cam_params {
    unsafe {
        let mut cam_ = cam_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut fieldOfView_ = fieldOfView_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::set_cam_params(
            cam_,
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
fieldOfView_,
p8_,
p9_,
p10_,
p11_,
        );
        
        
        ResultOf_set_cam_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_near_dof(&self, cam_: i32) -> ResultOf_get_cam_near_dof {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_near_dof(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_near_dof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animated_shake_script_global(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>,
p3_: f32) -> ResultOf_animated_shake_script_global {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
        let success = sdk::natives::animated_shake_script_global(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_animated_shake_script_global {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_fov(&self, cam_: i32) -> ResultOf_get_cam_fov {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_fov(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_fov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_max_near_in_focus_distance(&self, camera_: i32,
p1_: f32) -> ResultOf_set_cam_dof_max_near_in_focus_distance {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_max_near_in_focus_distance(
            camera_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_max_near_in_focus_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cam(&self, camName_: Option<String>,
p1_: bool) -> ResultOf_create_cam {
    unsafe {
        let mut native_return = Default::default();
let mut camName_ = sdk_helpers::create_c_string_ptr(camName_);
let mut p1_ = p1_;
        let success = sdk::natives::create_cam(
            &mut native_return,
camName_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_create_cam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_near_clip(&self, cam_: i32) -> ResultOf_get_cam_near_clip {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_near_clip(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_near_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_focus_distance_bias(&self, camera_: i32,
p1_: f32) -> ResultOf_set_cam_dof_focus_distance_bias {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_focus_distance_bias(
            camera_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_focus_distance_bias {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_follow_ped_cam_active(&self, ) -> ResultOf_is_follow_ped_cam_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_follow_ped_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_follow_ped_cam_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cinematic_cam_shake_amplitude(&self, p0_: f32) -> ResultOf_set_cinematic_cam_shake_amplitude {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cinematic_cam_shake_amplitude(
            p0_,
        );
        
        
        ResultOf_set_cinematic_cam_shake_amplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_near_clip(&self, cam_: i32,
nearClip_: f32) -> ResultOf_set_cam_near_clip {
    unsafe {
        let mut cam_ = cam_;
let mut nearClip_ = nearClip_;
        let success = sdk::natives::set_cam_near_clip(
            cam_,
nearClip_,
        );
        
        
        ResultOf_set_cam_near_clip {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_rendering_script_cams_using_catch_up(&self, render_: bool,
p1_: f32,
p2_: i32,
p3_: i32) -> ResultOf_stop_rendering_script_cams_using_catch_up {
    unsafe {
        let mut render_ = render_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::stop_rendering_script_cams_using_catch_up(
            render_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_stop_rendering_script_cams_using_catch_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_ladder_align_this_update(&self, ) -> ResultOf_set_follow_ped_cam_ladder_align_this_update {
    unsafe {
        
        let success = sdk::natives::set_follow_ped_cam_ladder_align_this_update(
            
        );
        
        
        ResultOf_set_follow_ped_cam_ladder_align_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fly_cam_vertical_controls_this_update(&self, cam_: i32) -> ResultOf_set_fly_cam_vertical_controls_this_update {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::set_fly_cam_vertical_controls_this_update(
            cam_,
        );
        
        
        ResultOf_set_fly_cam_vertical_controls_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_playing_anim(&self, cam_: i32,
animName_: Option<String>,
animDictionary_: Option<String>) -> ResultOf_is_cam_playing_anim {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
        let success = sdk::natives::is_cam_playing_anim(
            &mut native_return,
cam_,
animName_.as_ref().unwrap(),
animDictionary_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_cam_playing_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_script_global_shaking(&self, ) -> ResultOf_is_script_global_shaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_script_global_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_script_global_shaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_coord_and_constrain(&self, cam_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_fly_cam_coord_and_constrain {
    unsafe {
        let mut cam_ = cam_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_fly_cam_coord_and_constrain(
            cam_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_fly_cam_coord_and_constrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_camera_relative_vertical_offset(&self, yOffset_: f32) -> ResultOf_set_gameplay_hint_camera_relative_vertical_offset {
    unsafe {
        let mut yOffset_ = yOffset_;
        let success = sdk::natives::set_gameplay_hint_camera_relative_vertical_offset(
            yOffset_,
        );
        
        
        ResultOf_set_gameplay_hint_camera_relative_vertical_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_idle_cam_rendering(&self, ) -> ResultOf_is_cinematic_idle_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_idle_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_idle_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_follow_vehicle_cam_active(&self, ) -> ResultOf_is_follow_vehicle_cam_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_follow_vehicle_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_follow_vehicle_cam_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cinematic_shot_active(&self, p0_: u32) -> ResultOf_is_cinematic_shot_active {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_cinematic_shot_active(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_shot_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_gameplay_hint_being_cancelled_this_update(&self, p0_: bool) -> ResultOf_stop_gameplay_hint_being_cancelled_this_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_hint_being_cancelled_this_update(
            p0_,
        );
        
        
        ResultOf_stop_gameplay_hint_being_cancelled_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_zoom_factor_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOf_set_first_person_aim_cam_zoom_factor_limits_this_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_zoom_factor_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOf_set_first_person_aim_cam_zoom_factor_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_near_clip(&self, ) -> ResultOf_get_final_rendered_cam_near_clip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_near_clip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_near_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_spline_smoothing_style(&self, cam_: i32,
smoothingStyle_: i32) -> ResultOf_set_cam_spline_smoothing_style {
    unsafe {
        let mut cam_ = cam_;
let mut smoothingStyle_ = smoothingStyle_;
        let success = sdk::natives::set_cam_spline_smoothing_style(
            cam_,
smoothingStyle_,
        );
        
        
        ResultOf_set_cam_spline_smoothing_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_base_orbit_pitch_offset(&self, value_: f32) -> ResultOf_set_gameplay_hint_base_orbit_pitch_offset {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_gameplay_hint_base_orbit_pitch_offset(
            value_,
        );
        
        
        ResultOf_set_gameplay_hint_base_orbit_pitch_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_screen_fade_in(&self, duration_: i32) -> ResultOf_do_screen_fade_in {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::do_screen_fade_in(
            duration_,
        );
        
        
        ResultOf_do_screen_fade_in {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_coord_hint(&self, x_: f32,
y_: f32,
z_: f32,
duration_: i32,
blendOutDuration_: i32,
blendInDuration_: i32,
p6_: i32) -> ResultOf_set_gameplay_coord_hint {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut blendOutDuration_ = blendOutDuration_;
let mut blendInDuration_ = blendInDuration_;
let mut p6_ = p6_;
        let success = sdk::natives::set_gameplay_coord_hint(
            x_,
y_,
z_,
duration_,
blendOutDuration_,
blendInDuration_,
p6_,
        );
        
        
        ResultOf_set_gameplay_coord_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bonnet_cinematic_cam_rendering(&self, ) -> ResultOf_is_bonnet_cinematic_cam_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_bonnet_cinematic_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_bonnet_cinematic_cam_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_shake_amplitude(&self, cam_: i32,
amplitude_: f32) -> ResultOf_set_cam_shake_amplitude {
    unsafe {
        let mut cam_ = cam_;
let mut amplitude_ = amplitude_;
        let success = sdk::natives::set_cam_shake_amplitude(
            cam_,
amplitude_,
        );
        
        
        ResultOf_set_cam_shake_amplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_spline_node_phase(&self, cam_: i32) -> ResultOf_get_cam_spline_node_phase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_node_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_spline_node_phase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bypass_cutscene_cam_rendering_this_update(&self, ) -> ResultOf_bypass_cutscene_cam_rendering_this_update {
    unsafe {
        
        let success = sdk::natives::bypass_cutscene_cam_rendering_this_update(
            
        );
        
        
        ResultOf_bypass_cutscene_cam_rendering_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_altitude_fov_scaling_state(&self, p0_: bool) -> ResultOf_set_gameplay_cam_altitude_fov_scaling_state {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_altitude_fov_scaling_state(
            p0_,
        );
        
        
        ResultOf_set_gameplay_cam_altitude_fov_scaling_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_news_channel_active_this_update(&self, ) -> ResultOf_set_cinematic_news_channel_active_this_update {
    unsafe {
        
        let success = sdk::natives::set_cinematic_news_channel_active_this_update(
            
        );
        
        
        ResultOf_set_cinematic_news_channel_active_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_widescreen_borders(&self, p0_: bool,
p1_: i32) -> ResultOf_set_widescreen_borders {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_widescreen_borders(
            p0_,
p1_,
        );
        
        
        ResultOf_set_widescreen_borders {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_cinematic_cam(&self, shakeType_: Option<String>,
amount_: f32) -> ResultOf_shake_cinematic_cam {
    unsafe {
        let mut shakeType_ = sdk_helpers::create_c_string_ptr(shakeType_);
let mut amount_ = amount_;
        let success = sdk::natives::shake_cinematic_cam(
            shakeType_.as_ref().unwrap(),
amount_,
        );
        
        
        ResultOf_shake_cinematic_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_mode_active(&self, toggle_: bool) -> ResultOf_set_cinematic_mode_active {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_cinematic_mode_active(
            toggle_,
        );
        
        
        ResultOf_set_cinematic_mode_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_cam_ignore_attach_parent_movement_this_update(&self, ) -> ResultOf_set_follow_cam_ignore_attach_parent_movement_this_update {
    unsafe {
        
        let success = sdk::natives::set_follow_cam_ignore_attach_parent_movement_this_update(
            
        );
        
        
        ResultOf_set_follow_cam_ignore_attach_parent_movement_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_on_foot_first_person_view_this_update(&self, ) -> ResultOf_disable_on_foot_first_person_view_this_update {
    unsafe {
        
        let success = sdk::natives::disable_on_foot_first_person_view_this_update(
            
        );
        
        
        ResultOf_disable_on_foot_first_person_view_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_cam_orbit_distance_limits_this_update(&self, p0_: f32,
distance_: f32) -> ResultOf_set_third_person_cam_orbit_distance_limits_this_update {
    unsafe {
        let mut p0_ = p0_;
let mut distance_ = distance_;
        let success = sdk::natives::set_third_person_cam_orbit_distance_limits_this_update(
            p0_,
distance_,
        );
        
        
        ResultOf_set_third_person_cam_orbit_distance_limits_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_active(&self, cam_: i32) -> ResultOf_is_cam_active {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_active(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOf_is_cam_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_far_clip(&self, ) -> ResultOf_get_final_rendered_cam_far_clip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_far_clip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_final_rendered_cam_far_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_overridden_focus_distance_blend_level(&self, p0_: i32,
p1_: f32) -> ResultOf_set_cam_dof_overridden_focus_distance_blend_level {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_overridden_focus_distance_blend_level(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_overridden_focus_distance_blend_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_cam_anim(&self, p0_: i32,
p1_: i32,
animName_: Option<String>,
animDictionary_: Option<String>) -> ResultOf_play_synchronized_cam_anim {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
        let success = sdk::natives::play_synchronized_cam_anim(
            &mut native_return,
p0_,
p1_,
animName_.as_ref().unwrap(),
animDictionary_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_play_synchronized_cam_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sphere_visible(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_sphere_visible {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_sphere_visible(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_sphere_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(&self, toggle_: bool) -> ResultOf_set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(
            toggle_,
        );
        
        
        ResultOf_set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_hint_active(&self, ) -> ResultOf_is_gameplay_hint_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_hint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_gameplay_hint_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_vertical_response(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_set_fly_cam_vertical_response {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_fly_cam_vertical_response(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_fly_cam_vertical_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_vehicle_cam_state_this_update(&self, p0_: u32,
p1_: i32) -> ResultOf_set_in_vehicle_cam_state_this_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_in_vehicle_cam_state_this_update(
            p0_,
p1_,
        );
        
        
        ResultOf_set_in_vehicle_cam_state_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_gameplay_cam_altitude_fov_scaling_this_update(&self, ) -> ResultOf_disable_gameplay_cam_altitude_fov_scaling_this_update {
    unsafe {
        
        let success = sdk::natives::disable_gameplay_cam_altitude_fov_scaling_this_update(
            
        );
        
        
        ResultOf_disable_gameplay_cam_altitude_fov_scaling_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_allowed_independent_camera_modes(&self, ) -> ResultOf_is_allowed_independent_camera_modes {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_allowed_independent_camera_modes(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_allowed_independent_camera_modes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_far_dof(&self, cam_: i32,
farDOF_: f32) -> ResultOf_set_cam_far_dof {
    unsafe {
        let mut cam_ = cam_;
let mut farDOF_ = farDOF_;
        let success = sdk::natives::set_cam_far_dof(
            cam_,
farDOF_,
        );
        
        
        ResultOf_set_cam_far_dof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_view_mode_for_context(&self, context_: i32) -> ResultOf_get_cam_view_mode_for_context {
    unsafe {
        let mut native_return = Default::default();
let mut context_ = context_;
        let success = sdk::natives::get_cam_view_mode_for_context(
            &mut native_return,
context_,
        );
        let native_return = native_return;
        
        ResultOf_get_cam_view_mode_for_context {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_follow_vehicle_cam_zoom_level(&self, ) -> ResultOf_get_follow_vehicle_cam_zoom_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_vehicle_cam_zoom_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_follow_vehicle_cam_zoom_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_cam_pointing(&self, cam_: i32) -> ResultOf_stop_cam_pointing {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::stop_cam_pointing(
            cam_,
        );
        
        
        ResultOf_stop_cam_pointing {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_gameplay_hint(&self, p0_: bool) -> ResultOf_stop_gameplay_hint {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_hint(
            p0_,
        );
        
        
        ResultOf_stop_gameplay_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_script_global(&self, p0_: Option<String>,
p1_: f32) -> ResultOf_shake_script_global {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::shake_script_global(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_shake_script_global {
            success,
            ret: (),
            
        }
    }
}

    fn native_invalidate_idle_cam(&self, ) -> ResultOf_invalidate_idle_cam {
    unsafe {
        
        let success = sdk::natives::invalidate_idle_cam(
            
        );
        
        
        ResultOf_invalidate_idle_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_overridden_focus_distance(&self, camera_: i32,
p1_: f32) -> ResultOf_set_cam_dof_overridden_focus_distance {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_overridden_focus_distance(
            camera_,
p1_,
        );
        
        
        ResultOf_set_cam_dof_overridden_focus_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_cam_input_active(&self, ) -> ResultOf_is_cinematic_cam_input_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_input_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cinematic_cam_input_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_point_cam_at_coord(&self, cam_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_point_cam_at_coord {
    unsafe {
        let mut cam_ = cam_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::point_cam_at_coord(
            cam_,
x_,
y_,
z_,
        );
        
        
        ResultOf_point_cam_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_follow_distance_scalar(&self, value_: f32) -> ResultOf_set_gameplay_hint_follow_distance_scalar {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_gameplay_hint_follow_distance_scalar(
            value_,
        );
        
        
        ResultOf_set_gameplay_hint_follow_distance_scalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fly_cam_max_height(&self, cam_: i32,
height_: f32) -> ResultOf_set_fly_cam_max_height {
    unsafe {
        let mut cam_ = cam_;
let mut height_ = height_;
        let success = sdk::natives::set_fly_cam_max_height(
            cam_,
height_,
        );
        
        
        ResultOf_set_fly_cam_max_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(&self, entity_: u32) -> ResultOf_set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(
            entity_,
        );
        
        
        ResultOf_set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_gameplay_cam(&self, shakeName_: Option<String>,
intensity_: f32) -> ResultOf_shake_gameplay_cam {
    unsafe {
        let mut shakeName_ = sdk_helpers::create_c_string_ptr(shakeName_);
let mut intensity_ = intensity_;
        let success = sdk::natives::shake_gameplay_cam(
            shakeName_.as_ref().unwrap(),
intensity_,
        );
        
        
        ResultOf_shake_gameplay_cam {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_cam_to_entity(&self, cam_: i32,
entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
isRelative_: bool) -> ResultOf_attach_cam_to_entity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut isRelative_ = isRelative_;
        let success = sdk::natives::attach_cam_to_entity(
            cam_,
entity_,
xOffset_,
yOffset_,
zOffset_,
isRelative_,
        );
        
        
        ResultOf_attach_cam_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_minutes(&self, ) -> ResultOf_get_clock_minutes {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_minutes(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_minutes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clock_hours(&self, ) -> ResultOf_get_clock_hours {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_hours(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_hours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_milliseconds_per_game_minute(&self, ) -> ResultOf_get_milliseconds_per_game_minute {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_milliseconds_per_game_minute(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_milliseconds_per_game_minute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clock_day_of_month(&self, ) -> ResultOf_get_clock_day_of_month {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_day_of_month(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_day_of_month {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_clock(&self, toggle_: bool) -> ResultOf_pause_clock {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::pause_clock(
            toggle_,
        );
        
        
        ResultOf_pause_clock {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_clock_time(&self, hour_: i32,
minute_: i32,
second_: i32) -> ResultOf_set_clock_time {
    unsafe {
        let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::set_clock_time(
            hour_,
minute_,
second_,
        );
        
        
        ResultOf_set_clock_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_seconds(&self, ) -> ResultOf_get_clock_seconds {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_seconds(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_seconds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_local_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOf_get_local_time {
    unsafe {
        let mut year_ = Default::default();
let mut month_ = Default::default();
let mut day_ = Default::default();
let mut hour_ = Default::default();
let mut minute_ = Default::default();
let mut second_ = Default::default();
        let success = sdk::natives::get_local_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOf_get_local_time {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_get_utc_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOf_get_utc_time {
    unsafe {
        let mut year_ = Default::default();
let mut month_ = Default::default();
let mut day_ = Default::default();
let mut hour_ = Default::default();
let mut minute_ = Default::default();
let mut second_ = Default::default();
        let success = sdk::natives::get_utc_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOf_get_utc_time {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_get_clock_year(&self, ) -> ResultOf_get_clock_year {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_year(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_year {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_clock_date(&self, day_: i32,
month_: i32,
year_: i32) -> ResultOf_set_clock_date {
    unsafe {
        let mut day_ = day_;
let mut month_ = month_;
let mut year_ = year_;
        let success = sdk::natives::set_clock_date(
            day_,
month_,
year_,
        );
        
        
        ResultOf_set_clock_date {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_month(&self, ) -> ResultOf_get_clock_month {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_month(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_month {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_advance_clock_time_to(&self, hour_: i32,
minute_: i32,
second_: i32) -> ResultOf_advance_clock_time_to {
    unsafe {
        let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::advance_clock_time_to(
            hour_,
minute_,
second_,
        );
        
        
        ResultOf_advance_clock_time_to {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_to_clock_time(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOf_add_to_clock_time {
    unsafe {
        let mut hours_ = hours_;
let mut minutes_ = minutes_;
let mut seconds_ = seconds_;
        let success = sdk::natives::add_to_clock_time(
            hours_,
minutes_,
seconds_,
        );
        
        
        ResultOf_add_to_clock_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_day_of_week(&self, ) -> ResultOf_get_clock_day_of_week {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_day_of_week(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clock_day_of_week {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_posix_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOf_get_posix_time {
    unsafe {
        let mut year_ = Default::default();
let mut month_ = Default::default();
let mut day_ = Default::default();
let mut hour_ = Default::default();
let mut minute_ = Default::default();
let mut second_ = Default::default();
        let success = sdk::natives::get_posix_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOf_get_posix_time {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_set_cutscene_origin_and_orientation(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOf_set_cutscene_origin_and_orientation {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::set_cutscene_origin_and_orientation(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOf_set_cutscene_origin_and_orientation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_ped_prop_variation(&self, cutsceneEntName_: Option<String>,
componentId_: i32,
drawableId_: i32,
textureId_: i32,
modelHash_: u32) -> ResultOf_set_cutscene_ped_prop_variation {
    unsafe {
        let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::set_cutscene_ped_prop_variation(
            cutsceneEntName_.as_ref().unwrap(),
componentId_,
drawableId_,
textureId_,
modelHash_,
        );
        
        
        ResultOf_set_cutscene_ped_prop_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_cut_file(&self, cutsceneName_: Option<String>) -> ResultOf_request_cut_file {
    unsafe {
        let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::request_cut_file(
            cutsceneName_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_cut_file {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_multihead_fade_manual(&self, p0_: bool) -> ResultOf_set_cutscene_multihead_fade_manual {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_multihead_fade_manual(
            p0_,
        );
        
        
        ResultOf_set_cutscene_multihead_fade_manual {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_index_of_cutscene_entity(&self, cutsceneEntName_: Option<String>,
modelHash_: u32) -> ResultOf_get_entity_index_of_cutscene_entity {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_entity_index_of_cutscene_entity(
            &mut native_return,
cutsceneEntName_.as_ref().unwrap(),
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_index_of_cutscene_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cut_file_concat_count(&self, cutsceneName_: Option<String>) -> ResultOf_get_cut_file_concat_count {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::get_cut_file_concat_count(
            &mut native_return,
cutsceneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_cut_file_concat_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_cutscene(&self, flags_: i32) -> ResultOf_start_cutscene {
    unsafe {
        let mut flags_ = flags_;
        let success = sdk::natives::start_cutscene(
            flags_,
        );
        
        
        ResultOf_start_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_cutscene_at_coords(&self, x_: f32,
y_: f32,
z_: f32,
flags_: i32) -> ResultOf_start_cutscene_at_coords {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flags_ = flags_;
        let success = sdk::natives::start_cutscene_at_coords(
            x_,
y_,
z_,
flags_,
        );
        
        
        ResultOf_start_cutscene_at_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_multihead_fade(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_set_cutscene_multihead_fade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cutscene_multihead_fade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_cutscene_multihead_fade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_display_minimap_during_cutscene_this_update(&self, ) -> ResultOf_set_can_display_minimap_during_cutscene_this_update {
    unsafe {
        
        let success = sdk::natives::set_can_display_minimap_during_cutscene_this_update(
            
        );
        
        
        ResultOf_set_can_display_minimap_during_cutscene_this_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_this_cutscene_loaded(&self, cutsceneName_: Option<String>) -> ResultOf_has_this_cutscene_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::has_this_cutscene_loaded(
            &mut native_return,
cutsceneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_this_cutscene_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_ped_component_variation_from_ped(&self, cutsceneEntName_: Option<String>,
ped_: u32,
modelHash_: u32) -> ResultOf_set_cutscene_ped_component_variation_from_ped {
    unsafe {
        let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut ped_ = ped_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::set_cutscene_ped_component_variation_from_ped(
            cutsceneEntName_.as_ref().unwrap(),
ped_,
modelHash_,
        );
        
        
        ResultOf_set_cutscene_ped_component_variation_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_mocap_cutscene_can_be_skipped(&self, p0_: bool) -> ResultOf_network_set_mocap_cutscene_can_be_skipped {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_mocap_cutscene_can_be_skipped(
            p0_,
        );
        
        
        ResultOf_network_set_mocap_cutscene_can_be_skipped {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_cutscene_skipped(&self, ) -> ResultOf_was_cutscene_skipped {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::was_cutscene_skipped(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_was_cutscene_skipped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_can_be_skipped(&self, p0_: bool) -> ResultOf_set_cutscene_can_be_skipped {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_can_be_skipped(
            p0_,
        );
        
        
        ResultOf_set_cutscene_can_be_skipped {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cutscene(&self, ) -> ResultOf_remove_cutscene {
    unsafe {
        
        let success = sdk::natives::remove_cutscene(
            
        );
        
        
        ResultOf_remove_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_section_playing(&self, ) -> ResultOf_get_cutscene_section_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_section_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_section_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_cutscene_entity_exist(&self, cutsceneEntName_: Option<String>,
modelHash_: u32) -> ResultOf_does_cutscene_entity_exist {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut modelHash_ = modelHash_;
        let success = sdk::natives::does_cutscene_entity_exist(
            &mut native_return,
cutsceneEntName_.as_ref().unwrap(),
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_cutscene_entity_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_entity_streaming_flags(&self, cutsceneEntName_: Option<String>,
p1_: i32,
p2_: i32) -> ResultOf_set_cutscene_entity_streaming_flags {
    unsafe {
        let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_cutscene_entity_streaming_flags(
            cutsceneEntName_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOf_set_cutscene_entity_streaming_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_set_exit_state_for_registered_entity(&self, cutsceneEntName_: Option<String>,
modelHash_: u32) -> ResultOf_can_set_exit_state_for_registered_entity {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut modelHash_ = modelHash_;
        let success = sdk::natives::can_set_exit_state_for_registered_entity(
            &mut native_return,
cutsceneEntName_.as_ref().unwrap(),
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_can_set_exit_state_for_registered_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cutscene_authorized(&self, cutsceneName_: Option<String>) -> ResultOf_is_cutscene_authorized {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::is_cutscene_authorized(
            &mut native_return,
cutsceneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_cutscene_authorized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_cutscene_handle_exist(&self, cutsceneHandle_: i32) -> ResultOf_does_cutscene_handle_exist {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneHandle_ = cutsceneHandle_;
        let success = sdk::natives::does_cutscene_handle_exist(
            &mut native_return,
cutsceneHandle_,
        );
        let native_return = native_return;
        
        ResultOf_does_cutscene_handle_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_concat_section_playing(&self, ) -> ResultOf_get_cutscene_concat_section_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_concat_section_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_concat_section_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_play_duration(&self, ) -> ResultOf_get_cutscene_play_duration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_play_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_play_duration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_use_mobile_phone_during_cutscene(&self, ) -> ResultOf_can_use_mobile_phone_during_cutscene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_use_mobile_phone_during_cutscene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_use_mobile_phone_during_cutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_set_enter_state_for_registered_entity(&self, cutsceneEntName_: Option<String>,
modelHash_: u32) -> ResultOf_can_set_enter_state_for_registered_entity {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut modelHash_ = modelHash_;
        let success = sdk::natives::can_set_enter_state_for_registered_entity(
            &mut native_return,
cutsceneEntName_.as_ref().unwrap(),
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_can_set_enter_state_for_registered_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cutscene_cut_this_frame(&self, ) -> ResultOf_has_cutscene_cut_this_frame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_cut_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_cutscene_cut_this_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cutscene_playback_flag_set(&self, flag_: i32) -> ResultOf_is_cutscene_playback_flag_set {
    unsafe {
        let mut native_return = Default::default();
let mut flag_ = flag_;
        let success = sdk::natives::is_cutscene_playback_flag_set(
            &mut native_return,
flag_,
        );
        let native_return = native_return;
        
        ResultOf_is_cutscene_playback_flag_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_cutscene(&self, cutsceneName_: Option<String>,
flags_: i32) -> ResultOf_request_cutscene {
    unsafe {
        let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
let mut flags_ = flags_;
        let success = sdk::natives::request_cutscene(
            cutsceneName_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOf_request_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cutscene_finished(&self, ) -> ResultOf_has_cutscene_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_cutscene_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_model_player_will_exit_scene(&self, modelHash_: u32) -> ResultOf_set_vehicle_model_player_will_exit_scene {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::set_vehicle_model_player_will_exit_scene(
            modelHash_,
        );
        
        
        ResultOf_set_vehicle_model_player_will_exit_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_fade_values(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_set_cutscene_fade_values {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cutscene_fade_values(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_cutscene_fade_values {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_can_start_cutscene(&self, threadId_: i32) -> ResultOf_set_script_can_start_cutscene {
    unsafe {
        let mut threadId_ = threadId_;
        let success = sdk::natives::set_script_can_start_cutscene(
            threadId_,
        );
        
        
        ResultOf_set_script_can_start_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_end_time(&self, ) -> ResultOf_get_cutscene_end_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_end_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_end_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_trigger_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_set_cutscene_trigger_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::set_cutscene_trigger_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        
        
        ResultOf_set_cutscene_trigger_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cutscene_active(&self, ) -> ResultOf_is_cutscene_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cutscene_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cutscene_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_multihead_fade_up(&self, ) -> ResultOf_is_multihead_fade_up {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_multihead_fade_up(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_multihead_fade_up {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cut_file_loaded(&self, cutsceneName_: Option<String>) -> ResultOf_has_cut_file_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::has_cut_file_loaded(
            &mut native_return,
cutsceneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_cut_file_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_set_exit_state_for_camera(&self, p0_: bool) -> ResultOf_can_set_exit_state_for_camera {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_set_exit_state_for_camera(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_can_set_exit_state_for_camera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_request_assets_for_cutscene_entity(&self, ) -> ResultOf_can_request_assets_for_cutscene_entity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_request_assets_for_cutscene_entity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_request_assets_for_cutscene_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_origin(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32) -> ResultOf_set_cutscene_origin {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_cutscene_origin(
            x_,
y_,
z_,
p3_,
p4_,
        );
        
        
        ResultOf_set_cutscene_origin {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_ped_component_variation(&self, cutsceneEntName_: Option<String>,
componentId_: i32,
drawableId_: i32,
textureId_: i32,
modelHash_: u32) -> ResultOf_set_cutscene_ped_component_variation {
    unsafe {
        let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::set_cutscene_ped_component_variation(
            cutsceneEntName_.as_ref().unwrap(),
componentId_,
drawableId_,
textureId_,
modelHash_,
        );
        
        
        ResultOf_set_cutscene_ped_component_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_index_of_registered_entity(&self, cutsceneEntName_: Option<String>,
modelHash_: u32) -> ResultOf_get_entity_index_of_registered_entity {
    unsafe {
        let mut native_return = Default::default();
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_entity_index_of_registered_entity(
            &mut native_return,
cutsceneEntName_.as_ref().unwrap(),
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_index_of_registered_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_cutscene_with_playback_list(&self, cutsceneName_: Option<String>,
playbackFlags_: i32,
flags_: i32) -> ResultOf_request_cutscene_with_playback_list {
    unsafe {
        let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
let mut playbackFlags_ = playbackFlags_;
let mut flags_ = flags_;
        let success = sdk::natives::request_cutscene_with_playback_list(
            cutsceneName_.as_ref().unwrap(),
playbackFlags_,
flags_,
        );
        
        
        ResultOf_request_cutscene_with_playback_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cutscene_loaded(&self, ) -> ResultOf_has_cutscene_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_cutscene_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pad_can_shake_during_cutscene(&self, toggle_: bool) -> ResultOf_set_pad_can_shake_during_cutscene {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_pad_can_shake_during_cutscene(
            toggle_,
        );
        
        
        ResultOf_set_pad_can_shake_during_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene(&self, p0_: bool) -> ResultOf_stop_cutscene {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cutscene(
            p0_,
        );
        
        
        ResultOf_stop_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cut_file(&self, cutsceneName_: Option<String>) -> ResultOf_remove_cut_file {
    unsafe {
        let mut cutsceneName_ = sdk_helpers::create_c_string_ptr(cutsceneName_);
        let success = sdk::natives::remove_cut_file(
            cutsceneName_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_cut_file {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene_immediately(&self, ) -> ResultOf_stop_cutscene_immediately {
    unsafe {
        
        let success = sdk::natives::stop_cutscene_immediately(
            
        );
        
        
        ResultOf_stop_cutscene_immediately {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cutscene_playing(&self, ) -> ResultOf_is_cutscene_playing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cutscene_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_cutscene_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_car_generators_can_update_during_cutscene(&self, p0_: bool) -> ResultOf_set_car_generators_can_update_during_cutscene {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_car_generators_can_update_during_cutscene(
            p0_,
        );
        
        
        ResultOf_set_car_generators_can_update_during_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_entity_for_cutscene(&self, cutscenePed_: u32,
cutsceneEntName_: Option<String>,
p2_: i32,
modelHash_: u32,
p4_: i32) -> ResultOf_register_entity_for_cutscene {
    unsafe {
        let mut cutscenePed_ = cutscenePed_;
let mut cutsceneEntName_ = sdk_helpers::create_c_string_ptr(cutsceneEntName_);
let mut p2_ = p2_;
let mut modelHash_ = modelHash_;
let mut p4_ = p4_;
        let success = sdk::natives::register_entity_for_cutscene(
            cutscenePed_,
cutsceneEntName_.as_ref().unwrap(),
p2_,
modelHash_,
p4_,
        );
        
        
        ResultOf_register_entity_for_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_time(&self, ) -> ResultOf_get_cutscene_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_total_duration(&self, ) -> ResultOf_get_cutscene_total_duration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_total_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cutscene_total_duration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_creator_stats(&self, p0_: i32,
p1_: i32) -> ResultOf_datafile_select_creator_stats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_creator_stats(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_select_creator_stats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_get_type(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_type {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_type(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_type {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_dataarray_get_count(&self, arrayData_: i32) -> ResultOf_dataarray_get_count {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
        let success = sdk::natives::dataarray_get_count(
            &mut native_return,
&mut arrayData_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_count {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datadict_get_float(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_float(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_float {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datadict_get_bool(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_bool {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_bool(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_bool {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datafile_has_loaded_file_data(&self, requestId_: i32) -> ResultOf_datafile_has_loaded_file_data {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
        let success = sdk::natives::datafile_has_loaded_file_data(
            &mut native_return,
requestId_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_has_loaded_file_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_active_file(&self, requestId_: i32,
p1_: i32) -> ResultOf_datafile_select_active_file {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_active_file(
            &mut native_return,
requestId_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_select_active_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_store_mission_header(&self, p0_: i32) -> ResultOf_datafile_store_mission_header {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_store_mission_header(
            p0_,
        );
        
        
        ResultOf_datafile_store_mission_header {
            success,
            ret: (),
            
        }
    }
}

    fn native_dataarray_add_string(&self, arrayData_: i32,
value_: Option<String>) -> ResultOf_dataarray_add_string {
    unsafe {
        let mut arrayData_ = Default::default();
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::dataarray_add_string(
            &mut arrayData_,
value_.as_ref().unwrap(),
        );
        let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_string {
            success,
            ret: (),
            arrayData_
        }
    }
}

    fn native_datadict_set_bool(&self, objectData_: i32,
key_: Option<String>,
value_: bool) -> ResultOf_datadict_set_bool {
    unsafe {
        let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_bool(
            &mut objectData_,
key_.as_ref().unwrap(),
value_,
        );
        let objectData_ = objectData_;
        
        ResultOf_datadict_set_bool {
            success,
            ret: (),
            objectData_
        }
    }
}

    fn native_dataarray_get_type(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_type {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_type(
            &mut native_return,
&mut arrayData_,
arrayIndex_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_type {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datadict_get_string(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_string(
            native_return.pin_mut(),
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let objectData_ = objectData_;
        
        ResultOf_datadict_get_string {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_dataarray_get_int(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_int(
            &mut native_return,
&mut arrayData_,
arrayIndex_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_int {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_dataarray_add_vector(&self, arrayData_: i32,
valueX_: f32,
valueY_: f32,
valueZ_: f32) -> ResultOf_dataarray_add_vector {
    unsafe {
        let mut arrayData_ = Default::default();
let mut valueX_ = valueX_;
let mut valueY_ = valueY_;
let mut valueZ_ = valueZ_;
        let success = sdk::natives::dataarray_add_vector(
            &mut arrayData_,
valueX_,
valueY_,
valueZ_,
        );
        let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_vector {
            success,
            ret: (),
            arrayData_
        }
    }
}

    fn native_ugc_update_mission(&self, contentId_: Option<String>,
contentName_: Option<String>,
description_: Option<String>,
tagsCsv_: Option<String>,
contentTypeName_: Option<String>,
p5_: i32) -> ResultOf_ugc_update_mission {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut contentName_ = sdk_helpers::create_c_string_ptr(contentName_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tagsCsv_ = sdk_helpers::create_c_string_ptr(tagsCsv_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut p5_ = p5_;
        let success = sdk::natives::ugc_update_mission(
            &mut native_return,
contentId_.as_ref().unwrap(),
contentName_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tagsCsv_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
p5_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_update_mission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_get_vector(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_vector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_vector(
            native_return.pin_mut(),
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
let objectData_ = objectData_;
        
        ResultOf_datadict_get_vector {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datadict_set_vector(&self, objectData_: i32,
key_: Option<String>,
valueX_: f32,
valueY_: f32,
valueZ_: f32) -> ResultOf_datadict_set_vector {
    unsafe {
        let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut valueX_ = valueX_;
let mut valueY_ = valueY_;
let mut valueZ_ = valueZ_;
        let success = sdk::natives::datadict_set_vector(
            &mut objectData_,
key_.as_ref().unwrap(),
valueX_,
valueY_,
valueZ_,
        );
        let objectData_ = objectData_;
        
        ResultOf_datadict_set_vector {
            success,
            ret: (),
            objectData_
        }
    }
}

    fn native_datafile_update_save_to_cloud(&self, p0_: bool) -> ResultOf_datafile_update_save_to_cloud {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::datafile_update_save_to_cloud(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_datafile_update_save_to_cloud {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_dataarray_get_bool(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_bool {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_bool(
            &mut native_return,
&mut arrayData_,
arrayIndex_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_bool {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datafile_select_ugc_player_data(&self, p0_: i32,
p1_: i32) -> ResultOf_datafile_select_ugc_player_data {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_ugc_player_data(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_select_ugc_player_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_add_float(&self, arrayData_: i32,
value_: f32) -> ResultOf_dataarray_add_float {
    unsafe {
        let mut arrayData_ = Default::default();
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_float(
            &mut arrayData_,
value_,
        );
        let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_float {
            success,
            ret: (),
            arrayData_
        }
    }
}

    fn native_datadict_create_array(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_create_array {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_create_array(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_create_array {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_ugc_update_content(&self, contentId_: Option<String>,
data_: i32,
dataCount_: i32,
contentName_: Option<String>,
description_: Option<String>,
tagsCsv_: Option<String>,
contentTypeName_: Option<String>,
p7_: i32) -> ResultOf_ugc_update_content {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut data_ = Default::default();
let mut dataCount_ = dataCount_;
let mut contentName_ = sdk_helpers::create_c_string_ptr(contentName_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tagsCsv_ = sdk_helpers::create_c_string_ptr(tagsCsv_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut p7_ = p7_;
        let success = sdk::natives::ugc_update_content(
            &mut native_return,
&mut data_,
contentId_.as_ref().unwrap(),
dataCount_,
contentName_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tagsCsv_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
p7_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_ugc_update_content {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_dataarray_add_dict(&self, arrayData_: i32) -> ResultOf_dataarray_add_dict {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
        let success = sdk::natives::dataarray_add_dict(
            &mut native_return,
&mut arrayData_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_dict {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_ugc_set_player_data(&self, contentId_: Option<String>,
rating_: f32,
contentTypeName_: Option<String>,
p3_: i32) -> ResultOf_ugc_set_player_data {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut rating_ = rating_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut p3_ = p3_;
        let success = sdk::natives::ugc_set_player_data(
            &mut native_return,
contentId_.as_ref().unwrap(),
rating_,
contentTypeName_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_set_player_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_delete_for_additional_data_file(&self, p0_: i32) -> ResultOf_datafile_delete_for_additional_data_file {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_delete_for_additional_data_file(
            p0_,
        );
        
        
        ResultOf_datafile_delete_for_additional_data_file {
            success,
            ret: (),
            
        }
    }
}

    fn native_datafile_clear_watch_list(&self, ) -> ResultOf_datafile_clear_watch_list {
    unsafe {
        
        let success = sdk::natives::datafile_clear_watch_list(
            
        );
        
        
        ResultOf_datafile_clear_watch_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_datadict_get_int(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_int(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_int {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datadict_get_array(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_array {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_array(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_array {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datafile_start_save_to_cloud(&self, filename_: Option<String>,
p1_: i32) -> ResultOf_datafile_start_save_to_cloud {
    unsafe {
        let mut native_return = Default::default();
let mut filename_ = sdk_helpers::create_c_string_ptr(filename_);
let mut p1_ = p1_;
        let success = sdk::natives::datafile_start_save_to_cloud(
            &mut native_return,
filename_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_start_save_to_cloud {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_get_dict(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_dict {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_dict(
            &mut native_return,
&mut arrayData_,
arrayIndex_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_dict {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_dataarray_get_vector(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_vector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_vector(
            native_return.pin_mut(),
&mut arrayData_,
arrayIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_vector {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datafile_delete_requested_file(&self, requestId_: i32) -> ResultOf_datafile_delete_requested_file {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
        let success = sdk::natives::datafile_delete_requested_file(
            &mut native_return,
requestId_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_delete_requested_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_set_string(&self, objectData_: i32,
key_: Option<String>,
value_: Option<String>) -> ResultOf_datadict_set_string {
    unsafe {
        let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::datadict_set_string(
            &mut objectData_,
key_.as_ref().unwrap(),
value_.as_ref().unwrap(),
        );
        let objectData_ = objectData_;
        
        ResultOf_datadict_set_string {
            success,
            ret: (),
            objectData_
        }
    }
}

    fn native_datafile_get_file_dict(&self, p0_: i32) -> ResultOf_datafile_get_file_dict {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::datafile_get_file_dict(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_get_file_dict {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_delete(&self, p0_: i32) -> ResultOf_datafile_delete {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_delete(
            p0_,
        );
        
        
        ResultOf_datafile_delete {
            success,
            ret: (),
            
        }
    }
}

    fn native_datafile_select_ugc_stats(&self, p0_: i32,
p1_: bool,
p2_: i32) -> ResultOf_datafile_select_ugc_stats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::datafile_select_ugc_stats(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_select_ugc_stats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_create_dict(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_create_dict {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_create_dict(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_create_dict {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_ugc_create_mission(&self, contentName_: Option<String>,
description_: Option<String>,
tagsCsv_: Option<String>,
contentTypeName_: Option<String>,
publish_: bool,
p5_: i32) -> ResultOf_ugc_create_mission {
    unsafe {
        let mut native_return = Default::default();
let mut contentName_ = sdk_helpers::create_c_string_ptr(contentName_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tagsCsv_ = sdk_helpers::create_c_string_ptr(tagsCsv_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut publish_ = publish_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_create_mission(
            &mut native_return,
contentName_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tagsCsv_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
publish_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_create_mission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_ugc_data(&self, p0_: i32,
p1_: i32) -> ResultOf_datafile_select_ugc_data {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_ugc_data(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_select_ugc_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_load_offline_ugc_for_additional_data_file(&self, p0_: i32,
p1_: i32) -> ResultOf_datafile_load_offline_ugc_for_additional_data_file {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_load_offline_ugc_for_additional_data_file(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_load_offline_ugc_for_additional_data_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_watch_request_id(&self, requestId_: i32) -> ResultOf_datafile_watch_request_id {
    unsafe {
        let mut requestId_ = requestId_;
        let success = sdk::natives::datafile_watch_request_id(
            requestId_,
        );
        
        
        ResultOf_datafile_watch_request_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_datadict_get_dict(&self, objectData_: i32,
key_: Option<String>) -> ResultOf_datadict_get_dict {
    unsafe {
        let mut native_return = Default::default();
let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_dict(
            &mut native_return,
&mut objectData_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let objectData_ = objectData_;
        
        ResultOf_datadict_get_dict {
            success,
            ret: native_return,
            objectData_
        }
    }
}

    fn native_datafile_is_save_pending(&self, ) -> ResultOf_datafile_is_save_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::datafile_is_save_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_datafile_is_save_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_get_float(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_float(
            &mut native_return,
&mut arrayData_,
arrayIndex_,
        );
        let native_return = native_return;
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_float {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datadict_set_float(&self, objectData_: i32,
key_: Option<String>,
value_: f32) -> ResultOf_datadict_set_float {
    unsafe {
        let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_float(
            &mut objectData_,
key_.as_ref().unwrap(),
value_,
        );
        let objectData_ = objectData_;
        
        ResultOf_datadict_set_float {
            success,
            ret: (),
            objectData_
        }
    }
}

    fn native_datafile_load_offline_ugc(&self, filename_: Option<String>,
p1_: i32) -> ResultOf_datafile_load_offline_ugc {
    unsafe {
        let mut native_return = Default::default();
let mut filename_ = sdk_helpers::create_c_string_ptr(filename_);
let mut p1_ = p1_;
        let success = sdk::natives::datafile_load_offline_ugc(
            &mut native_return,
filename_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_load_offline_ugc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_flush_mission_header(&self, ) -> ResultOf_datafile_flush_mission_header {
    unsafe {
        
        let success = sdk::natives::datafile_flush_mission_header(
            
        );
        
        
        ResultOf_datafile_flush_mission_header {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_create_content(&self, data_: i32,
dataCount_: i32,
contentName_: Option<String>,
description_: Option<String>,
tagsCsv_: Option<String>,
contentTypeName_: Option<String>,
publish_: bool,
p7_: i32) -> ResultOf_ugc_create_content {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
let mut dataCount_ = dataCount_;
let mut contentName_ = sdk_helpers::create_c_string_ptr(contentName_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tagsCsv_ = sdk_helpers::create_c_string_ptr(tagsCsv_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut publish_ = publish_;
let mut p7_ = p7_;
        let success = sdk::natives::ugc_create_content(
            &mut native_return,
&mut data_,
dataCount_,
contentName_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tagsCsv_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
publish_,
p7_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_ugc_create_content {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_dataarray_add_int(&self, arrayData_: i32,
value_: i32) -> ResultOf_dataarray_add_int {
    unsafe {
        let mut arrayData_ = Default::default();
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_int(
            &mut arrayData_,
value_,
        );
        let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_int {
            success,
            ret: (),
            arrayData_
        }
    }
}

    fn native_datafile_create(&self, p0_: i32) -> ResultOf_datafile_create {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_create(
            p0_,
        );
        
        
        ResultOf_datafile_create {
            success,
            ret: (),
            
        }
    }
}

    fn native_dataarray_get_string(&self, arrayData_: i32,
arrayIndex_: i32) -> ResultOf_dataarray_get_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut arrayData_ = Default::default();
let mut arrayIndex_ = arrayIndex_;
        let success = sdk::natives::dataarray_get_string(
            native_return.pin_mut(),
&mut arrayData_,
arrayIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let arrayData_ = arrayData_;
        
        ResultOf_dataarray_get_string {
            success,
            ret: native_return,
            arrayData_
        }
    }
}

    fn native_datafile_get_file_dict_for_additional_data_file(&self, p0_: i32) -> ResultOf_datafile_get_file_dict_for_additional_data_file {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::datafile_get_file_dict_for_additional_data_file(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_get_file_dict_for_additional_data_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_set_int(&self, objectData_: i32,
key_: Option<String>,
value_: i32) -> ResultOf_datadict_set_int {
    unsafe {
        let mut objectData_ = Default::default();
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_int(
            &mut objectData_,
key_.as_ref().unwrap(),
value_,
        );
        let objectData_ = objectData_;
        
        ResultOf_datadict_set_int {
            success,
            ret: (),
            objectData_
        }
    }
}

    fn native_dataarray_add_bool(&self, arrayData_: i32,
value_: bool) -> ResultOf_dataarray_add_bool {
    unsafe {
        let mut arrayData_ = Default::default();
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_bool(
            &mut arrayData_,
value_,
        );
        let arrayData_ = arrayData_;
        
        ResultOf_dataarray_add_bool {
            success,
            ret: (),
            arrayData_
        }
    }
}

    fn native_datafile_has_valid_file_data(&self, requestId_: i32) -> ResultOf_datafile_has_valid_file_data {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
        let success = sdk::natives::datafile_has_valid_file_data(
            &mut native_return,
requestId_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_has_valid_file_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_is_valid_request_id(&self, index_: i32) -> ResultOf_datafile_is_valid_request_id {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::datafile_is_valid_request_id(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_datafile_is_valid_request_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_remove(&self, entity_: u32,
propertyName_: Option<String>) -> ResultOf_decor_remove {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
        let success = sdk::natives::decor_remove(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_decor_remove {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_exist_on(&self, entity_: u32,
propertyName_: Option<String>) -> ResultOf_decor_exist_on {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
        let success = sdk::natives::decor_exist_on(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_decor_exist_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_int(&self, entity_: u32,
propertyName_: Option<String>,
value_: i32) -> ResultOf_decor_set_int {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_int(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOf_decor_set_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_float(&self, entity_: u32,
propertyName_: Option<String>,
value_: f32) -> ResultOf_decor_set_float {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_float(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOf_decor_set_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_is_registered_as_type(&self, propertyName_: Option<String>,
type_: i32) -> ResultOf_decor_is_registered_as_type {
    unsafe {
        let mut native_return = Default::default();
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut type_ = type_;
        let success = sdk::natives::decor_is_registered_as_type(
            &mut native_return,
propertyName_.as_ref().unwrap(),
type_,
        );
        let native_return = native_return;
        
        ResultOf_decor_is_registered_as_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_get_float(&self, entity_: u32,
propertyName_: Option<String>) -> ResultOf_decor_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
        let success = sdk::natives::decor_get_float(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_decor_get_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_bool(&self, entity_: u32,
propertyName_: Option<String>,
value_: bool) -> ResultOf_decor_set_bool {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_bool(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOf_decor_set_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_time(&self, entity_: u32,
propertyName_: Option<String>,
timestamp_: i32) -> ResultOf_decor_set_time {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut timestamp_ = timestamp_;
        let success = sdk::natives::decor_set_time(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
timestamp_,
        );
        let native_return = native_return;
        
        ResultOf_decor_set_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_register(&self, propertyName_: Option<String>,
type_: i32) -> ResultOf_decor_register {
    unsafe {
        let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut type_ = type_;
        let success = sdk::natives::decor_register(
            propertyName_.as_ref().unwrap(),
type_,
        );
        
        
        ResultOf_decor_register {
            success,
            ret: (),
            
        }
    }
}

    fn native_decor_get_int(&self, entity_: u32,
propertyName_: Option<String>) -> ResultOf_decor_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
        let success = sdk::natives::decor_get_int(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_decor_get_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_register_lock(&self, ) -> ResultOf_decor_register_lock {
    unsafe {
        
        let success = sdk::natives::decor_register_lock(
            
        );
        
        
        ResultOf_decor_register_lock {
            success,
            ret: (),
            
        }
    }
}

    fn native_decor_get_bool(&self, entity_: u32,
propertyName_: Option<String>) -> ResultOf_decor_get_bool {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
        let success = sdk::natives::decor_get_bool(
            &mut native_return,
entity_,
propertyName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_decor_get_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_on_enter_mp(&self, ) -> ResultOf_on_enter_mp {
    unsafe {
        
        let success = sdk::natives::on_enter_mp(
            
        );
        
        
        ResultOf_on_enter_mp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_loading_screen_active(&self, ) -> ResultOf_get_is_loading_screen_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_loading_screen_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_loading_screen_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_any_ccs_pending(&self, ) -> ResultOf_are_any_ccs_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_any_ccs_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_any_ccs_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cloud_requests_finished(&self, p0_: bool,
unused_: i32) -> ResultOf_has_cloud_requests_finished {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::has_cloud_requests_finished(
            &mut native_return,
&mut p0_,
unused_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_has_cloud_requests_finished {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_is_dlc_present(&self, dlcHash_: u32) -> ResultOf_is_dlc_present {
    unsafe {
        let mut native_return = Default::default();
let mut dlcHash_ = dlcHash_;
        let success = sdk::natives::is_dlc_present(
            &mut native_return,
dlcHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_dlc_present {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ever_had_bad_pack_order(&self, ) -> ResultOf_get_ever_had_bad_pack_order {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_ever_had_bad_pack_order(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_ever_had_bad_pack_order {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_extracontent_cloud_result(&self, ) -> ResultOf_get_extracontent_cloud_result {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_extracontent_cloud_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_extracontent_cloud_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dlc_check_compat_pack_configuration(&self, ) -> ResultOf_dlc_check_compat_pack_configuration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::dlc_check_compat_pack_configuration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_dlc_check_compat_pack_configuration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_initial_loading_screen_active(&self, ) -> ResultOf_get_is_initial_loading_screen_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_initial_loading_screen_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_initial_loading_screen_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_on_enter_sp(&self, ) -> ResultOf_on_enter_sp {
    unsafe {
        
        let success = sdk::natives::on_enter_sp(
            
        );
        
        
        ResultOf_on_enter_sp {
            success,
            ret: (),
            
        }
    }
}

    fn native_dlc_check_cloud_data_correct(&self, ) -> ResultOf_dlc_check_cloud_data_correct {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::dlc_check_cloud_data_correct(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_dlc_check_cloud_data_correct {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity_in_front(&self, entity1_: u32,
entity2_: u32) -> ResultOf_has_entity_clear_los_to_entity_in_front {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::has_entity_clear_los_to_entity_in_front(
            &mut native_return,
entity1_,
entity2_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_clear_los_to_entity_in_front {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_model_swap(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
originalModel_: u32,
newModel_: u32,
p6_: bool) -> ResultOf_remove_model_swap {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut originalModel_ = originalModel_;
let mut newModel_ = newModel_;
let mut p6_ = p6_;
        let success = sdk::natives::remove_model_swap(
            x_,
y_,
z_,
radius_,
originalModel_,
newModel_,
p6_,
        );
        
        
        ResultOf_remove_model_swap {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_index_from_entity_index(&self, entity_: u32) -> ResultOf_get_ped_index_from_entity_index {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_ped_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_index_from_entity_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_drawable(&self, entity_: u32) -> ResultOf_does_entity_have_drawable {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_drawable(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_have_drawable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_coords(&self, entity_: u32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool,
clearArea_: bool) -> ResultOf_set_entity_coords {
    unsafe {
        let mut entity_ = entity_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
let mut clearArea_ = clearArea_;
        let success = sdk::natives::set_entity_coords(
            entity_,
xPos_,
yPos_,
zPos_,
xAxis_,
yAxis_,
zAxis_,
clearArea_,
        );
        
        
        ResultOf_set_entity_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_anim_event_phase(&self, animDictionary_: Option<String>,
animName_: Option<String>,
p2_: Option<String>,
p3_: i32,
p4_: i32) -> ResultOf_find_anim_event_phase {
    unsafe {
        let mut native_return = Default::default();
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = Default::default();
let mut p4_ = Default::default();
        let success = sdk::natives::find_anim_event_phase(
            &mut native_return,
&mut p3_,
&mut p4_,
animDictionary_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = p3_;
let p4_ = p4_;
        
        ResultOf_find_anim_event_phase {
            success,
            ret: native_return,
            p3_,
p4_
        }
    }
}

    fn native_set_entity_records_collisions(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_records_collisions {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_records_collisions(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_records_collisions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_forward_vector(&self, entity_: u32) -> ResultOf_get_entity_forward_vector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_vector(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_forward_vector {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_mission_entity(&self, entity_: u32) -> ResultOf_is_entity_a_mission_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_mission_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_a_mission_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_load_collision_flag(&self, entity_: u32,
toggle_: bool,
p2_: i32) -> ResultOf_set_entity_load_collision_flag {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_load_collision_flag(
            entity_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_entity_load_collision_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_max_speed(&self, entity_: u32,
speed_: f32) -> ResultOf_set_entity_max_speed {
    unsafe {
        let mut entity_ = entity_;
let mut speed_ = speed_;
        let success = sdk::natives::set_entity_max_speed(
            entity_,
speed_,
        );
        
        
        ResultOf_set_entity_max_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_touching_model(&self, entity_: u32,
modelHash_: u32) -> ResultOf_is_entity_touching_model {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::is_entity_touching_model(
            &mut native_return,
entity_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_touching_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_synchronized_map_entity_anim(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: i32,
z2_: f32) -> ResultOf_stop_synchronized_map_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::stop_synchronized_map_entity_anim(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_stop_synchronized_map_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_static(&self, entity_: u32) -> ResultOf_is_entity_static {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_static(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_static {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_forced_object(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
modelHash_: u32,
p5_: bool) -> ResultOf_create_forced_object {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_forced_object(
            x_,
y_,
z_,
p3_,
modelHash_,
p5_,
        );
        
        
        ResultOf_create_forced_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_max_health(&self, entity_: u32) -> ResultOf_get_entity_max_health {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_max_health(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_max_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_max_health(&self, entity_: u32,
value_: i32) -> ResultOf_set_entity_max_health {
    unsafe {
        let mut entity_ = entity_;
let mut value_ = value_;
        let success = sdk::natives::set_entity_max_health(
            entity_,
value_,
        );
        
        
        ResultOf_set_entity_max_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_dynamic(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_dynamic {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_dynamic(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_dynamic {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_can_be_damaged(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_can_be_damaged {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_be_damaged(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_can_be_damaged {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_touching_entity(&self, entity_: u32,
targetEntity_: u32) -> ResultOf_is_entity_touching_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut targetEntity_ = targetEntity_;
        let success = sdk::natives::is_entity_touching_entity(
            &mut native_return,
entity_,
targetEntity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_touching_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_entity_in_world_coords(&self, entity_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32) -> ResultOf_get_offset_from_entity_in_world_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
        let success = sdk::natives::get_offset_from_entity_in_world_coords(
            native_return.pin_mut(),
entity_,
offsetX_,
offsetY_,
offsetZ_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_offset_from_entity_in_world_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_force_to_entity_center_of_mass(&self, entity_: u32,
forceType_: i32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool,
isDirectionRel_: bool,
isForceRel_: bool,
p8_: bool) -> ResultOf_apply_force_to_entity_center_of_mass {
    unsafe {
        let mut entity_ = entity_;
let mut forceType_ = forceType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut isDirectionRel_ = isDirectionRel_;
let mut isForceRel_ = isForceRel_;
let mut p8_ = p8_;
        let success = sdk::natives::apply_force_to_entity_center_of_mass(
            entity_,
forceType_,
x_,
y_,
z_,
p5_,
isDirectionRel_,
isForceRel_,
p8_,
        );
        
        
        ResultOf_apply_force_to_entity_center_of_mass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_use_max_distance_for_water_reflection(&self, entity_: u32,
p1_: bool) -> ResultOf_set_entity_use_max_distance_for_water_reflection {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_use_max_distance_for_water_reflection(
            entity_,
p1_,
        );
        
        
        ResultOf_set_entity_use_max_distance_for_water_reflection {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_collision(&self, entity_: u32,
toggle_: bool,
keepPhysics_: bool) -> ResultOf_set_entity_collision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut keepPhysics_ = keepPhysics_;
        let success = sdk::natives::set_entity_collision(
            entity_,
toggle_,
keepPhysics_,
        );
        
        
        ResultOf_set_entity_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_velocity(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_entity_velocity {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_entity_velocity(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_entity_velocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_upsidedown(&self, entity_: u32) -> ResultOf_is_entity_upsidedown {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_upsidedown(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_upsidedown {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_height_above_ground(&self, entity_: u32) -> ResultOf_get_entity_height_above_ground {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_height_above_ground(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_height_above_ground {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_playing_anim(&self, entity_: u32,
animDict_: Option<String>,
animName_: Option<String>,
taskFlag_: i32) -> ResultOf_is_entity_playing_anim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut taskFlag_ = taskFlag_;
        let success = sdk::natives::is_entity_playing_anim(
            &mut native_return,
entity_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
taskFlag_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_playing_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_of_type_attached_to_entity(&self, entity_: u32,
modelHash_: u32) -> ResultOf_get_entity_of_type_attached_to_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_entity_of_type_attached_to_entity(
            &mut native_return,
entity_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_of_type_attached_to_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_at_coord(&self, entity_: u32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xSize_: f32,
ySize_: f32,
zSize_: f32,
p7_: bool,
p8_: bool,
p9_: i32) -> ResultOf_is_entity_at_coord {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xSize_ = xSize_;
let mut ySize_ = ySize_;
let mut zSize_ = zSize_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::is_entity_at_coord(
            &mut native_return,
entity_,
xPos_,
yPos_,
zPos_,
xSize_,
ySize_,
zSize_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_at_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_anim_finished(&self, entity_: u32,
animDict_: Option<String>,
animName_: Option<String>,
p3_: i32) -> ResultOf_has_entity_anim_finished {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut p3_ = p3_;
        let success = sdk::natives::has_entity_anim_finished(
            &mut native_return,
entity_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_anim_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_rotation_velocity(&self, entity_: u32) -> ResultOf_get_entity_rotation_velocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_rotation_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_rotation_velocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_anim_director(&self, entity_: u32) -> ResultOf_does_entity_have_anim_director {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_anim_director(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_have_anim_director {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_entity_given_world_coords(&self, entity_: u32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_get_offset_from_entity_given_world_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::get_offset_from_entity_given_world_coords(
            native_return.pin_mut(),
entity_,
posX_,
posY_,
posZ_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_offset_from_entity_given_world_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_coords_no_offset(&self, entity_: u32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool) -> ResultOf_set_entity_coords_no_offset {
    unsafe {
        let mut entity_ = entity_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
        let success = sdk::natives::set_entity_coords_no_offset(
            entity_,
xPos_,
yPos_,
zPos_,
xAxis_,
yAxis_,
zAxis_,
        );
        
        
        ResultOf_set_entity_coords_no_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_no_longer_needed(&self, ped_: u32) -> ResultOf_set_ped_as_no_longer_needed {
    unsafe {
        let mut ped_ = Default::default();
        let success = sdk::natives::set_ped_as_no_longer_needed(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOf_set_ped_as_no_longer_needed {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_is_entity_attached_to_any_vehicle(&self, entity_: u32) -> ResultOf_is_entity_attached_to_any_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached_to_any_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_entity_anim(&self, entity_: u32,
animation_: Option<String>,
animGroup_: Option<String>,
p3_: f32) -> ResultOf_stop_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut animGroup_ = sdk_helpers::create_c_string_ptr(animGroup_);
let mut p3_ = p3_;
        let success = sdk::natives::stop_entity_anim(
            &mut native_return,
entity_,
animation_.as_ref().unwrap(),
animGroup_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOf_stop_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_anim_speed(&self, entity_: u32,
animDictionary_: Option<String>,
animName_: Option<String>,
speedMultiplier_: f32) -> ResultOf_set_entity_anim_speed {
    unsafe {
        let mut entity_ = entity_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut speedMultiplier_ = speedMultiplier_;
        let success = sdk::natives::set_entity_anim_speed(
            entity_,
animDictionary_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
speedMultiplier_,
        );
        
        
        ResultOf_set_entity_anim_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_motion_blur(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_motion_blur {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_motion_blur(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_motion_blur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_noweapondecals(&self, entity_: u32,
p1_: bool) -> ResultOf_set_entity_noweapondecals {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_noweapondecals(
            entity_,
p1_,
        );
        
        
        ResultOf_set_entity_noweapondecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_anim_current_time(&self, entity_: u32,
animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_get_entity_anim_current_time {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::get_entity_anim_current_time(
            &mut native_return,
entity_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_entity_anim_current_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_only_be_damaged_by_script_participants(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_can_only_be_damaged_by_script_participants {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_only_be_damaged_by_script_participants(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_can_only_be_damaged_by_script_participants {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_migrate_to_spectator(&self, entity_: u32,
p1_: i32) -> ResultOf_set_allow_migrate_to_spectator {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_allow_migrate_to_spectator(
            entity_,
p1_,
        );
        
        
        ResultOf_set_allow_migrate_to_spectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_invincible(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_invincible {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_invincible(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_invincible {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_should_freeze_waiting_on_collision(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_should_freeze_waiting_on_collision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_should_freeze_waiting_on_collision(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_should_freeze_waiting_on_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity_adjust_for_cover(&self, entity1_: u32,
entity2_: u32,
traceType_: i32) -> ResultOf_has_entity_clear_los_to_entity_adjust_for_cover {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut traceType_ = traceType_;
        let success = sdk::natives::has_entity_clear_los_to_entity_adjust_for_cover(
            &mut native_return,
entity1_,
entity2_,
traceType_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_clear_los_to_entity_adjust_for_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_model_hide_excluding_script_objects(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
p5_: bool) -> ResultOf_create_model_hide_excluding_script_objects {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_model_hide_excluding_script_objects(
            x_,
y_,
z_,
radius_,
modelHash_,
p5_,
        );
        
        
        ResultOf_create_model_hide_excluding_script_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_as_no_longer_needed(&self, object_: u32) -> ResultOf_set_object_as_no_longer_needed {
    unsafe {
        let mut object_ = Default::default();
        let success = sdk::natives::set_object_as_no_longer_needed(
            &mut object_,
        );
        let object_ = object_;
        
        ResultOf_set_object_as_no_longer_needed {
            success,
            ret: (),
            object_
        }
    }
}

    fn native_get_entity_coords(&self, entity_: u32,
alive_: bool) -> ResultOf_get_entity_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut alive_ = alive_;
        let success = sdk::natives::get_entity_coords(
            native_return.pin_mut(),
entity_,
alive_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_entity_ai_and_animation_update(&self, entity_: u32) -> ResultOf_force_entity_ai_and_animation_update {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::force_entity_ai_and_animation_update(
            entity_,
        );
        
        
        ResultOf_force_entity_ai_and_animation_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_lod_dist(&self, entity_: u32) -> ResultOf_get_entity_lod_dist {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_lod_dist(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_lod_dist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_freeze_entity_position(&self, entity_: u32,
toggle_: bool) -> ResultOf_freeze_entity_position {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::freeze_entity_position(
            entity_,
toggle_,
        );
        
        
        ResultOf_freeze_entity_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_synchronized_entity_anim(&self, entity_: u32,
p1_: f32,
p2_: bool) -> ResultOf_stop_synchronized_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::stop_synchronized_entity_anim(
            &mut native_return,
entity_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_stop_synchronized_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_anim_current_time(&self, entity_: u32,
animDictionary_: Option<String>,
animName_: Option<String>,
time_: f32) -> ResultOf_set_entity_anim_current_time {
    unsafe {
        let mut entity_ = entity_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut time_ = time_;
        let success = sdk::natives::set_entity_anim_current_time(
            entity_,
animDictionary_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
time_,
        );
        
        
        ResultOf_set_entity_anim_current_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_alpha(&self, entity_: u32,
alphaLevel_: i32,
skin_: bool) -> ResultOf_set_entity_alpha {
    unsafe {
        let mut entity_ = entity_;
let mut alphaLevel_ = alphaLevel_;
let mut skin_ = skin_;
        let success = sdk::natives::set_entity_alpha(
            entity_,
alphaLevel_,
skin_,
        );
        
        
        ResultOf_set_entity_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_world_position_of_entity_bone(&self, entity_: u32,
boneIndex_: i32) -> ResultOf_get_world_position_of_entity_bone {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::get_world_position_of_entity_bone(
            native_return.pin_mut(),
entity_,
boneIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_world_position_of_entity_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_postion(&self, entity_: u32,
boneIndex_: i32) -> ResultOf_get_entity_bone_postion {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::get_entity_bone_postion(
            native_return.pin_mut(),
entity_,
boneIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_bone_postion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_visible(&self, entity_: u32) -> ResultOf_is_entity_visible {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_visible(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_velocity(&self, entity_: u32) -> ResultOf_get_entity_velocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_velocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_attached_to(&self, entity_: u32) -> ResultOf_get_entity_attached_to {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_attached_to(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_attached_to {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_pickup_entity_glow(&self, entity_: u32) -> ResultOf_reset_pickup_entity_glow {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::reset_pickup_entity_glow(
            entity_,
        );
        
        
        ResultOf_reset_pickup_entity_glow {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_has_gravity(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_has_gravity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_has_gravity(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_has_gravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_index_from_entity_index(&self, entity_: u32) -> ResultOf_get_vehicle_index_from_entity_index {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_vehicle_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_index_from_entity_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_nearest_player_to_entity_on_team(&self, entity_: u32,
team_: i32) -> ResultOf_get_nearest_player_to_entity_on_team {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut team_ = team_;
        let success = sdk::natives::get_nearest_player_to_entity_on_team(
            &mut native_return,
entity_,
team_,
        );
        let native_return = native_return;
        
        ResultOf_get_nearest_player_to_entity_on_team {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_anim_total_time(&self, entity_: u32,
animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_get_entity_anim_total_time {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::get_entity_anim_total_time(
            &mut native_return,
entity_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_entity_anim_total_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_angled_area(&self, entity_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
debug_: bool,
includeZ_: bool,
p10_: i32) -> ResultOf_is_entity_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut debug_ = debug_;
let mut includeZ_ = includeZ_;
let mut p10_ = p10_;
        let success = sdk::natives::is_entity_in_angled_area(
            &mut native_return,
entity_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
debug_,
includeZ_,
p10_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_ped(&self, entity_: u32) -> ResultOf_is_entity_a_ped {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_a_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_upright(&self, entity_: u32,
angle_: f32) -> ResultOf_is_entity_upright {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut angle_ = angle_;
        let success = sdk::natives::is_entity_upright(
            &mut native_return,
entity_,
angle_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_upright {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_area(&self, entity_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p7_: bool,
p8_: bool,
p9_: i32) -> ResultOf_is_entity_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::is_entity_in_area(
            &mut native_return,
entity_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_trafficlight_override(&self, entity_: u32,
state_: i32) -> ResultOf_set_entity_trafficlight_override {
    unsafe {
        let mut entity_ = entity_;
let mut state_ = state_;
        let success = sdk::natives::set_entity_trafficlight_override(
            entity_,
state_,
        );
        
        
        ResultOf_set_entity_trafficlight_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_lod_dist(&self, entity_: u32,
value_: i32) -> ResultOf_set_entity_lod_dist {
    unsafe {
        let mut entity_ = entity_;
let mut value_ = value_;
        let success = sdk::natives::set_entity_lod_dist(
            entity_,
value_,
        );
        
        
        ResultOf_set_entity_lod_dist {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_alpha(&self, entity_: u32) -> ResultOf_get_entity_alpha {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_alpha(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_alpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_height(&self, entity_: u32,
X_: f32,
Y_: f32,
Z_: f32,
atTop_: bool,
inWorldCoords_: bool) -> ResultOf_get_entity_height {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut X_ = X_;
let mut Y_ = Y_;
let mut Z_ = Z_;
let mut atTop_ = atTop_;
let mut inWorldCoords_ = inWorldCoords_;
        let success = sdk::natives::get_entity_height(
            &mut native_return,
entity_,
X_,
Y_,
Z_,
atTop_,
inWorldCoords_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_height {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_sort_bias(&self, entity_: u32,
p1_: f32) -> ResultOf_set_entity_sort_bias {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_sort_bias(
            entity_,
p1_,
        );
        
        
        ResultOf_set_entity_sort_bias {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_material_hit_by_entity(&self, entity_: u32) -> ResultOf_get_last_material_hit_by_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_last_material_hit_by_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_last_material_hit_by_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_entity_bone_to_entity_bone(&self, entity1_: u32,
entity2_: u32,
boneIndex1_: i32,
boneIndex2_: i32,
p4_: bool,
p5_: bool) -> ResultOf_attach_entity_bone_to_entity_bone {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut boneIndex1_ = boneIndex1_;
let mut boneIndex2_ = boneIndex2_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_bone_to_entity_bone(
            entity1_,
entity2_,
boneIndex1_,
boneIndex2_,
p4_,
p5_,
        );
        
        
        ResultOf_attach_entity_bone_to_entity_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_dead(&self, entity_: u32,
p1_: bool) -> ResultOf_is_entity_dead {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::is_entity_dead(
            &mut native_return,
entity_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_dead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_ped(&self, entity_: u32) -> ResultOf_has_entity_been_damaged_by_any_ped {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_been_damaged_by_any_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_forced_object(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
modelHash_: u32) -> ResultOf_remove_forced_object {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::remove_forced_object(
            x_,
y_,
z_,
p3_,
modelHash_,
        );
        
        
        ResultOf_remove_forced_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_coords_without_plants_reset(&self, entity_: u32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
alive_: bool,
deadFlag_: bool,
ragdollFlag_: bool,
clearArea_: bool) -> ResultOf_set_entity_coords_without_plants_reset {
    unsafe {
        let mut entity_ = entity_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut alive_ = alive_;
let mut deadFlag_ = deadFlag_;
let mut ragdollFlag_ = ragdollFlag_;
let mut clearArea_ = clearArea_;
        let success = sdk::natives::set_entity_coords_without_plants_reset(
            entity_,
xPos_,
yPos_,
zPos_,
alive_,
deadFlag_,
ragdollFlag_,
clearArea_,
        );
        
        
        ResultOf_set_entity_coords_without_plants_reset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_as_no_longer_needed(&self, vehicle_: u32) -> ResultOf_set_vehicle_as_no_longer_needed {
    unsafe {
        let mut vehicle_ = Default::default();
        let success = sdk::natives::set_vehicle_as_no_longer_needed(
            &mut vehicle_,
        );
        let vehicle_ = vehicle_;
        
        ResultOf_set_vehicle_as_no_longer_needed {
            success,
            ret: (),
            vehicle_
        }
    }
}

    fn native_set_entity_cant_cause_collision_damaged_entity(&self, entity1_: u32,
entity2_: u32) -> ResultOf_set_entity_cant_cause_collision_damaged_entity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::set_entity_cant_cause_collision_damaged_entity(
            entity1_,
entity2_,
        );
        
        
        ResultOf_set_entity_cant_cause_collision_damaged_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_requires_more_expensive_river_check(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_requires_more_expensive_river_check {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_requires_more_expensive_river_check(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_requires_more_expensive_river_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_a_vehicle(&self, entity_: u32) -> ResultOf_is_entity_a_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_a_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_health(&self, entity_: u32,
health_: i32,
p2_: i32) -> ResultOf_set_entity_health {
    unsafe {
        let mut entity_ = entity_;
let mut health_ = health_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_health(
            entity_,
health_,
p2_,
        );
        
        
        ResultOf_set_entity_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_entity(&self, entity1_: u32,
entity2_: u32,
boneIndex_: i32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
p9_: bool,
useSoftPinning_: bool,
collision_: bool,
isPed_: bool,
vertexIndex_: i32,
fixedRot_: bool,
p15_: i32) -> ResultOf_attach_entity_to_entity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut boneIndex_ = boneIndex_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut p9_ = p9_;
let mut useSoftPinning_ = useSoftPinning_;
let mut collision_ = collision_;
let mut isPed_ = isPed_;
let mut vertexIndex_ = vertexIndex_;
let mut fixedRot_ = fixedRot_;
let mut p15_ = p15_;
        let success = sdk::natives::attach_entity_to_entity(
            entity1_,
entity2_,
boneIndex_,
xPos_,
yPos_,
zPos_,
xRot_,
yRot_,
zRot_,
p9_,
useSoftPinning_,
collision_,
isPed_,
vertexIndex_,
fixedRot_,
p15_,
        );
        
        
        ResultOf_attach_entity_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_entity_bullet_collision(&self, entity_: u32) -> ResultOf_enable_entity_bullet_collision {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::enable_entity_bullet_collision(
            entity_,
        );
        
        
        ResultOf_enable_entity_bullet_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_only_damaged_by_relationship_group(&self, entity_: u32,
p1_: bool,
p2_: i32) -> ResultOf_set_entity_only_damaged_by_relationship_group {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_only_damaged_by_relationship_group(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOf_set_entity_only_damaged_by_relationship_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nearest_player_to_entity(&self, entity_: u32) -> ResultOf_get_nearest_player_to_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_nearest_player_to_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_nearest_player_to_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_exist(&self, entity_: u32) -> ResultOf_does_entity_exist {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_exist(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_render_scorched(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_render_scorched {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_render_scorched(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_render_scorched {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_an_entity(&self, handle_: u32) -> ResultOf_is_an_entity {
    unsafe {
        let mut native_return = Default::default();
let mut handle_ = handle_;
        let success = sdk::natives::is_an_entity(
            &mut native_return,
handle_,
        );
        let native_return = native_return;
        
        ResultOf_is_an_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_at_entity(&self, entity1_: u32,
entity2_: u32,
xSize_: f32,
ySize_: f32,
zSize_: f32,
p5_: bool,
p6_: bool,
p7_: i32) -> ResultOf_is_entity_at_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut xSize_ = xSize_;
let mut ySize_ = ySize_;
let mut zSize_ = zSize_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::is_entity_at_entity(
            &mut native_return,
entity1_,
entity2_,
xSize_,
ySize_,
zSize_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_at_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_skeleton(&self, entity_: u32) -> ResultOf_does_entity_have_skeleton {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_skeleton(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_have_skeleton {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_quaternion(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
w_: f32) -> ResultOf_set_entity_quaternion {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut w_ = w_;
        let success = sdk::natives::set_entity_quaternion(
            entity_,
x_,
y_,
z_,
w_,
        );
        
        
        ResultOf_set_entity_quaternion {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_is_in_vehicle(&self, entity_: u32) -> ResultOf_set_entity_is_in_vehicle {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_is_in_vehicle(
            entity_,
        );
        
        
        ResultOf_set_entity_is_in_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_only_damaged_by_player(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_only_damaged_by_player {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_only_damaged_by_player(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_only_damaged_by_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_quaternion(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
w_: f32) -> ResultOf_get_entity_quaternion {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = Default::default();
let mut y_ = Default::default();
let mut z_ = Default::default();
let mut w_ = Default::default();
        let success = sdk::natives::get_entity_quaternion(
            &mut x_,
&mut y_,
&mut z_,
&mut w_,
entity_,
        );
        let x_ = x_;
let y_ = y_;
let z_ = z_;
let w_ = w_;
        
        ResultOf_get_entity_quaternion {
            success,
            ret: (),
            x_,
y_,
z_,
w_
        }
    }
}

    fn native_set_entity_lights(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_lights {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_lights(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_entity_anim(&self, entity_: u32,
animName_: Option<String>,
animDict_: Option<String>,
p3_: f32,
loop_: bool,
stayInAnim_: bool,
p6_: bool,
delta_: f32,
bitset_: i32) -> ResultOf_play_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut p3_ = p3_;
let mut loop_ = loop_;
let mut stayInAnim_ = stayInAnim_;
let mut p6_ = p6_;
let mut delta_ = delta_;
let mut bitset_ = bitset_;
        let success = sdk::natives::play_entity_anim(
            &mut native_return,
entity_,
animName_.as_ref().unwrap(),
animDict_.as_ref().unwrap(),
p3_,
loop_,
stayInAnim_,
p6_,
delta_,
bitset_,
        );
        let native_return = native_return;
        
        ResultOf_play_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_roll(&self, entity_: u32) -> ResultOf_get_entity_roll {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_roll(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_roll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_angular_velocity(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_entity_angular_velocity {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_entity_angular_velocity(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_entity_angular_velocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_heading_from_eulers(&self, entity_: u32) -> ResultOf_get_entity_heading_from_eulers {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_heading_from_eulers(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_heading_from_eulers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_rotation(&self, entity_: u32,
pitch_: f32,
roll_: f32,
yaw_: f32,
rotationOrder_: i32,
p5_: bool) -> ResultOf_set_entity_rotation {
    unsafe {
        let mut entity_ = entity_;
let mut pitch_ = pitch_;
let mut roll_ = roll_;
let mut yaw_ = yaw_;
let mut rotationOrder_ = rotationOrder_;
let mut p5_ = p5_;
        let success = sdk::natives::set_entity_rotation(
            entity_,
pitch_,
roll_,
yaw_,
rotationOrder_,
p5_,
        );
        
        
        ResultOf_set_entity_rotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_forward_y(&self, entity_: u32) -> ResultOf_get_entity_forward_y {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_y(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_forward_y {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_air(&self, entity_: u32) -> ResultOf_is_entity_in_air {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_air(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_air {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_model_hide(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
p5_: bool) -> ResultOf_create_model_hide {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_model_hide(
            x_,
y_,
z_,
radius_,
modelHash_,
p5_,
        );
        
        
        ResultOf_create_model_hide {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_type(&self, entity_: u32) -> ResultOf_get_entity_type {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_type(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_collided_with_anything(&self, entity_: u32) -> ResultOf_has_entity_collided_with_anything {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_collided_with_anything(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_collided_with_anything {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_forward_x(&self, entity_: u32) -> ResultOf_get_entity_forward_x {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_x(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_forward_x {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_an_object(&self, entity_: u32) -> ResultOf_is_entity_an_object {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_an_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_an_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_heading(&self, entity_: u32,
heading_: f32) -> ResultOf_set_entity_heading {
    unsafe {
        let mut entity_ = entity_;
let mut heading_ = heading_;
        let success = sdk::natives::set_entity_heading(
            entity_,
heading_,
        );
        
        
        ResultOf_set_entity_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_model_swap(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
originalModel_: u32,
newModel_: u32,
p6_: bool) -> ResultOf_create_model_swap {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut originalModel_ = originalModel_;
let mut newModel_ = newModel_;
let mut p6_ = p6_;
        let success = sdk::natives::create_model_swap(
            x_,
y_,
z_,
radius_,
originalModel_,
newModel_,
p6_,
        );
        
        
        ResultOf_create_model_swap {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_object(&self, entity_: u32) -> ResultOf_has_entity_been_damaged_by_any_object {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_been_damaged_by_any_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_upright_value(&self, entity_: u32) -> ResultOf_get_entity_upright_value {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_upright_value(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_upright_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_entity(&self, entity_: u32,
dynamic_: bool,
collision_: bool) -> ResultOf_detach_entity {
    unsafe {
        let mut entity_ = entity_;
let mut dynamic_ = dynamic_;
let mut collision_ = collision_;
        let success = sdk::natives::detach_entity(
            entity_,
dynamic_,
collision_,
        );
        
        
        ResultOf_detach_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_speed_vector(&self, entity_: u32,
relative_: bool) -> ResultOf_get_entity_speed_vector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut relative_ = relative_;
        let success = sdk::natives::get_entity_speed_vector(
            native_return.pin_mut(),
entity_,
relative_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_speed_vector {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_entity_alpha(&self, entity_: u32) -> ResultOf_reset_entity_alpha {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::reset_entity_alpha(
            entity_,
        );
        
        
        ResultOf_reset_entity_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_completely_disable_collision(&self, entity_: u32,
toggle_: bool,
keepPhysics_: bool) -> ResultOf_set_entity_completely_disable_collision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut keepPhysics_ = keepPhysics_;
        let success = sdk::natives::set_entity_completely_disable_collision(
            entity_,
toggle_,
keepPhysics_,
        );
        
        
        ResultOf_set_entity_completely_disable_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_model(&self, entity_: u32) -> ResultOf_get_entity_model {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_model(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_no_collision_entity(&self, entity1_: u32,
entity2_: u32,
thisFrameOnly_: bool) -> ResultOf_set_entity_no_collision_entity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut thisFrameOnly_ = thisFrameOnly_;
        let success = sdk::natives::set_entity_no_collision_entity(
            entity1_,
entity2_,
thisFrameOnly_,
        );
        
        
        ResultOf_set_entity_no_collision_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_script(&self, entity_: u32,
script_: u32) -> ResultOf_get_entity_script {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut entity_ = entity_;
let mut script_ = Default::default();
        let success = sdk::natives::get_entity_script(
            native_return.pin_mut(),
&mut script_,
entity_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let script_ = script_;
        
        ResultOf_get_entity_script {
            success,
            ret: native_return,
            script_
        }
    }
}

    fn native_clear_entity_last_damage_entity(&self, entity_: u32) -> ResultOf_clear_entity_last_damage_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_entity_last_damage_entity(
            entity_,
        );
        
        
        ResultOf_clear_entity_last_damage_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native__get_last_entity_hit_by_entity(&self, entity_: u32) -> ResultOf__get_last_entity_hit_by_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::_get_last_entity_hit_by_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf__get_last_entity_hit_by_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_climb_on_entity(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_can_climb_on_entity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_climb_on_entity(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_can_climb_on_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_always_prerender(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_always_prerender {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_always_prerender(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_always_prerender {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_as_mission_entity(&self, entity_: u32,
p1_: bool,
p2_: bool) -> ResultOf_set_entity_as_mission_entity {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_as_mission_entity(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOf_set_entity_as_mission_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_entity(&self, entity_: u32) -> ResultOf_delete_entity {
    unsafe {
        let mut entity_ = Default::default();
        let success = sdk::natives::delete_entity(
            &mut entity_,
        );
        let entity_ = entity_;
        
        ResultOf_delete_entity {
            success,
            ret: (),
            entity_
        }
    }
}

    fn native_get_entity_rotation(&self, entity_: u32,
rotationOrder_: i32) -> ResultOf_get_entity_rotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_entity_rotation(
            native_return.pin_mut(),
entity_,
rotationOrder_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_rotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_any_ped(&self, entity_: u32) -> ResultOf_is_entity_attached_to_any_ped {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached_to_any_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_only_be_damaged_by_entity(&self, entity1_: u32,
entity2_: u32) -> ResultOf_set_entity_can_only_be_damaged_by_entity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::set_entity_can_only_be_damaged_by_entity(
            entity1_,
entity2_,
        );
        
        
        ResultOf_set_entity_can_only_be_damaged_by_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_count(&self, entity_: u32) -> ResultOf_get_entity_bone_count {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_bone_count(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_bone_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached(&self, entity_: u32) -> ResultOf_is_entity_attached {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_zone(&self, entity_: u32,
zone_: Option<String>) -> ResultOf_is_entity_in_zone {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut zone_ = sdk_helpers::create_c_string_ptr(zone_);
        let success = sdk::natives::is_entity_in_zone(
            &mut native_return,
entity_,
zone_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_zone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_as_no_longer_needed(&self, entity_: u32) -> ResultOf_set_entity_as_no_longer_needed {
    unsafe {
        let mut entity_ = Default::default();
        let success = sdk::natives::set_entity_as_no_longer_needed(
            &mut entity_,
        );
        let entity_ = entity_;
        
        ResultOf_set_entity_as_no_longer_needed {
            success,
            ret: (),
            entity_
        }
    }
}

    fn native_play_synchronized_map_entity_anim(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: i32,
z2_: f32,
p6_: Option<String>,
p7_: Option<String>,
p8_: f32,
p9_: f32,
p10_: i32,
p11_: f32) -> ResultOf_play_synchronized_map_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = sdk_helpers::create_c_string_ptr(p7_);
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::play_synchronized_map_entity_anim(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_.as_ref().unwrap(),
p7_.as_ref().unwrap(),
p8_,
p9_,
p10_,
p11_,
        );
        let native_return = native_return;
        
        ResultOf_play_synchronized_map_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_object_rotation(&self, entity_: u32,
boneIndex_: i32) -> ResultOf_get_entity_bone_object_rotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::get_entity_bone_object_rotation(
            native_return.pin_mut(),
entity_,
boneIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_bone_object_rotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_proofs(&self, entity_: u32,
bulletProof_: bool,
fireProof_: bool,
explosionProof_: bool,
collisionProof_: bool,
meleeProof_: bool,
steamProof_: bool,
p7_: bool,
drownProof_: bool) -> ResultOf_get_entity_proofs {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut bulletProof_ = Default::default();
let mut fireProof_ = Default::default();
let mut explosionProof_ = Default::default();
let mut collisionProof_ = Default::default();
let mut meleeProof_ = Default::default();
let mut steamProof_ = Default::default();
let mut p7_ = Default::default();
let mut drownProof_ = Default::default();
        let success = sdk::natives::get_entity_proofs(
            &mut native_return,
&mut bulletProof_,
&mut fireProof_,
&mut explosionProof_,
&mut collisionProof_,
&mut meleeProof_,
&mut steamProof_,
&mut p7_,
&mut drownProof_,
entity_,
        );
        let native_return = native_return;
let bulletProof_ = bulletProof_;
let fireProof_ = fireProof_;
let explosionProof_ = explosionProof_;
let collisionProof_ = collisionProof_;
let meleeProof_ = meleeProof_;
let steamProof_ = steamProof_;
let p7_ = p7_;
let drownProof_ = drownProof_;
        
        ResultOf_get_entity_proofs {
            success,
            ret: native_return,
            bulletProof_,
fireProof_,
explosionProof_,
collisionProof_,
meleeProof_,
steamProof_,
p7_,
drownProof_
        }
    }
}

    fn native_set_entity_water_reflection_flag(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_water_reflection_flag {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_water_reflection_flag(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_water_reflection_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_entity_physically(&self, entity1_: u32,
entity2_: u32,
boneIndex1_: i32,
boneIndex2_: i32,
xPos1_: f32,
yPos1_: f32,
zPos1_: f32,
xPos2_: f32,
yPos2_: f32,
zPos2_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
breakForce_: f32,
fixedRot_: bool,
p15_: bool,
collision_: bool,
p17_: bool,
p18_: i32) -> ResultOf_attach_entity_to_entity_physically {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut boneIndex1_ = boneIndex1_;
let mut boneIndex2_ = boneIndex2_;
let mut xPos1_ = xPos1_;
let mut yPos1_ = yPos1_;
let mut zPos1_ = zPos1_;
let mut xPos2_ = xPos2_;
let mut yPos2_ = yPos2_;
let mut zPos2_ = zPos2_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut breakForce_ = breakForce_;
let mut fixedRot_ = fixedRot_;
let mut p15_ = p15_;
let mut collision_ = collision_;
let mut p17_ = p17_;
let mut p18_ = p18_;
        let success = sdk::natives::attach_entity_to_entity_physically(
            entity1_,
entity2_,
boneIndex1_,
boneIndex2_,
xPos1_,
yPos1_,
zPos1_,
xPos2_,
yPos2_,
zPos2_,
xRot_,
yRot_,
zRot_,
breakForce_,
fixedRot_,
p15_,
collision_,
p17_,
p18_,
        );
        
        
        ResultOf_attach_entity_to_entity_physically {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_force_to_entity(&self, entity_: u32,
forceFlags_: i32,
x_: f32,
y_: f32,
z_: f32,
offX_: f32,
offY_: f32,
offZ_: f32,
boneIndex_: i32,
isDirectionRel_: bool,
ignoreUpVec_: bool,
isForceRel_: bool,
p12_: bool,
p13_: bool) -> ResultOf_apply_force_to_entity {
    unsafe {
        let mut entity_ = entity_;
let mut forceFlags_ = forceFlags_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut offX_ = offX_;
let mut offY_ = offY_;
let mut offZ_ = offZ_;
let mut boneIndex_ = boneIndex_;
let mut isDirectionRel_ = isDirectionRel_;
let mut ignoreUpVec_ = ignoreUpVec_;
let mut isForceRel_ = isForceRel_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::apply_force_to_entity(
            entity_,
forceFlags_,
x_,
y_,
z_,
offX_,
offY_,
offZ_,
boneIndex_,
isDirectionRel_,
ignoreUpVec_,
isForceRel_,
p12_,
p13_,
        );
        
        
        ResultOf_apply_force_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_entity_anim(&self, entity_: u32,
syncedScene_: i32,
animation_: Option<String>,
propName_: Option<String>,
p4_: f32,
p5_: f32,
p6_: i32,
p7_: f32) -> ResultOf_play_synchronized_entity_anim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut syncedScene_ = syncedScene_;
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut propName_ = sdk_helpers::create_c_string_ptr(propName_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::play_synchronized_entity_anim(
            &mut native_return,
entity_,
syncedScene_,
animation_.as_ref().unwrap(),
propName_.as_ref().unwrap(),
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_play_synchronized_entity_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_entity(&self, entity1_: u32,
entity2_: u32,
p2_: bool) -> ResultOf_has_entity_been_damaged_by_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut p2_ = p2_;
        let success = sdk::natives::has_entity_been_damaged_by_entity(
            &mut native_return,
entity1_,
entity2_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_been_damaged_by_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_collision_disabled(&self, entity_: u32) -> ResultOf_get_entity_collision_disabled {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_collision_disabled(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_collision_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_rotation(&self, entity_: u32,
boneIndex_: i32) -> ResultOf_get_entity_bone_rotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::get_entity_bone_rotation(
            native_return.pin_mut(),
entity_,
boneIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_bone_rotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_collides_with_projectiles(&self, p0_: i32,
p1_: i32) -> ResultOf_set_pickup_collides_with_projectiles {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_pickup_collides_with_projectiles(
            p0_,
p1_,
        );
        
        
        ResultOf_set_pickup_collides_with_projectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_object_postion(&self, entity_: u32,
boneIndex_: i32) -> ResultOf_get_entity_bone_object_postion {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::get_entity_bone_object_postion(
            native_return.pin_mut(),
entity_,
boneIndex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entity_bone_object_postion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_any_object(&self, entity_: u32) -> ResultOf_is_entity_attached_to_any_object {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached_to_any_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_water(&self, entity_: u32) -> ResultOf_is_entity_in_water {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_water(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_water {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_waiting_for_world_collision(&self, entity_: u32) -> ResultOf_is_entity_waiting_for_world_collision {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_waiting_for_world_collision(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_waiting_for_world_collision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_be_targeted_without_los(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_can_be_targeted_without_los {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_be_targeted_without_los(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_can_be_targeted_without_los {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_pitch(&self, entity_: u32) -> ResultOf_get_entity_pitch {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_pitch(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_pitch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_speed(&self, entity_: u32) -> ResultOf_get_entity_speed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_speed(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_visible_to_script(&self, entity_: u32) -> ResultOf_is_entity_visible_to_script {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_visible_to_script(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_visible_to_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pick_up_by_cargobob_disabled(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_pick_up_by_cargobob_disabled {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pick_up_by_cargobob_disabled(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_pick_up_by_cargobob_disabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_index_from_entity_index(&self, entity_: u32) -> ResultOf_get_object_index_from_entity_index {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_object_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_object_index_from_entity_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_can_be_damaged(&self, entity_: u32) -> ResultOf_get_entity_can_be_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_can_be_damaged(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_can_be_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_model_hide(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
p5_: bool) -> ResultOf_remove_model_hide {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::remove_model_hide(
            x_,
y_,
z_,
radius_,
modelHash_,
p5_,
        );
        
        
        ResultOf_remove_model_hide {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_entity_have_physics(&self, entity_: u32) -> ResultOf_does_entity_have_physics {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_physics(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_have_physics {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wait_for_collisions_before_probe(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_wait_for_collisions_before_probe {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_wait_for_collisions_before_probe(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_wait_for_collisions_before_probe {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_entity_belong_to_this_script(&self, entity_: u32,
p1_: bool) -> ResultOf_does_entity_belong_to_this_script {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::does_entity_belong_to_this_script(
            &mut native_return,
entity_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_does_entity_belong_to_this_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_vehicle(&self, entity_: u32) -> ResultOf_has_entity_been_damaged_by_any_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_been_damaged_by_any_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_auto_vault_on_entity(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_can_auto_vault_on_entity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_auto_vault_on_entity(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_can_auto_vault_on_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_can_be_damaged_by_relationship_group(&self, entity_: u32,
bCanBeDamaged_: bool,
relGroup_: i32) -> ResultOf_set_entity_can_be_damaged_by_relationship_group {
    unsafe {
        let mut entity_ = entity_;
let mut bCanBeDamaged_ = bCanBeDamaged_;
let mut relGroup_ = relGroup_;
        let success = sdk::natives::set_entity_can_be_damaged_by_relationship_group(
            entity_,
bCanBeDamaged_,
relGroup_,
        );
        
        
        ResultOf_set_entity_can_be_damaged_by_relationship_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_occluded(&self, entity_: u32) -> ResultOf_is_entity_occluded {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_occluded(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_occluded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_collision_normal_of_last_hit_for_entity(&self, entity_: u32) -> ResultOf_get_collision_normal_of_last_hit_for_entity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_collision_normal_of_last_hit_for_entity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_collision_normal_of_last_hit_for_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_on_screen(&self, entity_: u32) -> ResultOf_is_entity_on_screen {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_on_screen(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_on_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_mirror_reflection_flag(&self, entity_: u32,
p1_: bool) -> ResultOf_set_entity_mirror_reflection_flag {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_mirror_reflection_flag(
            entity_,
p1_,
        );
        
        
        ResultOf_set_entity_mirror_reflection_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_submerged_level(&self, entity_: u32) -> ResultOf_get_entity_submerged_level {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_submerged_level(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_submerged_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_heading(&self, entity_: u32) -> ResultOf_get_entity_heading {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_heading(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_heading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_collision_loaded_around_entity(&self, entity_: u32) -> ResultOf_has_collision_loaded_around_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_collision_loaded_around_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_has_collision_loaded_around_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_is_target_priority(&self, entity_: u32,
p1_: bool,
p2_: f32) -> ResultOf_set_entity_is_target_priority {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_is_target_priority(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOf_set_entity_is_target_priority {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_visible(&self, entity_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_set_entity_visible {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_visible(
            entity_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_entity_visible {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_anim_event_fired(&self, entity_: u32,
actionHash_: u32) -> ResultOf_has_anim_event_fired {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut actionHash_ = actionHash_;
        let success = sdk::natives::has_anim_event_fired(
            &mut native_return,
entity_,
actionHash_,
        );
        let native_return = native_return;
        
        ResultOf_has_anim_event_fired {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_matrix(&self, entity_: u32,
forwardVector_: Option<shared::Vector3>,
rightVector_: Option<shared::Vector3>,
upVector_: Option<shared::Vector3>,
position_: Option<shared::Vector3>) -> ResultOf_get_entity_matrix {
    unsafe {
        let mut entity_ = entity_;
let mut forwardVector_ = sdk_helpers::create_vector3_ptr(forwardVector_);
let mut rightVector_ = sdk_helpers::create_vector3_ptr(rightVector_);
let mut upVector_ = sdk_helpers::create_vector3_ptr(upVector_);
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
        let success = sdk::natives::get_entity_matrix(
            forwardVector_.pin_mut(),
rightVector_.pin_mut(),
upVector_.pin_mut(),
position_.pin_mut(),
entity_,
        );
        let forwardVector_ = sdk_helpers::read_cpp_vector3(forwardVector_);
let rightVector_ = sdk_helpers::read_cpp_vector3(rightVector_);
let upVector_ = sdk_helpers::read_cpp_vector3(upVector_);
let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOf_get_entity_matrix {
            success,
            ret: (),
            forwardVector_,
rightVector_,
upVector_,
position_
        }
    }
}

    fn native_would_entity_be_occluded(&self, entityModelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool) -> ResultOf_would_entity_be_occluded {
    unsafe {
        let mut native_return = Default::default();
let mut entityModelHash_ = entityModelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::would_entity_be_occluded(
            &mut native_return,
entityModelHash_,
x_,
y_,
z_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_would_entity_be_occluded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_health(&self, entity_: u32) -> ResultOf_get_entity_health {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_health(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_entity(&self, from_: u32,
to_: u32) -> ResultOf_is_entity_attached_to_entity {
    unsafe {
        let mut native_return = Default::default();
let mut from_ = from_;
let mut to_ = to_;
        let success = sdk::natives::is_entity_attached_to_entity(
            &mut native_return,
from_,
to_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached_to_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_process_entity_attachments(&self, entity_: u32) -> ResultOf_process_entity_attachments {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::process_entity_attachments(
            entity_,
        );
        
        
        ResultOf_process_entity_attachments {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_population_type(&self, entity_: u32) -> ResultOf_get_entity_population_type {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_population_type(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_population_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_proofs(&self, entity_: u32,
bulletProof_: bool,
fireProof_: bool,
explosionProof_: bool,
collisionProof_: bool,
meleeProof_: bool,
steamProof_: bool,
p7_: bool,
waterProof_: bool) -> ResultOf_set_entity_proofs {
    unsafe {
        let mut entity_ = entity_;
let mut bulletProof_ = bulletProof_;
let mut fireProof_ = fireProof_;
let mut explosionProof_ = explosionProof_;
let mut collisionProof_ = collisionProof_;
let mut meleeProof_ = meleeProof_;
let mut steamProof_ = steamProof_;
let mut p7_ = p7_;
let mut waterProof_ = waterProof_;
        let success = sdk::natives::set_entity_proofs(
            entity_,
bulletProof_,
fireProof_,
explosionProof_,
collisionProof_,
meleeProof_,
steamProof_,
p7_,
waterProof_,
        );
        
        
        ResultOf_set_entity_proofs {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_index_by_name(&self, entity_: u32,
boneName_: Option<String>) -> ResultOf_get_entity_bone_index_by_name {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut boneName_ = sdk_helpers::create_c_string_ptr(boneName_);
        let success = sdk::natives::get_entity_bone_index_by_name(
            &mut native_return,
entity_,
boneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_entity_bone_index_by_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity(&self, entity1_: u32,
entity2_: u32,
traceType_: i32) -> ResultOf_has_entity_clear_los_to_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut traceType_ = traceType_;
        let success = sdk::natives::has_entity_clear_los_to_entity(
            &mut native_return,
entity1_,
entity2_,
traceType_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_clear_los_to_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_entity_bone_to_entity_bone_y_forward(&self, entity1_: u32,
entity2_: u32,
boneIndex1_: i32,
boneIndex2_: i32,
p4_: bool,
p5_: bool) -> ResultOf_attach_entity_bone_to_entity_bone_y_forward {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut boneIndex1_ = boneIndex1_;
let mut boneIndex2_ = boneIndex2_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_bone_to_entity_bone_y_forward(
            entity1_,
entity2_,
boneIndex1_,
boneIndex2_,
p4_,
p5_,
        );
        
        
        ResultOf_attach_entity_bone_to_entity_bone_y_forward {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_duration(&self, animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_get_anim_duration {
    unsafe {
        let mut native_return = Default::default();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::get_anim_duration(
            &mut native_return,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_anim_duration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_shocking_event_in_sphere(&self, eventType_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_shocking_event_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut eventType_ = eventType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_shocking_event_in_sphere(
            &mut native_return,
eventType_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_shocking_event_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_shocking_event(&self, event_: u32) -> ResultOf_remove_shocking_event {
    unsafe {
        let mut native_return = Default::default();
let mut event_ = event_;
        let success = sdk::natives::remove_shocking_event(
            &mut native_return,
event_,
        );
        let native_return = native_return;
        
        ResultOf_remove_shocking_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_shocking_events_next_frame(&self, ) -> ResultOf_suppress_shocking_events_next_frame {
    unsafe {
        
        let success = sdk::natives::suppress_shocking_events_next_frame(
            
        );
        
        
        ResultOf_suppress_shocking_events_next_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_shocking_event_spawn_blocking_areas(&self, ) -> ResultOf_remove_shocking_event_spawn_blocking_areas {
    unsafe {
        
        let success = sdk::natives::remove_shocking_event_spawn_blocking_areas(
            
        );
        
        
        ResultOf_remove_shocking_event_spawn_blocking_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_shocking_event_type_next_frame(&self, eventType_: i32) -> ResultOf_suppress_shocking_event_type_next_frame {
    unsafe {
        let mut eventType_ = eventType_;
        let success = sdk::natives::suppress_shocking_event_type_next_frame(
            eventType_,
        );
        
        
        ResultOf_suppress_shocking_event_type_next_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_decision_maker_event_response(&self, name_: u32,
eventType_: i32) -> ResultOf_clear_decision_maker_event_response {
    unsafe {
        let mut name_ = name_;
let mut eventType_ = eventType_;
        let success = sdk::natives::clear_decision_maker_event_response(
            name_,
eventType_,
        );
        
        
        ResultOf_clear_decision_maker_event_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_agitation_events_next_frame(&self, ) -> ResultOf_suppress_agitation_events_next_frame {
    unsafe {
        
        let success = sdk::natives::suppress_agitation_events_next_frame(
            
        );
        
        
        ResultOf_suppress_agitation_events_next_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_shocking_event_for_entity(&self, eventType_: i32,
entity_: u32,
duration_: f32) -> ResultOf_add_shocking_event_for_entity {
    unsafe {
        let mut native_return = Default::default();
let mut eventType_ = eventType_;
let mut entity_ = entity_;
let mut duration_ = duration_;
        let success = sdk::natives::add_shocking_event_for_entity(
            &mut native_return,
eventType_,
entity_,
duration_,
        );
        let native_return = native_return;
        
        ResultOf_add_shocking_event_for_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_decision_maker(&self, ped_: u32,
name_: u32) -> ResultOf_set_decision_maker {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = name_;
        let success = sdk::natives::set_decision_maker(
            ped_,
name_,
        );
        
        
        ResultOf_set_decision_maker {
            success,
            ret: (),
            
        }
    }
}

    fn native_unblock_decision_maker_event(&self, name_: u32,
eventType_: i32) -> ResultOf_unblock_decision_maker_event {
    unsafe {
        let mut name_ = name_;
let mut eventType_ = eventType_;
        let success = sdk::natives::unblock_decision_maker_event(
            name_,
eventType_,
        );
        
        
        ResultOf_unblock_decision_maker_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_shocking_event_at_position(&self, eventType_: i32,
x_: f32,
y_: f32,
z_: f32,
duration_: f32) -> ResultOf_add_shocking_event_at_position {
    unsafe {
        let mut native_return = Default::default();
let mut eventType_ = eventType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
        let success = sdk::natives::add_shocking_event_at_position(
            &mut native_return,
eventType_,
x_,
y_,
z_,
duration_,
        );
        let native_return = native_return;
        
        ResultOf_add_shocking_event_at_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_decision_maker_event(&self, name_: u32,
eventType_: i32) -> ResultOf_block_decision_maker_event {
    unsafe {
        let mut name_ = name_;
let mut eventType_ = eventType_;
        let success = sdk::natives::block_decision_maker_event(
            name_,
eventType_,
        );
        
        
        ResultOf_block_decision_maker_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_shocking_events(&self, p0_: bool) -> ResultOf_remove_all_shocking_events {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_all_shocking_events(
            p0_,
        );
        
        
        ResultOf_remove_all_shocking_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_shop_ped_apparel_forced_prop_count(&self, componentHash_: u32) -> ResultOf_get_shop_ped_apparel_forced_prop_count {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_shop_ped_apparel_forced_prop_count(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_apparel_forced_prop_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_name_for_component(&self, entity_: u32,
componentId_: i32,
drawableVariant_: i32,
textureVariant_: i32) -> ResultOf_get_hash_name_for_component {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut componentId_ = componentId_;
let mut drawableVariant_ = drawableVariant_;
let mut textureVariant_ = textureVariant_;
        let success = sdk::natives::get_hash_name_for_component(
            &mut native_return,
entity_,
componentId_,
drawableVariant_,
textureVariant_,
        );
        let native_return = native_return;
        
        ResultOf_get_hash_name_for_component {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_dlc_vehicle_mod(&self, hash_: u32) -> ResultOf_is_dlc_vehicle_mod {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::is_dlc_vehicle_mod(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_is_dlc_vehicle_mod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_locate(&self, p0_: i32) -> ResultOf_get_shop_ped_outfit_locate {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_shop_ped_outfit_locate(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_outfit_locate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tattoo_shop_dlc_item_index(&self, overlayHash_: u32,
p1_: i32,
character_: i32) -> ResultOf_get_tattoo_shop_dlc_item_index {
    unsafe {
        let mut native_return = Default::default();
let mut overlayHash_ = overlayHash_;
let mut p1_ = p1_;
let mut character_ = character_;
        let success = sdk::natives::get_tattoo_shop_dlc_item_index(
            &mut native_return,
overlayHash_,
p1_,
character_,
        );
        let native_return = native_return;
        
        ResultOf_get_tattoo_shop_dlc_item_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_component_variant(&self, outfitHash_: u32,
unkVariantIndex_: i32,
outComponentVariant_: i32) -> ResultOf_get_shop_ped_outfit_component_variant {
    unsafe {
        let mut native_return = Default::default();
let mut outfitHash_ = outfitHash_;
let mut unkVariantIndex_ = unkVariantIndex_;
let mut outComponentVariant_ = Default::default();
        let success = sdk::natives::get_shop_ped_outfit_component_variant(
            &mut native_return,
&mut outComponentVariant_,
outfitHash_,
unkVariantIndex_,
        );
        let native_return = native_return;
let outComponentVariant_ = outComponentVariant_;
        
        ResultOf_get_shop_ped_outfit_component_variant {
            success,
            ret: native_return,
            outComponentVariant_
        }
    }
}

    fn native_init_shop_ped_component(&self, outComponent_: i32) -> ResultOf_init_shop_ped_component {
    unsafe {
        let mut outComponent_ = Default::default();
        let success = sdk::natives::init_shop_ped_component(
            &mut outComponent_,
        );
        let outComponent_ = outComponent_;
        
        ResultOf_init_shop_ped_component {
            success,
            ret: (),
            outComponent_
        }
    }
}

    fn native_get_shop_ped_query_component(&self, componentId_: i32,
outComponent_: i32) -> ResultOf_get_shop_ped_query_component {
    unsafe {
        let mut componentId_ = componentId_;
let mut outComponent_ = Default::default();
        let success = sdk::natives::get_shop_ped_query_component(
            &mut outComponent_,
componentId_,
        );
        let outComponent_ = outComponent_;
        
        ResultOf_get_shop_ped_query_component {
            success,
            ret: (),
            outComponent_
        }
    }
}

    fn native_get_num_tattoo_shop_dlc_items(&self, character_: i32) -> ResultOf_get_num_tattoo_shop_dlc_items {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
        let success = sdk::natives::get_num_tattoo_shop_dlc_items(
            &mut native_return,
character_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_tattoo_shop_dlc_items {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_data_sp(&self, dlcWeaponIndex_: i32,
outData_: i32) -> ResultOf_get_dlc_weapon_data_sp {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_dlc_weapon_data_sp(
            &mut native_return,
&mut outData_,
dlcWeaponIndex_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_dlc_weapon_data_sp {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_get_dlc_weapon_component_data_sp(&self, dlcWeaponIndex_: i32,
dlcWeapCompIndex_: i32,
ComponentDataPtr_: i32) -> ResultOf_get_dlc_weapon_component_data_sp {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
let mut dlcWeapCompIndex_ = dlcWeapCompIndex_;
let mut ComponentDataPtr_ = Default::default();
        let success = sdk::natives::get_dlc_weapon_component_data_sp(
            &mut native_return,
&mut ComponentDataPtr_,
dlcWeaponIndex_,
dlcWeapCompIndex_,
        );
        let native_return = native_return;
let ComponentDataPtr_ = ComponentDataPtr_;
        
        ResultOf_get_dlc_weapon_component_data_sp {
            success,
            ret: native_return,
            ComponentDataPtr_
        }
    }
}

    fn native_get_dlc_vehicle_data(&self, dlcVehicleIndex_: i32,
outData_: i32) -> ResultOf_get_dlc_vehicle_data {
    unsafe {
        let mut native_return = Default::default();
let mut dlcVehicleIndex_ = dlcVehicleIndex_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_dlc_vehicle_data(
            &mut native_return,
&mut outData_,
dlcVehicleIndex_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_dlc_vehicle_data {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_does_shop_ped_apparel_have_restriction_tag(&self, componentHash_: u32,
restrictionTagHash_: u32,
componentId_: i32) -> ResultOf_does_shop_ped_apparel_have_restriction_tag {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
let mut restrictionTagHash_ = restrictionTagHash_;
let mut componentId_ = componentId_;
        let success = sdk::natives::does_shop_ped_apparel_have_restriction_tag(
            &mut native_return,
componentHash_,
restrictionTagHash_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_does_shop_ped_apparel_have_restriction_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_revert_content_changeset_group_for_all(&self, hash_: u32) -> ResultOf_revert_content_changeset_group_for_all {
    unsafe {
        let mut hash_ = hash_;
        let success = sdk::natives::revert_content_changeset_group_for_all(
            hash_,
        );
        
        
        ResultOf_revert_content_changeset_group_for_all {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_dlc_weapon_components(&self, dlcWeaponIndex_: i32) -> ResultOf_get_num_dlc_weapon_components {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
        let success = sdk::natives::get_num_dlc_weapon_components(
            &mut native_return,
dlcWeaponIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_dlc_weapon_components {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_weapons_sp(&self, ) -> ResultOf_get_num_dlc_weapons_sp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_weapons_sp(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_dlc_weapons_sp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_apparel_query(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_setup_shop_ped_apparel_query {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::setup_shop_ped_apparel_query(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_setup_shop_ped_apparel_query {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_vehicle_flags(&self, dlcVehicleIndex_: i32) -> ResultOf_get_dlc_vehicle_flags {
    unsafe {
        let mut native_return = Default::default();
let mut dlcVehicleIndex_ = dlcVehicleIndex_;
        let success = sdk::natives::get_dlc_vehicle_flags(
            &mut native_return,
dlcVehicleIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_dlc_vehicle_flags {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_prop(&self, componentHash_: u32,
outProp_: i32) -> ResultOf_get_shop_ped_prop {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut outProp_ = Default::default();
        let success = sdk::natives::get_shop_ped_prop(
            &mut outProp_,
componentHash_,
        );
        let outProp_ = outProp_;
        
        ResultOf_get_shop_ped_prop {
            success,
            ret: (),
            outProp_
        }
    }
}

    fn native_get_hash_name_for_prop(&self, entity_: u32,
componentId_: i32,
propIndex_: i32,
propTextureIndex_: i32) -> ResultOf_get_hash_name_for_prop {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut componentId_ = componentId_;
let mut propIndex_ = propIndex_;
let mut propTextureIndex_ = propTextureIndex_;
        let success = sdk::natives::get_hash_name_for_prop(
            &mut native_return,
entity_,
componentId_,
propIndex_,
propTextureIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_hash_name_for_prop {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_execute_content_changeset_group_for_all(&self, hash_: u32) -> ResultOf_execute_content_changeset_group_for_all {
    unsafe {
        let mut hash_ = hash_;
        let success = sdk::natives::execute_content_changeset_group_for_all(
            hash_,
        );
        
        
        ResultOf_execute_content_changeset_group_for_all {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_forced_component(&self, componentHash_: u32,
forcedComponentIndex_: i32,
nameHash_: u32,
enumValue_: i32,
componentType_: i32) -> ResultOf_get_forced_component {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut forcedComponentIndex_ = forcedComponentIndex_;
let mut nameHash_ = Default::default();
let mut enumValue_ = Default::default();
let mut componentType_ = Default::default();
        let success = sdk::natives::get_forced_component(
            &mut nameHash_,
&mut enumValue_,
&mut componentType_,
componentHash_,
forcedComponentIndex_,
        );
        let nameHash_ = nameHash_;
let enumValue_ = enumValue_;
let componentType_ = componentType_;
        
        ResultOf_get_forced_component {
            success,
            ret: (),
            nameHash_,
enumValue_,
componentType_
        }
    }
}

    fn native_get_shop_ped_query_prop_index(&self, componentHash_: u32) -> ResultOf_get_shop_ped_query_prop_index {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_shop_ped_query_prop_index(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_query_prop_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_component_data(&self, dlcWeaponIndex_: i32,
dlcWeapCompIndex_: i32,
ComponentDataPtr_: i32) -> ResultOf_get_dlc_weapon_component_data {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
let mut dlcWeapCompIndex_ = dlcWeapCompIndex_;
let mut ComponentDataPtr_ = Default::default();
        let success = sdk::natives::get_dlc_weapon_component_data(
            &mut native_return,
&mut ComponentDataPtr_,
dlcWeaponIndex_,
dlcWeapCompIndex_,
        );
        let native_return = native_return;
let ComponentDataPtr_ = ComponentDataPtr_;
        
        ResultOf_get_dlc_weapon_component_data {
            success,
            ret: native_return,
            ComponentDataPtr_
        }
    }
}

    fn native_get_shop_ped_query_outfit(&self, outfitIndex_: i32,
outfit_: i32) -> ResultOf_get_shop_ped_query_outfit {
    unsafe {
        let mut outfitIndex_ = outfitIndex_;
let mut outfit_ = Default::default();
        let success = sdk::natives::get_shop_ped_query_outfit(
            &mut outfit_,
outfitIndex_,
        );
        let outfit_ = outfit_;
        
        ResultOf_get_shop_ped_query_outfit {
            success,
            ret: (),
            outfit_
        }
    }
}

    fn native_get_variant_component(&self, componentHash_: u32,
unkVariantComponentIndex_: i32,
nameHash_: u32,
enumValue_: i32,
componentType_: i32) -> ResultOf_get_variant_component {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut unkVariantComponentIndex_ = unkVariantComponentIndex_;
let mut nameHash_ = Default::default();
let mut enumValue_ = Default::default();
let mut componentType_ = Default::default();
        let success = sdk::natives::get_variant_component(
            &mut nameHash_,
&mut enumValue_,
&mut componentType_,
componentHash_,
unkVariantComponentIndex_,
        );
        let nameHash_ = nameHash_;
let enumValue_ = enumValue_;
let componentType_ = componentType_;
        
        ResultOf_get_variant_component {
            success,
            ret: (),
            nameHash_,
enumValue_,
componentType_
        }
    }
}

    fn native_get_shop_ped_component(&self, componentHash_: u32,
outComponent_: i32) -> ResultOf_get_shop_ped_component {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut outComponent_ = Default::default();
        let success = sdk::natives::get_shop_ped_component(
            &mut outComponent_,
componentHash_,
        );
        let outComponent_ = outComponent_;
        
        ResultOf_get_shop_ped_component {
            success,
            ret: (),
            outComponent_
        }
    }
}

    fn native_does_current_ped_component_have_restriction_tag(&self, ped_: u32,
componentId_: i32,
restrictionTagHash_: u32) -> ResultOf_does_current_ped_component_have_restriction_tag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut restrictionTagHash_ = restrictionTagHash_;
        let success = sdk::natives::does_current_ped_component_have_restriction_tag(
            &mut native_return,
ped_,
componentId_,
restrictionTagHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_current_ped_component_have_restriction_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_data(&self, dlcWeaponIndex_: i32,
outData_: i32) -> ResultOf_get_dlc_weapon_data {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_dlc_weapon_data(
            &mut native_return,
&mut outData_,
dlcWeaponIndex_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_dlc_weapon_data {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_get_shop_ped_query_component_index(&self, componentHash_: u32) -> ResultOf_get_shop_ped_query_component_index {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_shop_ped_query_component_index(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_query_component_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_apparel_query_tu(&self, character_: i32,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: i32,
componentId_: i32) -> ResultOf_setup_shop_ped_apparel_query_tu {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut componentId_ = componentId_;
        let success = sdk::natives::setup_shop_ped_apparel_query_tu(
            &mut native_return,
character_,
p1_,
p2_,
p3_,
p4_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_setup_shop_ped_apparel_query_tu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_vehicles(&self, ) -> ResultOf_get_num_dlc_vehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_dlc_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_prop_variant(&self, outfitHash_: u32,
unkVariantIndex_: i32,
outPropVariant_: i32) -> ResultOf_get_shop_ped_outfit_prop_variant {
    unsafe {
        let mut native_return = Default::default();
let mut outfitHash_ = outfitHash_;
let mut unkVariantIndex_ = unkVariantIndex_;
let mut outPropVariant_ = Default::default();
        let success = sdk::natives::get_shop_ped_outfit_prop_variant(
            &mut native_return,
&mut outPropVariant_,
outfitHash_,
unkVariantIndex_,
        );
        let native_return = native_return;
let outPropVariant_ = outPropVariant_;
        
        ResultOf_get_shop_ped_outfit_prop_variant {
            success,
            ret: native_return,
            outPropVariant_
        }
    }
}

    fn native_get_num_dlc_weapon_components_sp(&self, dlcWeaponIndex_: i32) -> ResultOf_get_num_dlc_weapon_components_sp {
    unsafe {
        let mut native_return = Default::default();
let mut dlcWeaponIndex_ = dlcWeaponIndex_;
        let success = sdk::natives::get_num_dlc_weapon_components_sp(
            &mut native_return,
dlcWeaponIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_dlc_weapon_components_sp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit(&self, p0_: i32,
p1_: i32) -> ResultOf_get_shop_ped_outfit {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::get_shop_ped_outfit(
            &mut p1_,
p0_,
        );
        let p1_ = p1_;
        
        ResultOf_get_shop_ped_outfit {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_get_dlc_vehicle_mod_lock_hash(&self, hash_: u32) -> ResultOf_get_dlc_vehicle_mod_lock_hash {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::get_dlc_vehicle_mod_lock_hash(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_get_dlc_vehicle_mod_lock_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_variant_component_count(&self, componentHash_: u32) -> ResultOf_get_shop_ped_apparel_variant_component_count {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_shop_ped_apparel_variant_component_count(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_apparel_variant_component_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_forced_component_count(&self, componentHash_: u32) -> ResultOf_get_shop_ped_apparel_forced_component_count {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_shop_ped_apparel_forced_component_count(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_apparel_forced_component_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_variant_prop_count(&self, propHash_: u32) -> ResultOf_get_shop_ped_apparel_variant_prop_count {
    unsafe {
        let mut native_return = Default::default();
let mut propHash_ = propHash_;
        let success = sdk::natives::get_shop_ped_apparel_variant_prop_count(
            &mut native_return,
propHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_shop_ped_apparel_variant_prop_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_content_item_locked(&self, itemHash_: u32) -> ResultOf_is_content_item_locked {
    unsafe {
        let mut native_return = Default::default();
let mut itemHash_ = itemHash_;
        let success = sdk::natives::is_content_item_locked(
            &mut native_return,
itemHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_content_item_locked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_current_ped_prop_have_restriction_tag(&self, ped_: u32,
componentId_: i32,
restrictionTagHash_: u32) -> ResultOf_does_current_ped_prop_have_restriction_tag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut restrictionTagHash_ = restrictionTagHash_;
        let success = sdk::natives::does_current_ped_prop_have_restriction_tag(
            &mut native_return,
ped_,
componentId_,
restrictionTagHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_current_ped_prop_have_restriction_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_variant_prop(&self, componentHash_: u32,
unkVariantPropIndex_: i32,
nameHash_: u32,
enumValue_: i32,
anchorPoint_: i32) -> ResultOf_get_variant_prop {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut unkVariantPropIndex_ = unkVariantPropIndex_;
let mut nameHash_ = Default::default();
let mut enumValue_ = Default::default();
let mut anchorPoint_ = Default::default();
        let success = sdk::natives::get_variant_prop(
            &mut nameHash_,
&mut enumValue_,
&mut anchorPoint_,
componentHash_,
unkVariantPropIndex_,
        );
        let nameHash_ = nameHash_;
let enumValue_ = enumValue_;
let anchorPoint_ = anchorPoint_;
        
        ResultOf_get_variant_prop {
            success,
            ret: (),
            nameHash_,
enumValue_,
anchorPoint_
        }
    }
}

    fn native_get_shop_ped_query_prop(&self, componentId_: i32,
outProp_: i32) -> ResultOf_get_shop_ped_query_prop {
    unsafe {
        let mut componentId_ = componentId_;
let mut outProp_ = Default::default();
        let success = sdk::natives::get_shop_ped_query_prop(
            &mut outProp_,
componentId_,
        );
        let outProp_ = outProp_;
        
        ResultOf_get_shop_ped_query_prop {
            success,
            ret: (),
            outProp_
        }
    }
}

    fn native_get_forced_prop(&self, componentHash_: u32,
forcedPropIndex_: i32,
nameHash_: u32,
enumValue_: i32,
anchorPoint_: i32) -> ResultOf_get_forced_prop {
    unsafe {
        let mut componentHash_ = componentHash_;
let mut forcedPropIndex_ = forcedPropIndex_;
let mut nameHash_ = Default::default();
let mut enumValue_ = Default::default();
let mut anchorPoint_ = Default::default();
        let success = sdk::natives::get_forced_prop(
            &mut nameHash_,
&mut enumValue_,
&mut anchorPoint_,
componentHash_,
forcedPropIndex_,
        );
        let nameHash_ = nameHash_;
let enumValue_ = enumValue_;
let anchorPoint_ = anchorPoint_;
        
        ResultOf_get_forced_prop {
            success,
            ret: (),
            nameHash_,
enumValue_,
anchorPoint_
        }
    }
}

    fn native_init_shop_ped_prop(&self, outProp_: i32) -> ResultOf_init_shop_ped_prop {
    unsafe {
        let mut outProp_ = Default::default();
        let success = sdk::natives::init_shop_ped_prop(
            &mut outProp_,
        );
        let outProp_ = outProp_;
        
        ResultOf_init_shop_ped_prop {
            success,
            ret: (),
            outProp_
        }
    }
}

    fn native_get_dlc_vehicle_model(&self, dlcVehicleIndex_: i32) -> ResultOf_get_dlc_vehicle_model {
    unsafe {
        let mut native_return = Default::default();
let mut dlcVehicleIndex_ = dlcVehicleIndex_;
        let success = sdk::natives::get_dlc_vehicle_model(
            &mut native_return,
dlcVehicleIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_dlc_vehicle_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_weapons(&self, ) -> ResultOf_get_num_dlc_weapons {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_weapons(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_dlc_weapons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_outfit_query(&self, character_: i32,
p1_: bool) -> ResultOf_setup_shop_ped_outfit_query {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
let mut p1_ = p1_;
        let success = sdk::natives::setup_shop_ped_outfit_query(
            &mut native_return,
character_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_setup_shop_ped_outfit_query {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tattoo_shop_dlc_item_data(&self, characterType_: i32,
decorationIndex_: i32,
outComponent_: i32) -> ResultOf_get_tattoo_shop_dlc_item_data {
    unsafe {
        let mut native_return = Default::default();
let mut characterType_ = characterType_;
let mut decorationIndex_ = decorationIndex_;
let mut outComponent_ = Default::default();
        let success = sdk::natives::get_tattoo_shop_dlc_item_data(
            &mut native_return,
&mut outComponent_,
characterType_,
decorationIndex_,
        );
        let native_return = native_return;
let outComponent_ = outComponent_;
        
        ResultOf_get_tattoo_shop_dlc_item_data {
            success,
            ret: native_return,
            outComponent_
        }
    }
}

    fn native_stop_fire_in_range(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_stop_fire_in_range {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::stop_fire_in_range(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_stop_fire_in_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_owner_of_explosion_in_angled_area(&self, explosionType_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32) -> ResultOf_get_owner_of_explosion_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
        let success = sdk::natives::get_owner_of_explosion_in_angled_area(
            &mut native_return,
explosionType_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_get_owner_of_explosion_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_owned_explosion(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
explosionType_: i32,
damageScale_: f32,
isAudible_: bool,
isInvisible_: bool,
cameraShake_: f32) -> ResultOf_add_owned_explosion {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosionType_ = explosionType_;
let mut damageScale_ = damageScale_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut cameraShake_ = cameraShake_;
        let success = sdk::natives::add_owned_explosion(
            ped_,
x_,
y_,
z_,
explosionType_,
damageScale_,
isAudible_,
isInvisible_,
cameraShake_,
        );
        
        
        ResultOf_add_owned_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_on_fire(&self, entity_: u32) -> ResultOf_is_entity_on_fire {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_on_fire(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_on_fire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_in_area(&self, explosionType_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_is_explosion_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_explosion_in_area(
            &mut native_return,
explosionType_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_explosion_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_fire_pos(&self, outPosition_: Option<shared::Vector3>,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_closest_fire_pos {
    unsafe {
        let mut native_return = Default::default();
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_closest_fire_pos(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_closest_fire_pos {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_add_explosion_with_user_vfx(&self, x_: f32,
y_: f32,
z_: f32,
explosionType_: i32,
explosionFx_: u32,
damageScale_: f32,
isAudible_: bool,
isInvisible_: bool,
cameraShake_: f32) -> ResultOf_add_explosion_with_user_vfx {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosionType_ = explosionType_;
let mut explosionFx_ = explosionFx_;
let mut damageScale_ = damageScale_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut cameraShake_ = cameraShake_;
        let success = sdk::natives::add_explosion_with_user_vfx(
            x_,
y_,
z_,
explosionType_,
explosionFx_,
damageScale_,
isAudible_,
isInvisible_,
cameraShake_,
        );
        
        
        ResultOf_add_explosion_with_user_vfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_fires_in_range(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_get_number_of_fires_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::get_number_of_fires_in_range(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_fires_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_active_in_area(&self, explosionType_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_is_explosion_active_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_explosion_active_in_area(
            &mut native_return,
explosionType_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_explosion_active_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_script_fire(&self, X_: f32,
Y_: f32,
Z_: f32,
maxChildren_: i32,
isGasFire_: bool) -> ResultOf_start_script_fire {
    unsafe {
        let mut native_return = Default::default();
let mut X_ = X_;
let mut Y_ = Y_;
let mut Z_ = Z_;
let mut maxChildren_ = maxChildren_;
let mut isGasFire_ = isGasFire_;
        let success = sdk::natives::start_script_fire(
            &mut native_return,
X_,
Y_,
Z_,
maxChildren_,
isGasFire_,
        );
        let native_return = native_return;
        
        ResultOf_start_script_fire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_entity_fire(&self, entity_: u32) -> ResultOf_stop_entity_fire {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::stop_entity_fire(
            entity_,
        );
        
        
        ResultOf_stop_entity_fire {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_script_fire(&self, fireHandle_: i32) -> ResultOf_remove_script_fire {
    unsafe {
        let mut fireHandle_ = fireHandle_;
        let success = sdk::natives::remove_script_fire(
            fireHandle_,
        );
        
        
        ResultOf_remove_script_fire {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flammability_multiplier(&self, p0_: f32) -> ResultOf_set_flammability_multiplier {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_flammability_multiplier(
            p0_,
        );
        
        
        ResultOf_set_flammability_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_explosion_in_angled_area(&self, explosionType_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOf_is_explosion_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::is_explosion_in_angled_area(
            &mut native_return,
explosionType_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOf_is_explosion_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_in_sphere(&self, explosionType_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_explosion_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_explosion_in_sphere(
            &mut native_return,
explosionType_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_explosion_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_owner_of_explosion_in_sphere(&self, explosionType_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_get_owner_of_explosion_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut explosionType_ = explosionType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::get_owner_of_explosion_in_sphere(
            &mut native_return,
explosionType_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_get_owner_of_explosion_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_explosion(&self, x_: f32,
y_: f32,
z_: f32,
explosionType_: i32,
damageScale_: f32,
isAudible_: bool,
isInvisible_: bool,
cameraShake_: f32,
noDamage_: bool) -> ResultOf_add_explosion {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosionType_ = explosionType_;
let mut damageScale_ = damageScale_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut cameraShake_ = cameraShake_;
let mut noDamage_ = noDamage_;
        let success = sdk::natives::add_explosion(
            x_,
y_,
z_,
explosionType_,
damageScale_,
isAudible_,
isInvisible_,
cameraShake_,
noDamage_,
        );
        
        
        ResultOf_add_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_entity_fire(&self, entity_: u32) -> ResultOf_start_entity_fire {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::start_entity_fire(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_start_entity_fire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_checkpoint(&self, type_: i32,
posX1_: f32,
posY1_: f32,
posZ1_: f32,
posX2_: f32,
posY2_: f32,
posZ2_: f32,
diameter_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
reserved_: i32) -> ResultOf_create_checkpoint {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut posX1_ = posX1_;
let mut posY1_ = posY1_;
let mut posZ1_ = posZ1_;
let mut posX2_ = posX2_;
let mut posY2_ = posY2_;
let mut posZ2_ = posZ2_;
let mut diameter_ = diameter_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut reserved_ = reserved_;
        let success = sdk::natives::create_checkpoint(
            &mut native_return,
type_,
posX1_,
posY1_,
posZ1_,
posX2_,
posY2_,
posZ2_,
diameter_,
red_,
green_,
blue_,
alpha_,
reserved_,
        );
        let native_return = native_return;
        
        ResultOf_create_checkpoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_streamed_texture_dict_loaded(&self, textureDict_: Option<String>) -> ResultOf_has_streamed_texture_dict_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
        let success = sdk::natives::has_streamed_texture_dict_loaded(
            &mut native_return,
textureDict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_streamed_texture_dict_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_procgrass_disable_ambscalescan(&self, ) -> ResultOf_procgrass_disable_ambscalescan {
    unsafe {
        
        let success = sdk::natives::procgrass_disable_ambscalescan(
            
        );
        
        
        ResultOf_procgrass_disable_ambscalescan {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_scuff_decals(&self, toggle_: bool) -> ResultOf_disable_scuff_decals {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_scuff_decals(
            toggle_,
        );
        
        
        ResultOf_disable_scuff_decals {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_dynamic_depth_value(&self, p0_: f32) -> ResultOf_cascade_shadows_set_dynamic_depth_value {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_dynamic_depth_value(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_dynamic_depth_value {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_entity_bone(&self, effectName_: Option<String>,
entity_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
boneIndex_: i32,
scale_: f32,
axisX_: bool,
axisY_: bool,
axisZ_: bool) -> ResultOf_start_particle_fx_non_looped_on_entity_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut axisX_ = axisX_;
let mut axisY_ = axisY_;
let mut axisZ_ = axisZ_;
        let success = sdk::natives::start_particle_fx_non_looped_on_entity_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
offsetX_,
offsetY_,
offsetZ_,
rotX_,
rotY_,
rotZ_,
boneIndex_,
scale_,
axisX_,
axisY_,
axisZ_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_non_looped_on_entity_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_render_shadowed_lights_with_no_shadows(&self, p0_: bool) -> ResultOf_render_shadowed_lights_with_no_shadows {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::render_shadowed_lights_with_no_shadows(
            p0_,
        );
        
        
        ResultOf_render_shadowed_lights_with_no_shadows {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_init_session(&self, ) -> ResultOf_cascade_shadows_init_session {
    unsafe {
        
        let success = sdk::natives::cascade_shadows_init_session(
            
        );
        
        
        ResultOf_cascade_shadows_init_session {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_bink_movie(&self, binkMovie_: i32) -> ResultOf_release_bink_movie {
    unsafe {
        let mut binkMovie_ = binkMovie_;
        let success = sdk::natives::release_bink_movie(
            binkMovie_,
        );
        
        
        ResultOf_release_bink_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_crew_emblem(&self, vehicle_: u32,
p1_: i32) -> ResultOf_does_vehicle_have_crew_emblem {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::does_vehicle_have_crew_emblem(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_have_crew_emblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_stop(&self, effectName_: Option<String>) -> ResultOf_animpostfx_stop {
    unsafe {
        let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
        let success = sdk::natives::animpostfx_stop(
            effectName_.as_ref().unwrap(),
        );
        
        
        ResultOf_animpostfx_stop {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_facing(&self, p0_: bool) -> ResultOf_golf_trail_set_facing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_set_facing(
            p0_,
        );
        
        
        ResultOf_golf_trail_set_facing {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32) -> ResultOf_draw_debug_box {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_box(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r_,
g_,
b_,
alpha_,
        );
        
        
        ResultOf_draw_debug_box {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_petrol_trail_decals(&self, ) -> ResultOf_end_petrol_trail_decals {
    unsafe {
        
        let success = sdk::natives::end_petrol_trail_decals(
            
        );
        
        
        ResultOf_end_petrol_trail_decals {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_mission_creator_photo(&self, ) -> ResultOf_free_memory_for_mission_creator_photo {
    unsafe {
        
        let success = sdk::natives::free_memory_for_mission_creator_photo(
            
        );
        
        
        ResultOf_free_memory_for_mission_creator_photo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flash(&self, p0_: f32,
p1_: f32,
fadeIn_: f32,
duration_: f32,
fadeOut_: f32) -> ResultOf_set_flash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut fadeIn_ = fadeIn_;
let mut duration_ = duration_;
let mut fadeOut_ = fadeOut_;
        let success = sdk::natives::set_flash(
            p0_,
p1_,
fadeIn_,
duration_,
fadeOut_,
        );
        
        
        ResultOf_set_flash {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_tvshow_currently_playing(&self, videoCliphash_: u32) -> ResultOf_is_tvshow_currently_playing {
    unsafe {
        let mut native_return = Default::default();
let mut videoCliphash_ = videoCliphash_;
        let success = sdk::natives::is_tvshow_currently_playing(
            &mut native_return,
videoCliphash_,
        );
        let native_return = native_return;
        
        ResultOf_is_tvshow_currently_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_enable_freezer(&self, p0_: bool) -> ResultOf_cascade_shadows_enable_freezer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_enable_freezer(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_enable_freezer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_save_high_quality_photo(&self, ) -> ResultOf_get_status_of_save_high_quality_photo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_save_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_save_high_quality_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_scaleform_movie_filename_loaded(&self, scaleformName_: Option<String>) -> ResultOf_has_scaleform_movie_filename_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformName_ = sdk_helpers::create_c_string_ptr(scaleformName_);
        let success = sdk::natives::has_scaleform_movie_filename_loaded(
            &mut native_return,
scaleformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_scaleform_movie_filename_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_set_max_thickness(&self, thickness_: f32) -> ResultOf_seethrough_set_max_thickness {
    unsafe {
        let mut thickness_ = thickness_;
        let success = sdk::natives::seethrough_set_max_thickness(
            thickness_,
        );
        
        
        ResultOf_seethrough_set_max_thickness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_time(&self, binkMovie_: i32,
progress_: f32) -> ResultOf_set_bink_movie_time {
    unsafe {
        let mut binkMovie_ = binkMovie_;
let mut progress_ = progress_;
        let success = sdk::natives::set_bink_movie_time(
            binkMovie_,
progress_,
        );
        
        
        ResultOf_set_bink_movie_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_entity(&self, effectName_: Option<String>,
entity_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
scale_: f32,
axisX_: bool,
axisY_: bool,
axisZ_: bool) -> ResultOf_start_particle_fx_non_looped_on_entity {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut scale_ = scale_;
let mut axisX_ = axisX_;
let mut axisY_ = axisY_;
let mut axisZ_ = axisZ_;
        let success = sdk::natives::start_particle_fx_non_looped_on_entity(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
offsetX_,
offsetY_,
offsetZ_,
rotX_,
rotY_,
rotZ_,
scale_,
axisX_,
axisY_,
axisZ_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_non_looped_on_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_take_high_quality_photo(&self, ) -> ResultOf_get_status_of_take_high_quality_photo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_take_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_take_high_quality_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_scaleform_movie_fullscreen(&self, scaleform_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p5_: i32) -> ResultOf_draw_scaleform_movie_fullscreen {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p5_ = p5_;
        let success = sdk::natives::draw_scaleform_movie_fullscreen(
            scaleform_,
red_,
green_,
blue_,
alpha_,
p5_,
        );
        
        
        ResultOf_draw_scaleform_movie_fullscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_composite_shotgun_decals(&self, toggle_: bool) -> ResultOf_disable_composite_shotgun_decals {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_composite_shotgun_decals(
            toggle_,
        );
        
        
        ResultOf_disable_composite_shotgun_decals {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_ped_bone(&self, effectName_: Option<String>,
ped_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
boneIndex_: i32,
scale_: f32,
axisX_: bool,
axisY_: bool,
axisZ_: bool) -> ResultOf_start_particle_fx_non_looped_on_ped_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut ped_ = ped_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut axisX_ = axisX_;
let mut axisY_ = axisY_;
let mut axisZ_ = axisZ_;
        let success = sdk::natives::start_particle_fx_non_looped_on_ped_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
ped_,
offsetX_,
offsetY_,
offsetZ_,
rotX_,
rotY_,
rotZ_,
boneIndex_,
scale_,
axisX_,
axisY_,
axisZ_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_non_looped_on_ped_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_timecycle_modifier(&self, ) -> ResultOf_clear_timecycle_modifier {
    unsafe {
        
        let success = sdk::natives::clear_timecycle_modifier(
            
        );
        
        
        ResultOf_clear_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_low_quality_photo_to_phone(&self, p0_: bool,
p1_: bool) -> ResultOf_draw_low_quality_photo_to_phone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::draw_low_quality_photo_to_phone(
            p0_,
p1_,
        );
        
        
        ResultOf_draw_low_quality_photo_to_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_color_near(&self, red_: i32,
green_: i32,
blue_: i32) -> ResultOf_seethrough_set_color_near {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
        let success = sdk::natives::seethrough_set_color_near(
            red_,
green_,
blue_,
        );
        
        
        ResultOf_seethrough_set_color_near {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_make_pushed_preset_persistent(&self, toggle_: bool) -> ResultOf_ui3dscene_make_pushed_preset_persistent {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::ui3dscene_make_pushed_preset_persistent(
            toggle_,
        );
        
        
        ResultOf_ui3dscene_make_pushed_preset_persistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_audio_frontend(&self, toggle_: bool) -> ResultOf_set_tv_audio_frontend {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_tv_audio_frontend(
            toggle_,
        );
        
        
        ResultOf_set_tv_audio_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_movie(&self, scaleformName_: Option<String>) -> ResultOf_request_scaleform_movie {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformName_ = sdk_helpers::create_c_string_ptr(scaleformName_);
        let success = sdk::natives::request_scaleform_movie(
            &mut native_return,
scaleformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_request_scaleform_movie {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_artificial_lights_state(&self, state_: bool) -> ResultOf_set_artificial_lights_state {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_artificial_lights_state(
            state_,
        );
        
        
        ResultOf_set_artificial_lights_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_oil_decal(&self, x_: f32,
y_: f32,
z_: f32,
groundLvl_: f32,
width_: f32,
transparency_: f32) -> ResultOf_add_oil_decal {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut groundLvl_ = groundLvl_;
let mut width_ = width_;
let mut transparency_ = transparency_;
        let success = sdk::natives::add_oil_decal(
            &mut native_return,
x_,
y_,
z_,
groundLvl_,
width_,
transparency_,
        );
        let native_return = native_return;
        
        ResultOf_add_oil_decal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_colour(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32) -> ResultOf_golf_trail_set_colour {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::golf_trail_set_colour(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
        );
        
        
        ResultOf_golf_trail_set_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_enable_ambscalescan(&self, ) -> ResultOf_procgrass_enable_ambscalescan {
    unsafe {
        
        let success = sdk::natives::procgrass_enable_ambscalescan(
            
        );
        
        
        ResultOf_procgrass_enable_ambscalescan {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_tcmodifier_overrides(&self, p0_: Option<String>) -> ResultOf_clear_all_tcmodifier_overrides {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::clear_all_tcmodifier_overrides(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_clear_all_tcmodifier_overrides {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_interior_smoke_level(&self, level_: f32) -> ResultOf_override_interior_smoke_level {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::override_interior_smoke_level(
            level_,
        );
        
        
        ResultOf_override_interior_smoke_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_procobj_creation(&self, ) -> ResultOf_disable_procobj_creation {
    unsafe {
        
        let success = sdk::natives::disable_procobj_creation(
            
        );
        
        
        ResultOf_disable_procobj_creation {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_highlight_noise(&self, noise_: f32) -> ResultOf_seethrough_set_highlight_noise {
    unsafe {
        let mut noise_ = noise_;
        let success = sdk::natives::seethrough_set_highlight_noise(
            noise_,
        );
        
        
        ResultOf_seethrough_set_highlight_noise {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tracked_point_info(&self, point_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_set_tracked_point_info {
    unsafe {
        let mut point_ = point_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_tracked_point_info(
            point_,
x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_set_tracked_point_info {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_load_mission_creator_photo(&self, p0_: i32) -> ResultOf_get_status_of_load_mission_creator_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::get_status_of_load_mission_creator_photo(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_get_status_of_load_mission_creator_photo {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_register_postfx_bullet_impact(&self, weaponWorldPosX_: f32,
weaponWorldPosY_: f32,
weaponWorldPosZ_: f32,
intensity_: f32) -> ResultOf_register_postfx_bullet_impact {
    unsafe {
        let mut weaponWorldPosX_ = weaponWorldPosX_;
let mut weaponWorldPosY_ = weaponWorldPosY_;
let mut weaponWorldPosZ_ = weaponWorldPosZ_;
let mut intensity_ = intensity_;
        let success = sdk::natives::register_postfx_bullet_impact(
            weaponWorldPosX_,
weaponWorldPosY_,
weaponWorldPosZ_,
intensity_,
        );
        
        
        ResultOf_register_postfx_bullet_impact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_debug_lines_and_spheres_drawing_active(&self, enabled_: bool) -> ResultOf_set_debug_lines_and_spheres_drawing_active {
    unsafe {
        let mut enabled_ = enabled_;
        let success = sdk::natives::set_debug_lines_and_spheres_drawing_active(
            enabled_,
        );
        
        
        ResultOf_set_debug_lines_and_spheres_drawing_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_nightvision(&self, toggle_: bool) -> ResultOf_set_nightvision {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_nightvision(
            toggle_,
        );
        
        
        ResultOf_set_nightvision {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_hilight_intensity(&self, intensity_: f32) -> ResultOf_seethrough_set_hilight_intensity {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::seethrough_set_hilight_intensity(
            intensity_,
        );
        
        
        ResultOf_seethrough_set_hilight_intensity {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_tcmodifier_override(&self, modifierName1_: Option<String>,
modifierName2_: Option<String>) -> ResultOf_add_tcmodifier_override {
    unsafe {
        let mut modifierName1_ = sdk_helpers::create_c_string_ptr(modifierName1_);
let mut modifierName2_ = sdk_helpers::create_c_string_ptr(modifierName2_);
        let success = sdk::natives::add_tcmodifier_override(
            modifierName1_.as_ref().unwrap(),
modifierName2_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_tcmodifier_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_looped_on_entity(&self, effectName_: Option<String>,
entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool) -> ResultOf_start_particle_fx_looped_on_entity {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
        let success = sdk::natives::start_particle_fx_looped_on_entity(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
xOffset_,
yOffset_,
zOffset_,
xRot_,
yRot_,
zRot_,
scale_,
xAxis_,
yAxis_,
zAxis_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_looped_on_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_taken_photo_is_mugshot(&self, toggle_: bool) -> ResultOf_set_taken_photo_is_mugshot {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_taken_photo_is_mugshot(
            toggle_,
        );
        
        
        ResultOf_set_taken_photo_is_mugshot {
            success,
            ret: (),
            
        }
    }
}

    fn native_terraingrid_set_params(&self, x_: f32,
y_: f32,
z_: f32,
forwardX_: f32,
forwardY_: f32,
forwardZ_: f32,
sizeX_: f32,
sizeY_: f32,
sizeZ_: f32,
gridScale_: f32,
glowIntensity_: f32,
normalHeight_: f32,
heightDiff_: f32) -> ResultOf_terraingrid_set_params {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut forwardX_ = forwardX_;
let mut forwardY_ = forwardY_;
let mut forwardZ_ = forwardZ_;
let mut sizeX_ = sizeX_;
let mut sizeY_ = sizeY_;
let mut sizeZ_ = sizeZ_;
let mut gridScale_ = gridScale_;
let mut glowIntensity_ = glowIntensity_;
let mut normalHeight_ = normalHeight_;
let mut heightDiff_ = heightDiff_;
        let success = sdk::natives::terraingrid_set_params(
            x_,
y_,
z_,
forwardX_,
forwardY_,
forwardZ_,
sizeX_,
sizeY_,
sizeZ_,
gridScale_,
glowIntensity_,
normalHeight_,
heightDiff_,
        );
        
        
        ResultOf_terraingrid_set_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_transition_out_of_timecycle_modifier(&self, strength_: f32) -> ResultOf_set_transition_out_of_timecycle_modifier {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::set_transition_out_of_timecycle_modifier(
            strength_,
        );
        
        
        ResultOf_set_transition_out_of_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie_3d_solid(&self, scaleform_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
scaleX_: f32,
scaleY_: f32,
scaleZ_: f32,
rotationOrder_: i32) -> ResultOf_draw_scaleform_movie_3d_solid {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut scaleX_ = scaleX_;
let mut scaleY_ = scaleY_;
let mut scaleZ_ = scaleZ_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::draw_scaleform_movie_3d_solid(
            scaleform_,
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
p7_,
p8_,
p9_,
scaleX_,
scaleY_,
scaleZ_,
rotationOrder_,
        );
        
        
        ResultOf_draw_scaleform_movie_3d_solid {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_as_no_longer_needed(&self, scaleformHandle_: i32) -> ResultOf_set_scaleform_movie_as_no_longer_needed {
    unsafe {
        let mut scaleformHandle_ = Default::default();
        let success = sdk::natives::set_scaleform_movie_as_no_longer_needed(
            &mut scaleformHandle_,
        );
        let scaleformHandle_ = scaleformHandle_;
        
        ResultOf_set_scaleform_movie_as_no_longer_needed {
            success,
            ret: (),
            scaleformHandle_
        }
    }
}

    fn native_set_entity_icon_color(&self, entity_: u32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_set_entity_icon_color {
    unsafe {
        let mut entity_ = entity_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_entity_icon_color(
            entity_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_set_entity_icon_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_take_mission_creator_photo(&self, ) -> ResultOf_begin_take_mission_creator_photo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_take_mission_creator_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_begin_take_mission_creator_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_non_looped_emitter_size(&self, p0_: f32,
p1_: f32,
scale_: f32) -> ResultOf_set_particle_fx_non_looped_emitter_size {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_non_looped_emitter_size(
            p0_,
p1_,
scale_,
        );
        
        
        ResultOf_set_particle_fx_non_looped_emitter_size {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_playlist_on_channel(&self, tvChannel_: i32,
p1_: i32) -> ResultOf_is_playlist_on_channel {
    unsafe {
        let mut native_return = Default::default();
let mut tvChannel_ = tvChannel_;
let mut p1_ = p1_;
        let success = sdk::natives::is_playlist_on_channel(
            &mut native_return,
tvChannel_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_playlist_on_channel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tv_volume(&self, ) -> ResultOf_get_tv_volume {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_tv_volume(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_tv_volume {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tv_channel_playlist_at_hour(&self, tvChannel_: i32,
playlistName_: Option<String>,
hour_: i32) -> ResultOf_set_tv_channel_playlist_at_hour {
    unsafe {
        let mut tvChannel_ = tvChannel_;
let mut playlistName_ = sdk_helpers::create_c_string_ptr(playlistName_);
let mut hour_ = hour_;
        let success = sdk::natives::set_tv_channel_playlist_at_hour(
            tvChannel_,
playlistName_.as_ref().unwrap(),
hour_,
        );
        
        
        ResultOf_set_tv_channel_playlist_at_hour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_usingnightvision(&self, ) -> ResultOf_get_usingnightvision {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_usingnightvision(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_usingnightvision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_play(&self, effectName_: Option<String>,
duration_: i32,
looped_: bool) -> ResultOf_animpostfx_play {
    unsafe {
        let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut duration_ = duration_;
let mut looped_ = looped_;
        let success = sdk::natives::animpostfx_play(
            effectName_.as_ref().unwrap(),
duration_,
looped_,
        );
        
        
        ResultOf_animpostfx_play {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_render_in_game_ui(&self, p0_: bool) -> ResultOf_dont_render_in_game_ui {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::dont_render_in_game_ui(
            p0_,
        );
        
        
        ResultOf_dont_render_in_game_ui {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_backfaceculling(&self, toggle_: bool) -> ResultOf_set_backfaceculling {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_backfaceculling(
            toggle_,
        );
        
        
        ResultOf_set_backfaceculling {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_radius(&self, p0_: f32,
p1_: f32,
p2_: f32) -> ResultOf_golf_trail_set_radius {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::golf_trail_set_radius(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_golf_trail_set_radius {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_at_coord(&self, effectName_: Option<String>,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool) -> ResultOf_start_particle_fx_non_looped_at_coord {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
        let success = sdk::natives::start_particle_fx_non_looped_at_coord(
            &mut native_return,
effectName_.as_ref().unwrap(),
xPos_,
yPos_,
zPos_,
xRot_,
yRot_,
zRot_,
scale_,
xAxis_,
yAxis_,
zAxis_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_non_looped_at_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_bound_position(&self, p0_: i32) -> ResultOf_cascade_shadows_set_bound_position {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_bound_position(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_bound_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_screen_size_check_enabled(&self, p0_: bool) -> ResultOf_cascade_shadows_set_screen_size_check_enabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_screen_size_check_enabled(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_screen_size_check_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_non_looped_colour(&self, r_: f32,
g_: f32,
b_: f32) -> ResultOf_set_particle_fx_non_looped_colour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_particle_fx_non_looped_colour(
            r_,
g_,
b_,
        );
        
        
        ResultOf_set_particle_fx_non_looped_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_cylinder_height(&self, checkpoint_: i32,
nearHeight_: f32,
farHeight_: f32,
radius_: f32) -> ResultOf_set_checkpoint_cylinder_height {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut nearHeight_ = nearHeight_;
let mut farHeight_ = farHeight_;
let mut radius_ = radius_;
        let success = sdk::natives::set_checkpoint_cylinder_height(
            checkpoint_,
nearHeight_,
farHeight_,
radius_,
        );
        
        
        ResultOf_set_checkpoint_cylinder_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_clear_shadow_sample_type(&self, ) -> ResultOf_cascade_shadows_clear_shadow_sample_type {
    unsafe {
        
        let success = sdk::natives::cascade_shadows_clear_shadow_sample_type(
            
        );
        
        
        ResultOf_cascade_shadows_clear_shadow_sample_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_petrol_decals_recycling_this_frame(&self, ) -> ResultOf_set_disable_petrol_decals_recycling_this_frame {
    unsafe {
        
        let success = sdk::natives::set_disable_petrol_decals_recycling_this_frame(
            
        );
        
        
        ResultOf_set_disable_petrol_decals_recycling_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bullet_impact_scale(&self, scale_: f32) -> ResultOf_set_particle_fx_bullet_impact_scale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_bullet_impact_scale(
            scale_,
        );
        
        
        ResultOf_set_particle_fx_bullet_impact_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_set_frame_txd(&self, textureDict_: Option<String>,
p1_: bool) -> ResultOf_phonephotoeditor_set_frame_txd {
    unsafe {
        let mut native_return = Default::default();
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut p1_ = p1_;
        let success = sdk::natives::phonephotoeditor_set_frame_txd(
            &mut native_return,
textureDict_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_phonephotoeditor_set_frame_txd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_marker(&self, type_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
dirX_: f32,
dirY_: f32,
dirZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
scaleX_: f32,
scaleY_: f32,
scaleZ_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
bobUpAndDown_: bool,
faceCamera_: bool,
p19_: i32,
rotate_: bool,
textureDict_: Option<String>,
textureName_: Option<String>,
drawOnEnts_: bool) -> ResultOf_draw_marker {
    unsafe {
        let mut type_ = type_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut dirX_ = dirX_;
let mut dirY_ = dirY_;
let mut dirZ_ = dirZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut scaleX_ = scaleX_;
let mut scaleY_ = scaleY_;
let mut scaleZ_ = scaleZ_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut bobUpAndDown_ = bobUpAndDown_;
let mut faceCamera_ = faceCamera_;
let mut p19_ = p19_;
let mut rotate_ = rotate_;
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut drawOnEnts_ = drawOnEnts_;
        let success = sdk::natives::draw_marker(
            type_,
posX_,
posY_,
posZ_,
dirX_,
dirY_,
dirZ_,
rotX_,
rotY_,
rotZ_,
scaleX_,
scaleY_,
scaleZ_,
red_,
green_,
blue_,
alpha_,
bobUpAndDown_,
faceCamera_,
p19_,
rotate_,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
drawOnEnts_,
        );
        
        
        ResultOf_draw_marker {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_textured_poly(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
textureDict_: Option<String>,
textureName_: Option<String>,
u1_: f32,
v1_: f32,
w1_: f32,
u2_: f32,
v2_: f32,
w2_: f32,
u3_: f32,
v3_: f32,
w3_: f32) -> ResultOf_draw_textured_poly {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut w1_ = w1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut w2_ = w2_;
let mut u3_ = u3_;
let mut v3_ = v3_;
let mut w3_ = w3_;
        let success = sdk::natives::draw_textured_poly(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red_,
green_,
blue_,
alpha_,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
u1_,
v1_,
w1_,
u2_,
v2_,
w2_,
u3_,
v3_,
w3_,
        );
        
        
        ResultOf_draw_textured_poly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_volume(&self, volume_: f32) -> ResultOf_set_tv_volume {
    unsafe {
        let mut volume_ = volume_;
        let success = sdk::natives::set_tv_volume(
            volume_,
        );
        
        
        ResultOf_set_tv_volume {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_particle_fx_shootout_boat(&self, ) -> ResultOf_clear_particle_fx_shootout_boat {
    unsafe {
        
        let success = sdk::natives::clear_particle_fx_shootout_boat(
            
        );
        
        
        ResultOf_clear_particle_fx_shootout_boat {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_interior_smoke_name(&self, name_: Option<String>) -> ResultOf_override_interior_smoke_name {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::override_interior_smoke_name(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_override_interior_smoke_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_operation_to_create_sorted_list_of_photos(&self, p0_: i32) -> ResultOf_queue_operation_to_create_sorted_list_of_photos {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::queue_operation_to_create_sorted_list_of_photos(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_queue_operation_to_create_sorted_list_of_photos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_slipstream_lodrange_scale(&self, scale_: f32) -> ResultOf_set_particle_fx_slipstream_lodrange_scale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_slipstream_lodrange_scale(
            scale_,
        );
        
        
        ResultOf_set_particle_fx_slipstream_lodrange_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_named_rendertarget(&self, textureDict_: Option<String>,
textureName_: Option<String>,
screenX_: f32,
screenY_: f32,
width_: f32,
height_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: i32) -> ResultOf_draw_sprite_named_rendertarget {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut screenX_ = screenX_;
let mut screenY_ = screenY_;
let mut width_ = width_;
let mut height_ = height_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
        let success = sdk::natives::draw_sprite_named_rendertarget(
            textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
screenX_,
screenY_,
width_,
height_,
heading_,
red_,
green_,
blue_,
alpha_,
p11_,
        );
        
        
        ResultOf_draw_sprite_named_rendertarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_moon_cycle_override(&self, ) -> ResultOf_disable_moon_cycle_override {
    unsafe {
        
        let success = sdk::natives::disable_moon_cycle_override(
            
        );
        
        
        ResultOf_disable_moon_cycle_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_moon_cycle_override(&self, strength_: f32) -> ResultOf_enable_moon_cycle_override {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::enable_moon_cycle_override(
            strength_,
        );
        
        
        ResultOf_enable_moon_cycle_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_is_cullsphere_enabled(&self, handle_: i32) -> ResultOf_procgrass_is_cullsphere_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut handle_ = handle_;
        let success = sdk::natives::procgrass_is_cullsphere_enabled(
            &mut native_return,
handle_,
        );
        let native_return = native_return;
        
        ResultOf_procgrass_is_cullsphere_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_timecycle_modifier(&self, modifierName_: Option<String>) -> ResultOf_set_timecycle_modifier {
    unsafe {
        let mut modifierName_ = sdk_helpers::create_c_string_ptr(modifierName_);
        let success = sdk::natives::set_timecycle_modifier(
            modifierName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_arx(&self, textureDict_: Option<String>,
textureName_: Option<String>,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
p6_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: i32,
p12_: i32) -> ResultOf_draw_sprite_arx {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut p6_ = p6_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::draw_sprite_arx(
            textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
x_,
y_,
width_,
height_,
p6_,
red_,
green_,
blue_,
alpha_,
p11_,
p12_,
        );
        
        
        ResultOf_draw_sprite_arx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_int(&self, methodReturn_: i32) -> ResultOf_get_scaleform_movie_method_return_value_int {
    unsafe {
        let mut native_return = Default::default();
let mut methodReturn_ = methodReturn_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_int(
            &mut native_return,
methodReturn_,
        );
        let native_return = native_return;
        
        ResultOf_get_scaleform_movie_method_return_value_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_petrol_decal_in_range(&self, xCoord_: f32,
yCoord_: f32,
zCoord_: f32,
radius_: f32) -> ResultOf_get_is_petrol_decal_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut xCoord_ = xCoord_;
let mut yCoord_ = yCoord_;
let mut zCoord_ = zCoord_;
let mut radius_ = radius_;
        let success = sdk::natives::get_is_petrol_decal_in_range(
            &mut native_return,
xCoord_,
yCoord_,
zCoord_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_petrol_decal_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_active_scaleform_movie_deleting(&self, val_: i32) -> ResultOf_is_active_scaleform_movie_deleting {
    unsafe {
        let mut native_return = Default::default();
let mut val_ = val_;
        let success = sdk::natives::is_active_scaleform_movie_deleting(
            &mut native_return,
val_,
        );
        let native_return = native_return;
        
        ResultOf_is_active_scaleform_movie_deleting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_grassbatch_disable_flattening(&self, ) -> ResultOf_grassbatch_disable_flattening {
    unsafe {
        
        let success = sdk::natives::grassbatch_disable_flattening(
            
        );
        
        
        ResultOf_grassbatch_disable_flattening {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_tv_clip_namehash(&self, ) -> ResultOf_get_current_tv_clip_namehash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_tv_clip_namehash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_tv_clip_namehash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_widescreen(&self, ) -> ResultOf_get_is_widescreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_widescreen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_widescreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_path(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: bool) -> ResultOf_golf_trail_set_path {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::golf_trail_set_path(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOf_golf_trail_set_path {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_decal_wash_level(&self, decal_: i32) -> ResultOf_get_decal_wash_level {
    unsafe {
        let mut native_return = Default::default();
let mut decal_ = decal_;
        let success = sdk::natives::get_decal_wash_level(
            &mut native_return,
decal_,
        );
        let native_return = native_return;
        
        ResultOf_get_decal_wash_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_large_rt(&self, scaleformHandle_: i32,
toggle_: bool) -> ResultOf_set_scaleform_movie_to_use_large_rt {
    unsafe {
        let mut scaleformHandle_ = scaleformHandle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_large_rt(
            scaleformHandle_,
toggle_,
        );
        
        
        ResultOf_set_scaleform_movie_to_use_large_rt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie(&self, name_: Option<String>) -> ResultOf_set_bink_movie {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_bink_movie(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_set_bink_movie {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_free_memory_for_mission_creator_photo_preview(&self, ) -> ResultOf_free_memory_for_mission_creator_photo_preview {
    unsafe {
        
        let success = sdk::natives::free_memory_for_mission_creator_photo_preview(
            
        );
        
        
        ResultOf_free_memory_for_mission_creator_photo_preview {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_maximum_number_of_photos(&self, ) -> ResultOf_get_maximum_number_of_photos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_maximum_number_of_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_maximum_number_of_photos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_screen_coord_from_world_coord(&self, worldX_: f32,
worldY_: f32,
worldZ_: f32,
screenX_: f32,
screenY_: f32) -> ResultOf_get_screen_coord_from_world_coord {
    unsafe {
        let mut native_return = Default::default();
let mut worldX_ = worldX_;
let mut worldY_ = worldY_;
let mut worldZ_ = worldZ_;
let mut screenX_ = Default::default();
let mut screenY_ = Default::default();
        let success = sdk::natives::get_screen_coord_from_world_coord(
            &mut native_return,
&mut screenX_,
&mut screenY_,
worldX_,
worldY_,
worldZ_,
        );
        let native_return = native_return;
let screenX_ = screenX_;
let screenY_ = screenY_;
        
        ResultOf_get_screen_coord_from_world_coord {
            success,
            ret: native_return,
            screenX_,
screenY_
        }
    }
}

    fn native_get_texture_resolution(&self, textureDict_: Option<String>,
textureName_: Option<String>) -> ResultOf_get_texture_resolution {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
        let success = sdk::natives::get_texture_resolution(
            native_return.pin_mut(),
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_texture_resolution {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_requestingnightvision(&self, ) -> ResultOf_get_requestingnightvision {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_requestingnightvision(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_requestingnightvision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_scaleform_string(&self, ) -> ResultOf_end_text_command_scaleform_string {
    unsafe {
        
        let success = sdk::natives::end_text_command_scaleform_string(
            
        );
        
        
        ResultOf_end_text_command_scaleform_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_occlusion_this_frame(&self, ) -> ResultOf_disable_occlusion_this_frame {
    unsafe {
        
        let success = sdk::natives::disable_occlusion_this_frame(
            
        );
        
        
        ResultOf_disable_occlusion_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_animpostfx_is_running(&self, effectName_: Option<String>) -> ResultOf_animpostfx_is_running {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
        let success = sdk::natives::animpostfx_is_running(
            &mut native_return,
effectName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_animpostfx_is_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_split_z_exp_weight(&self, p0_: f32) -> ResultOf_cascade_shadows_set_split_z_exp_weight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_split_z_exp_weight(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_split_z_exp_weight {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_text(&self, text_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_debug_text {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_text(
            text_.as_ref().unwrap(),
x_,
y_,
z_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_debug_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_light_override_max_intensity_scale(&self, ) -> ResultOf_get_light_override_max_intensity_scale {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_light_override_max_intensity_scale(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_light_override_max_intensity_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_rect(&self, x_: f32,
y_: f32,
width_: f32,
height_: f32,
r_: i32,
g_: i32,
b_: i32,
a_: i32,
p8_: bool) -> ResultOf_draw_rect {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
let mut p8_ = p8_;
        let success = sdk::natives::draw_rect(
            x_,
y_,
width_,
height_,
r_,
g_,
b_,
a_,
p8_,
        );
        
        
        ResultOf_draw_rect {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_transition_timecycle_modifier(&self, modifierName_: Option<String>,
transition_: f32) -> ResultOf_set_transition_timecycle_modifier {
    unsafe {
        let mut modifierName_ = sdk_helpers::create_c_string_ptr(modifierName_);
let mut transition_ = transition_;
        let success = sdk::natives::set_transition_timecycle_modifier(
            modifierName_.as_ref().unwrap(),
transition_,
        );
        
        
        ResultOf_set_transition_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_direction(&self, checkpoint_: i32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_checkpoint_direction {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_checkpoint_direction(
            checkpoint_,
posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_checkpoint_direction {
            success,
            ret: (),
            
        }
    }
}

    fn native_pop_timecycle_modifier(&self, ) -> ResultOf_pop_timecycle_modifier {
    unsafe {
        
        let success = sdk::natives::pop_timecycle_modifier(
            
        );
        
        
        ResultOf_pop_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_save_high_quality_photo(&self, unused_: i32) -> ResultOf_save_high_quality_photo {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::save_high_quality_photo(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOf_save_high_quality_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_load_high_quality_photo_status(&self, p0_: i32) -> ResultOf_get_load_high_quality_photo_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_load_high_quality_photo_status(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_load_high_quality_photo_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_vehicle_crew_emblem(&self, vehicle_: u32,
ped_: u32,
boneIndex_: i32,
x1_: f32,
x2_: f32,
x3_: f32,
y1_: f32,
y2_: f32,
y3_: f32,
z1_: f32,
z2_: f32,
z3_: f32,
scale_: f32,
p13_: i32,
alpha_: i32) -> ResultOf_add_vehicle_crew_emblem {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut boneIndex_ = boneIndex_;
let mut x1_ = x1_;
let mut x2_ = x2_;
let mut x3_ = x3_;
let mut y1_ = y1_;
let mut y2_ = y2_;
let mut y3_ = y3_;
let mut z1_ = z1_;
let mut z2_ = z2_;
let mut z3_ = z3_;
let mut scale_ = scale_;
let mut p13_ = p13_;
let mut alpha_ = alpha_;
        let success = sdk::natives::add_vehicle_crew_emblem(
            &mut native_return,
vehicle_,
ped_,
boneIndex_,
x1_,
x2_,
x3_,
y1_,
y2_,
y3_,
z1_,
z2_,
z3_,
scale_,
p13_,
alpha_,
        );
        let native_return = native_return;
        
        ResultOf_add_vehicle_crew_emblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_get_max_thickness(&self, ) -> ResultOf_seethrough_get_max_thickness {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::seethrough_get_max_thickness(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_seethrough_get_max_thickness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_nightvision_light_range(&self, p0_: f32) -> ResultOf_override_nightvision_light_range {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::override_nightvision_light_range(
            p0_,
        );
        
        
        ResultOf_override_nightvision_light_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_inside_cylinder_scale(&self, checkpoint_: i32,
scale_: f32) -> ResultOf_set_checkpoint_inside_cylinder_scale {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut scale_ = scale_;
        let success = sdk::natives::set_checkpoint_inside_cylinder_scale(
            checkpoint_,
scale_,
        );
        
        
        ResultOf_set_checkpoint_inside_cylinder_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_usingseethrough(&self, ) -> ResultOf_get_usingseethrough {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_usingseethrough(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_usingseethrough {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_timecycle_transition_modifier_index(&self, ) -> ResultOf_get_timecycle_transition_modifier_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_timecycle_transition_modifier_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_timecycle_transition_modifier_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_decal_bullet_impact_range_scale(&self, p0_: f32) -> ResultOf_set_decal_bullet_impact_range_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_decal_bullet_impact_range_scale(
            p0_,
        );
        
        
        ResultOf_set_decal_bullet_impact_range_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_number_of_cloud_photos(&self, ) -> ResultOf_get_current_number_of_cloud_photos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_number_of_cloud_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_number_of_cloud_photos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_mission_creator_photo(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_load_mission_creator_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::load_mission_creator_photo(
            &mut native_return,
&mut p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_load_mission_creator_photo {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_clear_status_of_sorted_list_operation(&self, ) -> ResultOf_clear_status_of_sorted_list_operation {
    unsafe {
        
        let success = sdk::natives::clear_status_of_sorted_list_operation(
            
        );
        
        
        ResultOf_clear_status_of_sorted_list_operation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_inside_cylinder_height_scale(&self, checkpoint_: i32,
scale_: f32) -> ResultOf_set_checkpoint_inside_cylinder_height_scale {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut scale_ = scale_;
        let success = sdk::natives::set_checkpoint_inside_cylinder_height_scale(
            checkpoint_,
scale_,
        );
        
        
        ResultOf_set_checkpoint_inside_cylinder_height_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_decal_rendering_this_frame(&self, ) -> ResultOf_set_disable_decal_rendering_this_frame {
    unsafe {
        
        let success = sdk::natives::set_disable_decal_rendering_this_frame(
            
        );
        
        
        ResultOf_set_disable_decal_rendering_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_snow_wheel_vfx_when_unsheltered(&self, toggle_: bool) -> ResultOf_use_snow_wheel_vfx_when_unsheltered {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_snow_wheel_vfx_when_unsheltered(
            toggle_,
        );
        
        
        ResultOf_use_snow_wheel_vfx_when_unsheltered {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_petrol_decal(&self, x_: f32,
y_: f32,
z_: f32,
groundLvl_: f32,
width_: f32,
transparency_: f32) -> ResultOf_add_petrol_decal {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut groundLvl_ = groundLvl_;
let mut width_ = width_;
let mut transparency_ = transparency_;
        let success = sdk::natives::add_petrol_decal(
            &mut native_return,
x_,
y_,
z_,
groundLvl_,
width_,
transparency_,
        );
        let native_return = native_return;
        
        ResultOf_add_petrol_decal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_extra_tcmodifier(&self, modifierName_: Option<String>) -> ResultOf_set_extra_tcmodifier {
    unsafe {
        let mut modifierName_ = sdk_helpers::create_c_string_ptr(modifierName_);
        let success = sdk::natives::set_extra_tcmodifier(
            modifierName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_extra_tcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_string(&self, scaleform_: i32,
methodName_: Option<String>,
param1_: Option<String>,
param2_: Option<String>,
param3_: Option<String>,
param4_: Option<String>,
param5_: Option<String>) -> ResultOf_call_scaleform_movie_method_with_string {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
let mut param1_ = sdk_helpers::create_c_string_ptr(param1_);
let mut param2_ = sdk_helpers::create_c_string_ptr(param2_);
let mut param3_ = sdk_helpers::create_c_string_ptr(param3_);
let mut param4_ = sdk_helpers::create_c_string_ptr(param4_);
let mut param5_ = sdk_helpers::create_c_string_ptr(param5_);
        let success = sdk::natives::call_scaleform_movie_method_with_string(
            scaleform_,
methodName_.as_ref().unwrap(),
param1_.as_ref().unwrap(),
param2_.as_ref().unwrap(),
param3_.as_ref().unwrap(),
param4_.as_ref().unwrap(),
param5_.as_ref().unwrap(),
        );
        
        
        ResultOf_call_scaleform_movie_method_with_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie(&self, scaleformHandle_: i32,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p9_: i32) -> ResultOf_draw_scaleform_movie {
    unsafe {
        let mut scaleformHandle_ = scaleformHandle_;
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p9_ = p9_;
        let success = sdk::natives::draw_scaleform_movie(
            scaleformHandle_,
x_,
y_,
width_,
height_,
red_,
green_,
blue_,
alpha_,
p9_,
        );
        
        
        ResultOf_draw_scaleform_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bang_scrape_lodrange_scale(&self, p0_: f32) -> ResultOf_set_particle_fx_bang_scrape_lodrange_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bang_scrape_lodrange_scale(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_bang_scrape_lodrange_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_push_timecycle_modifier(&self, ) -> ResultOf_push_timecycle_modifier {
    unsafe {
        
        let success = sdk::natives::push_timecycle_modifier(
            
        );
        
        
        ResultOf_push_timecycle_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_create_mission_creator_photo_preview(&self, ) -> ResultOf_get_status_of_create_mission_creator_photo_preview {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_create_mission_creator_photo_preview(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_create_mission_creator_photo_preview {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_wash_decals_from_vehicle(&self, vehicle_: u32,
p1_: f32) -> ResultOf_wash_decals_from_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::wash_decals_from_vehicle(
            vehicle_,
p1_,
        );
        
        
        ResultOf_wash_decals_from_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_shadowed_spot_light(&self, posX_: f32,
posY_: f32,
posZ_: f32,
dirX_: f32,
dirY_: f32,
dirZ_: f32,
colorR_: i32,
colorG_: i32,
colorB_: i32,
distance_: f32,
brightness_: f32,
roundness_: f32,
radius_: f32,
falloff_: f32,
shadowId_: i32) -> ResultOf_draw_shadowed_spot_light {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut dirX_ = dirX_;
let mut dirY_ = dirY_;
let mut dirZ_ = dirZ_;
let mut colorR_ = colorR_;
let mut colorG_ = colorG_;
let mut colorB_ = colorB_;
let mut distance_ = distance_;
let mut brightness_ = brightness_;
let mut roundness_ = roundness_;
let mut radius_ = radius_;
let mut falloff_ = falloff_;
let mut shadowId_ = shadowId_;
        let success = sdk::natives::draw_shadowed_spot_light(
            posX_,
posY_,
posZ_,
dirX_,
dirY_,
dirZ_,
colorR_,
colorG_,
colorB_,
distance_,
brightness_,
roundness_,
radius_,
falloff_,
shadowId_,
        );
        
        
        ResultOf_draw_shadowed_spot_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screenblur_fade_current_time(&self, ) -> ResultOf_get_screenblur_fade_current_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screenblur_fade_current_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_screenblur_fade_current_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_terraingrid_set_colours(&self, lowR_: i32,
lowG_: i32,
lowB_: i32,
lowAlpha_: i32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32,
highR_: i32,
highG_: i32,
highB_: i32,
highAlpha_: i32) -> ResultOf_terraingrid_set_colours {
    unsafe {
        let mut lowR_ = lowR_;
let mut lowG_ = lowG_;
let mut lowB_ = lowB_;
let mut lowAlpha_ = lowAlpha_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
let mut highR_ = highR_;
let mut highG_ = highG_;
let mut highB_ = highB_;
let mut highAlpha_ = highAlpha_;
        let success = sdk::natives::terraingrid_set_colours(
            lowR_,
lowG_,
lowB_,
lowAlpha_,
r_,
g_,
b_,
alpha_,
highR_,
highG_,
highB_,
highAlpha_,
        );
        
        
        ResultOf_terraingrid_set_colours {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32) -> ResultOf_remove_decals_in_range {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
        let success = sdk::natives::remove_decals_in_range(
            x_,
y_,
z_,
range_,
        );
        
        
        ResultOf_remove_decals_in_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_skidmark_range_scale(&self, scale_: f32) -> ResultOf_set_skidmark_range_scale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_skidmark_range_scale(
            scale_,
        );
        
        
        ResultOf_set_skidmark_range_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_procobj_creation(&self, ) -> ResultOf_enable_procobj_creation {
    unsafe {
        
        let success = sdk::natives::enable_procobj_creation(
            
        );
        
        
        ResultOf_enable_procobj_creation {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_latest_brief_string_exist(&self, p0_: i32) -> ResultOf_does_latest_brief_string_exist {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_latest_brief_string_exist(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_does_latest_brief_string_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_entity_tracker_scale(&self, p0_: f32) -> ResultOf_cascade_shadows_set_entity_tracker_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_entity_tracker_scale(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_entity_tracker_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_evolution(&self, ptfxHandle_: i32,
propertyName_: Option<String>,
amount_: f32,
noNetwork_: bool) -> ResultOf_set_particle_fx_looped_evolution {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut propertyName_ = sdk_helpers::create_c_string_ptr(propertyName_);
let mut amount_ = amount_;
let mut noNetwork_ = noNetwork_;
        let success = sdk::natives::set_particle_fx_looped_evolution(
            ptfxHandle_,
propertyName_.as_ref().unwrap(),
amount_,
noNetwork_,
        );
        
        
        ResultOf_set_particle_fx_looped_evolution {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_cascade_bounds_scale(&self, p0_: f32) -> ResultOf_cascade_shadows_set_cascade_bounds_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_cascade_bounds_scale(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_cascade_bounds_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_downwash_ptfx(&self, toggle_: bool) -> ResultOf_disable_downwash_ptfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_downwash_ptfx(
            toggle_,
        );
        
        
        ResultOf_disable_downwash_ptfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_decal_rot_aligned_to_camera_rot(&self, checkpoint_: i32) -> ResultOf_set_checkpoint_decal_rot_aligned_to_camera_rot {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_decal_rot_aligned_to_camera_rot(
            checkpoint_,
        );
        
        
        ResultOf_set_checkpoint_decal_rot_aligned_to_camera_rot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_draw_order(&self, drawOrder_: i32) -> ResultOf_set_script_gfx_draw_order {
    unsafe {
        let mut drawOrder_ = drawOrder_;
        let success = sdk::natives::set_script_gfx_draw_order(
            drawOrder_,
        );
        
        
        ResultOf_set_script_gfx_draw_order {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_grass_cull_sphere(&self, handle_: i32) -> ResultOf_remove_grass_cull_sphere {
    unsafe {
        let mut handle_ = handle_;
        let success = sdk::natives::remove_grass_cull_sphere(
            handle_,
        );
        
        
        ResultOf_remove_grass_cull_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_bink_movie(&self, binkMovie_: i32) -> ResultOf_stop_bink_movie {
    unsafe {
        let mut binkMovie_ = binkMovie_;
        let success = sdk::natives::stop_bink_movie(
            binkMovie_,
        );
        
        
        ResultOf_stop_bink_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_disable_cullsphere(&self, handle_: i32) -> ResultOf_procgrass_disable_cullsphere {
    unsafe {
        let mut handle_ = handle_;
        let success = sdk::natives::procgrass_disable_cullsphere(
            handle_,
        );
        
        
        ResultOf_procgrass_disable_cullsphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_movie_with_ignore_super_widescreen(&self, scaleformName_: Option<String>) -> ResultOf_request_scaleform_movie_with_ignore_super_widescreen {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformName_ = sdk_helpers::create_c_string_ptr(scaleformName_);
        let success = sdk::natives::request_scaleform_movie_with_ignore_super_widescreen(
            &mut native_return,
scaleformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_request_scaleform_movie_with_ignore_super_widescreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bink_should_skip(&self, binkMovie_: i32,
bShouldSkip_: bool) -> ResultOf_set_bink_should_skip {
    unsafe {
        let mut binkMovie_ = binkMovie_;
let mut bShouldSkip_ = bShouldSkip_;
        let success = sdk::natives::set_bink_should_skip(
            binkMovie_,
bShouldSkip_,
        );
        
        
        ResultOf_set_bink_should_skip {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_low_quality_photo(&self, ) -> ResultOf_free_memory_for_low_quality_photo {
    unsafe {
        
        let success = sdk::natives::free_memory_for_low_quality_photo(
            
        );
        
        
        ResultOf_free_memory_for_low_quality_photo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_motionblur(&self, toggle_: bool) -> ResultOf_set_force_motionblur {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_motionblur(
            toggle_,
        );
        
        
        ResultOf_set_force_motionblur {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_line {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_line(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_line {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_particle_fx_asset(&self, name_: Option<String>) -> ResultOf_use_particle_fx_asset {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::use_particle_fx_asset(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_use_particle_fx_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_system_time(&self, scaleform_: i32,
toggle_: bool) -> ResultOf_set_scaleform_movie_to_use_system_time {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_system_time(
            scaleform_,
toggle_,
        );
        
        
        ResultOf_set_scaleform_movie_to_use_system_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_grassbatch_enable_flattening_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: f32,
p5_: f32,
p6_: f32) -> ResultOf_grassbatch_enable_flattening_in_sphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::grassbatch_enable_flattening_in_sphere(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_grassbatch_enable_flattening_in_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_script_gfx_align_position(&self, x_: f32,
y_: f32,
calculatedX_: f32,
calculatedY_: f32) -> ResultOf_get_script_gfx_align_position {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut calculatedX_ = Default::default();
let mut calculatedY_ = Default::default();
        let success = sdk::natives::get_script_gfx_align_position(
            &mut calculatedX_,
&mut calculatedY_,
x_,
y_,
        );
        let calculatedX_ = calculatedX_;
let calculatedY_ = calculatedY_;
        
        ResultOf_get_script_gfx_align_position {
            success,
            ret: (),
            calculatedX_,
calculatedY_
        }
    }
}

    fn native_cascade_shadows_set_aircraft_mode(&self, p0_: bool) -> ResultOf_cascade_shadows_set_aircraft_mode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_aircraft_mode(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_aircraft_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_looped_on_entity(&self, effectName_: Option<String>,
entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool,
r_: f32,
g_: f32,
b_: f32,
a_: f32) -> ResultOf_start_networked_particle_fx_looped_on_entity {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::start_networked_particle_fx_looped_on_entity(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
xOffset_,
yOffset_,
zOffset_,
xRot_,
yRot_,
zRot_,
scale_,
xAxis_,
yAxis_,
zAxis_,
r_,
g_,
b_,
a_,
        );
        let native_return = native_return;
        
        ResultOf_start_networked_particle_fx_looped_on_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_reset(&self, ) -> ResultOf_seethrough_reset {
    unsafe {
        
        let success = sdk::natives::seethrough_reset(
            
        );
        
        
        ResultOf_seethrough_reset {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_bink_movie(&self, binkMovie_: i32) -> ResultOf_play_bink_movie {
    unsafe {
        let mut binkMovie_ = binkMovie_;
        let success = sdk::natives::play_bink_movie(
            binkMovie_,
        );
        
        
        ResultOf_play_bink_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_bink_movie(&self, binkMovie_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_draw_bink_movie {
    unsafe {
        let mut binkMovie_ = binkMovie_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::draw_bink_movie(
            binkMovie_,
p1_,
p2_,
p3_,
p4_,
p5_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_draw_bink_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_rgba(&self, checkpoint_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_set_checkpoint_rgba {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_checkpoint_rgba(
            checkpoint_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_set_checkpoint_rgba {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_alpha(&self, ptfxHandle_: i32,
alpha_: f32) -> ResultOf_set_particle_fx_looped_alpha {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_particle_fx_looped_alpha(
            ptfxHandle_,
alpha_,
        );
        
        
        ResultOf_set_particle_fx_looped_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_textured_poly_with_three_colours(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red1_: f32,
green1_: f32,
blue1_: f32,
alpha1_: i32,
red2_: f32,
green2_: f32,
blue2_: f32,
alpha2_: i32,
red3_: f32,
green3_: f32,
blue3_: f32,
alpha3_: i32,
textureDict_: Option<String>,
textureName_: Option<String>,
u1_: f32,
v1_: f32,
w1_: f32,
u2_: f32,
v2_: f32,
w2_: f32,
u3_: f32,
v3_: f32,
w3_: f32) -> ResultOf_draw_textured_poly_with_three_colours {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red1_ = red1_;
let mut green1_ = green1_;
let mut blue1_ = blue1_;
let mut alpha1_ = alpha1_;
let mut red2_ = red2_;
let mut green2_ = green2_;
let mut blue2_ = blue2_;
let mut alpha2_ = alpha2_;
let mut red3_ = red3_;
let mut green3_ = green3_;
let mut blue3_ = blue3_;
let mut alpha3_ = alpha3_;
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut w1_ = w1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut w2_ = w2_;
let mut u3_ = u3_;
let mut v3_ = v3_;
let mut w3_ = w3_;
        let success = sdk::natives::draw_textured_poly_with_three_colours(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red1_,
green1_,
blue1_,
alpha1_,
red2_,
green2_,
blue2_,
alpha2_,
red3_,
green3_,
blue3_,
alpha3_,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
u1_,
v1_,
w1_,
u2_,
v2_,
w2_,
u3_,
v3_,
w3_,
        );
        
        
        ResultOf_draw_textured_poly_with_three_colours {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_cross(&self, x_: f32,
y_: f32,
z_: f32,
size_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_debug_cross {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut size_ = size_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_cross(
            x_,
y_,
z_,
size_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_debug_cross {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_particle_fx_looped_exist(&self, ptfxHandle_: i32) -> ResultOf_does_particle_fx_looped_exist {
    unsafe {
        let mut native_return = Default::default();
let mut ptfxHandle_ = ptfxHandle_;
        let success = sdk::natives::does_particle_fx_looped_exist(
            &mut native_return,
ptfxHandle_,
        );
        let native_return = native_return;
        
        ResultOf_does_particle_fx_looped_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_movie_keyframe_wait(&self, toggle_: bool) -> ResultOf_enable_movie_keyframe_wait {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_movie_keyframe_wait(
            toggle_,
        );
        
        
        ResultOf_enable_movie_keyframe_wait {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_create_low_quality_copy_of_photo(&self, p0_: i32) -> ResultOf_begin_create_low_quality_copy_of_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::begin_create_low_quality_copy_of_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_begin_create_low_quality_copy_of_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scaleform_movie_method_return_value_ready(&self, methodReturn_: i32) -> ResultOf_is_scaleform_movie_method_return_value_ready {
    unsafe {
        let mut native_return = Default::default();
let mut methodReturn_ = methodReturn_;
        let success = sdk::natives::is_scaleform_movie_method_return_value_ready(
            &mut native_return,
methodReturn_,
        );
        let native_return = native_return;
        
        ResultOf_is_scaleform_movie_method_return_value_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_non_looped_alpha(&self, alpha_: f32) -> ResultOf_set_particle_fx_non_looped_alpha {
    unsafe {
        let mut alpha_ = alpha_;
        let success = sdk::natives::set_particle_fx_non_looped_alpha(
            alpha_,
        );
        
        
        ResultOf_set_particle_fx_non_looped_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_literal_string(&self, string_: Option<String>) -> ResultOf_scaleform_movie_method_add_param_literal_string {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_literal_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOf_scaleform_movie_method_add_param_literal_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_marker_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: f32) -> ResultOf_draw_marker_sphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_marker_sphere(
            x_,
y_,
z_,
radius_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_marker_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_clear_patched_data(&self, ) -> ResultOf_ui3dscene_clear_patched_data {
    unsafe {
        
        let success = sdk::natives::ui3dscene_clear_patched_data(
            
        );
        
        
        ResultOf_ui3dscene_clear_patched_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_toggle(&self, p0_: bool) -> ResultOf_phonephotoeditor_toggle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::phonephotoeditor_toggle(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_phonephotoeditor_toggle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screenblur_fade_running(&self, ) -> ResultOf_is_screenblur_fade_running {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screenblur_fade_running(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_screenblur_fade_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_seethrough(&self, toggle_: bool) -> ResultOf_set_seethrough {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_seethrough(
            toggle_,
        );
        
        
        ResultOf_set_seethrough {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_colour(&self, ptfxHandle_: i32,
r_: f32,
g_: f32,
b_: f32,
p4_: bool) -> ResultOf_set_particle_fx_looped_colour {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut p4_ = p4_;
        let success = sdk::natives::set_particle_fx_looped_colour(
            ptfxHandle_,
r_,
g_,
b_,
p4_,
        );
        
        
        ResultOf_set_particle_fx_looped_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_create_mission_creator_photo_preview(&self, ) -> ResultOf_begin_create_mission_creator_photo_preview {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_create_mission_creator_photo_preview(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_begin_create_mission_creator_photo_preview {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_debug_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32) -> ResultOf_draw_debug_line {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_line(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r_,
g_,
b_,
alpha_,
        );
        
        
        ResultOf_draw_debug_line {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_scaleform_string(&self, componentType_: Option<String>) -> ResultOf_begin_text_command_scaleform_string {
    unsafe {
        let mut componentType_ = sdk_helpers::create_c_string_ptr(componentType_);
        let success = sdk::natives::begin_text_command_scaleform_string(
            componentType_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_scaleform_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_enable_entity_tracker(&self, toggle_: bool) -> ResultOf_cascade_shadows_enable_entity_tracker {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cascade_shadows_enable_entity_tracker(
            toggle_,
        );
        
        
        ResultOf_cascade_shadows_enable_entity_tracker {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_exposure_readback(&self, toggle_: bool) -> ResultOf_force_exposure_readback {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_exposure_readback(
            toggle_,
        );
        
        
        ResultOf_force_exposure_readback {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_container_movie_loaded_into_parent(&self, scaleformHandle_: i32) -> ResultOf_has_scaleform_container_movie_loaded_into_parent {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformHandle_ = scaleformHandle_;
        let success = sdk::natives::has_scaleform_container_movie_loaded_into_parent(
            &mut native_return,
scaleformHandle_,
        );
        let native_return = native_return;
        
        ResultOf_has_scaleform_container_movie_loaded_into_parent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_abort_vehicle_crew_emblem_request(&self, p0_: i32) -> ResultOf_abort_vehicle_crew_emblem_request {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::abort_vehicle_crew_emblem_request(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_abort_vehicle_crew_emblem_request {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_set_timecycle_modifier_strength(&self, strength_: f32) -> ResultOf_set_timecycle_modifier_strength {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::set_timecycle_modifier_strength(
            strength_,
        );
        
        
        ResultOf_set_timecycle_modifier_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_tv_audio_to_entity(&self, entity_: u32) -> ResultOf_attach_tv_audio_to_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::attach_tv_audio_to_entity(
            entity_,
        );
        
        
        ResultOf_attach_tv_audio_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_move_vehicle_decals(&self, p0_: i32,
p1_: i32) -> ResultOf_move_vehicle_decals {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::move_vehicle_decals(
            p0_,
p1_,
        );
        
        
        ResultOf_move_vehicle_decals {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_hidef(&self, ) -> ResultOf_get_is_hidef {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_hidef(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_hidef {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_grab_pausemenu_ownership(&self, ) -> ResultOf_grab_pausemenu_ownership {
    unsafe {
        
        let success = sdk::natives::grab_pausemenu_ownership(
            
        );
        
        
        ResultOf_grab_pausemenu_ownership {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_movie_loaded(&self, scaleformHandle_: i32) -> ResultOf_has_scaleform_movie_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformHandle_ = scaleformHandle_;
        let success = sdk::natives::has_scaleform_movie_loaded(
            &mut native_return,
scaleformHandle_,
        );
        let native_return = native_return;
        
        ResultOf_has_scaleform_movie_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scaleform_movie_deleting(&self, val_: i32) -> ResultOf_is_scaleform_movie_deleting {
    unsafe {
        let mut native_return = Default::default();
let mut val_ = val_;
        let success = sdk::natives::is_scaleform_movie_deleting(
            &mut native_return,
val_,
        );
        let native_return = native_return;
        
        ResultOf_is_scaleform_movie_deleting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_actual_screen_resolution(&self, x_: i32,
y_: i32) -> ResultOf_get_actual_screen_resolution {
    unsafe {
        let mut x_ = Default::default();
let mut y_ = Default::default();
        let success = sdk::natives::get_actual_screen_resolution(
            &mut x_,
&mut y_,
        );
        let x_ = x_;
let y_ = y_;
        
        ResultOf_get_actual_screen_resolution {
            success,
            ret: (),
            x_,
y_
        }
    }
}

    fn native_enable_movie_subtitles(&self, toggle_: bool) -> ResultOf_enable_movie_subtitles {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_movie_subtitles(
            toggle_,
        );
        
        
        ResultOf_enable_movie_subtitles {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie_3d(&self, scaleform_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
scaleX_: f32,
scaleY_: f32,
scaleZ_: f32,
rotationOrder_: i32) -> ResultOf_draw_scaleform_movie_3d {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut scaleX_ = scaleX_;
let mut scaleY_ = scaleY_;
let mut scaleZ_ = scaleZ_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::draw_scaleform_movie_3d(
            scaleform_,
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
p7_,
p8_,
p9_,
scaleX_,
scaleY_,
scaleZ_,
rotationOrder_,
        );
        
        
        ResultOf_draw_scaleform_movie_3d {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_resolution(&self, x_: i32,
y_: i32) -> ResultOf_get_screen_resolution {
    unsafe {
        let mut x_ = Default::default();
let mut y_ = Default::default();
        let success = sdk::natives::get_screen_resolution(
            &mut x_,
&mut y_,
        );
        let x_ = x_;
let y_ = y_;
        
        ResultOf_get_screen_resolution {
            success,
            ret: (),
            x_,
y_
        }
    }
}

    fn native_reset_particle_fx_override(&self, name_: Option<String>) -> ResultOf_reset_particle_fx_override {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::reset_particle_fx_override(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_reset_particle_fx_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_patch_decal_diffuse_map(&self, decalType_: i32,
textureDict_: Option<String>,
textureName_: Option<String>) -> ResultOf_patch_decal_diffuse_map {
    unsafe {
        let mut decalType_ = decalType_;
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
        let success = sdk::natives::patch_decal_diffuse_map(
            decalType_,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
        );
        
        
        ResultOf_patch_decal_diffuse_map {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_force_vehicle_interior(&self, toggle_: bool) -> ResultOf_set_particle_fx_force_vehicle_interior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_particle_fx_force_vehicle_interior(
            toggle_,
        );
        
        
        ResultOf_set_particle_fx_force_vehicle_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_bink_movie_time(&self, binkMovie_: i32) -> ResultOf_get_bink_movie_time {
    unsafe {
        let mut native_return = Default::default();
let mut binkMovie_ = binkMovie_;
        let success = sdk::natives::get_bink_movie_time(
            &mut native_return,
binkMovie_,
        );
        let native_return = native_return;
        
        ResultOf_get_bink_movie_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_particle_fx_looped(&self, ptfxHandle_: i32,
p1_: bool) -> ResultOf_stop_particle_fx_looped {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_particle_fx_looped(
            ptfxHandle_,
p1_,
        );
        
        
        ResultOf_stop_particle_fx_looped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_blood_scale(&self, p0_: i32) -> ResultOf_set_particle_fx_blood_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_blood_scale(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_blood_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_take_mission_creator_photo(&self, ) -> ResultOf_get_status_of_take_mission_creator_photo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_take_mission_creator_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_take_mission_creator_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_extra_tcmodifier(&self, ) -> ResultOf_clear_extra_tcmodifier {
    unsafe {
        
        let success = sdk::natives::clear_extra_tcmodifier(
            
        );
        
        
        ResultOf_clear_extra_tcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_script_hud_movie(&self, hudComponent_: i32) -> ResultOf_request_scaleform_script_hud_movie {
    unsafe {
        let mut hudComponent_ = hudComponent_;
        let success = sdk::natives::request_scaleform_script_hud_movie(
            hudComponent_,
        );
        
        
        ResultOf_request_scaleform_script_hud_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_foot_lodrange_scale(&self, p0_: f32) -> ResultOf_set_particle_fx_foot_lodrange_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_foot_lodrange_scale(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_foot_lodrange_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_arx_with_uv(&self, textureDict_: Option<String>,
textureName_: Option<String>,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
u1_: f32,
v1_: f32,
u2_: f32,
v2_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p15_: i32) -> ResultOf_draw_sprite_arx_with_uv {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p15_ = p15_;
        let success = sdk::natives::draw_sprite_arx_with_uv(
            textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
x_,
y_,
width_,
height_,
u1_,
v1_,
u2_,
v2_,
heading_,
red_,
green_,
blue_,
alpha_,
p15_,
        );
        
        
        ResultOf_draw_sprite_arx_with_uv {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_ped_crew_logo_texture(&self, ped_: u32,
txd_: Option<String>,
txn_: Option<String>) -> ResultOf_override_ped_crew_logo_texture {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut txd_ = sdk_helpers::create_c_string_ptr(txd_);
let mut txn_ = sdk_helpers::create_c_string_ptr(txn_);
        let success = sdk::natives::override_ped_crew_logo_texture(
            &mut native_return,
ped_,
txd_.as_ref().unwrap(),
txn_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_override_ped_crew_logo_texture {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_light_override_max_intensity_scale(&self, p0_: i32) -> ResultOf_set_light_override_max_intensity_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_light_override_max_intensity_scale(
            p0_,
        );
        
        
        ResultOf_set_light_override_max_intensity_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_petrol_trail_decal_info(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32) -> ResultOf_add_petrol_trail_decal_info {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::add_petrol_trail_decal_info(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOf_add_petrol_trail_decal_info {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_shootout_boat(&self, p0_: i32) -> ResultOf_set_particle_fx_shootout_boat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_shootout_boat(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_shootout_boat {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_script_hud_movie_method(&self, hudComponent_: i32,
methodName_: Option<String>) -> ResultOf_begin_scaleform_script_hud_movie_method {
    unsafe {
        let mut native_return = Default::default();
let mut hudComponent_ = hudComponent_;
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
        let success = sdk::natives::begin_scaleform_script_hud_movie_method(
            &mut native_return,
hudComponent_,
methodName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_begin_scaleform_script_hud_movie_method {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui3dscene_assign_ped_to_slot(&self, presetName_: Option<String>,
ped_: u32,
slot_: i32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_ui3dscene_assign_ped_to_slot {
    unsafe {
        let mut native_return = Default::default();
let mut presetName_ = sdk_helpers::create_c_string_ptr(presetName_);
let mut ped_ = ped_;
let mut slot_ = slot_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::ui3dscene_assign_ped_to_slot(
            &mut native_return,
presetName_.as_ref().unwrap(),
ped_,
slot_,
posX_,
posY_,
posZ_,
        );
        let native_return = native_return;
        
        ResultOf_ui3dscene_assign_ped_to_slot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_timecycle_transitioning_out(&self, ) -> ResultOf_get_is_timecycle_transitioning_out {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_timecycle_transitioning_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_timecycle_transitioning_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_early_light_check(&self, ) -> ResultOf_request_early_light_check {
    unsafe {
        
        let success = sdk::natives::request_early_light_check(
            
        );
        
        
        ResultOf_request_early_light_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_petrol_trail_decals(&self, p0_: f32) -> ResultOf_start_petrol_trail_decals {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::start_petrol_trail_decals(
            p0_,
        );
        
        
        ResultOf_start_petrol_trail_decals {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_postfx_bullet_impacts_after_hud(&self, p0_: bool) -> ResultOf_force_postfx_bullet_impacts_after_hud {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_postfx_bullet_impacts_after_hud(
            p0_,
        );
        
        
        ResultOf_force_postfx_bullet_impacts_after_hud {
            success,
            ret: (),
            
        }
    }
}

    fn native_query_movie_mesh_set_state(&self, p0_: i32) -> ResultOf_query_movie_mesh_set_state {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::query_movie_mesh_set_state(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_query_movie_mesh_set_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_wash_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: f32) -> ResultOf_wash_decals_in_range {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::wash_decals_in_range(
            x_,
y_,
z_,
range_,
p4_,
        );
        
        
        ResultOf_wash_decals_in_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_entity_icon(&self, entity_: u32,
icon_: Option<String>) -> ResultOf_add_entity_icon {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut icon_ = sdk_helpers::create_c_string_ptr(icon_);
        let success = sdk::natives::add_entity_icon(
            &mut native_return,
entity_,
icon_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_add_entity_icon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_shader_params(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOf_golf_trail_set_shader_params {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::golf_trail_set_shader_params(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_golf_trail_set_shader_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_fade_enddistance(&self, distance_: f32) -> ResultOf_seethrough_set_fade_enddistance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::seethrough_set_fade_enddistance(
            distance_,
        );
        
        
        ResultOf_seethrough_set_fade_enddistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_alien_blood_vfx(&self, toggle_: bool) -> ResultOf_enable_alien_blood_vfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_alien_blood_vfx(
            toggle_,
        );
        
        
        ResultOf_enable_alien_blood_vfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_screenblur_fade_in(&self, transitionTime_: f32) -> ResultOf_trigger_screenblur_fade_in {
    unsafe {
        let mut native_return = Default::default();
let mut transitionTime_ = transitionTime_;
        let success = sdk::natives::trigger_screenblur_fade_in(
            &mut native_return,
transitionTime_,
        );
        let native_return = native_return;
        
        ResultOf_trigger_screenblur_fade_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_terraingrid_activate(&self, toggle_: bool) -> ResultOf_terraingrid_activate {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::terraingrid_activate(
            toggle_,
        );
        
        
        ResultOf_terraingrid_activate {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_text_2d(&self, text_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_debug_text_2d {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_text_2d(
            text_.as_ref().unwrap(),
x_,
y_,
z_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_debug_text_2d {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_on_ped_bone(&self, effectName_: Option<String>,
ped_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
boneIndex_: i32,
scale_: f32,
axisX_: bool,
axisY_: bool,
axisZ_: bool) -> ResultOf_start_networked_particle_fx_non_looped_on_ped_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut ped_ = ped_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut axisX_ = axisX_;
let mut axisY_ = axisY_;
let mut axisZ_ = axisZ_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_on_ped_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
ped_,
offsetX_,
offsetY_,
offsetZ_,
rotX_,
rotY_,
rotZ_,
boneIndex_,
scale_,
axisX_,
axisY_,
axisZ_,
        );
        let native_return = native_return;
        
        ResultOf_start_networked_particle_fx_non_looped_on_ped_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_noir_lens_effect(&self, ) -> ResultOf_register_noir_lens_effect {
    unsafe {
        
        let success = sdk::natives::register_noir_lens_effect(
            
        );
        
        
        ResultOf_register_noir_lens_effect {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_get_visual_control_point(&self, p0_: i32) -> ResultOf_golf_trail_get_visual_control_point {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_get_visual_control_point(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_golf_trail_get_visual_control_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_ptfx_use_override_settings(&self, p0_: bool) -> ResultOf_set_weather_ptfx_use_override_settings {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_weather_ptfx_use_override_settings(
            p0_,
        );
        
        
        ResultOf_set_weather_ptfx_use_override_settings {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_get_max_height(&self, ) -> ResultOf_golf_trail_get_max_height {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::golf_trail_get_max_height(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_golf_trail_get_max_height {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_enabled(&self, toggle_: bool) -> ResultOf_golf_trail_set_enabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::golf_trail_set_enabled(
            toggle_,
        );
        
        
        ResultOf_golf_trail_set_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_take_high_quality_photo(&self, ) -> ResultOf_begin_take_high_quality_photo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_take_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_begin_take_high_quality_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decals_from_object_facing(&self, obj_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_remove_decals_from_object_facing {
    unsafe {
        let mut obj_ = obj_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::remove_decals_from_object_facing(
            obj_,
x_,
y_,
z_,
        );
        
        
        ResultOf_remove_decals_from_object_facing {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_fade_startdistance(&self, distance_: f32) -> ResultOf_seethrough_set_fade_startdistance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::seethrough_set_fade_startdistance(
            distance_,
        );
        
        
        ResultOf_seethrough_set_fade_startdistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_draw_origin(&self, x_: f32,
y_: f32,
z_: f32,
p3_: bool) -> ResultOf_set_draw_origin {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::set_draw_origin(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOf_set_draw_origin {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_debug_sphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_sphere(
            x_,
y_,
z_,
radius_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_debug_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_grassbatch_enable_flattening_ext_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
p4_: f32,
p5_: f32,
p6_: f32,
scale_: f32) -> ResultOf_grassbatch_enable_flattening_ext_in_sphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut scale_ = scale_;
        let success = sdk::natives::grassbatch_enable_flattening_ext_in_sphere(
            x_,
y_,
z_,
p3_,
p4_,
p5_,
p6_,
scale_,
        );
        
        
        ResultOf_grassbatch_enable_flattening_ext_in_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method_on_frontend(&self, methodName_: Option<String>) -> ResultOf_begin_scaleform_movie_method_on_frontend {
    unsafe {
        let mut native_return = Default::default();
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
        let success = sdk::natives::begin_scaleform_movie_method_on_frontend(
            &mut native_return,
methodName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_begin_scaleform_movie_method_on_frontend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_poly(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_poly {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_poly(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_poly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_cam_inside_nonplayer_vehicle(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_particle_fx_cam_inside_nonplayer_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_particle_fx_cam_inside_nonplayer_vehicle(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_particle_fx_cam_inside_nonplayer_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_on_island_x_for_taken_photo(&self, p0_: i32) -> ResultOf_set_on_island_x_for_taken_photo {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_on_island_x_for_taken_photo(
            p0_,
        );
        
        
        ResultOf_set_on_island_x_for_taken_photo {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_unparsed_scaleform_string(&self, ) -> ResultOf_end_text_command_unparsed_scaleform_string {
    unsafe {
        
        let success = sdk::natives::end_text_command_unparsed_scaleform_string(
            
        );
        
        
        ResultOf_end_text_command_unparsed_scaleform_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_enable_cullsphere(&self, handle_: i32,
x_: f32,
y_: f32,
z_: f32,
scale_: f32) -> ResultOf_procgrass_enable_cullsphere {
    unsafe {
        let mut handle_ = handle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut scale_ = scale_;
        let success = sdk::natives::procgrass_enable_cullsphere(
            handle_,
x_,
y_,
z_,
scale_,
        );
        
        
        ResultOf_procgrass_enable_cullsphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_snow_foot_vfx_when_unsheltered(&self, toggle_: bool) -> ResultOf_use_snow_foot_vfx_when_unsheltered {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_snow_foot_vfx_when_unsheltered(
            toggle_,
        );
        
        
        ResultOf_use_snow_foot_vfx_when_unsheltered {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_volume(&self, binkMovie_: i32,
value_: f32) -> ResultOf_set_bink_movie_volume {
    unsafe {
        let mut binkMovie_ = binkMovie_;
let mut value_ = value_;
        let success = sdk::natives::set_bink_movie_volume(
            binkMovie_,
value_,
        );
        
        
        ResultOf_set_bink_movie_volume {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_shadow_sample_type(&self, type_: Option<String>) -> ResultOf_cascade_shadows_set_shadow_sample_type {
    unsafe {
        let mut type_ = sdk_helpers::create_c_string_ptr(type_);
        let success = sdk::natives::cascade_shadows_set_shadow_sample_type(
            type_.as_ref().unwrap(),
        );
        
        
        ResultOf_cascade_shadows_set_shadow_sample_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_fixed_control_point(&self, type_: i32,
xPos_: f32,
yPos_: f32,
zPos_: f32,
p4_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_golf_trail_set_fixed_control_point {
    unsafe {
        let mut type_ = type_;
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut p4_ = p4_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::golf_trail_set_fixed_control_point(
            type_,
xPos_,
yPos_,
zPos_,
p4_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_golf_trail_set_fixed_control_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_tracked_point(&self, point_: i32) -> ResultOf_destroy_tracked_point {
    unsafe {
        let mut point_ = point_;
        let success = sdk::natives::destroy_tracked_point(
            point_,
        );
        
        
        ResultOf_destroy_tracked_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_aspect_ratio(&self, ) -> ResultOf_get_screen_aspect_ratio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screen_aspect_ratio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_screen_aspect_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_decal(&self, decalType_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
width_: f32,
height_: f32,
rCoef_: f32,
gCoef_: f32,
bCoef_: f32,
opacity_: f32,
timeout_: f32,
p17_: bool,
p18_: bool,
p19_: bool) -> ResultOf_add_decal {
    unsafe {
        let mut native_return = Default::default();
let mut decalType_ = decalType_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut width_ = width_;
let mut height_ = height_;
let mut rCoef_ = rCoef_;
let mut gCoef_ = gCoef_;
let mut bCoef_ = bCoef_;
let mut opacity_ = opacity_;
let mut timeout_ = timeout_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
        let success = sdk::natives::add_decal(
            &mut native_return,
decalType_,
posX_,
posY_,
posZ_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
width_,
height_,
rCoef_,
gCoef_,
bCoef_,
opacity_,
timeout_,
p17_,
p18_,
p19_,
        );
        let native_return = native_return;
        
        ResultOf_add_decal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_motionblur_max_vel_scaler(&self, p0_: f32) -> ResultOf_set_motionblur_max_vel_scaler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_motionblur_max_vel_scaler(
            p0_,
        );
        
        
        ResultOf_set_motionblur_max_vel_scaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_scale(&self, ptfxHandle_: i32,
scale_: f32) -> ResultOf_set_particle_fx_looped_scale {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_looped_scale(
            ptfxHandle_,
scale_,
        );
        
        
        ResultOf_set_particle_fx_looped_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_animpostfx_stop_all(&self, ) -> ResultOf_animpostfx_stop_all {
    unsafe {
        
        let success = sdk::natives::animpostfx_stop_all(
            
        );
        
        
        ResultOf_animpostfx_stop_all {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_lock_adaptive_dof_distance(&self, p0_: bool) -> ResultOf_set_lock_adaptive_dof_distance {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_lock_adaptive_dof_distance(
            p0_,
        );
        
        
        ResultOf_set_lock_adaptive_dof_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_movie_mesh_set(&self, movieMeshSetName_: Option<String>) -> ResultOf_load_movie_mesh_set {
    unsafe {
        let mut native_return = Default::default();
let mut movieMeshSetName_ = sdk_helpers::create_c_string_ptr(movieMeshSetName_);
        let success = sdk::natives::load_movie_mesh_set(
            &mut native_return,
movieMeshSetName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_load_movie_mesh_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unpatch_decal_diffuse_map(&self, decalType_: i32) -> ResultOf_unpatch_decal_diffuse_map {
    unsafe {
        let mut decalType_ = decalType_;
        let success = sdk::natives::unpatch_decal_diffuse_map(
            decalType_,
        );
        
        
        ResultOf_unpatch_decal_diffuse_map {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_non_looped_scale(&self, scale_: f32) -> ResultOf_set_particle_fx_non_looped_scale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_non_looped_scale(
            scale_,
        );
        
        
        ResultOf_set_particle_fx_non_looped_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_align(&self, horizontalAlign_: i32,
verticalAlign_: i32) -> ResultOf_set_script_gfx_align {
    unsafe {
        let mut horizontalAlign_ = horizontalAlign_;
let mut verticalAlign_ = verticalAlign_;
        let success = sdk::natives::set_script_gfx_align(
            horizontalAlign_,
verticalAlign_,
        );
        
        
        ResultOf_set_script_gfx_align {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx_from_entity(&self, entity_: u32) -> ResultOf_remove_particle_fx_from_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::remove_particle_fx_from_entity(
            entity_,
        );
        
        
        ResultOf_remove_particle_fx_from_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method_on_frontend_header(&self, methodName_: Option<String>) -> ResultOf_begin_scaleform_movie_method_on_frontend_header {
    unsafe {
        let mut native_return = Default::default();
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
        let success = sdk::natives::begin_scaleform_movie_method_on_frontend_header(
            &mut native_return,
methodName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_begin_scaleform_movie_method_on_frontend_header {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_checkpoint_rgba2(&self, checkpoint_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_set_checkpoint_rgba2 {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_checkpoint_rgba2(
            checkpoint_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_set_checkpoint_rgba2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_particle_fx_in_vehicle_interior(&self, p0_: i32,
p1_: i32) -> ResultOf_force_particle_fx_in_vehicle_interior {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_particle_fx_in_vehicle_interior(
            p0_,
p1_,
        );
        
        
        ResultOf_force_particle_fx_in_vehicle_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_foot_override_name(&self, p0_: Option<String>) -> ResultOf_set_particle_fx_foot_override_name {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::set_particle_fx_foot_override_name(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_particle_fx_foot_override_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hidof_override(&self, p0_: bool,
p1_: bool,
nearplaneOut_: f32,
nearplaneIn_: f32,
farplaneOut_: f32,
farplaneIn_: f32) -> ResultOf_set_hidof_override {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut nearplaneOut_ = nearplaneOut_;
let mut nearplaneIn_ = nearplaneIn_;
let mut farplaneOut_ = farplaneOut_;
let mut farplaneIn_ = farplaneIn_;
        let success = sdk::natives::set_hidof_override(
            p0_,
p1_,
nearplaneOut_,
nearplaneIn_,
farplaneOut_,
farplaneIn_,
        );
        
        
        ResultOf_set_hidof_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_texture_name_string(&self, string_: Option<String>) -> ResultOf_scaleform_movie_method_add_param_texture_name_string {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_texture_name_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOf_scaleform_movie_method_add_param_texture_name_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_channel(&self, channel_: i32) -> ResultOf_set_tv_channel {
    unsafe {
        let mut channel_ = channel_;
        let success = sdk::natives::set_tv_channel(
            channel_,
        );
        
        
        ResultOf_set_tv_channel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_safe_zone_size(&self, ) -> ResultOf_get_safe_zone_size {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_safe_zone_size(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_safe_zone_size {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_extra_tcmodifier(&self, ) -> ResultOf_get_extra_tcmodifier {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_extra_tcmodifier(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_extra_tcmodifier {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_bullet_impact_lodrange_scale(&self, p0_: f32) -> ResultOf_set_particle_fx_bullet_impact_lodrange_scale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bullet_impact_lodrange_scale(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_bullet_impact_lodrange_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_current_player_tcmodifier(&self, modifierName_: Option<String>) -> ResultOf_set_current_player_tcmodifier {
    unsafe {
        let mut modifierName_ = sdk_helpers::create_c_string_ptr(modifierName_);
        let success = sdk::natives::set_current_player_tcmodifier(
            modifierName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_current_player_tcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_is_active(&self, ) -> ResultOf_phonephotoeditor_is_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::phonephotoeditor_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_phonephotoeditor_is_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_scaleform_movie_skip_render_while_paused(&self, scaleformName_: Option<String>) -> ResultOf_request_scaleform_movie_skip_render_while_paused {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformName_ = sdk_helpers::create_c_string_ptr(scaleformName_);
        let success = sdk::natives::request_scaleform_movie_skip_render_while_paused(
            &mut native_return,
scaleformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_request_scaleform_movie_skip_render_while_paused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_tcmodifier_transition(&self, value_: f32) -> ResultOf_set_player_tcmodifier_transition {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_player_tcmodifier_transition(
            value_,
        );
        
        
        ResultOf_set_player_tcmodifier_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_grass_cull_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_set_grass_cull_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_grass_cull_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_set_grass_cull_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_streamed_texture_dict_as_no_longer_needed(&self, textureDict_: Option<String>) -> ResultOf_set_streamed_texture_dict_as_no_longer_needed {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
        let success = sdk::natives::set_streamed_texture_dict_as_no_longer_needed(
            textureDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_streamed_texture_dict_as_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_tv_channel_playlist(&self, tvChannel_: i32) -> ResultOf_clear_tv_channel_playlist {
    unsafe {
        let mut tvChannel_ = tvChannel_;
        let success = sdk::natives::clear_tv_channel_playlist(
            tvChannel_,
        );
        
        
        ResultOf_clear_tv_channel_playlist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_player_tcmodifier(&self, modifierName_: Option<String>) -> ResultOf_set_next_player_tcmodifier {
    unsafe {
        let mut modifierName_ = sdk_helpers::create_c_string_ptr(modifierName_);
        let success = sdk::natives::set_next_player_tcmodifier(
            modifierName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_next_player_tcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_fixed_control_point_enable(&self, p0_: bool) -> ResultOf_golf_trail_set_fixed_control_point_enable {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_set_fixed_control_point_enable(
            p0_,
        );
        
        
        ResultOf_golf_trail_set_fixed_control_point_enable {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_hdtex_this_frame(&self, ) -> ResultOf_disable_hdtex_this_frame {
    unsafe {
        
        let success = sdk::natives::disable_hdtex_this_frame(
            
        );
        
        
        ResultOf_disable_hdtex_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_int(&self, value_: i32) -> ResultOf_scaleform_movie_method_add_param_int {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_int(
            value_,
        );
        
        
        ResultOf_scaleform_movie_method_add_param_int {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx(&self, ptfxHandle_: i32,
p1_: bool) -> ResultOf_remove_particle_fx {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_particle_fx(
            ptfxHandle_,
p1_,
        );
        
        
        ResultOf_remove_particle_fx {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_tracked_point_visible(&self, point_: i32) -> ResultOf_is_tracked_point_visible {
    unsafe {
        let mut native_return = Default::default();
let mut point_ = point_;
        let success = sdk::natives::is_tracked_point_visible(
            &mut native_return,
point_,
        );
        let native_return = native_return;
        
        ResultOf_is_tracked_point_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_scaleform_movie_method_return_value(&self, ) -> ResultOf_end_scaleform_movie_method_return_value {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::end_scaleform_movie_method_return_value(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_end_scaleform_movie_method_return_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_scaleform_movie_instance(&self, scaleformName_: Option<String>) -> ResultOf_request_scaleform_movie_instance {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformName_ = sdk_helpers::create_c_string_ptr(scaleformName_);
        let success = sdk::natives::request_scaleform_movie_instance(
            &mut native_return,
scaleformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_request_scaleform_movie_instance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_bool(&self, value_: bool) -> ResultOf_scaleform_movie_method_add_param_bool {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_bool(
            value_,
        );
        
        
        ResultOf_scaleform_movie_method_add_param_bool {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_depthwriting(&self, toggle_: bool) -> ResultOf_set_depthwriting {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_depthwriting(
            toggle_,
        );
        
        
        ResultOf_set_depthwriting {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_draw_behind_pausemenu(&self, toggle_: bool) -> ResultOf_set_script_gfx_draw_behind_pausemenu {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_gfx_draw_behind_pausemenu(
            toggle_,
        );
        
        
        ResultOf_set_script_gfx_draw_behind_pausemenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ptfx_force_vehicle_interior_flag(&self, p0_: i32) -> ResultOf_set_ptfx_force_vehicle_interior_flag {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ptfx_force_vehicle_interior_flag(
            p0_,
        );
        
        
        ResultOf_set_ptfx_force_vehicle_interior_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_scaleform_movie_method(&self, ) -> ResultOf_end_scaleform_movie_method {
    unsafe {
        
        let success = sdk::natives::end_scaleform_movie_method(
            
        );
        
        
        ResultOf_end_scaleform_movie_method {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_decal_alive(&self, decal_: i32) -> ResultOf_is_decal_alive {
    unsafe {
        let mut native_return = Default::default();
let mut decal_ = decal_;
        let success = sdk::natives::is_decal_alive(
            &mut native_return,
decal_,
        );
        let native_return = native_return;
        
        ResultOf_is_decal_alive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_particle_fx_looped_on_entity_bone(&self, effectName_: Option<String>,
entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
boneIndex_: i32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool) -> ResultOf_start_particle_fx_looped_on_entity_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
        let success = sdk::natives::start_particle_fx_looped_on_entity_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
xOffset_,
yOffset_,
zOffset_,
xRot_,
yRot_,
zRot_,
boneIndex_,
scale_,
xAxis_,
yAxis_,
zAxis_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_looped_on_entity_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_on_entity(&self, effectName_: Option<String>,
entity_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
scale_: f32,
axisX_: bool,
axisY_: bool,
axisZ_: bool) -> ResultOf_start_networked_particle_fx_non_looped_on_entity {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut scale_ = scale_;
let mut axisX_ = axisX_;
let mut axisY_ = axisY_;
let mut axisZ_ = axisZ_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_on_entity(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
offsetX_,
offsetY_,
offsetZ_,
rotX_,
rotY_,
rotZ_,
scale_,
axisX_,
axisY_,
axisZ_,
        );
        let native_return = native_return;
        
        ResultOf_start_networked_particle_fx_non_looped_on_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fade_up_ped_light(&self, p0_: f32) -> ResultOf_fade_up_ped_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::fade_up_ped_light(
            p0_,
        );
        
        
        ResultOf_fade_up_ped_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_distantlights(&self, toggle_: bool) -> ResultOf_disable_vehicle_distantlights {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_vehicle_distantlights(
            toggle_,
        );
        
        
        ResultOf_disable_vehicle_distantlights {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_reflection_set_script_object_visibility(&self, p0_: i32) -> ResultOf_water_reflection_set_script_object_visibility {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_reflection_set_script_object_visibility(
            p0_,
        );
        
        
        ResultOf_water_reflection_set_script_object_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bullet_trace_no_angle_reject(&self, p0_: bool) -> ResultOf_set_particle_fx_bullet_trace_no_angle_reject {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bullet_trace_no_angle_reject(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_bullet_trace_no_angle_reject {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_noisinessoveride(&self, value_: f32) -> ResultOf_set_noisinessoveride {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_noisinessoveride(
            value_,
        );
        
        
        ResultOf_set_noisinessoveride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_create_low_quality_copy_of_photo(&self, p0_: i32) -> ResultOf_get_status_of_create_low_quality_copy_of_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_create_low_quality_copy_of_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_create_low_quality_copy_of_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decals_from_object(&self, obj_: u32) -> ResultOf_remove_decals_from_object {
    unsafe {
        let mut obj_ = obj_;
        let success = sdk::natives::remove_decals_from_object(
            obj_,
        );
        
        
        ResultOf_remove_decals_from_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie_fullscreen_masked(&self, scaleform1_: i32,
scaleform2_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_scaleform_movie_fullscreen_masked {
    unsafe {
        let mut scaleform1_ = scaleform1_;
let mut scaleform2_ = scaleform2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_scaleform_movie_fullscreen_masked(
            scaleform1_,
scaleform2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_scaleform_movie_fullscreen_masked {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_in_water_ptfx(&self, toggle_: bool) -> ResultOf_disable_in_water_ptfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_in_water_ptfx(
            toggle_,
        );
        
        
        ResultOf_disable_in_water_ptfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_number(&self, scaleform_: i32,
methodName_: Option<String>,
param1_: f32,
param2_: f32,
param3_: f32,
param4_: f32,
param5_: f32) -> ResultOf_call_scaleform_movie_method_with_number {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
let mut param1_ = param1_;
let mut param2_ = param2_;
let mut param3_ = param3_;
let mut param4_ = param4_;
let mut param5_ = param5_;
        let success = sdk::natives::call_scaleform_movie_method_with_number(
            scaleform_,
methodName_.as_ref().unwrap(),
param1_,
param2_,
param3_,
param4_,
param5_,
        );
        
        
        ResultOf_call_scaleform_movie_method_with_number {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_spot_light(&self, posX_: f32,
posY_: f32,
posZ_: f32,
dirX_: f32,
dirY_: f32,
dirZ_: f32,
colorR_: i32,
colorG_: i32,
colorB_: i32,
distance_: f32,
brightness_: f32,
hardness_: f32,
radius_: f32,
falloff_: f32) -> ResultOf_draw_spot_light {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut dirX_ = dirX_;
let mut dirY_ = dirY_;
let mut dirZ_ = dirZ_;
let mut colorR_ = colorR_;
let mut colorG_ = colorG_;
let mut colorB_ = colorB_;
let mut distance_ = distance_;
let mut brightness_ = brightness_;
let mut hardness_ = hardness_;
let mut radius_ = radius_;
let mut falloff_ = falloff_;
        let success = sdk::natives::draw_spot_light(
            posX_,
posY_,
posZ_,
dirX_,
dirY_,
dirZ_,
colorR_,
colorG_,
colorB_,
distance_,
brightness_,
hardness_,
radius_,
falloff_,
        );
        
        
        ResultOf_draw_spot_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_player_watching_this_frame(&self, p0_: i32) -> ResultOf_set_tv_player_watching_this_frame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_tv_player_watching_this_frame(
            p0_,
        );
        
        
        ResultOf_set_tv_player_watching_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pass_keyboard_input_to_scaleform(&self, scaleformHandle_: i32) -> ResultOf_pass_keyboard_input_to_scaleform {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformHandle_ = scaleformHandle_;
        let success = sdk::natives::pass_keyboard_input_to_scaleform(
            &mut native_return,
scaleformHandle_,
        );
        let native_return = native_return;
        
        ResultOf_pass_keyboard_input_to_scaleform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_stop_and_flush_requests(&self, effectName_: Option<String>) -> ResultOf_animpostfx_stop_and_flush_requests {
    unsafe {
        let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
        let success = sdk::natives::animpostfx_stop_and_flush_requests(
            effectName_.as_ref().unwrap(),
        );
        
        
        ResultOf_animpostfx_stop_and_flush_requests {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_crew_emblem(&self, vehicle_: u32,
p1_: i32) -> ResultOf_remove_vehicle_crew_emblem {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_vehicle_crew_emblem(
            vehicle_,
p1_,
        );
        
        
        ResultOf_remove_vehicle_crew_emblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_cascade_bounds(&self, p0_: i32,
p1_: bool,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: f32) -> ResultOf_cascade_shadows_set_cascade_bounds {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::cascade_shadows_set_cascade_bounds(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_cascade_shadows_set_cascade_bounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_dynamic_depth_mode(&self, p0_: bool) -> ResultOf_cascade_shadows_set_dynamic_depth_mode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_dynamic_depth_mode(
            p0_,
        );
        
        
        ResultOf_cascade_shadows_set_dynamic_depth_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_is_available(&self, ) -> ResultOf_ui3dscene_is_available {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ui3dscene_is_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ui3dscene_is_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_box {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_box(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_box {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_float(&self, value_: f32) -> ResultOf_scaleform_movie_method_add_param_float {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_float(
            value_,
        );
        
        
        ResultOf_scaleform_movie_method_add_param_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_preset_interior_ambient_cache(&self, timecycleModifierName_: Option<String>) -> ResultOf_preset_interior_ambient_cache {
    unsafe {
        let mut timecycleModifierName_ = sdk_helpers::create_c_string_ptr(timecycleModifierName_);
        let success = sdk::natives::preset_interior_ambient_cache(
            timecycleModifierName_.as_ref().unwrap(),
        );
        
        
        ResultOf_preset_interior_ambient_cache {
            success,
            ret: (),
            
        }
    }
}

    fn native_fade_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: f32) -> ResultOf_fade_decals_in_range {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::fade_decals_in_range(
            x_,
y_,
z_,
p3_,
p4_,
        );
        
        
        ResultOf_fade_decals_in_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_heatscale(&self, index_: i32,
heatScale_: f32) -> ResultOf_seethrough_set_heatscale {
    unsafe {
        let mut index_ = index_;
let mut heatScale_ = heatScale_;
        let success = sdk::natives::seethrough_set_heatscale(
            index_,
heatScale_,
        );
        
        
        ResultOf_seethrough_set_heatscale {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_high_quality_photo(&self, ) -> ResultOf_free_memory_for_high_quality_photo {
    unsafe {
        
        let success = sdk::natives::free_memory_for_high_quality_photo(
            
        );
        
        
        ResultOf_free_memory_for_high_quality_photo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_bool(&self, methodReturn_: i32) -> ResultOf_get_scaleform_movie_method_return_value_bool {
    unsafe {
        let mut native_return = Default::default();
let mut methodReturn_ = methodReturn_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_bool(
            &mut native_return,
methodReturn_,
        );
        let native_return = native_return;
        
        ResultOf_get_scaleform_movie_method_return_value_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_clown_blood_vfx(&self, toggle_: bool) -> ResultOf_enable_clown_blood_vfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_clown_blood_vfx(
            toggle_,
        );
        
        
        ResultOf_enable_clown_blood_vfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_line_with_two_colours(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r1_: i32,
g1_: i32,
b1_: i32,
r2_: i32,
g2_: i32,
b2_: i32,
alpha1_: i32,
alpha2_: i32) -> ResultOf_draw_debug_line_with_two_colours {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r1_ = r1_;
let mut g1_ = g1_;
let mut b1_ = b1_;
let mut r2_ = r2_;
let mut g2_ = g2_;
let mut b2_ = b2_;
let mut alpha1_ = alpha1_;
let mut alpha2_ = alpha2_;
        let success = sdk::natives::draw_debug_line_with_two_colours(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r1_,
g1_,
b1_,
r2_,
g2_,
b2_,
alpha1_,
alpha2_,
        );
        
        
        ResultOf_draw_debug_line_with_two_colours {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_petrol_decals_igniting_this_frame(&self, ) -> ResultOf_set_disable_petrol_decals_igniting_this_frame {
    unsafe {
        
        let success = sdk::natives::set_disable_petrol_decals_igniting_this_frame(
            
        );
        
        
        ResultOf_set_disable_petrol_decals_igniting_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_force_direction(&self, checkpoint_: i32) -> ResultOf_set_checkpoint_force_direction {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_force_direction(
            checkpoint_,
        );
        
        
        ResultOf_set_checkpoint_force_direction {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_tessellation(&self, p0_: i32,
p1_: i32) -> ResultOf_golf_trail_set_tessellation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::golf_trail_set_tessellation(
            p0_,
p1_,
        );
        
        
        ResultOf_golf_trail_set_tessellation {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_render_in_game_ui(&self, toggle_: bool) -> ResultOf_force_render_in_game_ui {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_render_in_game_ui(
            toggle_,
        );
        
        
        ResultOf_force_render_in_game_ui {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_maximum_number_of_cloud_photos(&self, ) -> ResultOf_get_maximum_number_of_cloud_photos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_maximum_number_of_cloud_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_maximum_number_of_cloud_photos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_looped_far_clip_dist(&self, ptfxHandle_: i32,
range_: f32) -> ResultOf_set_particle_fx_looped_far_clip_dist {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut range_ = range_;
        let success = sdk::natives::set_particle_fx_looped_far_clip_dist(
            ptfxHandle_,
range_,
        );
        
        
        ResultOf_set_particle_fx_looped_far_clip_dist {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx_in_range(&self, X_: f32,
Y_: f32,
Z_: f32,
radius_: f32) -> ResultOf_remove_particle_fx_in_range {
    unsafe {
        let mut X_ = X_;
let mut Y_ = Y_;
let mut Z_ = Z_;
let mut radius_ = radius_;
        let success = sdk::natives::remove_particle_fx_in_range(
            X_,
Y_,
Z_,
radius_,
        );
        
        
        ResultOf_remove_particle_fx_in_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_looped_on_entity_bone(&self, effectName_: Option<String>,
entity_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
boneIndex_: i32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool,
r_: f32,
g_: f32,
b_: f32,
a_: f32) -> ResultOf_start_networked_particle_fx_looped_on_entity_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut entity_ = entity_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::start_networked_particle_fx_looped_on_entity_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
entity_,
xOffset_,
yOffset_,
zOffset_,
xRot_,
yRot_,
zRot_,
boneIndex_,
scale_,
xAxis_,
yAxis_,
zAxis_,
r_,
g_,
b_,
a_,
        );
        let native_return = native_return;
        
        ResultOf_start_networked_particle_fx_looped_on_entity_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_screenblur_fade(&self, ) -> ResultOf_disable_screenblur_fade {
    unsafe {
        
        let success = sdk::natives::disable_screenblur_fade(
            
        );
        
        
        ResultOf_disable_screenblur_fade {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_lights_on_entity(&self, entity_: u32) -> ResultOf_update_lights_on_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::update_lights_on_entity(
            entity_,
        );
        
        
        ResultOf_update_lights_on_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_script_hud_movie_loaded(&self, hudComponent_: i32) -> ResultOf_has_scaleform_script_hud_movie_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut hudComponent_ = hudComponent_;
        let success = sdk::natives::has_scaleform_script_hud_movie_loaded(
            &mut native_return,
hudComponent_,
        );
        let native_return = native_return;
        
        ResultOf_has_scaleform_script_hud_movie_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_streamed_texture_dict(&self, textureDict_: Option<String>,
p1_: bool) -> ResultOf_request_streamed_texture_dict {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut p1_ = p1_;
        let success = sdk::natives::request_streamed_texture_dict(
            textureDict_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_request_streamed_texture_dict {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_paused_renderphases(&self, toggle_: bool) -> ResultOf_toggle_paused_renderphases {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_paused_renderphases(
            toggle_,
        );
        
        
        ResultOf_toggle_paused_renderphases {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_icon_visibility(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_icon_visibility {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_icon_visibility(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_icon_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_looped_at_coord(&self, effectName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool,
p11_: bool) -> ResultOf_start_particle_fx_looped_at_coord {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
let mut p11_ = p11_;
        let success = sdk::natives::start_particle_fx_looped_at_coord(
            &mut native_return,
effectName_.as_ref().unwrap(),
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
scale_,
xAxis_,
yAxis_,
zAxis_,
p11_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_looped_at_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_paused_renderphases(&self, ) -> ResultOf_reset_paused_renderphases {
    unsafe {
        
        let success = sdk::natives::reset_paused_renderphases(
            
        );
        
        
        ResultOf_reset_paused_renderphases {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_string(&self, methodReturn_: i32) -> ResultOf_get_scaleform_movie_method_return_value_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut methodReturn_ = methodReturn_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_string(
            native_return.pin_mut(),
methodReturn_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_scaleform_movie_method_return_value_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_distance_blur_strength_override(&self, p0_: f32) -> ResultOf_set_distance_blur_strength_override {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_distance_blur_strength_override(
            p0_,
        );
        
        
        ResultOf_set_distance_blur_strength_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_artificial_vehicle_lights_state(&self, toggle_: bool) -> ResultOf_set_artificial_vehicle_lights_state {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_artificial_vehicle_lights_state(
            toggle_,
        );
        
        
        ResultOf_set_artificial_vehicle_lights_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_tracked_point(&self, ) -> ResultOf_create_tracked_point {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::create_tracked_point(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_create_tracked_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_get_current_time(&self, effectName_: Option<String>) -> ResultOf_animpostfx_get_current_time {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
        let success = sdk::natives::animpostfx_get_current_time(
            &mut native_return,
effectName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_animpostfx_get_current_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_script_gfx_align(&self, ) -> ResultOf_reset_script_gfx_align {
    unsafe {
        
        let success = sdk::natives::reset_script_gfx_align(
            
        );
        
        
        ResultOf_reset_script_gfx_align {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_adaptation(&self, p0_: i32) -> ResultOf_reset_adaptation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::reset_adaptation(
            p0_,
        );
        
        
        ResultOf_reset_adaptation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_motionblur_max_vel_scaler(&self, ) -> ResultOf_get_motionblur_max_vel_scaler {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_motionblur_max_vel_scaler(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_motionblur_max_vel_scaler {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_toggle_player_damage_overlay(&self, toggle_: bool) -> ResultOf_toggle_player_damage_overlay {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_player_damage_overlay(
            toggle_,
        );
        
        
        ResultOf_toggle_player_damage_overlay {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_super_large_rt(&self, scaleformHandle_: i32,
toggle_: bool) -> ResultOf_set_scaleform_movie_to_use_super_large_rt {
    unsafe {
        let mut scaleformHandle_ = scaleformHandle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_super_large_rt(
            scaleformHandle_,
toggle_,
        );
        
        
        ResultOf_set_scaleform_movie_to_use_super_large_rt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_noiseoveride(&self, toggle_: bool) -> ResultOf_set_noiseoveride {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_noiseoveride(
            toggle_,
        );
        
        
        ResultOf_set_noiseoveride {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_this_photo_slot_contain_a_valid_photo(&self, p0_: i32) -> ResultOf_does_this_photo_slot_contain_a_valid_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_this_photo_slot_contain_a_valid_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_does_this_photo_slot_contain_a_valid_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_sprite(&self, textureDict_: Option<String>,
textureName_: Option<String>,
screenX_: f32,
screenY_: f32,
width_: f32,
height_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: bool,
p12_: i32) -> ResultOf_draw_sprite {
    unsafe {
        let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut screenX_ = screenX_;
let mut screenY_ = screenY_;
let mut width_ = width_;
let mut height_ = height_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::draw_sprite(
            textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
screenX_,
screenY_,
width_,
height_,
heading_,
red_,
green_,
blue_,
alpha_,
p11_,
p12_,
        );
        
        
        ResultOf_draw_sprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_marker_ex(&self, type_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
dirX_: f32,
dirY_: f32,
dirZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
scaleX_: f32,
scaleY_: f32,
scaleZ_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
bobUpAndDown_: bool,
faceCamera_: bool,
p19_: i32,
rotate_: bool,
textureDict_: Option<String>,
textureName_: Option<String>,
drawOnEnts_: bool,
p24_: bool,
p25_: bool) -> ResultOf_draw_marker_ex {
    unsafe {
        let mut type_ = type_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut dirX_ = dirX_;
let mut dirY_ = dirY_;
let mut dirZ_ = dirZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut scaleX_ = scaleX_;
let mut scaleY_ = scaleY_;
let mut scaleZ_ = scaleZ_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut bobUpAndDown_ = bobUpAndDown_;
let mut faceCamera_ = faceCamera_;
let mut p19_ = p19_;
let mut rotate_ = rotate_;
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut drawOnEnts_ = drawOnEnts_;
let mut p24_ = p24_;
let mut p25_ = p25_;
        let success = sdk::natives::draw_marker_ex(
            type_,
posX_,
posY_,
posZ_,
dirX_,
dirY_,
dirZ_,
rotX_,
rotY_,
rotZ_,
scaleX_,
scaleY_,
scaleZ_,
red_,
green_,
blue_,
alpha_,
bobUpAndDown_,
faceCamera_,
p19_,
rotate_,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
drawOnEnts_,
p24_,
p25_,
        );
        
        
        ResultOf_draw_marker_ex {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_player_name_string(&self, string_: Option<String>) -> ResultOf_scaleform_movie_method_add_param_player_name_string {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_player_name_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOf_scaleform_movie_method_add_param_player_name_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_decals_from_vehicle(&self, vehicle_: u32) -> ResultOf_remove_decals_from_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_decals_from_vehicle(
            vehicle_,
        );
        
        
        ResultOf_remove_decals_from_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_override(&self, oldAsset_: Option<String>,
newAsset_: Option<String>) -> ResultOf_set_particle_fx_override {
    unsafe {
        let mut oldAsset_ = sdk_helpers::create_c_string_ptr(oldAsset_);
let mut newAsset_ = sdk_helpers::create_c_string_ptr(newAsset_);
        let success = sdk::natives::set_particle_fx_override(
            oldAsset_.as_ref().unwrap(),
newAsset_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_particle_fx_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_movie_mesh_set(&self, movieMeshSet_: i32) -> ResultOf_release_movie_mesh_set {
    unsafe {
        let mut movieMeshSet_ = movieMeshSet_;
        let success = sdk::natives::release_movie_mesh_set(
            movieMeshSet_,
        );
        
        
        ResultOf_release_movie_mesh_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_toggle_paused_renderphases_status(&self, ) -> ResultOf_get_toggle_paused_renderphases_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_toggle_paused_renderphases_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_toggle_paused_renderphases_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_latest_brief_string(&self, value_: i32) -> ResultOf_scaleform_movie_method_add_param_latest_brief_string {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_latest_brief_string(
            value_,
        );
        
        
        ResultOf_scaleform_movie_method_add_param_latest_brief_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_high_quality_photo(&self, p0_: i32) -> ResultOf_load_high_quality_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::load_high_quality_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_load_high_quality_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decal(&self, decal_: i32) -> ResultOf_remove_decal {
    unsafe {
        let mut decal_ = decal_;
        let success = sdk::natives::remove_decal(
            decal_,
        );
        
        
        ResultOf_remove_decal {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_cam_inside_vehicle(&self, p0_: bool) -> ResultOf_set_particle_fx_cam_inside_vehicle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_cam_inside_vehicle(
            p0_,
        );
        
        
        ResultOf_set_particle_fx_cam_inside_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_exposuretweak(&self, toggle_: bool) -> ResultOf_set_exposuretweak {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_exposuretweak(
            toggle_,
        );
        
        
        ResultOf_set_exposuretweak {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_number_and_string(&self, scaleform_: i32,
methodName_: Option<String>,
floatParam1_: f32,
floatParam2_: f32,
floatParam3_: f32,
floatParam4_: f32,
floatParam5_: f32,
stringParam1_: Option<String>,
stringParam2_: Option<String>,
stringParam3_: Option<String>,
stringParam4_: Option<String>,
stringParam5_: Option<String>) -> ResultOf_call_scaleform_movie_method_with_number_and_string {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
let mut floatParam1_ = floatParam1_;
let mut floatParam2_ = floatParam2_;
let mut floatParam3_ = floatParam3_;
let mut floatParam4_ = floatParam4_;
let mut floatParam5_ = floatParam5_;
let mut stringParam1_ = sdk_helpers::create_c_string_ptr(stringParam1_);
let mut stringParam2_ = sdk_helpers::create_c_string_ptr(stringParam2_);
let mut stringParam3_ = sdk_helpers::create_c_string_ptr(stringParam3_);
let mut stringParam4_ = sdk_helpers::create_c_string_ptr(stringParam4_);
let mut stringParam5_ = sdk_helpers::create_c_string_ptr(stringParam5_);
        let success = sdk::natives::call_scaleform_movie_method_with_number_and_string(
            scaleform_,
methodName_.as_ref().unwrap(),
floatParam1_,
floatParam2_,
floatParam3_,
floatParam4_,
floatParam5_,
stringParam1_.as_ref().unwrap(),
stringParam2_.as_ref().unwrap(),
stringParam3_.as_ref().unwrap(),
stringParam4_.as_ref().unwrap(),
stringParam5_.as_ref().unwrap(),
        );
        
        
        ResultOf_call_scaleform_movie_method_with_number_and_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_adjust_next_pos_size_as_normalized_16_9(&self, ) -> ResultOf_adjust_next_pos_size_as_normalized_16_9 {
    unsafe {
        
        let success = sdk::natives::adjust_next_pos_size_as_normalized_16_9(
            
        );
        
        
        ResultOf_adjust_next_pos_size_as_normalized_16_9 {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_screenblur_fade_out(&self, transitionTime_: f32) -> ResultOf_trigger_screenblur_fade_out {
    unsafe {
        let mut native_return = Default::default();
let mut transitionTime_ = transitionTime_;
        let success = sdk::natives::trigger_screenblur_fade_out(
            &mut native_return,
transitionTime_,
        );
        let native_return = native_return;
        
        ResultOf_trigger_screenblur_fade_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_interior_smoke_end(&self, ) -> ResultOf_override_interior_smoke_end {
    unsafe {
        
        let success = sdk::natives::override_interior_smoke_end(
            
        );
        
        
        ResultOf_override_interior_smoke_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_region_vfx(&self, p0_: i32) -> ResultOf_disable_region_vfx {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_region_vfx(
            p0_,
        );
        
        
        ResultOf_disable_region_vfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_aspect_ratio(&self, b_: bool) -> ResultOf_get_aspect_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut b_ = b_;
        let success = sdk::natives::get_aspect_ratio(
            &mut native_return,
b_,
        );
        let native_return = native_return;
        
        ResultOf_get_aspect_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui3dscene_push_preset(&self, presetName_: Option<String>) -> ResultOf_ui3dscene_push_preset {
    unsafe {
        let mut native_return = Default::default();
let mut presetName_ = sdk_helpers::create_c_string_ptr(presetName_);
        let success = sdk::natives::ui3dscene_push_preset(
            &mut native_return,
presetName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_ui3dscene_push_preset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_particle_fx_looped_on_ped_bone(&self, effectName_: Option<String>,
ped_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
boneIndex_: i32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool) -> ResultOf_start_particle_fx_looped_on_ped_bone {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut ped_ = ped_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut boneIndex_ = boneIndex_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
        let success = sdk::natives::start_particle_fx_looped_on_ped_bone(
            &mut native_return,
effectName_.as_ref().unwrap(),
ped_,
xOffset_,
yOffset_,
zOffset_,
xRot_,
yRot_,
zRot_,
boneIndex_,
scale_,
xAxis_,
yAxis_,
zAxis_,
        );
        let native_return = native_return;
        
        ResultOf_start_particle_fx_looped_on_ped_bone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_light_with_range(&self, posX_: f32,
posY_: f32,
posZ_: f32,
colorR_: i32,
colorG_: i32,
colorB_: i32,
range_: f32,
intensity_: f32) -> ResultOf_draw_light_with_range {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut colorR_ = colorR_;
let mut colorG_ = colorG_;
let mut colorB_ = colorB_;
let mut range_ = range_;
let mut intensity_ = intensity_;
        let success = sdk::natives::draw_light_with_range(
            posX_,
posY_,
posZ_,
colorR_,
colorG_,
colorB_,
range_,
intensity_,
        );
        
        
        ResultOf_draw_light_with_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_arena_theme_and_variation_for_taken_photo(&self, p0_: i32,
p1_: i32) -> ResultOf_set_arena_theme_and_variation_for_taken_photo {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_arena_theme_and_variation_for_taken_photo(
            p0_,
p1_,
        );
        
        
        ResultOf_set_arena_theme_and_variation_for_taken_photo {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scaleform_script_hud_movie(&self, hudComponent_: i32) -> ResultOf_remove_scaleform_script_hud_movie {
    unsafe {
        let mut hudComponent_ = hudComponent_;
        let success = sdk::natives::remove_scaleform_script_hud_movie(
            hudComponent_,
        );
        
        
        ResultOf_remove_scaleform_script_hud_movie {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_light_with_rangeex(&self, x_: f32,
y_: f32,
z_: f32,
r_: i32,
g_: i32,
b_: i32,
range_: f32,
intensity_: f32,
shadow_: f32) -> ResultOf_draw_light_with_rangeex {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut range_ = range_;
let mut intensity_ = intensity_;
let mut shadow_ = shadow_;
        let success = sdk::natives::draw_light_with_rangeex(
            x_,
y_,
z_,
r_,
g_,
b_,
range_,
intensity_,
shadow_,
        );
        
        
        ResultOf_draw_light_with_rangeex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_clipplane_with_pos_norm(&self, checkpoint_: i32,
posX_: f32,
posY_: f32,
posZ_: f32,
unkX_: f32,
unkY_: f32,
unkZ_: f32) -> ResultOf_set_checkpoint_clipplane_with_pos_norm {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut unkX_ = unkX_;
let mut unkY_ = unkY_;
let mut unkZ_ = unkZ_;
        let success = sdk::natives::set_checkpoint_clipplane_with_pos_norm(
            checkpoint_,
posX_,
posY_,
posZ_,
unkX_,
unkY_,
unkZ_,
        );
        
        
        ResultOf_set_checkpoint_clipplane_with_pos_norm {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_at_coord(&self, effectName_: Option<String>,
xPos_: f32,
yPos_: f32,
zPos_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
scale_: f32,
xAxis_: bool,
yAxis_: bool,
zAxis_: bool,
p11_: bool) -> ResultOf_start_networked_particle_fx_non_looped_at_coord {
    unsafe {
        let mut native_return = Default::default();
let mut effectName_ = sdk_helpers::create_c_string_ptr(effectName_);
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut scale_ = scale_;
let mut xAxis_ = xAxis_;
let mut yAxis_ = yAxis_;
let mut zAxis_ = zAxis_;
let mut p11_ = p11_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_at_coord(
            &mut native_return,
effectName_.as_ref().unwrap(),
xPos_,
yPos_,
zPos_,
xRot_,
yRot_,
zRot_,
scale_,
xAxis_,
yAxis_,
zAxis_,
p11_,
        );
        let native_return = native_return;
        
        ResultOf_start_networked_particle_fx_non_looped_at_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_script_gfx_align_params(&self, x_: f32,
y_: f32,
w_: f32,
h_: f32) -> ResultOf_set_script_gfx_align_params {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut w_ = w_;
let mut h_ = h_;
        let success = sdk::natives::set_script_gfx_align_params(
            x_,
y_,
w_,
h_,
        );
        
        
        ResultOf_set_script_gfx_align_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_sorted_list_operation(&self, p0_: i32) -> ResultOf_get_status_of_sorted_list_operation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_sorted_list_operation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_sorted_list_operation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_checkpoint(&self, checkpoint_: i32) -> ResultOf_delete_checkpoint {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::delete_checkpoint(
            checkpoint_,
        );
        
        
        ResultOf_delete_checkpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method(&self, scaleform_: i32,
methodName_: Option<String>) -> ResultOf_begin_scaleform_movie_method {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_ = scaleform_;
let mut methodName_ = sdk_helpers::create_c_string_ptr(methodName_);
        let success = sdk::natives::begin_scaleform_movie_method(
            &mut native_return,
scaleform_,
methodName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_begin_scaleform_movie_method {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_ptfx_override_curr_level(&self, p0_: f32) -> ResultOf_set_weather_ptfx_override_curr_level {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_weather_ptfx_override_curr_level(
            p0_,
        );
        
        
        ResultOf_set_weather_ptfx_override_curr_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_channel_playlist(&self, tvChannel_: i32,
playlistName_: Option<String>,
restart_: bool) -> ResultOf_set_tv_channel_playlist {
    unsafe {
        let mut tvChannel_ = tvChannel_;
let mut playlistName_ = sdk_helpers::create_c_string_ptr(playlistName_);
let mut restart_ = restart_;
        let success = sdk::natives::set_tv_channel_playlist(
            tvChannel_,
playlistName_.as_ref().unwrap(),
restart_,
        );
        
        
        ResultOf_set_tv_channel_playlist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_offsets(&self, ptfxHandle_: i32,
x_: f32,
y_: f32,
z_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32) -> ResultOf_set_particle_fx_looped_offsets {
    unsafe {
        let mut ptfxHandle_ = ptfxHandle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
        let success = sdk::natives::set_particle_fx_looped_offsets(
            ptfxHandle_,
x_,
y_,
z_,
rotX_,
rotY_,
rotZ_,
        );
        
        
        ResultOf_set_particle_fx_looped_offsets {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_audio_frontend(&self, binkMovie_: i32,
p1_: bool) -> ResultOf_set_bink_movie_audio_frontend {
    unsafe {
        let mut binkMovie_ = binkMovie_;
let mut p1_ = p1_;
        let success = sdk::natives::set_bink_movie_audio_frontend(
            binkMovie_,
p1_,
        );
        
        
        ResultOf_set_bink_movie_audio_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method(&self, scaleform_: i32,
method_: Option<String>) -> ResultOf_call_scaleform_movie_method {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut method_ = sdk_helpers::create_c_string_ptr(method_);
        let success = sdk::natives::call_scaleform_movie_method(
            scaleform_,
method_.as_ref().unwrap(),
        );
        
        
        ResultOf_call_scaleform_movie_method {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tv_channel(&self, ) -> ResultOf_get_tv_channel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_tv_channel(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_tv_channel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_checkpoint_force_old_arrow_pointing(&self, checkpoint_: i32) -> ResultOf_set_checkpoint_force_old_arrow_pointing {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_force_old_arrow_pointing(
            checkpoint_,
        );
        
        
        ResultOf_set_checkpoint_force_old_arrow_pointing {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_tv_channel(&self, xPos_: f32,
yPos_: f32,
xScale_: f32,
yScale_: f32,
rotation_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_draw_tv_channel {
    unsafe {
        let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut xScale_ = xScale_;
let mut yScale_ = yScale_;
let mut rotation_ = rotation_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_tv_channel(
            xPos_,
yPos_,
xScale_,
yScale_,
rotation_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_draw_tv_channel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_timecycle_modifier_index(&self, ) -> ResultOf_get_timecycle_modifier_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_timecycle_modifier_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_timecycle_modifier_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_crew_emblem_request_state(&self, vehicle_: u32,
p1_: i32) -> ResultOf_get_vehicle_crew_emblem_request_state {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_vehicle_crew_emblem_request_state(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_crew_emblem_request_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_set_noise_max(&self, amount_: f32) -> ResultOf_seethrough_set_noise_max {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::seethrough_set_noise_max(
            amount_,
        );
        
        
        ResultOf_seethrough_set_noise_max {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_draw_origin(&self, ) -> ResultOf_clear_draw_origin {
    unsafe {
        
        let success = sdk::natives::clear_draw_origin(
            
        );
        
        
        ResultOf_clear_draw_origin {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_noise_min(&self, amount_: f32) -> ResultOf_seethrough_set_noise_min {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::seethrough_set_noise_min(
            amount_,
        );
        
        
        ResultOf_seethrough_set_noise_min {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_rotation(&self, blip_: i32) -> ResultOf_get_blip_rotation {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_rotation(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_rotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_webpage_id(&self, ) -> ResultOf_get_current_webpage_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_webpage_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_webpage_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_additional_text_loaded(&self, slot_: i32) -> ResultOf_has_additional_text_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut slot_ = slot_;
        let success = sdk::natives::has_additional_text_loaded(
            &mut native_return,
slot_,
        );
        let native_return = native_return;
        
        ResultOf_has_additional_text_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flash_ability_bar(&self, millisecondsToFlash_: i32) -> ResultOf_flash_ability_bar {
    unsafe {
        let mut millisecondsToFlash_ = millisecondsToFlash_;
        let success = sdk::natives::flash_ability_bar(
            millisecondsToFlash_,
        );
        
        
        ResultOf_flash_ability_bar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_proportional(&self, p0_: bool) -> ResultOf_set_text_proportional {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_proportional(
            p0_,
        );
        
        
        ResultOf_set_text_proportional {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_integer(&self, value_: i32) -> ResultOf_add_text_component_integer {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::add_text_component_integer(
            value_,
        );
        
        
        ResultOf_add_text_component_integer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_colour(&self, blip_: i32,
color_: i32) -> ResultOf_set_blip_colour {
    unsafe {
        let mut blip_ = blip_;
let mut color_ = color_;
        let success = sdk::natives::set_blip_colour(
            blip_,
color_,
        );
        
        
        ResultOf_set_blip_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_director_mode_available(&self, toggle_: bool) -> ResultOf_set_director_mode_available {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_director_mode_available(
            toggle_,
        );
        
        
        ResultOf_set_director_mode_available {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_bool_stat(&self, statHash_: u32,
outValue_: bool) -> ResultOf_get_menu_ped_bool_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
        let success = sdk::natives::get_menu_ped_bool_stat(
            &mut native_return,
&mut outValue_,
statHash_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_get_menu_ped_bool_stat {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_set_max_armour_hud_display(&self, maximumValue_: i32) -> ResultOf_set_max_armour_hud_display {
    unsafe {
        let mut maximumValue_ = maximumValue_;
        let success = sdk::natives::set_max_armour_hud_display(
            maximumValue_,
        );
        
        
        ResultOf_set_max_armour_hud_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_fake_mp_cash(&self, cash_: i32,
bank_: i32) -> ResultOf_change_fake_mp_cash {
    unsafe {
        let mut cash_ = cash_;
let mut bank_ = bank_;
        let success = sdk::natives::change_fake_mp_cash(
            cash_,
bank_,
        );
        
        
        ResultOf_change_fake_mp_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_scale(&self, scale_: f32,
size_: f32) -> ResultOf_set_text_scale {
    unsafe {
        let mut scale_ = scale_;
let mut size_ = size_;
        let success = sdk::natives::set_text_scale(
            scale_,
size_,
        );
        
        
        ResultOf_set_text_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_fow_reveal_coordinate(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_minimap_fow_reveal_coordinate {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_minimap_fow_reveal_coordinate(
            x_,
y_,
z_,
        );
        
        
        ResultOf_set_minimap_fow_reveal_coordinate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom(&self, zoomLevel_: i32) -> ResultOf_set_radar_zoom {
    unsafe {
        let mut zoomLevel_ = zoomLevel_;
        let success = sdk::natives::set_radar_zoom(
            zoomLevel_,
        );
        
        
        ResultOf_set_radar_zoom {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_hud_component_hidden_this_frame(&self, id_: i32) -> ResultOf_is_scripted_hud_component_hidden_this_frame {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_scripted_hud_component_hidden_this_frame(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_hud_component_hidden_this_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_is_this_help_message_being_displayed(&self, labelName_: Option<String>) -> ResultOf_begin_text_command_is_this_help_message_being_displayed {
    unsafe {
        let mut labelName_ = sdk_helpers::create_c_string_ptr(labelName_);
        let success = sdk::natives::begin_text_command_is_this_help_message_being_displayed(
            labelName_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_is_this_help_message_being_displayed {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_suppress_weapon_wheel_results_this_frame(&self, ) -> ResultOf_hud_suppress_weapon_wheel_results_this_frame {
    unsafe {
        
        let success = sdk::natives::hud_suppress_weapon_wheel_results_this_frame(
            
        );
        
        
        ResultOf_hud_suppress_weapon_wheel_results_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_hud_component_this_frame(&self, id_: i32) -> ResultOf_show_hud_component_this_frame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::show_hud_component_this_frame(
            id_,
        );
        
        
        ResultOf_show_hud_component_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_forced_on(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_ai_blip_forced_on {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ai_blip_forced_on(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_ai_blip_forced_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_warning_message_option_items(&self, index_: i32,
name_: Option<String>,
cash_: i32,
rp_: i32,
lvl_: i32,
colour_: i32) -> ResultOf_set_warning_message_option_items {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut cash_ = cash_;
let mut rp_ = rp_;
let mut lvl_ = lvl_;
let mut colour_ = colour_;
        let success = sdk::natives::set_warning_message_option_items(
            &mut native_return,
index_,
name_.as_ref().unwrap(),
cash_,
rp_,
lvl_,
colour_,
        );
        let native_return = native_return;
        
        ResultOf_set_warning_message_option_items {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_vehicle_targeting_reticule(&self, p0_: i32) -> ResultOf_use_vehicle_targeting_reticule {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::use_vehicle_targeting_reticule(
            p0_,
        );
        
        
        ResultOf_use_vehicle_targeting_reticule {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_savegame_list_unique_id(&self, p0_: i32) -> ResultOf_set_savegame_list_unique_id {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_savegame_list_unique_id(
            p0_,
        );
        
        
        ResultOf_set_savegame_list_unique_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_formatted_integer(&self, value_: i32,
commaSeparated_: bool) -> ResultOf_add_text_component_formatted_integer {
    unsafe {
        let mut value_ = value_;
let mut commaSeparated_ = commaSeparated_;
        let success = sdk::natives::add_text_component_formatted_integer(
            value_,
commaSeparated_,
        );
        
        
        ResultOf_add_text_component_formatted_integer {
            success,
            ret: (),
            
        }
    }
}

    fn native_restart_frontend_menu(&self, menuHash_: u32,
p1_: i32) -> ResultOf_restart_frontend_menu {
    unsafe {
        let mut menuHash_ = menuHash_;
let mut p1_ = p1_;
        let success = sdk::natives::restart_frontend_menu(
            menuHash_,
p1_,
        );
        
        
        ResultOf_restart_frontend_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_is_this_help_message_being_displayed(&self, p0_: i32) -> ResultOf_end_text_command_is_this_help_message_being_displayed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_is_this_help_message_being_displayed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_is_this_help_message_being_displayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_busyspinner_off(&self, ) -> ResultOf_busyspinner_off {
    unsafe {
        
        let success = sdk::natives::busyspinner_off(
            
        );
        
        
        ResultOf_busyspinner_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_time(&self, timestamp_: i32,
flags_: i32) -> ResultOf_add_text_component_substring_time {
    unsafe {
        let mut timestamp_ = timestamp_;
let mut flags_ = flags_;
        let success = sdk::natives::add_text_component_substring_time(
            timestamp_,
flags_,
        );
        
        
        ResultOf_add_text_component_substring_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_sonar_blips_this_frame(&self, ) -> ResultOf_force_sonar_blips_this_frame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::force_sonar_blips_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_force_sonar_blips_this_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_named_rendertarget_linked(&self, modelHash_: u32) -> ResultOf_is_named_rendertarget_linked {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::is_named_rendertarget_linked(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_named_rendertarget_linked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_input_box_enabled(&self, p0_: bool) -> ResultOf_set_text_input_box_enabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_input_box_enabled(
            p0_,
        );
        
        
        ResultOf_set_text_input_box_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_reticule_values(&self, ) -> ResultOf_reset_reticule_values {
    unsafe {
        
        let success = sdk::natives::reset_reticule_values(
            
        );
        
        
        ResultOf_reset_reticule_values {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_minimap_position(&self, x_: f32,
y_: f32) -> ResultOf_lock_minimap_position {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::lock_minimap_position(
            x_,
y_,
        );
        
        
        ResultOf_lock_minimap_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_name_to_player_name(&self, blip_: i32,
player_: u32) -> ResultOf_set_blip_name_to_player_name {
    unsafe {
        let mut blip_ = blip_;
let mut player_ = player_;
        let success = sdk::natives::set_blip_name_to_player_name(
            blip_,
player_,
        );
        
        
        ResultOf_set_blip_name_to_player_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_show_cone(&self, blip_: i32,
toggle_: bool,
hudColorIndex_: i32) -> ResultOf_set_blip_show_cone {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
let mut hudColorIndex_ = hudColorIndex_;
        let success = sdk::natives::set_blip_show_cone(
            blip_,
toggle_,
hudColorIndex_,
        );
        
        
        ResultOf_set_blip_show_cone {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crewtag_with_game_name(&self, p0_: bool,
p1_: bool,
p2_: i32,
p3_: i32,
isLeader_: bool,
unk0_: bool,
clanDesc_: i32,
playerName_: Option<String>,
R_: i32,
G_: i32,
B_: i32) -> ResultOf_end_text_command_thefeed_post_crewtag_with_game_name {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = p3_;
let mut isLeader_ = isLeader_;
let mut unk0_ = unk0_;
let mut clanDesc_ = clanDesc_;
let mut playerName_ = sdk_helpers::create_c_string_ptr(playerName_);
let mut R_ = R_;
let mut G_ = G_;
let mut B_ = B_;
        let success = sdk::natives::end_text_command_thefeed_post_crewtag_with_game_name(
            &mut native_return,
&mut p2_,
p0_,
p1_,
p3_,
isLeader_,
unk0_,
clanDesc_,
playerName_.as_ref().unwrap(),
R_,
G_,
B_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_end_text_command_thefeed_post_crewtag_with_game_name {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_pause_menu_get_mouse_hover_unique_id(&self, ) -> ResultOf_pause_menu_get_mouse_hover_unique_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_mouse_hover_unique_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_pause_menu_get_mouse_hover_unique_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_control_of_frontend(&self, ) -> ResultOf_release_control_of_frontend {
    unsafe {
        
        let success = sdk::natives::release_control_of_frontend(
            
        );
        
        
        ResultOf_release_control_of_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_secondary_colour(&self, blip_: i32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_blip_secondary_colour {
    unsafe {
        let mut blip_ = blip_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_blip_secondary_colour(
            blip_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_blip_secondary_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_showing_character_switch_selection(&self, toggle_: bool) -> ResultOf_hud_showing_character_switch_selection {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::hud_showing_character_switch_selection(
            toggle_,
        );
        
        
        ResultOf_hud_showing_character_switch_selection {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_blip_info_id(&self, blipSprite_: i32) -> ResultOf_get_next_blip_info_id {
    unsafe {
        let mut native_return = Default::default();
let mut blipSprite_ = blipSprite_;
        let success = sdk::natives::get_next_blip_info_id(
            &mut native_return,
blipSprite_,
        );
        let native_return = native_return;
        
        ResultOf_get_next_blip_info_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tags_point_health(&self, gamerTagId_: i32,
value_: i32,
maximumValue_: i32) -> ResultOf_set_mp_gamer_tags_point_health {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut value_ = value_;
let mut maximumValue_ = maximumValue_;
        let success = sdk::natives::set_mp_gamer_tags_point_health(
            gamerTagId_,
value_,
maximumValue_,
        );
        
        
        ResultOf_set_mp_gamer_tags_point_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radar_hidden(&self, ) -> ResultOf_is_radar_hidden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radar_hidden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_radar_hidden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_and_substring_flags_extended(&self, labelTitle_: Option<String>,
labelMessage_: Option<String>,
p2_: i32,
p3_: i32,
labelMessage2_: Option<String>,
p5_: bool,
p6_: i32,
p7_: i32,
p8_: Option<String>,
p9_: Option<String>,
background_: bool,
errorCode_: i32) -> ResultOf_set_warning_message_with_header_and_substring_flags_extended {
    unsafe {
        let mut labelTitle_ = sdk_helpers::create_c_string_ptr(labelTitle_);
let mut labelMessage_ = sdk_helpers::create_c_string_ptr(labelMessage_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut labelMessage2_ = sdk_helpers::create_c_string_ptr(labelMessage2_);
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
let mut p9_ = sdk_helpers::create_c_string_ptr(p9_);
let mut background_ = background_;
let mut errorCode_ = errorCode_;
        let success = sdk::natives::set_warning_message_with_header_and_substring_flags_extended(
            labelTitle_.as_ref().unwrap(),
labelMessage_.as_ref().unwrap(),
p2_,
p3_,
labelMessage2_.as_ref().unwrap(),
p5_,
p6_,
p7_,
p8_.as_ref().unwrap(),
p9_.as_ref().unwrap(),
background_,
errorCode_,
        );
        
        
        ResultOf_set_warning_message_with_header_and_substring_flags_extended {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_ped_have_ai_blip(&self, ped_: u32) -> ResultOf_does_ped_have_ai_blip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::does_ped_have_ai_blip(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_does_ped_have_ai_blip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_show(&self, ) -> ResultOf_thefeed_show {
    unsafe {
        
        let success = sdk::natives::thefeed_show(
            
        );
        
        
        ResultOf_thefeed_show {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename(&self, text_: Option<String>,
position_: i32,
length_: i32) -> ResultOf_get_character_from_audio_conversation_filename {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut position_ = position_;
let mut length_ = length_;
        let success = sdk::natives::get_character_from_audio_conversation_filename(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
position_,
length_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_character_from_audio_conversation_filename {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_second_script_variable_hud_colour(&self, r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_set_second_script_variable_hud_colour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_second_script_variable_hud_colour(
            r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_set_second_script_variable_hud_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_fake_mp_cash(&self, toggle_: bool) -> ResultOf_use_fake_mp_cash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_fake_mp_cash(
            toggle_,
        );
        
        
        ResultOf_use_fake_mp_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_text_label_hash_key(&self, gxtEntryHash_: u32) -> ResultOf_add_text_component_substring_text_label_hash_key {
    unsafe {
        let mut gxtEntryHash_ = gxtEntryHash_;
        let success = sdk::natives::add_text_component_substring_text_label_hash_key(
            gxtEntryHash_,
        );
        
        
        ResultOf_add_text_component_substring_text_label_hash_key {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_rgba_parameter_for_next_message(&self, red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_thefeed_set_rgba_parameter_for_next_message {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::thefeed_set_rgba_parameter_for_next_message(
            red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_thefeed_set_rgba_parameter_for_next_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_flash_duration_parameter_for_next_message(&self, count_: i32) -> ResultOf_thefeed_set_flash_duration_parameter_for_next_message {
    unsafe {
        let mut count_ = count_;
        let success = sdk::natives::thefeed_set_flash_duration_parameter_for_next_message(
            count_,
        );
        
        
        ResultOf_thefeed_set_flash_duration_parameter_for_next_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_waypoint_blip_enum_id(&self, ) -> ResultOf_get_waypoint_blip_enum_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_waypoint_blip_enum_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_waypoint_blip_enum_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_hud_preference_switched_on(&self, ) -> ResultOf_is_hud_preference_switched_on {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hud_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_hud_preference_switched_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_for_sale_icon_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_for_sale_icon_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_for_sale_icon_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_for_sale_icon_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_in_spectator_mode(&self, toggle_: bool,
ped_: u32) -> ResultOf_set_minimap_in_spectator_mode {
    unsafe {
        let mut toggle_ = toggle_;
let mut ped_ = ped_;
        let success = sdk::natives::set_minimap_in_spectator_mode(
            toggle_,
ped_,
        );
        
        
        ResultOf_set_minimap_in_spectator_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_named_rendertarget_render_id(&self, name_: Option<String>) -> ResultOf_get_named_rendertarget_render_id {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_named_rendertarget_render_id(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_named_rendertarget_render_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_close_mp_text_chat(&self, ) -> ResultOf_close_mp_text_chat {
    unsafe {
        
        let success = sdk::natives::close_mp_text_chat(
            
        );
        
        
        ResultOf_close_mp_text_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_blip_info_id(&self, blipSprite_: i32) -> ResultOf_get_first_blip_info_id {
    unsafe {
        let mut native_return = Default::default();
let mut blipSprite_ = blipSprite_;
        let success = sdk::natives::get_first_blip_info_id(
            &mut native_return,
blipSprite_,
        );
        let native_return = native_return;
        
        ResultOf_get_first_blip_info_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pause_menu_restarting(&self, ) -> ResultOf_is_pause_menu_restarting {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pause_menu_restarting(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_pause_menu_restarting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_text_block_exist(&self, gxt_: Option<String>) -> ResultOf_does_text_block_exist {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::does_text_block_exist(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_text_block_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_drop_shadow(&self, ) -> ResultOf_set_text_drop_shadow {
    unsafe {
        
        let success = sdk::natives::set_text_drop_shadow(
            
        );
        
        
        ResultOf_set_text_drop_shadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_replace_hud_colour(&self, hudColorIndex_: i32,
hudColorIndex2_: i32) -> ResultOf_replace_hud_colour {
    unsafe {
        let mut hudColorIndex_ = hudColorIndex_;
let mut hudColorIndex2_ = hudColorIndex2_;
        let success = sdk::natives::replace_hud_colour(
            hudColorIndex_,
hudColorIndex2_,
        );
        
        
        ResultOf_replace_hud_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext(&self, txdName_: Option<String>,
textureName_: Option<String>,
flash_: bool,
iconType_: i32,
sender_: Option<String>,
subject_: Option<String>) -> ResultOf_end_text_command_thefeed_post_messagetext {
    unsafe {
        let mut native_return = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut flash_ = flash_;
let mut iconType_ = iconType_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext(
            &mut native_return,
txdName_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
flash_,
iconType_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_messagetext {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_mp_text_chat_disable(&self, toggle_: bool) -> ResultOf_mp_text_chat_disable {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::mp_text_chat_disable(
            toggle_,
        );
        
        
        ResultOf_mp_text_chat_disable {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_waypoint_active(&self, ) -> ResultOf_is_waypoint_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_waypoint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_waypoint_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ability_bar_visibility(&self, visible_: bool) -> ResultOf_set_ability_bar_visibility {
    unsafe {
        let mut visible_ = visible_;
        let success = sdk::natives::set_ability_bar_visibility(
            visible_,
        );
        
        
        ResultOf_set_ability_bar_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_display(&self, blip_: i32) -> ResultOf_get_blip_info_id_display {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_display(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_info_id_display {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_tu(&self, txdName_: Option<String>,
textureName_: Option<String>,
flash_: bool,
iconType_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32) -> ResultOf_end_text_command_thefeed_post_messagetext_tu {
    unsafe {
        let mut native_return = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut flash_ = flash_;
let mut iconType_ = iconType_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_tu(
            &mut native_return,
txdName_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
flash_,
iconType_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_messagetext_tu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_race_track_render(&self, toggle_: bool) -> ResultOf_set_race_track_render {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_race_track_render(
            toggle_,
        );
        
        
        ResultOf_set_race_track_render {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_set_blip_object(&self, spriteId_: i32) -> ResultOf_custom_minimap_set_blip_object {
    unsafe {
        let mut spriteId_ = spriteId_;
        let success = sdk::natives::custom_minimap_set_blip_object(
            spriteId_,
        );
        
        
        ResultOf_custom_minimap_set_blip_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_sprite(&self, blip_: i32) -> ResultOf_get_blip_sprite {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_sprite(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_sprite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_thefeed_post(&self, text_: Option<String>) -> ResultOf_begin_text_command_thefeed_post {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_thefeed_post(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_thefeed_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_minimap_interior_map_this_frame(&self, ) -> ResultOf_hide_minimap_interior_map_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_minimap_interior_map_this_frame(
            
        );
        
        
        ResultOf_hide_minimap_interior_map_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_frontend_background_this_frame(&self, ) -> ResultOf_draw_frontend_background_this_frame {
    unsafe {
        
        let success = sdk::natives::draw_frontend_background_this_frame(
            
        );
        
        
        ResultOf_draw_frontend_background_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_script_hidden_help_this_frame(&self, ) -> ResultOf_has_script_hidden_help_this_frame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_script_hidden_help_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_script_hidden_help_this_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_scripted_gfx_when_frontend_active(&self, p0_: Option<String>) -> ResultOf_force_scripted_gfx_when_frontend_active {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::force_scripted_gfx_when_frontend_active(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_force_scripted_gfx_when_frontend_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_flags(&self, ) -> ResultOf_clear_gps_flags {
    unsafe {
        
        let success = sdk::natives::clear_gps_flags(
            
        );
        
        
        ResultOf_clear_gps_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_component_position(&self, id_: i32) -> ResultOf_get_hud_component_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
        let success = sdk::natives::get_hud_component_position(
            native_return.pin_mut(),
id_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_hud_component_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_frontend_menu_version(&self, ) -> ResultOf_get_current_frontend_menu_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_frontend_menu_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_frontend_menu_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bigmap_active(&self, toggleBigMap_: bool,
showFullMap_: bool) -> ResultOf_set_bigmap_active {
    unsafe {
        let mut toggleBigMap_ = toggleBigMap_;
let mut showFullMap_ = showFullMap_;
        let success = sdk::natives::set_bigmap_active(
            toggleBigMap_,
showFullMap_,
        );
        
        
        ResultOf_set_bigmap_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_category(&self, blip_: i32,
index_: i32) -> ResultOf_set_blip_category {
    unsafe {
        let mut blip_ = blip_;
let mut index_ = index_;
        let success = sdk::natives::set_blip_category(
            blip_,
index_,
        );
        
        
        ResultOf_set_blip_category {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_display_help(&self, p0_: i32,
loop_: bool,
beep_: bool,
shape_: i32) -> ResultOf_end_text_command_display_help {
    unsafe {
        let mut p0_ = p0_;
let mut loop_ = loop_;
let mut beep_ = beep_;
let mut shape_ = shape_;
        let success = sdk::natives::end_text_command_display_help(
            p0_,
loop_,
beep_,
shape_,
        );
        
        
        ResultOf_end_text_command_display_help {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_friend_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_friend_indicator_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_friend_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_friend_indicator_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_add_directly_to_previous_briefs(&self, p0_: Option<String>) -> ResultOf_begin_text_command_add_directly_to_previous_briefs {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::begin_text_command_add_directly_to_previous_briefs(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_add_directly_to_previous_briefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_floating_help_text_on_screen(&self, hudIndex_: i32) -> ResultOf_is_floating_help_text_on_screen {
    unsafe {
        let mut native_return = Default::default();
let mut hudIndex_ = hudIndex_;
        let success = sdk::natives::is_floating_help_text_on_screen(
            &mut native_return,
hudIndex_,
        );
        let native_return = native_return;
        
        ResultOf_is_floating_help_text_on_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_hudmarkers_this_frame(&self, ) -> ResultOf_hide_hudmarkers_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_hudmarkers_this_frame(
            
        );
        
        
        ResultOf_hide_hudmarkers_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_menu_ped_masked_int_stat(&self, statHash_: u32,
outValue_: i32,
p2_: i32,
mask_: i32,
p4_: bool) -> ResultOf_get_character_menu_ped_masked_int_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
let mut mask_ = mask_;
let mut p4_ = p4_;
        let success = sdk::natives::get_character_menu_ped_masked_int_stat(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
mask_,
p4_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_get_character_menu_ped_masked_int_stat {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_set_blip_as_mission_creator_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_as_mission_creator_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_mission_creator_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_as_mission_creator_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_outline(&self, ) -> ResultOf_set_text_outline {
    unsafe {
        
        let success = sdk::natives::set_text_outline(
            
        );
        
        
        ResultOf_set_text_outline {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radius_blip_edge(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_radius_blip_edge {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radius_blip_edge(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_radius_blip_edge {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_hide_this_frame(&self, ) -> ResultOf_thefeed_hide_this_frame {
    unsafe {
        
        let success = sdk::natives::thefeed_hide_this_frame(
            
        );
        
        
        ResultOf_thefeed_hide_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_display_text(&self, text_: Option<String>) -> ResultOf_begin_text_command_display_text {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_display_text(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_display_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_director_mode_launched_by_script(&self, ) -> ResultOf_set_director_mode_launched_by_script {
    unsafe {
        
        let success = sdk::natives::set_director_mode_launched_by_script(
            
        );
        
        
        ResultOf_set_director_mode_launched_by_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_creator_blip(&self, blip_: i32) -> ResultOf_is_mission_creator_blip {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_mission_creator_blip(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_is_mission_creator_blip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_custom_minimap_clear_blips(&self, ) -> ResultOf_custom_minimap_clear_blips {
    unsafe {
        
        let success = sdk::natives::custom_minimap_clear_blips(
            
        );
        
        
        ResultOf_custom_minimap_clear_blips {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pause_menu_state(&self, ) -> ResultOf_get_pause_menu_state {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_pause_menu_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_pause_menu_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_area_name(&self, toggle_: bool) -> ResultOf_display_area_name {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_area_name(
            toggle_,
        );
        
        
        ResultOf_display_area_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_show_gps(&self, toggle_: bool) -> ResultOf_set_force_show_gps {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_show_gps(
            toggle_,
        );
        
        
        ResultOf_set_force_show_gps {
            success,
            ret: (),
            
        }
    }
}

    fn native_reload_map_menu(&self, ) -> ResultOf_reload_map_menu {
    unsafe {
        
        let success = sdk::natives::reload_map_menu(
            
        );
        
        
        ResultOf_reload_map_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_minimap_angle(&self, angle_: i32) -> ResultOf_lock_minimap_angle {
    unsafe {
        let mut angle_ = angle_;
        let success = sdk::natives::lock_minimap_angle(
            angle_,
        );
        
        
        ResultOf_lock_minimap_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_additional_text(&self, p0_: i32,
p1_: bool) -> ResultOf_clear_additional_text {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_additional_text(
            p0_,
p1_,
        );
        
        
        ResultOf_clear_additional_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_is_context_menu_active(&self, ) -> ResultOf_pause_menu_is_context_menu_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_is_context_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_pause_menu_is_context_menu_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_custom_mp_hud_color(&self, hudColorId_: i32) -> ResultOf_set_custom_mp_hud_color {
    unsafe {
        let mut hudColorId_ = hudColorId_;
        let success = sdk::natives::set_custom_mp_hud_color(
            hudColorId_,
        );
        
        
        ResultOf_set_custom_mp_hud_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_fade(&self, blip_: i32,
opacity_: i32,
duration_: i32) -> ResultOf_set_blip_fade {
    unsafe {
        let mut blip_ = blip_;
let mut opacity_ = opacity_;
let mut duration_ = duration_;
        let success = sdk::natives::set_blip_fade(
            blip_,
opacity_,
duration_,
        );
        
        
        ResultOf_set_blip_fade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_minimal_on_edge(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_as_minimal_on_edge {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_minimal_on_edge(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_as_minimal_on_edge {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_stats(&self, statTitle_: Option<String>,
iconEnum_: i32,
stepVal_: bool,
barValue_: i32,
isImportant_: bool,
pictureTextureDict_: Option<String>,
pictureTextureName_: Option<String>) -> ResultOf_end_text_command_thefeed_post_stats {
    unsafe {
        let mut native_return = Default::default();
let mut statTitle_ = sdk_helpers::create_c_string_ptr(statTitle_);
let mut iconEnum_ = iconEnum_;
let mut stepVal_ = stepVal_;
let mut barValue_ = barValue_;
let mut isImportant_ = isImportant_;
let mut pictureTextureDict_ = sdk_helpers::create_c_string_ptr(pictureTextureDict_);
let mut pictureTextureName_ = sdk_helpers::create_c_string_ptr(pictureTextureName_);
        let success = sdk::natives::end_text_command_thefeed_post_stats(
            &mut native_return,
statTitle_.as_ref().unwrap(),
iconEnum_,
stepVal_,
barValue_,
isImportant_,
pictureTextureDict_.as_ref().unwrap(),
pictureTextureName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_stats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_fade_direction(&self, blip_: i32) -> ResultOf_get_blip_fade_direction {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_fade_direction(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_fade_direction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_use_height_indicator_on_edge(&self, blip_: i32,
p1_: i32) -> ResultOf_set_blip_use_height_indicator_on_edge {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_use_height_indicator_on_edge(
            blip_,
p1_,
        );
        
        
        ResultOf_set_blip_use_height_indicator_on_edge {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_small_prints(&self, ) -> ResultOf_clear_small_prints {
    unsafe {
        
        let success = sdk::natives::clear_small_prints(
            
        );
        
        
        ResultOf_clear_small_prints {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_toggle_fullscreen_map(&self, p0_: i32) -> ResultOf_pause_toggle_fullscreen_map {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_toggle_fullscreen_map(
            p0_,
        );
        
        
        ResultOf_pause_toggle_fullscreen_map {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_menu_layout_changed_event_occurred(&self, ) -> ResultOf_has_menu_layout_changed_event_occurred {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_menu_layout_changed_event_occurred(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_menu_layout_changed_event_occurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_flashes_alternate(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_flashes_alternate {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_flashes_alternate(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_flashes_alternate {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker(&self, blink_: bool,
p1_: bool) -> ResultOf_end_text_command_thefeed_post_ticker {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_ticker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_store_pending_network_shutdown_to_open(&self, ) -> ResultOf_is_store_pending_network_shutdown_to_open {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_store_pending_network_shutdown_to_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_store_pending_network_shutdown_to_open {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_point_to_gps_custom_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_add_point_to_gps_custom_route {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_point_to_gps_custom_route(
            x_,
y_,
z_,
        );
        
        
        ResultOf_add_point_to_gps_custom_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_health_bar_colour(&self, gamerTagId_: i32,
hudColorIndex_: i32) -> ResultOf_set_mp_gamer_tag_health_bar_colour {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut hudColorIndex_ = hudColorIndex_;
        let success = sdk::natives::set_mp_gamer_tag_health_bar_colour(
            gamerTagId_,
hudColorIndex_,
        );
        
        
        ResultOf_set_mp_gamer_tag_health_bar_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_mp_gamer_tag(&self, gamerTagId_: i32) -> ResultOf_remove_mp_gamer_tag {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
        let success = sdk::natives::remove_mp_gamer_tag(
            gamerTagId_,
        );
        
        
        ResultOf_remove_mp_gamer_tag {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_update_item_texture(&self, txdString1_: Option<String>,
txnString1_: Option<String>,
txdString2_: Option<String>,
txnString2_: Option<String>) -> ResultOf_thefeed_update_item_texture {
    unsafe {
        let mut txdString1_ = sdk_helpers::create_c_string_ptr(txdString1_);
let mut txnString1_ = sdk_helpers::create_c_string_ptr(txnString1_);
let mut txdString2_ = sdk_helpers::create_c_string_ptr(txdString2_);
let mut txnString2_ = sdk_helpers::create_c_string_ptr(txnString2_);
        let success = sdk::natives::thefeed_update_item_texture(
            txdString1_.as_ref().unwrap(),
txnString1_.as_ref().unwrap(),
txdString2_.as_ref().unwrap(),
txnString2_.as_ref().unwrap(),
        );
        
        
        ResultOf_thefeed_update_item_texture {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_flashes(&self, toggle_: bool) -> ResultOf_set_gps_flashes {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gps_flashes(
            toggle_,
        );
        
        
        ResultOf_set_gps_flashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_help_message_fading_out(&self, ) -> ResultOf_is_help_message_fading_out {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_fading_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_help_message_fading_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_hide(&self, ) -> ResultOf_thefeed_hide {
    unsafe {
        
        let success = sdk::natives::thefeed_hide(
            
        );
        
        
        ResultOf_thefeed_hide {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock(&self, gxtLabel1_: Option<String>,
p1_: i32,
gxtLabel2_: Option<String>) -> ResultOf_end_text_command_thefeed_post_unlock {
    unsafe {
        let mut native_return = Default::default();
let mut gxtLabel1_ = sdk_helpers::create_c_string_ptr(gxtLabel1_);
let mut p1_ = p1_;
let mut gxtLabel2_ = sdk_helpers::create_c_string_ptr(gxtLabel2_);
        let success = sdk::natives::end_text_command_thefeed_post_unlock(
            &mut native_return,
gxtLabel1_.as_ref().unwrap(),
p1_,
gxtLabel2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_unlock {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_get_mouse_hover_index(&self, ) -> ResultOf_pause_menu_get_mouse_hover_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_mouse_hover_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_pause_menu_get_mouse_hover_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_fake_cone_data(&self, blip_: i32) -> ResultOf_remove_fake_cone_data {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::remove_fake_cone_data(
            blip_,
        );
        
        
        ResultOf_remove_fake_cone_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_golf_course_off(&self, ) -> ResultOf_set_minimap_golf_course_off {
    unsafe {
        
        let success = sdk::natives::set_minimap_golf_course_off(
            
        );
        
        
        ResultOf_set_minimap_golf_course_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_trigger_event_details(&self, lastItemMenuId_: i32,
selectedItemUniqueId_: i32) -> ResultOf_get_menu_trigger_event_details {
    unsafe {
        let mut lastItemMenuId_ = Default::default();
let mut selectedItemUniqueId_ = Default::default();
        let success = sdk::natives::get_menu_trigger_event_details(
            &mut lastItemMenuId_,
&mut selectedItemUniqueId_,
        );
        let lastItemMenuId_ = lastItemMenuId_;
let selectedItemUniqueId_ = selectedItemUniqueId_;
        
        ResultOf_get_menu_trigger_event_details {
            success,
            ret: (),
            lastItemMenuId_,
selectedItemUniqueId_
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker_with_tokens(&self, blink_: bool,
p1_: bool) -> ResultOf_end_text_command_thefeed_post_ticker_with_tokens {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker_with_tokens(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_ticker_with_tokens {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_extended(&self, entryHeader_: Option<String>,
entryLine1_: Option<String>,
flags_: i32,
entryLine2_: Option<String>,
p4_: bool,
p5_: i32,
p6_: i32,
p7_: i32,
showBg_: bool,
p9_: i32,
p10_: i32) -> ResultOf_set_warning_message_with_header_extended {
    unsafe {
        let mut entryHeader_ = sdk_helpers::create_c_string_ptr(entryHeader_);
let mut entryLine1_ = sdk_helpers::create_c_string_ptr(entryLine1_);
let mut flags_ = flags_;
let mut entryLine2_ = sdk_helpers::create_c_string_ptr(entryLine2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = Default::default();
let mut p7_ = Default::default();
let mut showBg_ = showBg_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::set_warning_message_with_header_extended(
            &mut p6_,
&mut p7_,
entryHeader_.as_ref().unwrap(),
entryLine1_.as_ref().unwrap(),
flags_,
entryLine2_.as_ref().unwrap(),
p4_,
p5_,
showBg_,
p9_,
p10_,
        );
        let p6_ = p6_;
let p7_ = p7_;
        
        ResultOf_set_warning_message_with_header_extended {
            success,
            ret: (),
            p6_,
p7_
        }
    }
}

    fn native_set_colour_of_next_text_component(&self, hudColor_: i32) -> ResultOf_set_colour_of_next_text_component {
    unsafe {
        let mut hudColor_ = hudColor_;
        let success = sdk::natives::set_colour_of_next_text_component(
            hudColor_,
        );
        
        
        ResultOf_set_colour_of_next_text_component {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_frontend_ready_for_control(&self, ) -> ResultOf_is_frontend_ready_for_control {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_frontend_ready_for_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_frontend_ready_for_control {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pause_menu_ped_lighting(&self, state_: bool) -> ResultOf_set_pause_menu_ped_lighting {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_pause_menu_ped_lighting(
            state_,
        );
        
        
        ResultOf_set_pause_menu_ped_lighting {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_gps_multi_route(&self, hudColor_: i32,
routeFromPlayer_: bool,
displayOnFoot_: bool) -> ResultOf_start_gps_multi_route {
    unsafe {
        let mut hudColor_ = hudColor_;
let mut routeFromPlayer_ = routeFromPlayer_;
let mut displayOnFoot_ = displayOnFoot_;
        let success = sdk::natives::start_gps_multi_route(
            hudColor_,
routeFromPlayer_,
displayOnFoot_,
        );
        
        
        ResultOf_start_gps_multi_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mouse_rolled_over_instructional_buttons(&self, ) -> ResultOf_is_mouse_rolled_over_instructional_buttons {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mouse_rolled_over_instructional_buttons(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mouse_rolled_over_instructional_buttons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_multi_route_render(&self, toggle_: bool) -> ResultOf_set_gps_multi_route_render {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gps_multi_route_render(
            toggle_,
        );
        
        
        ResultOf_set_gps_multi_route_render {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_minimap_position(&self, ) -> ResultOf_unlock_minimap_position {
    unsafe {
        
        let success = sdk::natives::unlock_minimap_position(
            
        );
        
        
        ResultOf_unlock_minimap_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_has_cone(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_ai_blip_has_cone {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ai_blip_has_cone(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_ai_blip_has_cone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_north_blid_index(&self, ) -> ResultOf_get_north_blid_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_north_blid_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_north_blid_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_health_hud_display_values(&self, health_: i32,
capacity_: i32,
wasAdded_: bool) -> ResultOf_set_health_hud_display_values {
    unsafe {
        let mut health_ = health_;
let mut capacity_ = capacity_;
let mut wasAdded_ = wasAdded_;
        let success = sdk::natives::set_health_hud_display_values(
            health_,
capacity_,
wasAdded_,
        );
        
        
        ResultOf_set_health_hud_display_values {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud_when_paused_this_frame(&self, ) -> ResultOf_display_hud_when_paused_this_frame {
    unsafe {
        
        let success = sdk::natives::display_hud_when_paused_this_frame(
            
        );
        
        
        ResultOf_display_hud_when_paused_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pm_warningscreen_active(&self, p0_: bool) -> ResultOf_set_pm_warningscreen_active {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pm_warningscreen_active(
            p0_,
        );
        
        
        ResultOf_set_pm_warningscreen_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hovering_over_mission_creator_blip(&self, ) -> ResultOf_is_hovering_over_mission_creator_blip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hovering_over_mission_creator_blip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_hovering_over_mission_creator_blip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_literal_string_in_bytes(&self, string_: Option<String>) -> ResultOf_get_length_of_literal_string_in_bytes {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_length_of_literal_string_in_bytes(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_length_of_literal_string_in_bytes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_edge(&self, p0_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_set_text_edge {
    unsafe {
        let mut p0_ = p0_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_text_edge(
            p0_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_set_text_edge {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_deactivate_context(&self, contextHash_: u32) -> ResultOf_pause_menu_deactivate_context {
    unsafe {
        let mut contextHash_ = contextHash_;
        let success = sdk::natives::pause_menu_deactivate_context(
            contextHash_,
        );
        
        
        ResultOf_pause_menu_deactivate_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker_forced(&self, blink_: bool,
p1_: bool) -> ResultOf_end_text_command_thefeed_post_ticker_forced {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker_forced(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_ticker_forced {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_hud_component_values(&self, id_: i32) -> ResultOf_reset_hud_component_values {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::reset_hud_component_values(
            id_,
        );
        
        
        ResultOf_reset_hud_component_values {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_alpha(&self, blip_: i32,
alpha_: i32) -> ResultOf_set_blip_alpha {
    unsafe {
        let mut blip_ = blip_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_blip_alpha(
            blip_,
alpha_,
        );
        
        
        ResultOf_set_blip_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_dropshadow(&self, distance_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_set_text_dropshadow {
    unsafe {
        let mut distance_ = distance_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_text_dropshadow(
            distance_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_set_text_dropshadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_radius(&self, posX_: f32,
posY_: f32,
posZ_: f32,
radius_: f32) -> ResultOf_add_blip_for_radius {
    unsafe {
        let mut native_return = Default::default();
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut radius_ = radius_;
        let success = sdk::natives::add_blip_for_radius(
            &mut native_return,
posX_,
posY_,
posZ_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_add_blip_for_radius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hud_force_special_vehicle_weapon_wheel(&self, ) -> ResultOf_hud_force_special_vehicle_weapon_wheel {
    unsafe {
        
        let success = sdk::natives::hud_force_special_vehicle_weapon_wheel(
            
        );
        
        
        ResultOf_hud_force_special_vehicle_weapon_wheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_redraw_instructional_buttons(&self, p0_: i32) -> ResultOf_pause_menu_redraw_instructional_buttons {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_menu_redraw_instructional_buttons(
            p0_,
        );
        
        
        ResultOf_pause_menu_redraw_instructional_buttons {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_vibrate_parameter_for_next_message(&self, toggle_: bool) -> ResultOf_thefeed_set_vibrate_parameter_for_next_message {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::thefeed_set_vibrate_parameter_for_next_message(
            toggle_,
        );
        
        
        ResultOf_thefeed_set_vibrate_parameter_for_next_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_standard_blip_enum_id(&self, ) -> ResultOf_get_standard_blip_enum_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_standard_blip_enum_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_standard_blip_enum_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_loading_on_fade_this_frame(&self, ) -> ResultOf_hide_loading_on_fade_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_loading_on_fade_this_frame(
            
        );
        
        
        ResultOf_hide_loading_on_fade_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_short_height_threshold(&self, p0_: i32,
p1_: i32) -> ResultOf_set_blip_short_height_threshold {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_short_height_threshold(
            p0_,
p1_,
        );
        
        
        ResultOf_set_blip_short_height_threshold {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_entity_index(&self, blip_: i32) -> ResultOf_get_blip_info_id_entity_index {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_entity_index(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_info_id_entity_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_help_message_being_displayed(&self, ) -> ResultOf_is_help_message_being_displayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_help_message_being_displayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_justification(&self, justifyType_: i32) -> ResultOf_set_text_justification {
    unsafe {
        let mut justifyType_ = justifyType_;
        let success = sdk::natives::set_text_justification(
            justifyType_,
        );
        
        
        ResultOf_set_text_justification {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_navigating_menu_content(&self, ) -> ResultOf_is_navigating_menu_content {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_navigating_menu_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_navigating_menu_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mp_gamer_tag_active(&self, gamerTagId_: i32) -> ResultOf_is_mp_gamer_tag_active {
    unsafe {
        let mut native_return = Default::default();
let mut gamerTagId_ = gamerTagId_;
        let success = sdk::natives::is_mp_gamer_tag_active(
            &mut native_return,
gamerTagId_,
        );
        let native_return = native_return;
        
        ResultOf_is_mp_gamer_tag_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_scripted_hud_component_this_frame(&self, id_: i32) -> ResultOf_show_scripted_hud_component_this_frame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::show_scripted_hud_component_this_frame(
            id_,
        );
        
        
        ResultOf_show_scripted_hud_component_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_route(&self, blip_: i32,
enabled_: bool) -> ResultOf_set_blip_route {
    unsafe {
        let mut blip_ = blip_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_blip_route(
            blip_,
enabled_,
        );
        
        
        ResultOf_set_blip_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_floating_help(&self, hudIndex_: i32,
p1_: bool) -> ResultOf_clear_floating_help {
    unsafe {
        let mut hudIndex_ = hudIndex_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_floating_help(
            hudIndex_,
p1_,
        );
        
        
        ResultOf_clear_floating_help {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_inside_very_small_interior(&self, toggle_: bool) -> ResultOf_set_inside_very_small_interior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_inside_very_small_interior(
            toggle_,
        );
        
        
        ResultOf_set_inside_very_small_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_get_number_of_lines_for_string(&self, entry_: Option<String>) -> ResultOf_begin_text_command_get_number_of_lines_for_string {
    unsafe {
        let mut entry_ = sdk_helpers::create_c_string_ptr(entry_);
        let success = sdk::natives::begin_text_command_get_number_of_lines_for_string(
            entry_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_get_number_of_lines_for_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_reportugc_menu(&self, ) -> ResultOf_open_reportugc_menu {
    unsafe {
        
        let success = sdk::natives::open_reportugc_menu(
            
        );
        
        
        ResultOf_open_reportugc_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_script_rendertarget_render_id(&self, ) -> ResultOf_get_default_script_rendertarget_render_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_default_script_rendertarget_render_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_default_script_rendertarget_render_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(&self, txdName_: Option<String>,
textureName_: Option<String>,
flash_: bool,
iconType1_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32,
clanTag_: Option<String>,
iconType2_: i32,
p9_: i32) -> ResultOf_end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon {
    unsafe {
        let mut native_return = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut flash_ = flash_;
let mut iconType1_ = iconType1_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
let mut clanTag_ = sdk_helpers::create_c_string_ptr(clanTag_);
let mut iconType2_ = iconType2_;
let mut p9_ = p9_;
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(
            &mut native_return,
txdName_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
flash_,
iconType1_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
clanTag_.as_ref().unwrap(),
iconType2_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_number_on_blip(&self, blip_: i32) -> ResultOf_hide_number_on_blip {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::hide_number_on_blip(
            blip_,
        );
        
        
        ResultOf_hide_number_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_set_active(&self, toggle_: bool) -> ResultOf_custom_minimap_set_active {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::custom_minimap_set_active(
            toggle_,
        );
        
        
        ResultOf_custom_minimap_set_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_hidden_on_legend(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_hidden_on_legend {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_hidden_on_legend(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_hidden_on_legend {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_get_screen_width_of_display_text(&self, text_: Option<String>) -> ResultOf_begin_text_command_get_screen_width_of_display_text {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_get_screen_width_of_display_text(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_get_screen_width_of_display_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_create_blip(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_custom_minimap_create_blip {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::custom_minimap_create_blip(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_custom_minimap_create_blip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_set_scripted_menu_height(&self, pos_: f32) -> ResultOf_thefeed_set_scripted_menu_height {
    unsafe {
        let mut pos_ = pos_;
        let success = sdk::natives::thefeed_set_scripted_menu_height(
            pos_,
        );
        
        
        ResultOf_thefeed_set_scripted_menu_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_zoom_minimap_when_sniping_this_frame(&self, ) -> ResultOf_dont_zoom_minimap_when_sniping_this_frame {
    unsafe {
        
        let success = sdk::natives::dont_zoom_minimap_when_sniping_this_frame(
            
        );
        
        
        ResultOf_dont_zoom_minimap_when_sniping_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ai_ped_vehicle_blip_index(&self, ped_: u32) -> ResultOf_get_ai_ped_vehicle_blip_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ai_ped_vehicle_blip_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ai_ped_vehicle_blip_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_auto_post_gametips_on(&self, ) -> ResultOf_thefeed_auto_post_gametips_on {
    unsafe {
        
        let success = sdk::natives::thefeed_auto_post_gametips_on(
            
        );
        
        
        ResultOf_thefeed_auto_post_gametips_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_comma_on_text_input(&self, p0_: i32) -> ResultOf_set_allow_comma_on_text_input {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_allow_comma_on_text_input(
            p0_,
        );
        
        
        ResultOf_set_allow_comma_on_text_input {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_next_message_to_previous_briefs_list(&self, p0_: i32) -> ResultOf_force_next_message_to_previous_briefs_list {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_next_message_to_previous_briefs_list(
            p0_,
        );
        
        
        ResultOf_force_next_message_to_previous_briefs_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_named_rendertarget(&self, name_: Option<String>,
p1_: bool) -> ResultOf_register_named_rendertarget {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::register_named_rendertarget(
            &mut native_return,
name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOf_register_named_rendertarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_force_render_off(&self, ) -> ResultOf_thefeed_force_render_off {
    unsafe {
        
        let success = sdk::natives::thefeed_force_render_off(
            
        );
        
        
        ResultOf_thefeed_force_render_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_coords(&self, blip_: i32) -> ResultOf_get_blip_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_coords(
            native_return.pin_mut(),
blip_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_blip_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_minimap_block_waypoint(&self, toggle_: bool) -> ResultOf_set_minimap_block_waypoint {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_block_waypoint(
            toggle_,
        );
        
        
        ResultOf_set_minimap_block_waypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_code_wants_script_to_control(&self, ) -> ResultOf_get_screen_code_wants_script_to_control {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screen_code_wants_script_to_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_screen_code_wants_script_to_control {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mp_gamer_tag_free(&self, gamerTagId_: i32) -> ResultOf_is_mp_gamer_tag_free {
    unsafe {
        let mut native_return = Default::default();
let mut gamerTagId_ = gamerTagId_;
        let success = sdk::natives::is_mp_gamer_tag_free(
            &mut native_return,
gamerTagId_,
        );
        let native_return = native_return;
        
        ResultOf_is_mp_gamer_tag_free {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radar_as_interior_this_frame(&self, interior_: u32,
x_: f32,
y_: f32,
z_: i32,
zoom_: i32) -> ResultOf_set_radar_as_interior_this_frame {
    unsafe {
        let mut interior_ = interior_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_as_interior_this_frame(
            interior_,
x_,
y_,
z_,
zoom_,
        );
        
        
        ResultOf_set_radar_as_interior_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_add_blip_for_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_blip_for_coord(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_add_blip_for_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_flags(&self, p0_: i32,
p1_: f32) -> ResultOf_set_gps_flags {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_gps_flags(
            p0_,
p1_,
        );
        
        
        ResultOf_set_gps_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pause_menu_position(&self, ) -> ResultOf_get_pause_menu_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_pause_menu_position(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_pause_menu_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_new_selected_mission_creator_blip(&self, ) -> ResultOf_get_new_selected_mission_creator_blip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_new_selected_mission_creator_blip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_new_selected_mission_creator_blip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_with_crew_tag(&self, txdName_: Option<String>,
textureName_: Option<String>,
flash_: bool,
iconType_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32,
clanTag_: Option<String>) -> ResultOf_end_text_command_thefeed_post_messagetext_with_crew_tag {
    unsafe {
        let mut native_return = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut flash_ = flash_;
let mut iconType_ = iconType_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
let mut clanTag_ = sdk_helpers::create_c_string_ptr(clanTag_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_with_crew_tag(
            &mut native_return,
txdName_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
flash_,
iconType_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
clanTag_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_messagetext_with_crew_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_blip_for_entity(&self, entity_: u32) -> ResultOf_add_blip_for_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::add_blip_for_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_add_blip_for_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_island_map(&self, toggle_: bool) -> ResultOf_set_use_island_map {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_island_map(
            toggle_,
        );
        
        
        ResultOf_set_use_island_map {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_in_pause_menu(&self, ) -> ResultOf_clear_ped_in_pause_menu {
    unsafe {
        
        let success = sdk::natives::clear_ped_in_pause_menu(
            
        );
        
        
        ResultOf_clear_ped_in_pause_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_render_id(&self, renderId_: i32) -> ResultOf_set_text_render_id {
    unsafe {
        let mut renderId_ = renderId_;
        let success = sdk::natives::set_text_render_id(
            renderId_,
        );
        
        
        ResultOf_set_text_render_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mission_name(&self, p0_: bool,
name_: Option<String>) -> ResultOf_set_mission_name {
    unsafe {
        let mut p0_ = p0_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_mission_name(
            p0_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_mission_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_keyboard_display(&self, string_: Option<String>) -> ResultOf_add_text_component_substring_keyboard_display {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::add_text_component_substring_keyboard_display(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_text_component_substring_keyboard_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_minimap_exterior_map_this_frame(&self, ) -> ResultOf_hide_minimap_exterior_map_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_minimap_exterior_map_this_frame(
            
        );
        
        
        ResultOf_hide_minimap_exterior_map_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_heading_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_heading_indicator_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_heading_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_heading_indicator_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_float_stat(&self, statHash_: u32,
outValue_: f32) -> ResultOf_get_menu_ped_float_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
        let success = sdk::natives::get_menu_ped_float_stat(
            &mut native_return,
&mut outValue_,
statHash_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_get_menu_ped_float_stat {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_request_additional_text_for_dlc(&self, gxt_: Option<String>,
slot_: i32) -> ResultOf_request_additional_text_for_dlc {
    unsafe {
        let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::request_additional_text_for_dlc(
            gxt_.as_ref().unwrap(),
slot_,
        );
        
        
        ResultOf_request_additional_text_for_dlc {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_next_message_to_previous_briefs(&self, p0_: bool) -> ResultOf_add_next_message_to_previous_briefs {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::add_next_message_to_previous_briefs(
            p0_,
        );
        
        
        ResultOf_add_next_message_to_previous_briefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_sonar_blips(&self, toggle_: bool) -> ResultOf_allow_sonar_blips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::allow_sonar_blips(
            toggle_,
        );
        
        
        ResultOf_allow_sonar_blips {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_account_picker(&self, ) -> ResultOf_show_account_picker {
    unsafe {
        
        let success = sdk::natives::show_account_picker(
            
        );
        
        
        ResultOf_show_account_picker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_colour(&self, gamerTagId_: i32,
component_: i32,
hudColorIndex_: i32) -> ResultOf_set_mp_gamer_tag_colour {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut component_ = component_;
let mut hudColorIndex_ = hudColorIndex_;
        let success = sdk::natives::set_mp_gamer_tag_colour(
            gamerTagId_,
component_,
hudColorIndex_,
        );
        
        
        ResultOf_set_mp_gamer_tag_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_help_messages(&self, ) -> ResultOf_clear_all_help_messages {
    unsafe {
        
        let success = sdk::natives::clear_all_help_messages(
            
        );
        
        
        ResultOf_clear_all_help_messages {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_fow_do_not_update(&self, p0_: bool) -> ResultOf_set_minimap_fow_do_not_update {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_minimap_fow_do_not_update(
            p0_,
        );
        
        
        ResultOf_set_minimap_fow_do_not_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_wrap(&self, start_: f32,
end_: f32) -> ResultOf_set_text_wrap {
    unsafe {
        let mut start_ = start_;
let mut end_ = end_;
        let success = sdk::natives::set_text_wrap(
            start_,
end_,
        );
        
        
        ResultOf_set_text_wrap {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mouse_event(&self, scaleformHandle_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_get_mouse_event {
    unsafe {
        let mut native_return = Default::default();
let mut scaleformHandle_ = scaleformHandle_;
let mut p1_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::get_mouse_event(
            &mut native_return,
&mut p1_,
&mut p2_,
&mut p3_,
scaleformHandle_,
        );
        let native_return = native_return;
let p1_ = p1_;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_get_mouse_event {
            success,
            ret: native_return,
            p1_,
p2_,
p3_
        }
    }
}

    fn native_set_mp_gamer_tag_visibility(&self, gamerTagId_: i32,
component_: i32,
toggle_: bool,
p3_: i32) -> ResultOf_set_mp_gamer_tag_visibility {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut component_ = component_;
let mut toggle_ = toggle_;
let mut p3_ = p3_;
        let success = sdk::natives::set_mp_gamer_tag_visibility(
            gamerTagId_,
component_,
toggle_,
p3_,
        );
        
        
        ResultOf_set_mp_gamer_tag_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_font(&self, fontType_: i32) -> ResultOf_set_text_font {
    unsafe {
        let mut fontType_ = fontType_;
        let success = sdk::natives::set_text_font(
            fontType_,
        );
        
        
        ResultOf_set_text_font {
            success,
            ret: (),
            
        }
    }
}

    fn native_code_wants_script_to_take_control(&self, ) -> ResultOf_code_wants_script_to_take_control {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::code_wants_script_to_take_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_code_wants_script_to_take_control {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_gps_multi_route(&self, ) -> ResultOf_clear_gps_multi_route {
    unsafe {
        
        let success = sdk::natives::clear_gps_multi_route(
            
        );
        
        
        ResultOf_clear_gps_multi_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_hud_component_this_frame(&self, id_: i32) -> ResultOf_hide_hud_component_this_frame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::hide_hud_component_this_frame(
            id_,
        );
        
        
        ResultOf_hide_hud_component_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_mp_text_chat_team_string(&self, gxtEntryHash_: u32) -> ResultOf_override_mp_text_chat_team_string {
    unsafe {
        let mut gxtEntryHash_ = gxtEntryHash_;
        let success = sdk::natives::override_mp_text_chat_team_string(
            gxtEntryHash_,
        );
        
        
        ResultOf_override_mp_text_chat_team_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_stealth_radar(&self, toggle_: bool) -> ResultOf_toggle_stealth_radar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_stealth_radar(
            toggle_,
        );
        
        
        ResultOf_toggle_stealth_radar {
            success,
            ret: (),
            
        }
    }
}

    fn native_flash_minimap_display_with_color(&self, hudColorIndex_: i32) -> ResultOf_flash_minimap_display_with_color {
    unsafe {
        let mut hudColorIndex_ = hudColorIndex_;
        let success = sdk::natives::flash_minimap_display_with_color(
            hudColorIndex_,
        );
        
        
        ResultOf_flash_minimap_display_with_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_right_justify(&self, toggle_: bool) -> ResultOf_set_text_right_justify {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_text_right_justify(
            toggle_,
        );
        
        
        ResultOf_set_text_right_justify {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_sonar_sweep(&self, toggle_: bool) -> ResultOf_set_minimap_sonar_sweep {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_sonar_sweep(
            toggle_,
        );
        
        
        ResultOf_set_minimap_sonar_sweep {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_player_name(&self, text_: Option<String>) -> ResultOf_add_text_component_substring_player_name {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::add_text_component_substring_player_name(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_text_component_substring_player_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_set_destination_in_pause_map(&self, toggle_: bool) -> ResultOf_set_use_set_destination_in_pause_map {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_set_destination_in_pause_map(
            toggle_,
        );
        
        
        ResultOf_set_use_set_destination_in_pause_map {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_tilt_minimap_this_frame(&self, ) -> ResultOf_dont_tilt_minimap_this_frame {
    unsafe {
        
        let success = sdk::natives::dont_tilt_minimap_this_frame(
            
        );
        
        
        ResultOf_dont_tilt_minimap_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_frontend_this_frame(&self, ) -> ResultOf_disable_frontend_this_frame {
    unsafe {
        
        let success = sdk::natives::disable_frontend_this_frame(
            
        );
        
        
        ResultOf_disable_frontend_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_mp_gamer_tag_with_crew_color(&self, player_: u32,
username_: Option<String>,
pointedClanTag_: bool,
isRockstarClan_: bool,
clanTag_: Option<String>,
clanFlag_: i32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_create_mp_gamer_tag_with_crew_color {
    unsafe {
        let mut player_ = player_;
let mut username_ = sdk_helpers::create_c_string_ptr(username_);
let mut pointedClanTag_ = pointedClanTag_;
let mut isRockstarClan_ = isRockstarClan_;
let mut clanTag_ = sdk_helpers::create_c_string_ptr(clanTag_);
let mut clanFlag_ = clanFlag_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::create_mp_gamer_tag_with_crew_color(
            player_,
username_.as_ref().unwrap(),
pointedClanTag_,
isRockstarClan_,
clanTag_.as_ref().unwrap(),
clanFlag_,
r_,
g_,
b_,
        );
        
        
        ResultOf_create_mp_gamer_tag_with_crew_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mp_gamer_tag_movie_active(&self, ) -> ResultOf_is_mp_gamer_tag_movie_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mp_gamer_tag_movie_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mp_gamer_tag_movie_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_minimap_fow_coordinate_is_revealed(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_minimap_fow_coordinate_is_revealed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_minimap_fow_coordinate_is_revealed(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_get_minimap_fow_coordinate_is_revealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_warning_message_option_items(&self, ) -> ResultOf_remove_warning_message_option_items {
    unsafe {
        
        let success = sdk::natives::remove_warning_message_option_items(
            
        );
        
        
        ResultOf_remove_warning_message_option_items {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_only_show_tooltips(&self, toggle_: bool) -> ResultOf_thefeed_only_show_tooltips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::thefeed_only_show_tooltips(
            toggle_,
        );
        
        
        ResultOf_thefeed_only_show_tooltips {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_friendly(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_as_friendly {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_friendly(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_as_friendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_online_policies_menu_active(&self, ) -> ResultOf_is_online_policies_menu_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_online_policies_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_online_policies_menu_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_and_substring_flags(&self, entryHeader_: Option<String>,
entryLine1_: Option<String>,
instructionalKey_: i32,
entryLine2_: Option<String>,
p4_: bool,
p5_: i32,
additionalIntInfo_: i32,
additionalTextInfoLine1_: Option<String>,
additionalTextInfoLine2_: Option<String>,
showBackground_: bool,
errorCode_: i32) -> ResultOf_set_warning_message_with_header_and_substring_flags {
    unsafe {
        let mut entryHeader_ = sdk_helpers::create_c_string_ptr(entryHeader_);
let mut entryLine1_ = sdk_helpers::create_c_string_ptr(entryLine1_);
let mut instructionalKey_ = instructionalKey_;
let mut entryLine2_ = sdk_helpers::create_c_string_ptr(entryLine2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut additionalIntInfo_ = additionalIntInfo_;
let mut additionalTextInfoLine1_ = sdk_helpers::create_c_string_ptr(additionalTextInfoLine1_);
let mut additionalTextInfoLine2_ = sdk_helpers::create_c_string_ptr(additionalTextInfoLine2_);
let mut showBackground_ = showBackground_;
let mut errorCode_ = errorCode_;
        let success = sdk::natives::set_warning_message_with_header_and_substring_flags(
            entryHeader_.as_ref().unwrap(),
entryLine1_.as_ref().unwrap(),
instructionalKey_,
entryLine2_.as_ref().unwrap(),
p4_,
p5_,
additionalIntInfo_,
additionalTextInfoLine1_.as_ref().unwrap(),
additionalTextInfoLine2_.as_ref().unwrap(),
showBackground_,
errorCode_,
        );
        
        
        ResultOf_set_warning_message_with_header_and_substring_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_hud_and_radar_this_frame(&self, ) -> ResultOf_hide_hud_and_radar_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_hud_and_radar_this_frame(
            
        );
        
        
        ResultOf_hide_hud_and_radar_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_additional_text(&self, gxt_: Option<String>,
slot_: i32) -> ResultOf_request_additional_text {
    unsafe {
        let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::request_additional_text(
            gxt_.as_ref().unwrap(),
slot_,
        );
        
        
        ResultOf_request_additional_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_golf_course(&self, hole_: i32) -> ResultOf_set_minimap_golf_course {
    unsafe {
        let mut hole_ = hole_;
        let success = sdk::natives::set_minimap_golf_course(
            hole_,
        );
        
        
        ResultOf_set_minimap_golf_course {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_hud_colour(&self, blip_: i32) -> ResultOf_get_blip_hud_colour {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_hud_colour(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_hud_colour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hud_set_weapon_wheel_top_slot(&self, weaponHash_: u32) -> ResultOf_hud_set_weapon_wheel_top_slot {
    unsafe {
        let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::hud_set_weapon_wheel_top_slot(
            weaponHash_,
        );
        
        
        ResultOf_hud_set_weapon_wheel_top_slot {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_sonar_blip(&self, posX_: f32,
posY_: f32,
posZ_: f32,
radius_: f32,
p4_: i32) -> ResultOf_trigger_sonar_blip {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut radius_ = radius_;
let mut p4_ = p4_;
        let success = sdk::natives::trigger_sonar_blip(
            posX_,
posY_,
posZ_,
radius_,
p4_,
        );
        
        
        ResultOf_trigger_sonar_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_sniper_scope_this_frame(&self, ) -> ResultOf_display_sniper_scope_this_frame {
    unsafe {
        
        let success = sdk::natives::display_sniper_scope_this_frame(
            
        );
        
        
        ResultOf_display_sniper_scope_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pulse_blip(&self, blip_: i32) -> ResultOf_pulse_blip {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::pulse_blip(
            blip_,
        );
        
        
        ResultOf_pulse_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_tick_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_tick_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_tick_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_tick_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_frontend_active(&self, active_: bool) -> ResultOf_set_frontend_active {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_frontend_active(
            active_,
        );
        
        
        ResultOf_set_frontend_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_height_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_height_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_height_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_height_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_component(&self, componentId_: i32,
toggle_: bool,
overrideColor_: i32) -> ResultOf_set_minimap_component {
    unsafe {
        let mut native_return = Default::default();
let mut componentId_ = componentId_;
let mut toggle_ = toggle_;
let mut overrideColor_ = overrideColor_;
        let success = sdk::natives::set_minimap_component(
            &mut native_return,
componentId_,
toggle_,
overrideColor_,
        );
        let native_return = native_return;
        
        ResultOf_set_minimap_component {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_social_club_menu(&self, ) -> ResultOf_open_social_club_menu {
    unsafe {
        
        let success = sdk::natives::open_social_club_menu(
            
        );
        
        
        ResultOf_open_social_club_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_phone_number(&self, p0_: Option<String>,
p1_: i32) -> ResultOf_add_text_component_substring_phone_number {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::add_text_component_substring_phone_number(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_add_text_component_substring_phone_number {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud_when_not_in_state_of_play_this_frame(&self, ) -> ResultOf_display_hud_when_not_in_state_of_play_this_frame {
    unsafe {
        
        let success = sdk::natives::display_hud_when_not_in_state_of_play_this_frame(
            
        );
        
        
        ResultOf_display_hud_when_not_in_state_of_play_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_screen_position(&self, hudIndex_: i32,
x_: f32,
y_: f32) -> ResultOf_set_floating_help_text_screen_position {
    unsafe {
        let mut hudIndex_ = hudIndex_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_floating_help_text_screen_position(
            hudIndex_,
x_,
y_,
        );
        
        
        ResultOf_set_floating_help_text_screen_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_dynamic_pause_menu_error_message(&self, ) -> ResultOf_clear_dynamic_pause_menu_error_message {
    unsafe {
        
        let success = sdk::natives::clear_dynamic_pause_menu_error_message(
            
        );
        
        
        ResultOf_clear_dynamic_pause_menu_error_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_pausemap_player_position_this_frame(&self, x_: f32,
y_: f32) -> ResultOf_set_fake_pausemap_player_position_this_frame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_fake_pausemap_player_position_this_frame(
            x_,
y_,
        );
        
        
        ResultOf_set_fake_pausemap_player_position_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menuception_go_deeper(&self, page_: i32) -> ResultOf_pause_menuception_go_deeper {
    unsafe {
        let mut page_ = page_;
        let success = sdk::natives::pause_menuception_go_deeper(
            page_,
        );
        
        
        ResultOf_pause_menuception_go_deeper {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_world_position(&self, hudIndex_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_floating_help_text_world_position {
    unsafe {
        let mut hudIndex_ = hudIndex_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_floating_help_text_world_position(
            hudIndex_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_floating_help_text_world_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_style(&self, hudIndex_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_set_floating_help_text_style {
    unsafe {
        let mut hudIndex_ = hudIndex_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_floating_help_text_style(
            hudIndex_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_set_floating_help_text_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_named_rendertarget_registered(&self, name_: Option<String>) -> ResultOf_is_named_rendertarget_registered {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::is_named_rendertarget_registered(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_named_rendertarget_registered {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_message_being_displayed(&self, ) -> ResultOf_is_message_being_displayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_message_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_message_being_displayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_gps_race_track(&self, ) -> ResultOf_clear_gps_race_track {
    unsafe {
        
        let success = sdk::natives::clear_gps_race_track(
            
        );
        
        
        ResultOf_clear_gps_race_track {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock_tu_with_color(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_end_text_command_thefeed_post_unlock_tu_with_color {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::end_text_command_thefeed_post_unlock_tu_with_color(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_unlock_tu_with_color {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message(&self, titleMsg_: Option<String>,
flags_: i32,
promptMsg_: Option<String>,
p3_: bool,
p4_: i32,
p5_: Option<String>,
p6_: Option<String>,
showBackground_: bool,
errorCode_: i32) -> ResultOf_set_warning_message {
    unsafe {
        let mut titleMsg_ = sdk_helpers::create_c_string_ptr(titleMsg_);
let mut flags_ = flags_;
let mut promptMsg_ = sdk_helpers::create_c_string_ptr(promptMsg_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = sdk_helpers::create_c_string_ptr(p5_);
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut showBackground_ = showBackground_;
let mut errorCode_ = errorCode_;
        let success = sdk::natives::set_warning_message(
            titleMsg_.as_ref().unwrap(),
flags_,
promptMsg_.as_ref().unwrap(),
p3_,
p4_,
p5_.as_ref().unwrap(),
p6_.as_ref().unwrap(),
showBackground_,
errorCode_,
        );
        
        
        ResultOf_set_warning_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_icon_colour(&self, color_: i32) -> ResultOf_set_player_icon_colour {
    unsafe {
        let mut color_ = color_;
        let success = sdk::natives::set_player_icon_colour(
            color_,
        );
        
        
        ResultOf_set_player_icon_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_filename_for_audio_conversation(&self, labelName_: Option<String>) -> ResultOf_get_filename_for_audio_conversation {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut labelName_ = sdk_helpers::create_c_string_ptr(labelName_);
        let success = sdk::natives::get_filename_for_audio_conversation(
            native_return.pin_mut(),
labelName_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_filename_for_audio_conversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_big_text(&self, gamerTagId_: i32,
string_: Option<String>) -> ResultOf_set_mp_gamer_tag_big_text {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::set_mp_gamer_tag_big_text(
            gamerTagId_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_mp_gamer_tag_big_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_mp_text_chat_is_team_job(&self, p0_: i32) -> ResultOf_mp_text_chat_is_team_job {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::mp_text_chat_is_team_job(
            p0_,
        );
        
        
        ResultOf_mp_text_chat_is_team_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_colour(&self, hudColorIndex_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_get_hud_colour {
    unsafe {
        let mut hudColorIndex_ = hudColorIndex_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
let mut a_ = Default::default();
        let success = sdk::natives::get_hud_colour(
            &mut r_,
&mut g_,
&mut b_,
&mut a_,
hudColorIndex_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
let a_ = a_;
        
        ResultOf_get_hud_colour {
            success,
            ret: (),
            r_,
g_,
b_,
a_
        }
    }
}

    fn native_get_ai_ped_ped_blip_index(&self, ped_: u32) -> ResultOf_get_ai_ped_ped_blip_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ai_ped_ped_blip_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ai_ped_ped_blip_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_menu_layout_changed_event_details(&self, lastItemMenuId_: i32,
selectedItemMenuId_: i32,
selectedItemUniqueId_: i32) -> ResultOf_get_menu_layout_changed_event_details {
    unsafe {
        let mut lastItemMenuId_ = Default::default();
let mut selectedItemMenuId_ = Default::default();
let mut selectedItemUniqueId_ = Default::default();
        let success = sdk::natives::get_menu_layout_changed_event_details(
            &mut lastItemMenuId_,
&mut selectedItemMenuId_,
&mut selectedItemUniqueId_,
        );
        let lastItemMenuId_ = lastItemMenuId_;
let selectedItemMenuId_ = selectedItemMenuId_;
let selectedItemUniqueId_ = selectedItemUniqueId_;
        
        ResultOf_get_menu_layout_changed_event_details {
            success,
            ret: (),
            lastItemMenuId_,
selectedItemMenuId_,
selectedItemUniqueId_
        }
    }
}

    fn native_set_inside_very_large_interior(&self, toggle_: bool) -> ResultOf_set_inside_very_large_interior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_inside_very_large_interior(
            toggle_,
        );
        
        
        ResultOf_set_inside_very_large_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ime_in_progress(&self, ) -> ResultOf_is_ime_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_ime_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_ime_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_string_with_this_text_label(&self, gxt_: Option<String>) -> ResultOf_get_length_of_string_with_this_text_label {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::get_length_of_string_with_this_text_label(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_length_of_string_with_this_text_label {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_online_policies_menu(&self, ) -> ResultOf_open_online_policies_menu {
    unsafe {
        
        let success = sdk::natives::open_online_policies_menu(
            
        );
        
        
        ResultOf_open_online_policies_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_is_in_director_mode(&self, toggle_: bool) -> ResultOf_set_player_is_in_director_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_in_director_mode(
            toggle_,
        );
        
        
        ResultOf_set_player_is_in_director_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_blip_name(&self, blip_: i32) -> ResultOf_add_text_component_substring_blip_name {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::add_text_component_substring_blip_name(
            blip_,
        );
        
        
        ResultOf_add_text_component_substring_blip_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_clear_frozen_post(&self, ) -> ResultOf_thefeed_clear_frozen_post {
    unsafe {
        
        let success = sdk::natives::thefeed_clear_frozen_post(
            
        );
        
        
        ResultOf_thefeed_clear_frozen_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_description_for_ugc_mission_eight_strings(&self, p0_: bool,
p1_: Option<String>,
p2_: Option<String>,
p3_: Option<String>,
p4_: Option<String>,
p5_: Option<String>,
p6_: Option<String>,
p7_: Option<String>,
p8_: Option<String>) -> ResultOf_set_description_for_ugc_mission_eight_strings {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = sdk_helpers::create_c_string_ptr(p5_);
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = sdk_helpers::create_c_string_ptr(p7_);
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
        let success = sdk::natives::set_description_for_ugc_mission_eight_strings(
            p0_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
p4_.as_ref().unwrap(),
p5_.as_ref().unwrap(),
p6_.as_ref().unwrap(),
p7_.as_ref().unwrap(),
p8_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_description_for_ugc_mission_eight_strings {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_minimap_angle(&self, ) -> ResultOf_unlock_minimap_angle {
    unsafe {
        
        let success = sdk::natives::unlock_minimap_angle(
            
        );
        
        
        ResultOf_unlock_minimap_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_warning_screen_message_hash(&self, ) -> ResultOf_get_warning_screen_message_hash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_warning_screen_message_hash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_warning_screen_message_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refresh_waypoint(&self, ) -> ResultOf_refresh_waypoint {
    unsafe {
        
        let success = sdk::natives::refresh_waypoint(
            
        );
        
        
        ResultOf_refresh_waypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_get_last_shown_phone_activatable_feed_id(&self, ) -> ResultOf_thefeed_get_last_shown_phone_activatable_feed_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::thefeed_get_last_shown_phone_activatable_feed_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_thefeed_get_last_shown_phone_activatable_feed_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_player_name_tags_on_blips(&self, toggle_: bool) -> ResultOf_display_player_name_tags_on_blips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_player_name_tags_on_blips(
            toggle_,
        );
        
        
        ResultOf_display_player_name_tags_on_blips {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_route_colour(&self, blip_: i32,
colour_: i32) -> ResultOf_set_blip_route_colour {
    unsafe {
        let mut blip_ = blip_;
let mut colour_ = colour_;
        let success = sdk::natives::set_blip_route_colour(
            blip_,
colour_,
        );
        
        
        ResultOf_set_blip_route_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_fake_cone_array(&self, ) -> ResultOf_clear_fake_cone_array {
    unsafe {
        
        let success = sdk::natives::clear_fake_cone_array(
            
        );
        
        
        ResultOf_clear_fake_cone_array {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_is_context_active(&self, contextHash_: u32) -> ResultOf_pause_menu_is_context_active {
    unsafe {
        let mut native_return = Default::default();
let mut contextHash_ = contextHash_;
        let success = sdk::natives::pause_menu_is_context_active(
            &mut native_return,
contextHash_,
        );
        let native_return = native_return;
        
        ResultOf_pause_menu_is_context_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_display_help(&self, inputType_: Option<String>) -> ResultOf_begin_text_command_display_help {
    unsafe {
        let mut inputType_ = sdk_helpers::create_c_string_ptr(inputType_);
        let success = sdk::natives::begin_text_command_display_help(
            inputType_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_display_help {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_is_message_displayed(&self, text_: Option<String>) -> ResultOf_begin_text_command_is_message_displayed {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_is_message_displayed(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_is_message_displayed {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_get_screen_width_of_display_text(&self, p0_: bool) -> ResultOf_end_text_command_get_screen_width_of_display_text {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_get_screen_width_of_display_text(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_get_screen_width_of_display_text {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_blip(&self, blip_: i32) -> ResultOf_remove_blip {
    unsafe {
        let mut blip_ = Default::default();
        let success = sdk::natives::remove_blip(
            &mut blip_,
        );
        let blip_ = blip_;
        
        ResultOf_remove_blip {
            success,
            ret: (),
            blip_
        }
    }
}

    fn native_force_close_text_input_box(&self, ) -> ResultOf_force_close_text_input_box {
    unsafe {
        
        let success = sdk::natives::force_close_text_input_box(
            
        );
        
        
        ResultOf_force_close_text_input_box {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_ability_bar(&self, toggle_: bool) -> ResultOf_set_allow_ability_bar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_ability_bar(
            toggle_,
        );
        
        
        ResultOf_set_allow_ability_bar {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_zoom_minimap_when_running_this_frame(&self, ) -> ResultOf_dont_zoom_minimap_when_running_this_frame {
    unsafe {
        
        let success = sdk::natives::dont_zoom_minimap_when_running_this_frame(
            
        );
        
        
        ResultOf_dont_zoom_minimap_when_running_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_is_message_displayed(&self, ) -> ResultOf_end_text_command_is_message_displayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::end_text_command_is_message_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_is_message_displayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_streaming_additional_text(&self, p0_: i32) -> ResultOf_is_streaming_additional_text {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_streaming_additional_text(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_streaming_additional_text {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mouse_cursor_style(&self, spriteId_: i32) -> ResultOf_set_mouse_cursor_style {
    unsafe {
        let mut spriteId_ = spriteId_;
        let success = sdk::natives::set_mouse_cursor_style(
            spriteId_,
        );
        
        
        ResultOf_set_mouse_cursor_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_help(&self, toggle_: bool) -> ResultOf_clear_help {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::clear_help(
            toggle_,
        );
        
        
        ResultOf_clear_help {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crew_rankup_with_literal_flag(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>,
p3_: bool,
p4_: bool) -> ResultOf_end_text_command_thefeed_post_crew_rankup_with_literal_flag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::end_text_command_thefeed_post_crew_rankup_with_literal_flag(
            &mut native_return,
p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_crew_rankup_with_literal_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_menu_ped_float_stat(&self, statHash_: f32,
outValue_: f32,
p2_: bool) -> ResultOf_get_character_menu_ped_float_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::get_character_menu_ped_float_stat(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_get_character_menu_ped_float_stat {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_begin_text_command_override_button_text(&self, gxtEntry_: Option<String>) -> ResultOf_begin_text_command_override_button_text {
    unsafe {
        let mut gxtEntry_ = sdk_helpers::create_c_string_ptr(gxtEntry_);
        let success = sdk::natives::begin_text_command_override_button_text(
            gxtEntry_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_override_button_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_custom_route_render(&self, toggle_: bool,
radarThickness_: i32,
mapThickness_: i32) -> ResultOf_set_gps_custom_route_render {
    unsafe {
        let mut toggle_ = toggle_;
let mut radarThickness_ = radarThickness_;
let mut mapThickness_ = mapThickness_;
        let success = sdk::natives::set_gps_custom_route_render(
            toggle_,
radarThickness_,
mapThickness_,
        );
        
        
        ResultOf_set_gps_custom_route_render {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_display(&self, blip_: i32,
displayId_: i32) -> ResultOf_set_blip_display {
    unsafe {
        let mut blip_ = blip_;
let mut displayId_ = displayId_;
        let success = sdk::natives::set_blip_display(
            blip_,
displayId_,
        );
        
        
        ResultOf_set_blip_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_get_number_of_lines_for_string(&self, x_: f32,
y_: f32) -> ResultOf_end_text_command_get_number_of_lines_for_string {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::end_text_command_get_number_of_lines_for_string(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_get_number_of_lines_for_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pausemap_in_interior_mode(&self, ) -> ResultOf_is_pausemap_in_interior_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pausemap_in_interior_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_pausemap_in_interior_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_menu_ped_masked_int_stat(&self, statHash_: u32,
outValue_: i32,
mask_: i32,
p3_: bool) -> ResultOf_get_menu_ped_masked_int_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut mask_ = mask_;
let mut p3_ = p3_;
        let success = sdk::natives::get_menu_ped_masked_int_stat(
            &mut native_return,
&mut outValue_,
statHash_,
mask_,
p3_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_get_menu_ped_masked_int_stat {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_set_minimap_in_prologue(&self, toggle_: bool) -> ResultOf_set_minimap_in_prologue {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_in_prologue(
            toggle_,
        );
        
        
        ResultOf_set_minimap_in_prologue {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_reportugc_menu_open(&self, ) -> ResultOf_is_reportugc_menu_open {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_reportugc_menu_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_reportugc_menu_open {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_pausemenu_spinner(&self, p0_: bool) -> ResultOf_disable_pausemenu_spinner {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_pausemenu_spinner(
            p0_,
        );
        
        
        ResultOf_disable_pausemenu_spinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_background_color_for_next_post(&self, hudColorIndex_: i32) -> ResultOf_thefeed_set_background_color_for_next_post {
    unsafe {
        let mut hudColorIndex_ = hudColorIndex_;
        let success = sdk::natives::thefeed_set_background_color_for_next_post(
            hudColorIndex_,
        );
        
        
        ResultOf_thefeed_set_background_color_for_next_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_website(&self, website_: Option<String>) -> ResultOf_add_text_component_substring_website {
    unsafe {
        let mut website_ = sdk_helpers::create_c_string_ptr(website_);
        let success = sdk::natives::add_text_component_substring_website(
            website_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_text_component_substring_website {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_wallet_cash(&self, ) -> ResultOf_remove_multiplayer_wallet_cash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_wallet_cash(
            
        );
        
        
        ResultOf_remove_multiplayer_wallet_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_help_text_this_frame(&self, message_: Option<String>,
p1_: bool) -> ResultOf_display_help_text_this_frame {
    unsafe {
        let mut message_ = sdk_helpers::create_c_string_ptr(message_);
let mut p1_ = p1_;
        let success = sdk::natives::display_help_text_this_frame(
            message_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_display_help_text_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_hud_cash(&self, ) -> ResultOf_remove_multiplayer_hud_cash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_hud_cash(
            
        );
        
        
        ResultOf_remove_multiplayer_hud_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_cash(&self, toggle_: bool) -> ResultOf_display_cash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_cash(
            toggle_,
        );
        
        
        ResultOf_display_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_alpha(&self, blip_: i32) -> ResultOf_get_blip_alpha {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_alpha(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_alpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_max_health_hud_display(&self, maximumValue_: i32) -> ResultOf_set_max_health_hud_display {
    unsafe {
        let mut maximumValue_ = maximumValue_;
        let success = sdk::natives::set_max_health_hud_display(
            maximumValue_,
        );
        
        
        ResultOf_set_max_health_hud_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_notice_range(&self, ped_: u32,
range_: f32) -> ResultOf_set_ped_ai_blip_notice_range {
    unsafe {
        let mut ped_ = ped_;
let mut range_ = range_;
        let success = sdk::natives::set_ped_ai_blip_notice_range(
            ped_,
range_,
        );
        
        
        ResultOf_set_ped_ai_blip_notice_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crewtag(&self, p0_: bool,
p1_: bool,
p2_: i32,
p3_: i32,
isLeader_: bool,
unk0_: bool,
clanDesc_: i32,
R_: i32,
G_: i32,
B_: i32) -> ResultOf_end_text_command_thefeed_post_crewtag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = p3_;
let mut isLeader_ = isLeader_;
let mut unk0_ = unk0_;
let mut clanDesc_ = clanDesc_;
let mut R_ = R_;
let mut G_ = G_;
let mut B_ = B_;
        let success = sdk::natives::end_text_command_thefeed_post_crewtag(
            &mut native_return,
&mut p2_,
p0_,
p1_,
p3_,
isLeader_,
unk0_,
clanDesc_,
R_,
G_,
B_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_end_text_command_thefeed_post_crewtag {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_get_current_website_id(&self, ) -> ResultOf_get_current_website_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_website_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_website_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mouse_cursor_visible(&self, toggle_: bool) -> ResultOf_set_mouse_cursor_visible {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mouse_cursor_visible(
            toggle_,
        );
        
        
        ResultOf_set_mouse_cursor_visible {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_n_characters_of_literal_string(&self, string_: Option<String>,
length_: i32) -> ResultOf_get_first_n_characters_of_literal_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut length_ = length_;
        let success = sdk::natives::get_first_n_characters_of_literal_string(
            native_return.pin_mut(),
string_.as_ref().unwrap(),
length_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_first_n_characters_of_literal_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ability_bar_value(&self, p0_: f32,
p1_: f32) -> ResultOf_set_ability_bar_value {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ability_bar_value(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ability_bar_value {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_active_blips(&self, ) -> ResultOf_get_number_of_active_blips {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_active_blips(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_active_blips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_info_id_pickup_index(&self, blip_: i32) -> ResultOf_get_blip_info_id_pickup_index {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_pickup_index(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_info_id_pickup_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_num_packages(&self, gamerTagId_: i32,
p1_: i32) -> ResultOf_set_mp_gamer_tag_num_packages {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut p1_ = p1_;
        let success = sdk::natives::set_mp_gamer_tag_num_packages(
            gamerTagId_,
p1_,
        );
        
        
        ResultOf_set_mp_gamer_tag_num_packages {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_brief(&self, ) -> ResultOf_clear_brief {
    unsafe {
        
        let success = sdk::natives::clear_brief(
            
        );
        
        
        ResultOf_clear_brief {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_print(&self, duration_: i32,
drawImmediately_: bool) -> ResultOf_end_text_command_print {
    unsafe {
        let mut duration_ = duration_;
let mut drawImmediately_ = drawImmediately_;
        let success = sdk::natives::end_text_command_print(
            duration_,
drawImmediately_,
        );
        
        
        ResultOf_end_text_command_print {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_social_club_tour(&self, name_: Option<String>) -> ResultOf_set_social_club_tour {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_social_club_tour(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_social_club_tour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radar_preference_switched_on(&self, ) -> ResultOf_is_radar_preference_switched_on {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radar_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_radar_preference_switched_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cop_blip_sprite(&self, p0_: i32,
p1_: f32) -> ResultOf_set_cop_blip_sprite {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cop_blip_sprite(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cop_blip_sprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_radar(&self, toggle_: bool) -> ResultOf_display_radar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_radar(
            toggle_,
        );
        
        
        ResultOf_display_radar {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_force_render_on(&self, ) -> ResultOf_thefeed_force_render_on {
    unsafe {
        
        let success = sdk::natives::thefeed_force_render_on(
            
        );
        
        
        ResultOf_thefeed_force_render_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_get_weapon_wheel_top_slot(&self, weaponTypeIndex_: i32) -> ResultOf_hud_get_weapon_wheel_top_slot {
    unsafe {
        let mut native_return = Default::default();
let mut weaponTypeIndex_ = weaponTypeIndex_;
        let success = sdk::natives::hud_get_weapon_wheel_top_slot(
            &mut native_return,
weaponTypeIndex_,
        );
        let native_return = native_return;
        
        ResultOf_hud_get_weapon_wheel_top_slot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fake_gps_player_position_this_frame(&self, x_: f32,
y_: f32,
p2_: i32) -> ResultOf_set_fake_gps_player_position_this_frame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::set_fake_gps_player_position_this_frame(
            x_,
y_,
p2_,
        );
        
        
        ResultOf_set_fake_gps_player_position_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_flash_wanted_display(&self, p0_: bool) -> ResultOf_flash_wanted_display {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::flash_wanted_display(
            p0_,
        );
        
        
        ResultOf_flash_wanted_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pm_player_crew_color(&self, r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_pm_player_crew_color {
    unsafe {
        let mut native_return = Default::default();
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_pm_player_crew_color(
            &mut native_return,
&mut r_,
&mut g_,
&mut b_,
        );
        let native_return = native_return;
let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_pm_player_crew_color {
            success,
            ret: native_return,
            r_,
g_,
b_
        }
    }
}

    fn native_has_director_mode_been_launched_by_code(&self, ) -> ResultOf_has_director_mode_been_launched_by_code {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_director_mode_been_launched_by_code(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_director_mode_been_launched_by_code {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_number_on_blip(&self, blip_: i32,
number_: i32) -> ResultOf_show_number_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut number_ = number_;
        let success = sdk::natives::show_number_on_blip(
            blip_,
number_,
        );
        
        
        ResultOf_show_number_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_get_weapon_wheel_currently_highlighted(&self, ) -> ResultOf_hud_get_weapon_wheel_currently_highlighted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::hud_get_weapon_wheel_currently_highlighted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_hud_get_weapon_wheel_currently_highlighted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_street_and_car_names_this_frame(&self, ) -> ResultOf_hide_street_and_car_names_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_street_and_car_names_this_frame(
            
        );
        
        
        ResultOf_hide_street_and_car_names_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_leading(&self, p0_: i32) -> ResultOf_set_text_leading {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_leading(
            p0_,
        );
        
        
        ResultOf_set_text_leading {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_blip_flashing(&self, blip_: i32) -> ResultOf_is_blip_flashing {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_flashing(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_is_blip_flashing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_ammo_this_frame(&self, display_: bool) -> ResultOf_display_ammo_this_frame {
    unsafe {
        let mut display_ = display_;
        let success = sdk::natives::display_ammo_this_frame(
            display_,
        );
        
        
        ResultOf_display_ammo_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud(&self, toggle_: bool) -> ResultOf_display_hud {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_hud(
            toggle_,
        );
        
        
        ResultOf_display_hud {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tags_should_use_vehicle_health(&self, gamerTagId_: i32,
toggle_: bool) -> ResultOf_set_mp_gamer_tags_should_use_vehicle_health {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mp_gamer_tags_should_use_vehicle_health(
            gamerTagId_,
toggle_,
        );
        
        
        ResultOf_set_mp_gamer_tags_should_use_vehicle_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_blip_exist(&self, blip_: i32) -> ResultOf_does_blip_exist {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::does_blip_exist(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_does_blip_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_waypoint_off(&self, ) -> ResultOf_set_waypoint_off {
    unsafe {
        
        let success = sdk::natives::set_waypoint_off(
            
        );
        
        
        ResultOf_set_waypoint_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hud_hidden(&self, ) -> ResultOf_is_hud_hidden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hud_hidden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_hud_hidden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_override_button_text(&self, p0_: i32) -> ResultOf_end_text_command_override_button_text {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_override_button_text(
            p0_,
        );
        
        
        ResultOf_end_text_command_override_button_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_rotation_with_float(&self, blip_: i32,
heading_: f32) -> ResultOf_set_blip_rotation_with_float {
    unsafe {
        let mut blip_ = blip_;
let mut heading_ = heading_;
        let success = sdk::natives::set_blip_rotation_with_float(
            blip_,
heading_,
        );
        
        
        ResultOf_set_blip_rotation_with_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_flush_queue(&self, ) -> ResultOf_thefeed_flush_queue {
    unsafe {
        
        let success = sdk::natives::thefeed_flush_queue(
            
        );
        
        
        ResultOf_thefeed_flush_queue {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_point_to_gps_multi_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_add_point_to_gps_multi_route {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_point_to_gps_multi_route(
            x_,
y_,
z_,
        );
        
        
        ResultOf_add_point_to_gps_multi_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_is_paused(&self, ) -> ResultOf_thefeed_is_paused {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::thefeed_is_paused(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_thefeed_is_paused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_award(&self, textureDict_: Option<String>,
textureName_: Option<String>,
rpBonus_: i32,
colorOverlay_: i32,
titleLabel_: Option<String>) -> ResultOf_end_text_command_thefeed_post_award {
    unsafe {
        let mut native_return = Default::default();
let mut textureDict_ = sdk_helpers::create_c_string_ptr(textureDict_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut rpBonus_ = rpBonus_;
let mut colorOverlay_ = colorOverlay_;
let mut titleLabel_ = sdk_helpers::create_c_string_ptr(titleLabel_);
        let success = sdk::natives::end_text_command_thefeed_post_award(
            &mut native_return,
textureDict_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
rpBonus_,
colorOverlay_,
titleLabel_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_award {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_flash_interval(&self, blip_: i32,
p1_: i32) -> ResultOf_set_blip_flash_interval {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_flash_interval(
            blip_,
p1_,
        );
        
        
        ResultOf_set_blip_flash_interval {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hud_component_position(&self, id_: i32,
x_: f32,
y_: f32) -> ResultOf_set_hud_component_position {
    unsafe {
        let mut id_ = id_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_hud_component_position(
            id_,
x_,
y_,
        );
        
        
        ResultOf_set_hud_component_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mouse_cursor_this_frame(&self, ) -> ResultOf_set_mouse_cursor_this_frame {
    unsafe {
        
        let success = sdk::natives::set_mouse_cursor_this_frame(
            
        );
        
        
        ResultOf_set_mouse_cursor_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_busyspinner_on(&self, string_: Option<String>) -> ResultOf_begin_text_command_busyspinner_on {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::begin_text_command_busyspinner_on(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_busyspinner_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_text_label_exist(&self, gxt_: Option<String>) -> ResultOf_does_text_label_exist {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::does_text_label_exist(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_text_label_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_ped_to_pause_menu(&self, ped_: u32,
p1_: i32) -> ResultOf_give_ped_to_pause_menu {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::give_ped_to_pause_menu(
            ped_,
p1_,
        );
        
        
        ResultOf_give_ped_to_pause_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_subtitle_preference_switched_on(&self, ) -> ResultOf_is_subtitle_preference_switched_on {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_subtitle_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_subtitle_preference_switched_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_this_additional_text_loaded(&self, gxt_: Option<String>,
slot_: i32) -> ResultOf_has_this_additional_text_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::has_this_additional_text_loaded(
            &mut native_return,
gxt_.as_ref().unwrap(),
slot_,
        );
        let native_return = native_return;
        
        ResultOf_has_this_additional_text_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_auto_post_gametips_off(&self, ) -> ResultOf_thefeed_auto_post_gametips_off {
    unsafe {
        
        let success = sdk::natives::thefeed_auto_post_gametips_off(
            
        );
        
        
        ResultOf_thefeed_auto_post_gametips_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_coords(&self, blip_: i32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_blip_coords {
    unsafe {
        let mut blip_ = blip_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_blip_coords(
            blip_,
posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_blip_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_priority(&self, blip_: i32,
priority_: i32) -> ResultOf_set_blip_priority {
    unsafe {
        let mut blip_ = blip_;
let mut priority_ = priority_;
        let success = sdk::natives::set_blip_priority(
            blip_,
priority_,
        );
        
        
        ResultOf_set_blip_priority {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_warning_message_ready_for_control(&self, ) -> ResultOf_is_warning_message_ready_for_control {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_warning_message_ready_for_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_warning_message_ready_for_control {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_minimap_rendering(&self, ) -> ResultOf_is_minimap_rendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_minimap_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_minimap_rendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pause_menu_active(&self, ) -> ResultOf_is_pause_menu_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pause_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_pause_menu_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_floating_help_text_to_entity(&self, hudIndex_: i32,
entity_: u32,
offsetX_: f32,
offsetY_: f32) -> ResultOf_set_floating_help_text_to_entity {
    unsafe {
        let mut hudIndex_ = hudIndex_;
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
        let success = sdk::natives::set_floating_help_text_to_entity(
            hudIndex_,
entity_,
offsetX_,
offsetY_,
        );
        
        
        ResultOf_set_floating_help_text_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mp_text_chat_typing(&self, ) -> ResultOf_is_mp_text_chat_typing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mp_text_chat_typing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mp_text_chat_typing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_has_ai_blip_with_colour(&self, ped_: u32,
hasCone_: bool,
color_: i32) -> ResultOf_set_ped_has_ai_blip_with_colour {
    unsafe {
        let mut ped_ = ped_;
let mut hasCone_ = hasCone_;
let mut color_ = color_;
        let success = sdk::natives::set_ped_has_ai_blip_with_colour(
            ped_,
hasCone_,
color_,
        );
        
        
        ResultOf_set_ped_has_ai_blip_with_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_flashes(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_flashes {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_flashes(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_flashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_bright(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_bright {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_bright(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_bright {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename_with_byte_limit(&self, text_: Option<String>,
position_: i32,
length_: i32,
maxLength_: i32) -> ResultOf_get_character_from_audio_conversation_filename_with_byte_limit {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut position_ = position_;
let mut length_ = length_;
let mut maxLength_ = maxLength_;
        let success = sdk::natives::get_character_from_audio_conversation_filename_with_byte_limit(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
position_,
length_,
maxLength_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_character_from_audio_conversation_filename_with_byte_limit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_busyspinner_is_displaying(&self, ) -> ResultOf_busyspinner_is_displaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::busyspinner_is_displaying(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_busyspinner_is_displaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_marker_long_distance(&self, p0_: i32,
p1_: i32) -> ResultOf_set_blip_marker_long_distance {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_marker_long_distance(
            p0_,
p1_,
        );
        
        
        ResultOf_set_blip_marker_long_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_reminder_message(&self, ) -> ResultOf_clear_reminder_message {
    unsafe {
        
        let success = sdk::natives::clear_reminder_message(
            
        );
        
        
        ResultOf_clear_reminder_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_versus_tu(&self, txdName1_: Option<String>,
textureName1_: Option<String>,
count1_: i32,
txdName2_: Option<String>,
textureName2_: Option<String>,
count2_: i32,
hudColor1_: i32,
hudColor2_: i32) -> ResultOf_end_text_command_thefeed_post_versus_tu {
    unsafe {
        let mut native_return = Default::default();
let mut txdName1_ = sdk_helpers::create_c_string_ptr(txdName1_);
let mut textureName1_ = sdk_helpers::create_c_string_ptr(textureName1_);
let mut count1_ = count1_;
let mut txdName2_ = sdk_helpers::create_c_string_ptr(txdName2_);
let mut textureName2_ = sdk_helpers::create_c_string_ptr(textureName2_);
let mut count2_ = count2_;
let mut hudColor1_ = hudColor1_;
let mut hudColor2_ = hudColor2_;
        let success = sdk::natives::end_text_command_thefeed_post_versus_tu(
            &mut native_return,
txdName1_.as_ref().unwrap(),
textureName1_.as_ref().unwrap(),
count1_,
txdName2_.as_ref().unwrap(),
textureName2_.as_ref().unwrap(),
count2_,
hudColor1_,
hudColor2_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_versus_tu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_report_logo_off(&self, ) -> ResultOf_thefeed_report_logo_off {
    unsafe {
        
        let success = sdk::natives::thefeed_report_logo_off(
            
        );
        
        
        ResultOf_thefeed_report_logo_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cop_blip_sprite_as_standard(&self, ) -> ResultOf_set_cop_blip_sprite_as_standard {
    unsafe {
        
        let success = sdk::natives::set_cop_blip_sprite_as_standard(
            
        );
        
        
        ResultOf_set_cop_blip_sprite_as_standard {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_outline_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_outline_indicator_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_outline_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_outline_indicator_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_print(&self, GxtEntry_: Option<String>) -> ResultOf_begin_text_command_print {
    unsafe {
        let mut GxtEntry_ = sdk_helpers::create_c_string_ptr(GxtEntry_);
        let success = sdk::natives::begin_text_command_print(
            GxtEntry_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_print {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_global_actionscript_flag(&self, flagIndex_: i32) -> ResultOf_reset_global_actionscript_flag {
    unsafe {
        let mut flagIndex_ = flagIndex_;
        let success = sdk::natives::reset_global_actionscript_flag(
            flagIndex_,
        );
        
        
        ResultOf_reset_global_actionscript_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_help_message_style(&self, style_: i32,
hudColor_: i32,
alpha_: i32,
p3_: i32,
p4_: i32) -> ResultOf_set_help_message_style {
    unsafe {
        let mut style_ = style_;
let mut hudColor_ = hudColor_;
let mut alpha_ = alpha_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_help_message_style(
            style_,
hudColor_,
alpha_,
p3_,
p4_,
        );
        
        
        ResultOf_set_help_message_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_frontend_rendering_this_frame(&self, ) -> ResultOf_suppress_frontend_rendering_this_frame {
    unsafe {
        
        let success = sdk::natives::suppress_frontend_rendering_this_frame(
            
        );
        
        
        ResultOf_suppress_frontend_rendering_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_off_wanted_star_flash(&self, toggle_: bool) -> ResultOf_force_off_wanted_star_flash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_off_wanted_star_flash(
            toggle_,
        );
        
        
        ResultOf_force_off_wanted_star_flash {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_snap_feed_item_positions(&self, p0_: bool) -> ResultOf_thefeed_set_snap_feed_item_positions {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::thefeed_set_snap_feed_item_positions(
            p0_,
        );
        
        
        ResultOf_thefeed_set_snap_feed_item_positions {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_set_blip_name(&self, blip_: i32) -> ResultOf_end_text_command_set_blip_name {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::end_text_command_set_blip_name(
            blip_,
        );
        
        
        ResultOf_end_text_command_set_blip_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hud_component_active(&self, id_: i32) -> ResultOf_is_hud_component_active {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_hud_component_active(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_hud_component_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_from_entity(&self, entity_: u32) -> ResultOf_get_blip_from_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_blip_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_from_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radar_zoom_precise(&self, zoom_: f32) -> ResultOf_set_radar_zoom_precise {
    unsafe {
        let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_precise(
            zoom_,
        );
        
        
        ResultOf_set_radar_zoom_precise {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_busyspinner_on(&self, busySpinnerType_: i32) -> ResultOf_end_text_command_busyspinner_on {
    unsafe {
        let mut busySpinnerType_ = busySpinnerType_;
        let success = sdk::natives::end_text_command_busyspinner_on(
            busySpinnerType_,
        );
        
        
        ResultOf_end_text_command_busyspinner_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_pickup(&self, pickup_: i32) -> ResultOf_add_blip_for_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::add_blip_for_pickup(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOf_add_blip_for_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_remove_item(&self, notificationId_: i32) -> ResultOf_thefeed_remove_item {
    unsafe {
        let mut notificationId_ = notificationId_;
        let success = sdk::natives::thefeed_remove_item(
            notificationId_,
        );
        
        
        ResultOf_thefeed_remove_item {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_colour(&self, red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOf_set_text_colour {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_text_colour(
            red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOf_set_text_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_short_range(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_as_short_range {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_short_range(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_as_short_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_type(&self, blip_: i32) -> ResultOf_get_blip_info_id_type {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_type(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_info_id_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_hud_over_fade_this_frame(&self, ) -> ResultOf_draw_hud_over_fade_this_frame {
    unsafe {
        
        let success = sdk::natives::draw_hud_over_fade_this_frame(
            
        );
        
        
        ResultOf_draw_hud_over_fade_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_fake_mp_gamer_tag(&self, ped_: u32,
username_: Option<String>,
pointedClanTag_: bool,
isRockstarClan_: bool,
clanTag_: Option<String>,
clanFlag_: i32) -> ResultOf_create_fake_mp_gamer_tag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut username_ = sdk_helpers::create_c_string_ptr(username_);
let mut pointedClanTag_ = pointedClanTag_;
let mut isRockstarClan_ = isRockstarClan_;
let mut clanTag_ = sdk_helpers::create_c_string_ptr(clanTag_);
let mut clanFlag_ = clanFlag_;
        let success = sdk::natives::create_fake_mp_gamer_tag(
            &mut native_return,
ped_,
username_.as_ref().unwrap(),
pointedClanTag_,
isRockstarClan_,
clanTag_.as_ref().unwrap(),
clanFlag_,
        );
        let native_return = native_return;
        
        ResultOf_create_fake_mp_gamer_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_centre(&self, align_: bool) -> ResultOf_set_text_centre {
    unsafe {
        let mut align_ = align_;
        let success = sdk::natives::set_text_centre(
            align_,
        );
        
        
        ResultOf_set_text_centre {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_multiplayer_wallet_cash(&self, ) -> ResultOf_set_multiplayer_wallet_cash {
    unsafe {
        
        let success = sdk::natives::set_multiplayer_wallet_cash(
            
        );
        
        
        ResultOf_set_multiplayer_wallet_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fake_spectator_mode(&self, ) -> ResultOf_get_fake_spectator_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_fake_spectator_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_fake_spectator_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_widescreen_format(&self, p0_: i32) -> ResultOf_set_widescreen_format {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_widescreen_format(
            p0_,
        );
        
        
        ResultOf_set_widescreen_format {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_social_club_active(&self, ) -> ResultOf_is_social_club_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_social_club_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_social_club_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_extended_height_threshold(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_extended_height_threshold {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_extended_height_threshold(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_extended_height_threshold {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cop_blip_from_ped(&self, ped_: u32) -> ResultOf_remove_cop_blip_from_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_cop_blip_from_ped(
            ped_,
        );
        
        
        ResultOf_remove_cop_blip_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_text_label(&self, labelName_: Option<String>) -> ResultOf_add_text_component_substring_text_label {
    unsafe {
        let mut labelName_ = sdk_helpers::create_c_string_ptr(labelName_);
        let success = sdk::natives::add_text_component_substring_text_label(
            labelName_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_text_component_substring_text_label {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_busyspinner(&self, ) -> ResultOf_preload_busyspinner {
    unsafe {
        
        let success = sdk::natives::preload_busyspinner(
            
        );
        
        
        ResultOf_preload_busyspinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_subtitle_label(&self, txdName_: Option<String>,
textureName_: Option<String>,
flash_: bool,
iconType_: i32,
sender_: Option<String>,
subject_: Option<String>) -> ResultOf_end_text_command_thefeed_post_messagetext_subtitle_label {
    unsafe {
        let mut native_return = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
let mut textureName_ = sdk_helpers::create_c_string_ptr(textureName_);
let mut flash_ = flash_;
let mut iconType_ = iconType_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_subtitle_label(
            &mut native_return,
txdName_.as_ref().unwrap(),
textureName_.as_ref().unwrap(),
flash_,
iconType_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_messagetext_subtitle_label {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_contact_instructional_button(&self, toggle_: bool) -> ResultOf_show_contact_instructional_button {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::show_contact_instructional_button(
            toggle_,
        );
        
        
        ResultOf_show_contact_instructional_button {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_set_busy_spinner(&self, p0_: bool,
position_: i32,
spinnerIndex_: i32) -> ResultOf_pause_menu_set_busy_spinner {
    unsafe {
        let mut p0_ = p0_;
let mut position_ = position_;
let mut spinnerIndex_ = spinnerIndex_;
        let success = sdk::natives::pause_menu_set_busy_spinner(
            p0_,
position_,
spinnerIndex_,
        );
        
        
        ResultOf_pause_menu_set_busy_spinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_bank_cash(&self, ) -> ResultOf_remove_multiplayer_bank_cash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_bank_cash(
            
        );
        
        
        ResultOf_remove_multiplayer_bank_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_get_mouse_click_event(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_pause_menu_get_mouse_click_event {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
        let success = sdk::natives::pause_menu_get_mouse_click_event(
            &mut native_return,
&mut p0_,
&mut p1_,
&mut p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
        
        ResultOf_pause_menu_get_mouse_click_event {
            success,
            ret: native_return,
            p0_,
p1_,
p2_
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock_tu(&self, gxtLabel1_: Option<String>,
p1_: i32,
gxtLabel2_: Option<String>,
p3_: i32) -> ResultOf_end_text_command_thefeed_post_unlock_tu {
    unsafe {
        let mut native_return = Default::default();
let mut gxtLabel1_ = sdk_helpers::create_c_string_ptr(gxtLabel1_);
let mut p1_ = p1_;
let mut gxtLabel2_ = sdk_helpers::create_c_string_ptr(gxtLabel2_);
let mut p3_ = p3_;
        let success = sdk::natives::end_text_command_thefeed_post_unlock_tu(
            &mut native_return,
gxtLabel1_.as_ref().unwrap(),
p1_,
gxtLabel2_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_unlock_tu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_menu_ped_int_stat(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_get_character_menu_ped_int_stat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::get_character_menu_ped_int_stat(
            &mut native_return,
&mut p1_,
p0_,
p2_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_get_character_menu_ped_int_stat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_show_gold_tick_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_gold_tick_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_gold_tick_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_gold_tick_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom_to_distance(&self, zoom_: f32) -> ResultOf_set_radar_zoom_to_distance {
    unsafe {
        let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_to_distance(
            zoom_,
        );
        
        
        ResultOf_set_radar_zoom_to_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_prints(&self, ) -> ResultOf_clear_prints {
    unsafe {
        
        let success = sdk::natives::clear_prints(
            
        );
        
        
        ResultOf_clear_prints {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pause_when_not_in_state_of_play_this_frame(&self, ) -> ResultOf_allow_pause_when_not_in_state_of_play_this_frame {
    unsafe {
        
        let success = sdk::natives::allow_pause_when_not_in_state_of_play_this_frame(
            
        );
        
        
        ResultOf_allow_pause_when_not_in_state_of_play_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_display_text(&self, x_: f32,
y_: f32,
p2_: i32) -> ResultOf_end_text_command_display_text {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::end_text_command_display_text(
            x_,
y_,
p2_,
        );
        
        
        ResultOf_end_text_command_display_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_scale_2d(&self, blip_: i32,
xScale_: f32,
yScale_: f32) -> ResultOf_set_blip_scale_2d {
    unsafe {
        let mut blip_ = blip_;
let mut xScale_ = xScale_;
let mut yScale_ = yScale_;
        let success = sdk::natives::set_blip_scale_2d(
            blip_,
xScale_,
yScale_,
        );
        
        
        ResultOf_set_blip_scale_2d {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_spectator_mode(&self, toggle_: bool) -> ResultOf_set_fake_spectator_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fake_spectator_mode(
            toggle_,
        );
        
        
        ResultOf_set_fake_spectator_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menuception_the_kick(&self, ) -> ResultOf_pause_menuception_the_kick {
    unsafe {
        
        let success = sdk::natives::pause_menuception_the_kick(
            
        );
        
        
        ResultOf_pause_menuception_the_kick {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_area(&self, x_: f32,
y_: f32,
z_: f32,
width_: f32,
height_: f32) -> ResultOf_add_blip_for_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut width_ = width_;
let mut height_ = height_;
        let success = sdk::natives::add_blip_for_area(
            &mut native_return,
x_,
y_,
z_,
width_,
height_,
        );
        let native_return = native_return;
        
        ResultOf_add_blip_for_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename_bytes(&self, text_: Option<String>,
startPosition_: i32,
endPosition_: i32) -> ResultOf_get_character_from_audio_conversation_filename_bytes {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut startPosition_ = startPosition_;
let mut endPosition_ = endPosition_;
        let success = sdk::natives::get_character_from_audio_conversation_filename_bytes(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
startPosition_,
endPosition_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_character_from_audio_conversation_filename_bytes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flag_player_context_in_tournament(&self, toggle_: bool) -> ResultOf_flag_player_context_in_tournament {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::flag_player_context_in_tournament(
            toggle_,
        );
        
        
        ResultOf_flag_player_context_in_tournament {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_wanted_level(&self, gamerTagId_: i32,
wantedlvl_: i32) -> ResultOf_set_mp_gamer_tag_wanted_level {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut wantedlvl_ = wantedlvl_;
        let success = sdk::natives::set_mp_gamer_tag_wanted_level(
            gamerTagId_,
wantedlvl_,
        );
        
        
        ResultOf_set_mp_gamer_tag_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_this_print(&self, p0_: Option<String>) -> ResultOf_clear_this_print {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::clear_this_print(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_clear_this_print {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_add_directly_to_previous_briefs(&self, p0_: bool) -> ResultOf_end_text_command_add_directly_to_previous_briefs {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_add_directly_to_previous_briefs(
            p0_,
        );
        
        
        ResultOf_end_text_command_add_directly_to_previous_briefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_street_name_from_hash_key(&self, hash_: u32) -> ResultOf_get_street_name_from_hash_key {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut hash_ = hash_;
        let success = sdk::natives::get_street_name_from_hash_key(
            native_return.pin_mut(),
hash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_street_name_from_hash_key {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_blip_routes(&self, ) -> ResultOf_clear_all_blip_routes {
    unsafe {
        
        let success = sdk::natives::clear_all_blip_routes(
            
        );
        
        
        ResultOf_clear_all_blip_routes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_block_wanted_flash(&self, disabled_: bool) -> ResultOf_set_block_wanted_flash {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_block_wanted_flash(
            disabled_,
        );
        
        
        ResultOf_set_block_wanted_flash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_minimap_max_altimeter_height(&self, altitude_: f32,
p1_: bool,
p2_: i32) -> ResultOf_set_fake_minimap_max_altimeter_height {
    unsafe {
        let mut altitude_ = altitude_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_fake_minimap_max_altimeter_height(
            altitude_,
p1_,
p2_,
        );
        
        
        ResultOf_set_fake_minimap_max_altimeter_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_replay(&self, type_: i32,
image_: i32,
text_: Option<String>) -> ResultOf_end_text_command_thefeed_post_replay {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut image_ = image_;
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::end_text_command_thefeed_post_replay(
            &mut native_return,
type_,
image_,
text_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_replay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_radar_zoom_to_blip(&self, ) -> ResultOf_update_radar_zoom_to_blip {
    unsafe {
        
        let success = sdk::natives::update_radar_zoom_to_blip(
            
        );
        
        
        ResultOf_update_radar_zoom_to_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tags_should_use_points_health(&self, gamerTagId_: i32,
toggle_: bool) -> ResultOf_set_mp_gamer_tags_should_use_points_health {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mp_gamer_tags_should_use_points_health(
            gamerTagId_,
toggle_,
        );
        
        
        ResultOf_set_mp_gamer_tags_should_use_points_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_social_club_menu(&self, ) -> ResultOf_close_social_club_menu {
    unsafe {
        
        let success = sdk::natives::close_social_club_menu(
            
        );
        
        
        ResultOf_close_social_club_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_has_ai_blip(&self, ped_: u32,
hasCone_: bool) -> ResultOf_set_ped_has_ai_blip {
    unsafe {
        let mut ped_ = ped_;
let mut hasCone_ = hasCone_;
        let success = sdk::natives::set_ped_has_ai_blip(
            ped_,
hasCone_,
        );
        
        
        ResultOf_set_ped_has_ai_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_scale(&self, blip_: i32,
scale_: f32) -> ResultOf_set_blip_scale {
    unsafe {
        let mut blip_ = blip_;
let mut scale_ = scale_;
        let success = sdk::natives::set_blip_scale(
            blip_,
scale_,
        );
        
        
        ResultOf_set_blip_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_flash_timer(&self, blip_: i32,
duration_: i32) -> ResultOf_set_blip_flash_timer {
    unsafe {
        let mut blip_ = blip_;
let mut duration_ = duration_;
        let success = sdk::natives::set_blip_flash_timer(
            blip_,
duration_,
        );
        
        
        ResultOf_set_blip_flash_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_busyspinner_is_on(&self, ) -> ResultOf_busyspinner_is_on {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::busyspinner_is_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_busyspinner_is_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_report_logo_on(&self, ) -> ResultOf_thefeed_report_logo_on {
    unsafe {
        
        let success = sdk::natives::thefeed_report_logo_on(
            
        );
        
        
        ResultOf_thefeed_report_logo_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_help_text_this_frame(&self, ) -> ResultOf_hide_help_text_this_frame {
    unsafe {
        
        let success = sdk::natives::hide_help_text_this_frame(
            
        );
        
        
        ResultOf_hide_help_text_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_blip_info_id(&self, blipSprite_: i32) -> ResultOf_get_closest_blip_info_id {
    unsafe {
        let mut native_return = Default::default();
let mut blipSprite_ = blipSprite_;
        let success = sdk::natives::get_closest_blip_info_id(
            &mut native_return,
blipSprite_,
        );
        let native_return = native_return;
        
        ResultOf_get_closest_blip_info_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_alpha(&self, gamerTagId_: i32,
component_: i32,
alpha_: i32) -> ResultOf_set_mp_gamer_tag_alpha {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut component_ = component_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_mp_gamer_tag_alpha(
            gamerTagId_,
component_,
alpha_,
        );
        
        
        ResultOf_set_mp_gamer_tag_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_variable_hud_colour(&self, r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_set_script_variable_hud_colour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_script_variable_hud_colour(
            r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_set_script_variable_hud_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_waypoints_from_this_player(&self, ) -> ResultOf_delete_waypoints_from_this_player {
    unsafe {
        
        let success = sdk::natives::delete_waypoints_from_this_player(
            
        );
        
        
        ResultOf_delete_waypoints_from_this_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_blip_short_range(&self, blip_: i32) -> ResultOf_is_blip_short_range {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_short_range(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_is_blip_short_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_help_message_on_screen(&self, ) -> ResultOf_is_help_message_on_screen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_on_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_help_message_on_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_option_highlight(&self, p0_: i32) -> ResultOf_set_warning_message_option_highlight {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::set_warning_message_option_highlight(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_set_warning_message_option_highlight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_gps_custom_route(&self, hudColor_: i32,
displayOnFoot_: bool,
followPlayer_: bool) -> ResultOf_start_gps_custom_route {
    unsafe {
        let mut hudColor_ = hudColor_;
let mut displayOnFoot_ = displayOnFoot_;
let mut followPlayer_ = followPlayer_;
        let success = sdk::natives::start_gps_custom_route(
            hudColor_,
displayOnFoot_,
followPlayer_,
        );
        
        
        ResultOf_start_gps_custom_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rendered_character_height(&self, size_: f32,
font_: i32) -> ResultOf_get_rendered_character_height {
    unsafe {
        let mut native_return = Default::default();
let mut size_ = size_;
let mut font_ = font_;
        let success = sdk::natives::get_rendered_character_height(
            &mut native_return,
size_,
font_,
        );
        let native_return = native_return;
        
        ResultOf_get_rendered_character_height {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header(&self, entryHeader_: Option<String>,
entryLine1_: Option<String>,
instructionalKey_: i32,
entryLine2_: Option<String>,
p4_: bool,
p5_: i32,
showBackground_: i32,
p7_: i32,
p8_: bool,
p9_: i32) -> ResultOf_set_warning_message_with_header {
    unsafe {
        let mut entryHeader_ = sdk_helpers::create_c_string_ptr(entryHeader_);
let mut entryLine1_ = sdk_helpers::create_c_string_ptr(entryLine1_);
let mut instructionalKey_ = instructionalKey_;
let mut entryLine2_ = sdk_helpers::create_c_string_ptr(entryLine2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut showBackground_ = Default::default();
let mut p7_ = Default::default();
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::set_warning_message_with_header(
            &mut showBackground_,
&mut p7_,
entryHeader_.as_ref().unwrap(),
entryLine1_.as_ref().unwrap(),
instructionalKey_,
entryLine2_.as_ref().unwrap(),
p4_,
p5_,
p8_,
p9_,
        );
        let showBackground_ = showBackground_;
let p7_ = p7_;
        
        ResultOf_set_warning_message_with_header {
            success,
            ret: (),
            showBackground_,
p7_
        }
    }
}

    fn native_get_main_player_blip_id(&self, ) -> ResultOf_get_main_player_blip_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_main_player_blip_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_main_player_blip_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_crew_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOf_show_crew_indicator_on_blip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_crew_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOf_show_crew_indicator_on_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_hud_component_active(&self, id_: i32) -> ResultOf_is_scripted_hud_component_active {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_scripted_hud_component_active(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_hud_component_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_multiplayer_bank_cash(&self, ) -> ResultOf_set_multiplayer_bank_cash {
    unsafe {
        
        let success = sdk::natives::set_multiplayer_bank_cash(
            
        );
        
        
        ResultOf_set_multiplayer_bank_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_blip_have_gps_route(&self, blip_: i32) -> ResultOf_does_blip_have_gps_route {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::does_blip_have_gps_route(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_does_blip_have_gps_route {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_activate_context(&self, contextHash_: u32) -> ResultOf_pause_menu_activate_context {
    unsafe {
        let mut contextHash_ = contextHash_;
        let success = sdk::natives::pause_menu_activate_context(
            contextHash_,
        );
        
        
        ResultOf_pause_menu_activate_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_replay_input(&self, type_: i32,
button_: Option<String>,
text_: Option<String>) -> ResultOf_end_text_command_thefeed_post_replay_input {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut button_ = sdk_helpers::create_c_string_ptr(button_);
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::end_text_command_thefeed_post_replay_input(
            &mut native_return,
type_,
button_.as_ref().unwrap(),
text_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_replay_input {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_get_hair_colour_index(&self, ) -> ResultOf_pause_menu_get_hair_colour_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_hair_colour_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_pause_menu_get_hair_colour_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_name(&self, gamerTagId_: i32,
string_: Option<String>) -> ResultOf_set_mp_gamer_tag_name {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::set_mp_gamer_tag_name(
            gamerTagId_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_mp_gamer_tag_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pause_menu_active(&self, toggle_: bool) -> ResultOf_set_pause_menu_active {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_pause_menu_active(
            toggle_,
        );
        
        
        ResultOf_set_pause_menu_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_colour(&self, blip_: i32) -> ResultOf_get_blip_colour {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_colour(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_get_blip_colour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_sprite(&self, blip_: i32,
spriteId_: i32) -> ResultOf_set_blip_sprite {
    unsafe {
        let mut blip_ = blip_;
let mut spriteId_ = spriteId_;
        let success = sdk::natives::set_blip_sprite(
            blip_,
spriteId_,
        );
        
        
        ResultOf_set_blip_sprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_minimap_fow_discovery_ratio(&self, ) -> ResultOf_get_minimap_fow_discovery_ratio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_minimap_fow_discovery_ratio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_minimap_fow_discovery_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_clear_print(&self, text_: Option<String>) -> ResultOf_begin_text_command_clear_print {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_clear_print(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_clear_print {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_warning_message_active(&self, ) -> ResultOf_is_warning_message_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_warning_message_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_warning_message_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_resume(&self, ) -> ResultOf_thefeed_resume {
    unsafe {
        
        let success = sdk::natives::thefeed_resume(
            
        );
        
        
        ResultOf_thefeed_resume {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_high_detail(&self, blip_: i32,
toggle_: bool) -> ResultOf_set_blip_high_detail {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_high_detail(
            blip_,
toggle_,
        );
        
        
        ResultOf_set_blip_high_detail {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_scripted_hud_component_this_frame(&self, id_: i32) -> ResultOf_hide_scripted_hud_component_this_frame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::hide_scripted_hud_component_this_frame(
            id_,
        );
        
        
        ResultOf_hide_scripted_hud_component_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_global_actionscript_flag(&self, flagIndex_: i32) -> ResultOf_get_global_actionscript_flag {
    unsafe {
        let mut native_return = Default::default();
let mut flagIndex_ = flagIndex_;
        let success = sdk::natives::get_global_actionscript_flag(
            &mut native_return,
flagIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_global_actionscript_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_blip_on_minimap(&self, blip_: i32) -> ResultOf_is_blip_on_minimap {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_on_minimap(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOf_is_blip_on_minimap {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_name_for_ugc_mission(&self, p0_: bool,
name_: Option<String>) -> ResultOf_set_mission_name_for_ugc_mission {
    unsafe {
        let mut p0_ = p0_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_mission_name_for_ugc_mission(
            p0_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_mission_name_for_ugc_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_valid_vehicle_hit_hash(&self, p0_: i32) -> ResultOf_add_valid_vehicle_hit_hash {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::add_valid_vehicle_hit_hash(
            p0_,
        );
        
        
        ResultOf_add_valid_vehicle_hit_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_gang_id(&self, ped_: u32,
gangId_: i32) -> ResultOf_set_ped_ai_blip_gang_id {
    unsafe {
        let mut ped_ = ped_;
let mut gangId_ = gangId_;
        let success = sdk::natives::set_ped_ai_blip_gang_id(
            ped_,
gangId_,
        );
        
        
        ResultOf_set_ped_ai_blip_gang_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_display_of_multiplayer_cash_text(&self, allow_: bool) -> ResultOf_allow_display_of_multiplayer_cash_text {
    unsafe {
        let mut allow_ = allow_;
        let success = sdk::natives::allow_display_of_multiplayer_cash_text(
            allow_,
        );
        
        
        ResultOf_allow_display_of_multiplayer_cash_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_custom_route(&self, ) -> ResultOf_clear_gps_custom_route {
    unsafe {
        
        let success = sdk::natives::clear_gps_custom_route(
            
        );
        
        
        ResultOf_clear_gps_custom_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_float(&self, value_: f32,
decimalPlaces_: i32) -> ResultOf_add_text_component_float {
    unsafe {
        let mut value_ = value_;
let mut decimalPlaces_ = decimalPlaces_;
        let success = sdk::natives::add_text_component_float(
            value_,
decimalPlaces_,
        );
        
        
        ResultOf_add_text_component_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_as_exterior_this_frame(&self, ) -> ResultOf_set_radar_as_exterior_this_frame {
    unsafe {
        
        let success = sdk::natives::set_radar_as_exterior_this_frame(
            
        );
        
        
        ResultOf_set_radar_as_exterior_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_named_rendertarget(&self, name_: Option<String>) -> ResultOf_release_named_rendertarget {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::release_named_rendertarget(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_release_named_rendertarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_name_from_text_file(&self, blip_: i32,
gxtEntry_: Option<String>) -> ResultOf_set_blip_name_from_text_file {
    unsafe {
        let mut blip_ = blip_;
let mut gxtEntry_ = sdk_helpers::create_c_string_ptr(gxtEntry_);
        let success = sdk::natives::set_blip_name_from_text_file(
            blip_,
gxtEntry_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_blip_name_from_text_file {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_force_weapon_wheel(&self, show_: bool) -> ResultOf_hud_force_weapon_wheel {
    unsafe {
        let mut show_ = show_;
        let success = sdk::natives::hud_force_weapon_wheel(
            show_,
        );
        
        
        ResultOf_hud_force_weapon_wheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_updating_mp_gamer_tag_name_and_crew_details(&self, gamerTagId_: i32) -> ResultOf_is_updating_mp_gamer_tag_name_and_crew_details {
    unsafe {
        let mut native_return = Default::default();
let mut gamerTagId_ = gamerTagId_;
        let success = sdk::natives::is_updating_mp_gamer_tag_name_and_crew_details(
            &mut native_return,
gamerTagId_,
        );
        let native_return = native_return;
        
        ResultOf_is_updating_mp_gamer_tag_name_and_crew_details {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_valid_vehicle_hit_hashes(&self, ) -> ResultOf_clear_valid_vehicle_hit_hashes {
    unsafe {
        
        let success = sdk::natives::clear_valid_vehicle_hit_hashes(
            
        );
        
        
        ResultOf_clear_valid_vehicle_hit_hashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_take_control_of_frontend(&self, ) -> ResultOf_take_control_of_frontend {
    unsafe {
        
        let success = sdk::natives::take_control_of_frontend(
            
        );
        
        
        ResultOf_take_control_of_frontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pause_menu_ped_sleep_state(&self, state_: bool) -> ResultOf_set_pause_menu_ped_sleep_state {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_pause_menu_ped_sleep_state(
            state_,
        );
        
        
        ResultOf_set_pause_menu_ped_sleep_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_close_reportugc_menu(&self, ) -> ResultOf_force_close_reportugc_menu {
    unsafe {
        
        let success = sdk::natives::force_close_reportugc_menu(
            
        );
        
        
        ResultOf_force_close_reportugc_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_mp_gamer_tags_visibility(&self, gamerTagId_: i32,
toggle_: bool) -> ResultOf_set_all_mp_gamer_tags_visibility {
    unsafe {
        let mut gamerTagId_ = gamerTagId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_mp_gamer_tags_visibility(
            gamerTagId_,
toggle_,
        );
        
        
        ResultOf_set_all_mp_gamer_tags_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_frontend_menu(&self, menuhash_: u32,
togglePause_: bool,
component_: i32) -> ResultOf_activate_frontend_menu {
    unsafe {
        let mut menuhash_ = menuhash_;
let mut togglePause_ = togglePause_;
let mut component_ = component_;
        let success = sdk::natives::activate_frontend_menu(
            menuhash_,
togglePause_,
component_,
        );
        
        
        ResultOf_activate_frontend_menu {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_int_stat(&self, p0_: i32,
p1_: i32) -> ResultOf_get_menu_ped_int_stat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::get_menu_ped_int_stat(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_get_menu_ped_int_stat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_end_text_command_thefeed_post_mpticker(&self, blink_: bool,
p1_: bool) -> ResultOf_end_text_command_thefeed_post_mpticker {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_mpticker(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_end_text_command_thefeed_post_mpticker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_literal_string(&self, string_: Option<String>) -> ResultOf_get_length_of_literal_string {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_length_of_literal_string(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_length_of_literal_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_set_warn_on_tab_change(&self, p0_: bool) -> ResultOf_pause_menu_set_warn_on_tab_change {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_menu_set_warn_on_tab_change(
            p0_,
        );
        
        
        ResultOf_pause_menu_set_warn_on_tab_change {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_online_policies_up_to_date(&self, ) -> ResultOf_are_online_policies_up_to_date {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_online_policies_up_to_date(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_online_policies_up_to_date {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_start_mission_instructional_button(&self, toggle_: bool) -> ResultOf_show_start_mission_instructional_button {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::show_start_mission_instructional_button(
            toggle_,
        );
        
        
        ResultOf_show_start_mission_instructional_button {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_menu_trigger_event_occurred(&self, ) -> ResultOf_has_menu_trigger_event_occurred {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_menu_trigger_event_occurred(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_menu_trigger_event_occurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flash_minimap_display(&self, ) -> ResultOf_flash_minimap_display {
    unsafe {
        
        let success = sdk::natives::flash_minimap_display(
            
        );
        
        
        ResultOf_flash_minimap_display {
            success,
            ret: (),
            
        }
    }
}

    fn native_replace_hud_colour_with_rgba(&self, hudColorIndex_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOf_replace_hud_colour_with_rgba {
    unsafe {
        let mut hudColorIndex_ = hudColorIndex_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::replace_hud_colour_with_rgba(
            hudColorIndex_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOf_replace_hud_colour_with_rgba {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_mp_text_chat_color(&self, p0_: i32,
hudColor_: i32) -> ResultOf_override_mp_text_chat_color {
    unsafe {
        let mut p0_ = p0_;
let mut hudColor_ = hudColor_;
        let success = sdk::natives::override_mp_text_chat_color(
            p0_,
hudColor_,
        );
        
        
        ResultOf_override_mp_text_chat_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_link_named_rendertarget(&self, modelHash_: u32) -> ResultOf_link_named_rendertarget {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::link_named_rendertarget(
            modelHash_,
        );
        
        
        ResultOf_link_named_rendertarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_setup_fake_cone_data(&self, blip_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOf_setup_fake_cone_data {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::setup_fake_cone_data(
            blip_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOf_setup_fake_cone_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_rotation(&self, blip_: i32,
rotation_: i32) -> ResultOf_set_blip_rotation {
    unsafe {
        let mut blip_ = blip_;
let mut rotation_ = rotation_;
        let success = sdk::natives::set_blip_rotation(
            blip_,
rotation_,
        );
        
        
        ResultOf_set_blip_rotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_hide_fow(&self, toggle_: bool) -> ResultOf_set_minimap_hide_fow {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_hide_fow(
            toggle_,
        );
        
        
        ResultOf_set_minimap_hide_fow {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_set_blip_name(&self, textLabel_: Option<String>) -> ResultOf_begin_text_command_set_blip_name {
    unsafe {
        let mut textLabel_ = sdk_helpers::create_c_string_ptr(textLabel_);
        let success = sdk::natives::begin_text_command_set_blip_name(
            textLabel_.as_ref().unwrap(),
        );
        
        
        ResultOf_begin_text_command_set_blip_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom_to_blip(&self, blip_: i32,
zoom_: f32) -> ResultOf_set_radar_zoom_to_blip {
    unsafe {
        let mut blip_ = blip_;
let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_to_blip(
            blip_,
zoom_,
        );
        
        
        ResultOf_set_radar_zoom_to_blip {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_screen_position_from_world_position(&self, worldX_: f32,
worldY_: f32,
worldZ_: f32,
screenX_: f32,
screenY_: f32) -> ResultOf_get_hud_screen_position_from_world_position {
    unsafe {
        let mut native_return = Default::default();
let mut worldX_ = worldX_;
let mut worldY_ = worldY_;
let mut worldZ_ = worldZ_;
let mut screenX_ = Default::default();
let mut screenY_ = Default::default();
        let success = sdk::natives::get_hud_screen_position_from_world_position(
            &mut native_return,
&mut screenX_,
&mut screenY_,
worldX_,
worldY_,
worldZ_,
        );
        let native_return = native_return;
let screenX_ = screenX_;
let screenY_ = screenY_;
        
        ResultOf_get_hud_screen_position_from_world_position {
            success,
            ret: native_return,
            screenX_,
screenY_
        }
    }
}

    fn native_get_blip_info_id_coord(&self, blip_: i32) -> ResultOf_get_blip_info_id_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_coord(
            native_return.pin_mut(),
blip_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_blip_info_id_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_clear_print(&self, ) -> ResultOf_end_text_command_clear_print {
    unsafe {
        
        let success = sdk::natives::end_text_command_clear_print(
            
        );
        
        
        ResultOf_end_text_command_clear_print {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_sprite(&self, ped_: u32,
spriteId_: i32) -> ResultOf_set_ped_ai_blip_sprite {
    unsafe {
        let mut ped_ = ped_;
let mut spriteId_ = spriteId_;
        let success = sdk::natives::set_ped_ai_blip_sprite(
            ped_,
spriteId_,
        );
        
        
        ResultOf_set_ped_ai_blip_sprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_multiplayer_hud_cash(&self, p0_: i32,
p1_: bool) -> ResultOf_set_multiplayer_hud_cash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_multiplayer_hud_cash(
            p0_,
p1_,
        );
        
        
        ResultOf_set_multiplayer_hud_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_pause(&self, ) -> ResultOf_thefeed_pause {
    unsafe {
        
        let success = sdk::natives::thefeed_pause(
            
        );
        
        
        ResultOf_thefeed_pause {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_reset_all_parameters(&self, ) -> ResultOf_thefeed_reset_all_parameters {
    unsafe {
        
        let success = sdk::natives::thefeed_reset_all_parameters(
            
        );
        
        
        ResultOf_thefeed_reset_all_parameters {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_freeze_next_post(&self, ) -> ResultOf_thefeed_freeze_next_post {
    unsafe {
        
        let success = sdk::natives::thefeed_freeze_next_post(
            
        );
        
        
        ResultOf_thefeed_freeze_next_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_new_waypoint(&self, x_: f32,
y_: f32) -> ResultOf_set_new_waypoint {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_new_waypoint(
            x_,
y_,
        );
        
        
        ResultOf_set_new_waypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_player_waypoint(&self, ) -> ResultOf_clear_gps_player_waypoint {
    unsafe {
        
        let success = sdk::natives::clear_gps_player_waypoint(
            
        );
        
        
        ResultOf_clear_gps_player_waypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_at_coords_with_type(&self, x_: f32,
y_: f32,
z_: f32,
interiorType_: Option<String>) -> ResultOf_get_interior_at_coords_with_type {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut interiorType_ = sdk_helpers::create_c_string_ptr(interiorType_);
        let success = sdk::natives::get_interior_at_coords_with_type(
            &mut native_return,
x_,
y_,
z_,
interiorType_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_interior_at_coords_with_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_entity(&self, entity_: u32) -> ResultOf_get_interior_from_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_interior_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_from_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_room_for_game_viewport(&self, ) -> ResultOf_clear_room_for_game_viewport {
    unsafe {
        
        let success = sdk::natives::clear_room_for_game_viewport(
            
        );
        
        
        ResultOf_clear_room_for_game_viewport {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_location_and_namehash(&self, interior_: i32,
position_: Option<shared::Vector3>,
nameHash_: u32) -> ResultOf_get_interior_location_and_namehash {
    unsafe {
        let mut interior_ = interior_;
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
let mut nameHash_ = Default::default();
        let success = sdk::natives::get_interior_location_and_namehash(
            position_.pin_mut(),
&mut nameHash_,
interior_,
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
let nameHash_ = nameHash_;
        
        ResultOf_get_interior_location_and_namehash {
            success,
            ret: (),
            position_,
nameHash_
        }
    }
}

    fn native_unpin_interior(&self, interior_: i32) -> ResultOf_unpin_interior {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::unpin_interior(
            interior_,
        );
        
        
        ResultOf_unpin_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_valid_interior(&self, interior_: i32) -> ResultOf_is_valid_interior {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_valid_interior(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_is_valid_interior {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pin_interior_in_memory(&self, interior_: i32) -> ResultOf_pin_interior_in_memory {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::pin_interior_in_memory(
            interior_,
        );
        
        
        ResultOf_pin_interior_in_memory {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_entity_set_active(&self, interior_: i32,
entitySetName_: Option<String>) -> ResultOf_is_interior_entity_set_active {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
let mut entitySetName_ = sdk_helpers::create_c_string_ptr(entitySetName_);
        let success = sdk::natives::is_interior_entity_set_active(
            &mut native_return,
interior_,
entitySetName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_interior_entity_set_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_activating_tracking_on_entity(&self, p0_: i32,
p1_: i32) -> ResultOf_force_activating_tracking_on_entity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_activating_tracking_on_entity(
            p0_,
p1_,
        );
        
        
        ResultOf_force_activating_tracking_on_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_key_for_entity_in_room(&self, entity_: u32) -> ResultOf_get_key_for_entity_in_room {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_key_for_entity_in_room(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_key_for_entity_in_room {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_pickup_to_interior_room_by_name(&self, pickup_: i32,
roomName_: Option<String>) -> ResultOf_add_pickup_to_interior_room_by_name {
    unsafe {
        let mut pickup_ = pickup_;
let mut roomName_ = sdk_helpers::create_c_string_ptr(roomName_);
        let success = sdk::natives::add_pickup_to_interior_room_by_name(
            pickup_,
roomName_.as_ref().unwrap(),
        );
        
        
        ResultOf_add_pickup_to_interior_room_by_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_room_for_game_viewport_by_key(&self, roomHashKey_: u32) -> ResultOf_set_room_for_game_viewport_by_key {
    unsafe {
        let mut roomHashKey_ = roomHashKey_;
        let success = sdk::natives::set_room_for_game_viewport_by_key(
            roomHashKey_,
        );
        
        
        ResultOf_set_room_for_game_viewport_by_key {
            success,
            ret: (),
            
        }
    }
}

    fn native_refresh_interior(&self, interior_: i32) -> ResultOf_refresh_interior {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::refresh_interior(
            interior_,
        );
        
        
        ResultOf_refresh_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_deactivate_interior_entity_set(&self, interior_: i32,
entitySetName_: Option<String>) -> ResultOf_deactivate_interior_entity_set {
    unsafe {
        let mut interior_ = interior_;
let mut entitySetName_ = sdk_helpers::create_c_string_ptr(entitySetName_);
        let success = sdk::natives::deactivate_interior_entity_set(
            interior_,
entitySetName_.as_ref().unwrap(),
        );
        
        
        ResultOf_deactivate_interior_entity_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_room_key_from_entity(&self, entity_: u32) -> ResultOf_get_room_key_from_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_room_key_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_get_room_key_from_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_interior_groups_using_camera(&self, ) -> ResultOf_activate_interior_groups_using_camera {
    unsafe {
        
        let success = sdk::natives::activate_interior_groups_using_camera(
            
        );
        
        
        ResultOf_activate_interior_groups_using_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_interior_in_use(&self, interior_: i32) -> ResultOf_set_interior_in_use {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::set_interior_in_use(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_set_interior_in_use {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_shadow_cull_model_this_frame(&self, mapObjectHash_: u32) -> ResultOf_enable_shadow_cull_model_this_frame {
    unsafe {
        let mut mapObjectHash_ = mapObjectHash_;
        let success = sdk::natives::enable_shadow_cull_model_this_frame(
            mapObjectHash_,
        );
        
        
        ResultOf_enable_shadow_cull_model_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_room_for_entity(&self, entity_: u32,
interior_: i32,
roomHashKey_: u32) -> ResultOf_force_room_for_entity {
    unsafe {
        let mut entity_ = entity_;
let mut interior_ = interior_;
let mut roomHashKey_ = roomHashKey_;
        let success = sdk::natives::force_room_for_entity(
            entity_,
interior_,
roomHashKey_,
        );
        
        
        ResultOf_force_room_for_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_interior_entity_set(&self, interior_: i32,
entitySetName_: Option<String>) -> ResultOf_activate_interior_entity_set {
    unsafe {
        let mut interior_ = interior_;
let mut entitySetName_ = sdk_helpers::create_c_string_ptr(entitySetName_);
        let success = sdk::natives::activate_interior_entity_set(
            interior_,
entitySetName_.as_ref().unwrap(),
        );
        
        
        ResultOf_activate_interior_entity_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_interior(&self, interior_: i32,
toggle_: bool) -> ResultOf_disable_interior {
    unsafe {
        let mut interior_ = interior_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_interior(
            interior_,
toggle_,
        );
        
        
        ResultOf_disable_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_ready(&self, interior_: i32) -> ResultOf_is_interior_ready {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_ready(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_is_interior_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_is_exterior_only(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_is_exterior_only {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_exterior_only(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_is_exterior_only {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stadium_probes_this_frame(&self, toggle_: bool) -> ResultOf_enable_stadium_probes_this_frame {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_stadium_probes_this_frame(
            toggle_,
        );
        
        
        ResultOf_enable_stadium_probes_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_retain_entity_in_interior(&self, entity_: u32,
interior_: i32) -> ResultOf_retain_entity_in_interior {
    unsafe {
        let mut entity_ = entity_;
let mut interior_ = interior_;
        let success = sdk::natives::retain_entity_in_interior(
            entity_,
interior_,
        );
        
        
        ResultOf_retain_entity_in_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_interior_state_of_entity(&self, entity_: u32) -> ResultOf_clear_interior_state_of_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_interior_state_of_entity(
            entity_,
        );
        
        
        ResultOf_clear_interior_state_of_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_room_for_game_viewport(&self, interiorID_: i32,
roomHashKey_: u32) -> ResultOf_force_room_for_game_viewport {
    unsafe {
        let mut interiorID_ = interiorID_;
let mut roomHashKey_ = roomHashKey_;
        let success = sdk::natives::force_room_for_game_viewport(
            interiorID_,
roomHashKey_,
        );
        
        
        ResultOf_force_room_for_game_viewport {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_capped(&self, interior_: i32) -> ResultOf_is_interior_capped {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_capped(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_is_interior_capped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_interior_in_world_coords(&self, interior_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_offset_from_interior_in_world_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut interior_ = interior_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_offset_from_interior_in_world_coords(
            native_return.pin_mut(),
interior_,
x_,
y_,
z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_offset_from_interior_in_world_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_metro_system(&self, toggle_: bool) -> ResultOf_disable_metro_system {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_metro_system(
            toggle_,
        );
        
        
        ResultOf_disable_metro_system {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_room_key_for_game_viewport(&self, ) -> ResultOf_get_room_key_for_game_viewport {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_room_key_for_game_viewport(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_room_key_for_game_viewport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_exterior_cull_model_this_frame(&self, mapObjectHash_: u32) -> ResultOf_enable_exterior_cull_model_this_frame {
    unsafe {
        let mut mapObjectHash_ = mapObjectHash_;
        let success = sdk::natives::enable_exterior_cull_model_this_frame(
            mapObjectHash_,
        );
        
        
        ResultOf_enable_exterior_cull_model_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_room_for_game_viewport_by_name(&self, roomName_: Option<String>) -> ResultOf_set_room_for_game_viewport_by_name {
    unsafe {
        let mut roomName_ = sdk_helpers::create_c_string_ptr(roomName_);
        let success = sdk::natives::set_room_for_game_viewport_by_name(
            roomName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_room_for_game_viewport_by_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_interior_at_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_interior_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_at_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_room_for_entity(&self, entity_: u32) -> ResultOf_clear_room_for_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_room_for_entity(
            entity_,
        );
        
        
        ResultOf_clear_room_for_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_disabled(&self, interior_: i32) -> ResultOf_is_interior_disabled {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_disabled(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_is_interior_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_interior_scene(&self, ) -> ResultOf_is_interior_scene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interior_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_interior_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_interior_entity_set_tint_index(&self, interior_: i32,
entitySetName_: Option<String>,
color_: i32) -> ResultOf_set_interior_entity_set_tint_index {
    unsafe {
        let mut interior_ = interior_;
let mut entitySetName_ = sdk_helpers::create_c_string_ptr(entitySetName_);
let mut color_ = color_;
        let success = sdk::natives::set_interior_entity_set_tint_index(
            interior_,
entitySetName_.as_ref().unwrap(),
color_,
        );
        
        
        ResultOf_set_interior_entity_set_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_cap_interior(&self, interior_: i32,
toggle_: bool) -> ResultOf_cap_interior {
    unsafe {
        let mut interior_ = interior_;
let mut toggle_ = toggle_;
        let success = sdk::natives::cap_interior(
            interior_,
toggle_,
        );
        
        
        ResultOf_cap_interior {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_group_id(&self, interior_: i32) -> ResultOf_get_interior_group_id {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::get_interior_group_id(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_group_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_primary_view(&self, ) -> ResultOf_get_interior_from_primary_view {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_interior_from_primary_view(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_from_primary_view {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_collision(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_interior_from_collision {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_interior_from_collision(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_from_collision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_collision_marked_outside(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_is_collision_marked_outside {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::is_collision_marked_outside(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_is_collision_marked_outside {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_at_coords_with_typehash(&self, x_: f32,
y_: f32,
z_: f32,
typeHash_: u32) -> ResultOf_get_interior_at_coords_with_typehash {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut typeHash_ = typeHash_;
        let success = sdk::natives::get_interior_at_coords_with_typehash(
            &mut native_return,
x_,
y_,
z_,
typeHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_at_coords_with_typehash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_heading(&self, interior_: i32) -> ResultOf_get_interior_heading {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::get_interior_heading(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOf_get_interior_heading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_from_itemset(&self, item_: u32,
itemset_: u32) -> ResultOf_remove_from_itemset {
    unsafe {
        let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::remove_from_itemset(
            item_,
itemset_,
        );
        
        
        ResultOf_remove_from_itemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_in_itemset(&self, item_: u32,
itemset_: u32) -> ResultOf_is_in_itemset {
    unsafe {
        let mut native_return = Default::default();
let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::is_in_itemset(
            &mut native_return,
item_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOf_is_in_itemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_itemset(&self, p0_: bool) -> ResultOf_create_itemset {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::create_itemset(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_create_itemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clean_itemset(&self, itemset_: u32) -> ResultOf_clean_itemset {
    unsafe {
        let mut itemset_ = itemset_;
        let success = sdk::natives::clean_itemset(
            itemset_,
        );
        
        
        ResultOf_clean_itemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_indexed_item_in_itemset(&self, index_: i32,
itemset_: u32) -> ResultOf_get_indexed_item_in_itemset {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut itemset_ = itemset_;
        let success = sdk::natives::get_indexed_item_in_itemset(
            &mut native_return,
index_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOf_get_indexed_item_in_itemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_itemset_valid(&self, itemset_: u32) -> ResultOf_is_itemset_valid {
    unsafe {
        let mut native_return = Default::default();
let mut itemset_ = itemset_;
        let success = sdk::natives::is_itemset_valid(
            &mut native_return,
itemset_,
        );
        let native_return = native_return;
        
        ResultOf_is_itemset_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_itemset_size(&self, itemset_: u32) -> ResultOf_get_itemset_size {
    unsafe {
        let mut native_return = Default::default();
let mut itemset_ = itemset_;
        let success = sdk::natives::get_itemset_size(
            &mut native_return,
itemset_,
        );
        let native_return = native_return;
        
        ResultOf_get_itemset_size {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_destroy_itemset(&self, itemset_: u32) -> ResultOf_destroy_itemset {
    unsafe {
        let mut itemset_ = itemset_;
        let success = sdk::natives::destroy_itemset(
            itemset_,
        );
        
        
        ResultOf_destroy_itemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_to_itemset(&self, item_: u32,
itemset_: u32) -> ResultOf_add_to_itemset {
    unsafe {
        let mut native_return = Default::default();
let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::add_to_itemset(
            &mut native_return,
item_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOf_add_to_itemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_auto_multiplayer_event(&self, ) -> ResultOf_lobby_auto_multiplayer_event {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_event(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_lobby_auto_multiplayer_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_set_auto_multiplayer(&self, toggle_: bool) -> ResultOf_lobby_set_auto_multiplayer {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_multiplayer(
            toggle_,
        );
        
        
        ResultOf_lobby_set_auto_multiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_auto_multiplayer_random_job(&self, ) -> ResultOf_lobby_auto_multiplayer_random_job {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_random_job(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_lobby_auto_multiplayer_random_job {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_set_auto_mp_random_job(&self, toggle_: bool) -> ResultOf_lobby_set_auto_mp_random_job {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_mp_random_job(
            toggle_,
        );
        
        
        ResultOf_lobby_set_auto_mp_random_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_auto_multiplayer_freemode(&self, ) -> ResultOf_lobby_auto_multiplayer_freemode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_freemode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_lobby_auto_multiplayer_freemode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_auto_multiplayer_menu(&self, ) -> ResultOf_lobby_auto_multiplayer_menu {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_menu(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_lobby_auto_multiplayer_menu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_session_clears_auto_multiplayer(&self, toggle_: bool) -> ResultOf_shutdown_session_clears_auto_multiplayer {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::shutdown_session_clears_auto_multiplayer(
            toggle_,
        );
        
        
        ResultOf_shutdown_session_clears_auto_multiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_set_auto_multiplayer_event(&self, toggle_: bool) -> ResultOf_lobby_set_auto_multiplayer_event {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_multiplayer_event(
            toggle_,
        );
        
        
        ResultOf_lobby_set_auto_multiplayer_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_language(&self, ) -> ResultOf_get_current_language {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_language(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_current_language {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_localization_get_system_language(&self, ) -> ResultOf_localization_get_system_language {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::localization_get_system_language(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_localization_get_system_language {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_localization_get_system_date_type(&self, ) -> ResultOf_localization_get_system_date_type {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::localization_get_system_date_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_localization_get_system_date_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_onscreen_keyboard(&self, p0_: i32,
windowTitle_: Option<String>,
p2_: Option<String>,
defaultText_: Option<String>,
defaultConcat1_: Option<String>,
defaultConcat2_: Option<String>,
defaultConcat3_: Option<String>,
maxInputLength_: i32) -> ResultOf_display_onscreen_keyboard {
    unsafe {
        let mut p0_ = p0_;
let mut windowTitle_ = sdk_helpers::create_c_string_ptr(windowTitle_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut defaultText_ = sdk_helpers::create_c_string_ptr(defaultText_);
let mut defaultConcat1_ = sdk_helpers::create_c_string_ptr(defaultConcat1_);
let mut defaultConcat2_ = sdk_helpers::create_c_string_ptr(defaultConcat2_);
let mut defaultConcat3_ = sdk_helpers::create_c_string_ptr(defaultConcat3_);
let mut maxInputLength_ = maxInputLength_;
        let success = sdk::natives::display_onscreen_keyboard(
            p0_,
windowTitle_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
defaultText_.as_ref().unwrap(),
defaultConcat1_.as_ref().unwrap(),
defaultConcat2_.as_ref().unwrap(),
defaultConcat3_.as_ref().unwrap(),
maxInputLength_,
        );
        
        
        ResultOf_display_onscreen_keyboard {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area_of_vehicles(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: i32) -> ResultOf_clear_area_of_vehicles {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::clear_area_of_vehicles(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_clear_area_of_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cloud_settings_override(&self, p0_: Option<String>) -> ResultOf_set_cloud_settings_override {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::set_cloud_settings_override(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_cloud_settings_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_model_dimensions(&self, modelHash_: u32,
minimum_: Option<shared::Vector3>,
maximum_: Option<shared::Vector3>) -> ResultOf_get_model_dimensions {
    unsafe {
        let mut modelHash_ = modelHash_;
let mut minimum_ = sdk_helpers::create_vector3_ptr(minimum_);
let mut maximum_ = sdk_helpers::create_vector3_ptr(maximum_);
        let success = sdk::natives::get_model_dimensions(
            minimum_.pin_mut(),
maximum_.pin_mut(),
modelHash_,
        );
        let minimum_ = sdk_helpers::read_cpp_vector3(minimum_);
let maximum_ = sdk_helpers::read_cpp_vector3(maximum_);
        
        ResultOf_get_model_dimensions {
            success,
            ret: (),
            minimum_,
maximum_
        }
    }
}

    fn native_stop_save_array(&self, ) -> ResultOf_stop_save_array {
    unsafe {
        
        let success = sdk::natives::stop_save_array(
            
        );
        
        
        ResultOf_stop_save_array {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area_of_cops(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOf_clear_area_of_cops {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_cops(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOf_clear_area_of_cops {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_incident_with_entity(&self, dispatchService_: i32,
ped_: u32,
numUnits_: i32,
radius_: f32,
outIncidentID_: i32,
p5_: i32,
p6_: i32) -> ResultOf_create_incident_with_entity {
    unsafe {
        let mut native_return = Default::default();
let mut dispatchService_ = dispatchService_;
let mut ped_ = ped_;
let mut numUnits_ = numUnits_;
let mut radius_ = radius_;
let mut outIncidentID_ = Default::default();
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::create_incident_with_entity(
            &mut native_return,
&mut outIncidentID_,
dispatchService_,
ped_,
numUnits_,
radius_,
p5_,
p6_,
        );
        let native_return = native_return;
let outIncidentID_ = outIncidentID_;
        
        ResultOf_create_incident_with_entity {
            success,
            ret: native_return,
            outIncidentID_
        }
    }
}

    fn native_clear_code_requested_autosave(&self, ) -> ResultOf_clear_code_requested_autosave {
    unsafe {
        
        let success = sdk::natives::clear_code_requested_autosave(
            
        );
        
        
        ResultOf_clear_code_requested_autosave {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cheat_with_hash_been_activated(&self, hash_: u32,
amount_: i32) -> ResultOf_has_cheat_with_hash_been_activated {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
let mut amount_ = amount_;
        let success = sdk::natives::has_cheat_with_hash_been_activated(
            &mut native_return,
hash_,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_has_cheat_with_hash_been_activated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_credits_reached_end(&self, ) -> ResultOf_have_credits_reached_end {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::have_credits_reached_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_have_credits_reached_end {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_projectiles(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOf_clear_area_of_projectiles {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_projectiles(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOf_clear_area_of_projectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_steam_version(&self, ) -> ResultOf_is_steam_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_steam_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_steam_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_init(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_script_race_init {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::script_race_init(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_script_race_init {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_strings_equal(&self, string1_: Option<String>,
string2_: Option<String>) -> ResultOf_are_strings_equal {
    unsafe {
        let mut native_return = Default::default();
let mut string1_ = sdk_helpers::create_c_string_ptr(string1_);
let mut string2_ = sdk_helpers::create_c_string_ptr(string2_);
        let success = sdk::natives::are_strings_equal(
            &mut native_return,
string1_.as_ref().unwrap(),
string2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_are_strings_equal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_onscreen_keyboard(&self, ) -> ResultOf_update_onscreen_keyboard {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::update_onscreen_keyboard(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_update_onscreen_keyboard {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_weather_type_now_persist_network(&self, milliseconds_: i32) -> ResultOf_clear_weather_type_now_persist_network {
    unsafe {
        let mut milliseconds_ = milliseconds_;
        let success = sdk::natives::clear_weather_type_now_persist_network(
            milliseconds_,
        );
        
        
        ResultOf_clear_weather_type_now_persist_network {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_enum_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_enum_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_enum_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_enum_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_override_save_house(&self, p0_: bool,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool,
p6_: f32,
p7_: f32) -> ResultOf_override_save_house {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::override_save_house(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_override_save_house {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_weatherex(&self, weatherType_: Option<String>,
p1_: bool) -> ResultOf_set_override_weatherex {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
let mut p1_ = p1_;
        let success = sdk::natives::set_override_weatherex(
            weatherType_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_set_override_weatherex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fire_ammo_this_frame(&self, player_: u32) -> ResultOf_set_fire_ammo_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_fire_ammo_this_frame(
            player_,
        );
        
        
        ResultOf_set_fire_ammo_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_cloud_hat(&self, name_: Option<String>) -> ResultOf_preload_cloud_hat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::preload_cloud_hat(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_preload_cloud_hat {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_angled_area_of_vehicles(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: bool,
p11_: bool,
p12_: i32,
p13_: i32) -> ResultOf_clear_angled_area_of_vehicles {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::clear_angled_area_of_vehicles(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        
        
        ResultOf_clear_angled_area_of_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pop_multiplier_area_networked(&self, id_: i32) -> ResultOf_is_pop_multiplier_area_networked {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pop_multiplier_area_networked(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_pop_multiplier_area_networked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pop_multiplier_area_exist(&self, id_: i32) -> ResultOf_does_pop_multiplier_area_exist {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::does_pop_multiplier_area_exist(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_does_pop_multiplier_area_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_xbox_platform(&self, ) -> ResultOf_is_xbox_platform {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_xbox_platform(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_xbox_platform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fake_wanted_level(&self, fakeWantedLevel_: i32) -> ResultOf_set_fake_wanted_level {
    unsafe {
        let mut fakeWantedLevel_ = fakeWantedLevel_;
        let success = sdk::natives::set_fake_wanted_level(
            fakeWantedLevel_,
        );
        
        
        ResultOf_set_fake_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_async_install_finished(&self, ) -> ResultOf_has_async_install_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_async_install_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_async_install_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_frame_time(&self, ) -> ResultOf_get_frame_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_frame_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_frame_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pop_multiplier_sphere_exist(&self, id_: i32) -> ResultOf_does_pop_multiplier_sphere_exist {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::does_pop_multiplier_sphere_exist(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_does_pop_multiplier_sphere_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_complete(&self, ped_: u32) -> ResultOf_get_tennis_swing_anim_complete {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_complete(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_tennis_swing_anim_complete {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_angle_between_2d_vectors(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_get_angle_between_2d_vectors {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_angle_between_2d_vectors(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_get_angle_between_2d_vectors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_can_be_interrupted(&self, ped_: u32) -> ResultOf_get_tennis_swing_anim_can_be_interrupted {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_can_be_interrupted(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_tennis_swing_anim_can_be_interrupted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_minigame_in_progress(&self, toggle_: bool) -> ResultOf_set_minigame_in_progress {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minigame_in_progress(
            toggle_,
        );
        
        
        ResultOf_set_minigame_in_progress {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
ownedByPlayer_: bool) -> ResultOf_is_bullet_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_bullet_in_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_bullet_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_stunt_jump(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
x4_: f32,
y4_: f32,
z4_: f32,
camX_: f32,
camY_: f32,
camZ_: f32,
p15_: i32,
p16_: i32,
p17_: i32) -> ResultOf_add_stunt_jump {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut x4_ = x4_;
let mut y4_ = y4_;
let mut z4_ = z4_;
let mut camX_ = camX_;
let mut camY_ = camY_;
let mut camZ_ = camZ_;
let mut p15_ = p15_;
let mut p16_ = p16_;
let mut p17_ = p17_;
        let success = sdk::natives::add_stunt_jump(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
x4_,
y4_,
z4_,
camX_,
camY_,
camZ_,
p15_,
p16_,
p17_,
        );
        let native_return = native_return;
        
        ResultOf_add_stunt_jump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_replay_stats(&self, ) -> ResultOf_clear_replay_stats {
    unsafe {
        
        let success = sdk::natives::clear_replay_stats(
            
        );
        
        
        ResultOf_clear_replay_stats {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_benchmark_pass(&self, ) -> ResultOf_get_benchmark_pass {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_benchmark_pass(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_benchmark_pass {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_player_hit_checkpoint(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_script_race_player_hit_checkpoint {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::script_race_player_hit_checkpoint(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_script_race_player_hit_checkpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_acos(&self, p0_: f32) -> ResultOf_acos {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::acos(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_acos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_time_scale(&self, timeScale_: f32) -> ResultOf_set_time_scale {
    unsafe {
        let mut timeScale_ = timeScale_;
        let success = sdk::natives::set_time_scale(
            timeScale_,
        );
        
        
        ResultOf_set_time_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fade_out_after_arrest(&self, toggle_: bool) -> ResultOf_set_fade_out_after_arrest {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_out_after_arrest(
            toggle_,
        );
        
        
        ResultOf_set_fade_out_after_arrest {
            success,
            ret: (),
            
        }
    }
}

    fn native_compare_strings(&self, str1_: Option<String>,
str2_: Option<String>,
matchCase_: bool,
maxLength_: i32) -> ResultOf_compare_strings {
    unsafe {
        let mut native_return = Default::default();
let mut str1_ = sdk_helpers::create_c_string_ptr(str1_);
let mut str2_ = sdk_helpers::create_c_string_ptr(str2_);
let mut matchCase_ = matchCase_;
let mut maxLength_ = maxLength_;
        let success = sdk::natives::compare_strings(
            &mut native_return,
str1_.as_ref().unwrap(),
str2_.as_ref().unwrap(),
matchCase_,
maxLength_,
        );
        let native_return = native_return;
        
        ResultOf_compare_strings {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_supress_random_event_this_frame(&self, eventType_: i32,
suppress_: bool) -> ResultOf_supress_random_event_this_frame {
    unsafe {
        let mut eventType_ = eventType_;
let mut suppress_ = suppress_;
        let success = sdk::natives::supress_random_event_this_frame(
            eventType_,
suppress_,
        );
        
        
        ResultOf_supress_random_event_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wind_direction(&self, ) -> ResultOf_get_wind_direction {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_wind_direction(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_wind_direction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_hospital_restart(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32) -> ResultOf_add_hospital_restart {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::add_hospital_restart(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_add_hospital_restart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_shutdown(&self, ) -> ResultOf_script_race_shutdown {
    unsafe {
        
        let success = sdk::natives::script_race_shutdown(
            
        );
        
        
        ResultOf_script_race_shutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clouds_alpha(&self, ) -> ResultOf_get_clouds_alpha {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clouds_alpha(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_clouds_alpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_code_requested_autosave(&self, ) -> ResultOf_has_code_requested_autosave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_code_requested_autosave(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_code_requested_autosave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_copy_script_struct(&self, dst_: i32,
src_: i32,
size_: i32) -> ResultOf_copy_script_struct {
    unsafe {
        let mut dst_ = Default::default();
let mut src_ = Default::default();
let mut size_ = size_;
        let success = sdk::natives::copy_script_struct(
            &mut dst_,
&mut src_,
size_,
        );
        let dst_ = dst_;
let src_ = src_;
        
        ResultOf_copy_script_struct {
            success,
            ret: (),
            dst_,
src_
        }
    }
}

    fn native_get_closest_point_on_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
clamp_: bool) -> ResultOf_get_closest_point_on_line {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut clamp_ = clamp_;
        let success = sdk::natives::get_closest_point_on_line(
            native_return.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
clamp_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_closest_point_on_line {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ignore_next_restart(&self, toggle_: bool) -> ResultOf_ignore_next_restart {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::ignore_next_restart(
            toggle_,
        );
        
        
        ResultOf_ignore_next_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stunt_jump_message_showing(&self, ) -> ResultOf_is_stunt_jump_message_showing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stunt_jump_message_showing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_stunt_jump_message_showing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_screen_dimming_this_frame(&self, ) -> ResultOf_disable_screen_dimming_this_frame {
    unsafe {
        
        let success = sdk::natives::disable_screen_dimming_this_frame(
            
        );
        
        
        ResultOf_disable_screen_dimming_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_police_restart(&self, policeIndex_: i32,
toggle_: bool) -> ResultOf_disable_police_restart {
    unsafe {
        let mut policeIndex_ = policeIndex_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_police_restart(
            policeIndex_,
toggle_,
        );
        
        
        ResultOf_disable_police_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_content_to_load(&self, ) -> ResultOf_get_content_to_load {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_content_to_load(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_content_to_load {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_riot_mode_enabled(&self, toggle_: bool) -> ResultOf_set_riot_mode_enabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_riot_mode_enabled(
            toggle_,
        );
        
        
        ResultOf_set_riot_mode_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_dispatch_spawn_blocking_area(&self, p0_: i32) -> ResultOf_remove_dispatch_spawn_blocking_area {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_dispatch_spawn_blocking_area(
            p0_,
        );
        
        
        ResultOf_remove_dispatch_spawn_blocking_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_tennis_mode(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_enable_tennis_mode {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::enable_tennis_mode(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOf_enable_tennis_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_now(&self, weatherType_: Option<String>) -> ResultOf_set_weather_type_now {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::set_weather_type_now(
            weatherType_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_weather_type_now {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_minigame_in_progress(&self, ) -> ResultOf_is_minigame_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_minigame_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_minigame_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_mission_repeat_save(&self, ) -> ResultOf_get_status_of_mission_repeat_save {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_mission_repeat_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_mission_repeat_save {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_mission_type(&self, ) -> ResultOf_get_replay_stat_mission_type {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_mission_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_replay_stat_mission_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_death_arrest_restart(&self, toggle_: bool) -> ResultOf_pause_death_arrest_restart {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::pause_death_arrest_restart(
            toggle_,
        );
        
        
        ResultOf_pause_death_arrest_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_dispatch_spawn_sphere_blocking_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_add_dispatch_spawn_sphere_blocking_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::add_dispatch_spawn_sphere_blocking_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_add_dispatch_spawn_sphere_blocking_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_projectile_type_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
type_: i32,
ownedByPlayer_: bool) -> ResultOf_is_projectile_type_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut type_ = type_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_projectile_type_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
type_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_projectile_type_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_next_weather_type(&self, weatherType_: Option<String>) -> ResultOf_is_next_weather_type {
    unsafe {
        let mut native_return = Default::default();
let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::is_next_weather_type(
            &mut native_return,
weatherType_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_next_weather_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heading_from_vector_2d(&self, dx_: f32,
dy_: f32) -> ResultOf_get_heading_from_vector_2d {
    unsafe {
        let mut native_return = Default::default();
let mut dx_ = dx_;
let mut dy_ = dy_;
        let success = sdk::natives::get_heading_from_vector_2d(
            &mut native_return,
dx_,
dy_,
        );
        let native_return = native_return;
        
        ResultOf_get_heading_from_vector_2d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_add_substring_to_caption(&self, p0_: Option<String>) -> ResultOf_activity_feed_add_substring_to_caption {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_add_substring_to_caption(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_add_substring_to_caption {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_float_in_range(&self, startRange_: f32,
endRange_: f32) -> ResultOf_get_random_float_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut startRange_ = startRange_;
let mut endRange_ = endRange_;
        let success = sdk::natives::get_random_float_in_range(
            &mut native_return,
startRange_,
endRange_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_float_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_oceannoiseminamplitude(&self, minAmplitude_: f32) -> ResultOf_water_override_set_oceannoiseminamplitude {
    unsafe {
        let mut minAmplitude_ = minAmplitude_;
        let success = sdk::natives::water_override_set_oceannoiseminamplitude(
            minAmplitude_,
        );
        
        
        ResultOf_water_override_set_oceannoiseminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_pop_multiplier_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
pedMultiplier_: f32,
vehicleMultiplier_: f32,
p6_: bool,
p7_: bool) -> ResultOf_add_pop_multiplier_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut pedMultiplier_ = pedMultiplier_;
let mut vehicleMultiplier_ = vehicleMultiplier_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::add_pop_multiplier_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
pedMultiplier_,
vehicleMultiplier_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_add_pop_multiplier_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_override_weather(&self, ) -> ResultOf_clear_override_weather {
    unsafe {
        
        let success = sdk::natives::clear_override_weather(
            
        );
        
        
        ResultOf_clear_override_weather {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_type_within_distance(&self, x_: f32,
y_: f32,
z_: f32,
projectileHash_: u32,
radius_: f32,
ownedByPlayer_: bool) -> ResultOf_is_projectile_type_within_distance {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut projectileHash_ = projectileHash_;
let mut radius_ = radius_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_projectile_type_within_distance(
            &mut native_return,
x_,
y_,
z_,
projectileHash_,
radius_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_projectile_type_within_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_int_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_int_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_int_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_int_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_save_end_user_benchmark(&self, ) -> ResultOf_save_end_user_benchmark {
    unsafe {
        
        let success = sdk::natives::save_end_user_benchmark(
            
        );
        
        
        ResultOf_save_end_user_benchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_area_occupied_slow(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32) -> ResultOf_is_area_occupied_slow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::is_area_occupied_slow(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        let native_return = native_return;
        
        ResultOf_is_area_occupied_slow {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_manual_save(&self, ) -> ResultOf_get_status_of_manual_save {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_manual_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_manual_save {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_landing_screen_started_end_user_benchmark(&self, ) -> ResultOf_landing_screen_started_end_user_benchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::landing_screen_started_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_landing_screen_started_end_user_benchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_coords_of_projectile_type_in_angled_area(&self, vecAngledAreaPoint1X_: f32,
vecAngledAreaPoint1Y_: f32,
vecAngledAreaPoint1Z_: f32,
vecAngledAreaPoint2X_: f32,
vecAngledAreaPoint2Y_: f32,
vecAngledAreaPoint2Z_: f32,
distanceOfOppositeFace_: f32,
weaponType_: u32,
positionOut_: Option<shared::Vector3>,
bIsPlayer_: bool) -> ResultOf_get_coords_of_projectile_type_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut vecAngledAreaPoint1X_ = vecAngledAreaPoint1X_;
let mut vecAngledAreaPoint1Y_ = vecAngledAreaPoint1Y_;
let mut vecAngledAreaPoint1Z_ = vecAngledAreaPoint1Z_;
let mut vecAngledAreaPoint2X_ = vecAngledAreaPoint2X_;
let mut vecAngledAreaPoint2Y_ = vecAngledAreaPoint2Y_;
let mut vecAngledAreaPoint2Z_ = vecAngledAreaPoint2Z_;
let mut distanceOfOppositeFace_ = distanceOfOppositeFace_;
let mut weaponType_ = weaponType_;
let mut positionOut_ = sdk_helpers::create_vector3_ptr(positionOut_);
let mut bIsPlayer_ = bIsPlayer_;
        let success = sdk::natives::get_coords_of_projectile_type_in_angled_area(
            &mut native_return,
positionOut_.pin_mut(),
vecAngledAreaPoint1X_,
vecAngledAreaPoint1Y_,
vecAngledAreaPoint1Z_,
vecAngledAreaPoint2X_,
vecAngledAreaPoint2Y_,
vecAngledAreaPoint2Z_,
distanceOfOppositeFace_,
weaponType_,
bIsPlayer_,
        );
        let native_return = native_return;
let positionOut_ = sdk_helpers::read_cpp_vector3(positionOut_);
        
        ResultOf_get_coords_of_projectile_type_in_angled_area {
            success,
            ret: native_return,
            positionOut_
        }
    }
}

    fn native_next_onscreen_keyboard_result_will_display_using_these_fonts(&self, p0_: i32) -> ResultOf_next_onscreen_keyboard_result_will_display_using_these_fonts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::next_onscreen_keyboard_result_will_display_using_these_fonts(
            p0_,
        );
        
        
        ResultOf_next_onscreen_keyboard_result_will_display_using_these_fonts {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
ownedByPlayer_: bool) -> ResultOf_is_bullet_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_bullet_in_area(
            &mut native_return,
x_,
y_,
z_,
radius_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_bullet_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_real_world_time(&self, ) -> ResultOf_get_real_world_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_real_world_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_real_world_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_incident(&self, dispatchService_: i32,
x_: f32,
y_: f32,
z_: f32,
numUnits_: i32,
radius_: f32,
outIncidentID_: i32,
p7_: i32,
p8_: i32) -> ResultOf_create_incident {
    unsafe {
        let mut native_return = Default::default();
let mut dispatchService_ = dispatchService_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut numUnits_ = numUnits_;
let mut radius_ = radius_;
let mut outIncidentID_ = Default::default();
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_incident(
            &mut native_return,
&mut outIncidentID_,
dispatchService_,
x_,
y_,
z_,
numUnits_,
radius_,
p7_,
p8_,
        );
        let native_return = native_return;
let outIncidentID_ = outIncidentID_;
        
        ResultOf_create_incident {
            success,
            ret: native_return,
            outIncidentID_
        }
    }
}

    fn native_water_override_set_oceanwaveamplitude(&self, amplitude_: f32) -> ResultOf_water_override_set_oceanwaveamplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::water_override_set_oceanwaveamplitude(
            amplitude_,
        );
        
        
        ResultOf_water_override_set_oceanwaveamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_end_user_benchmark(&self, ) -> ResultOf_reset_end_user_benchmark {
    unsafe {
        
        let success = sdk::natives::reset_end_user_benchmark(
            
        );
        
        
        ResultOf_reset_end_user_benchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_beast_jump_this_frame(&self, player_: u32) -> ResultOf_set_beast_jump_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_beast_jump_this_frame(
            player_,
        );
        
        
        ResultOf_set_beast_jump_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_random_seed(&self, seed_: i32) -> ResultOf_set_random_seed {
    unsafe {
        let mut seed_ = seed_;
        let success = sdk::natives::set_random_seed(
            seed_,
        );
        
        
        ResultOf_set_random_seed {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_mission_repeat_save(&self, ) -> ResultOf_queue_mission_repeat_save {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_queue_mission_repeat_save {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_prev_weather_type(&self, weatherType_: Option<String>) -> ResultOf_is_prev_weather_type {
    unsafe {
        let mut native_return = Default::default();
let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::is_prev_weather_type(
            &mut native_return,
weatherType_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_prev_weather_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_time_between_spawn_attempts(&self, p0_: i32,
p1_: f32) -> ResultOf_set_dispatch_time_between_spawn_attempts {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dispatch_time_between_spawn_attempts(
            p0_,
p1_,
        );
        
        
        ResultOf_set_dispatch_time_between_spawn_attempts {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_police_restart(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32) -> ResultOf_add_police_restart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::add_police_restart(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_add_police_restart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_benchmark_iterations(&self, ) -> ResultOf_get_benchmark_iterations {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_benchmark_iterations(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_benchmark_iterations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_time_between_spawn_attempts_multiplier(&self, p0_: i32,
p1_: f32) -> ResultOf_set_dispatch_time_between_spawn_attempts_multiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dispatch_time_between_spawn_attempts_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOf_set_dispatch_time_between_spawn_attempts_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pc_version(&self, ) -> ResultOf_is_pc_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pc_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_pc_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_text_label_23_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_text_label_23_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_23_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_text_label_23_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_fade_out_after_death(&self, toggle_: bool) -> ResultOf_set_fade_out_after_death {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_out_after_death(
            toggle_,
        );
        
        
        ResultOf_set_fade_out_after_death {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_content_id_index(&self, contentId_: u32,
index_: i32) -> ResultOf_set_content_id_index {
    unsafe {
        let mut contentId_ = contentId_;
let mut index_ = index_;
        let success = sdk::natives::set_content_id_index(
            contentId_,
index_,
        );
        
        
        ResultOf_set_content_id_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fake_wanted_level(&self, ) -> ResultOf_get_fake_wanted_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_fake_wanted_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_fake_wanted_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_durango_version(&self, ) -> ResultOf_is_durango_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_durango_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_durango_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_create(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOf_activity_feed_create {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::activity_feed_create(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_create {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_is_in_animal_form(&self, toggle_: bool) -> ResultOf_set_player_is_in_animal_form {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_in_animal_form(
            toggle_,
        );
        
        
        ResultOf_set_player_is_in_animal_form {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_save_house(&self, savehouseHandle_: i32,
p1_: bool,
p2_: bool) -> ResultOf_set_save_house {
    unsafe {
        let mut savehouseHandle_ = savehouseHandle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_save_house(
            savehouseHandle_,
p1_,
p2_,
        );
        
        
        ResultOf_set_save_house {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_auto_save(&self, ) -> ResultOf_do_auto_save {
    unsafe {
        
        let success = sdk::natives::do_auto_save(
            
        );
        
        
        ResultOf_do_auto_save {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
ownedByPlayer_: bool) -> ResultOf_is_projectile_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_projectile_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_projectile_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_bits_in_range(&self, unkVar_: i32,
rangeStart_: i32,
rangeEnd_: i32) -> ResultOf_get_bits_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut unkVar_ = unkVar_;
let mut rangeStart_ = rangeStart_;
let mut rangeEnd_ = rangeEnd_;
        let success = sdk::natives::get_bits_in_range(
            &mut native_return,
unkVar_,
rangeStart_,
rangeEnd_,
        );
        let native_return = native_return;
        
        ResultOf_get_bits_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tennis_move_network_signal_float(&self, ped_: u32,
p1_: Option<String>,
p2_: f32) -> ResultOf_set_tennis_move_network_signal_float {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::set_tennis_move_network_signal_float(
            ped_,
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_set_tennis_move_network_signal_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_incident(&self, incidentId_: i32) -> ResultOf_delete_incident {
    unsafe {
        let mut incidentId_ = incidentId_;
        let success = sdk::natives::delete_incident(
            incidentId_,
        );
        
        
        ResultOf_delete_incident {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pc_cheat_with_hash_been_activated(&self, hash_: u32) -> ResultOf_has_pc_cheat_with_hash_been_activated {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::has_pc_cheat_with_hash_been_activated(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_has_pc_cheat_with_hash_been_activated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_prev_weather_type_hash_name(&self, ) -> ResultOf_get_prev_weather_type_hash_name {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_prev_weather_type_hash_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_prev_weather_type_hash_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_game_paused(&self, toggle_: bool) -> ResultOf_set_game_paused {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_game_paused(
            toggle_,
        );
        
        
        ResultOf_set_game_paused {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_curr_weather_state(&self, weatherType1_: u32,
weatherType2_: u32,
percentWeather2_: f32) -> ResultOf_set_curr_weather_state {
    unsafe {
        let mut weatherType1_ = weatherType1_;
let mut weatherType2_ = weatherType2_;
let mut percentWeather2_ = percentWeather2_;
        let success = sdk::natives::set_curr_weather_state(
            weatherType1_,
weatherType2_,
percentWeather2_,
        );
        
        
        ResultOf_set_curr_weather_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_super_jump_this_frame(&self, player_: u32) -> ResultOf_set_super_jump_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_super_jump_this_frame(
            player_,
        );
        
        
        ResultOf_set_super_jump_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_spawn_location(&self, ) -> ResultOf_reset_dispatch_spawn_location {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_spawn_location(
            
        );
        
        
        ResultOf_reset_dispatch_spawn_location {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_onscreen_keyboard(&self, ) -> ResultOf_cancel_onscreen_keyboard {
    unsafe {
        
        let success = sdk::natives::cancel_onscreen_keyboard(
            
        );
        
        
        ResultOf_cancel_onscreen_keyboard {
            success,
            ret: (),
            
        }
    }
}

    fn native_string_to_int(&self, string_: Option<String>,
outInteger_: i32) -> ResultOf_string_to_int {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut outInteger_ = Default::default();
        let success = sdk::natives::string_to_int(
            &mut native_return,
&mut outInteger_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let outInteger_ = outInteger_;
        
        ResultOf_string_to_int {
            success,
            ret: native_return,
            outInteger_
        }
    }
}

    fn native_are_profile_settings_valid(&self, ) -> ResultOf_are_profile_settings_valid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_profile_settings_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_profile_settings_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_mission_id(&self, ) -> ResultOf_get_replay_stat_mission_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_mission_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_replay_stat_mission_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_tennis_mode(&self, ped_: u32) -> ResultOf_is_tennis_mode {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_tennis_mode(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_tennis_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_save_array_with_size(&self, p0_: i32,
size_: i32,
arrayName_: Option<String>) -> ResultOf_start_save_array_with_size {
    unsafe {
        let mut p0_ = Default::default();
let mut size_ = size_;
let mut arrayName_ = sdk_helpers::create_c_string_ptr(arrayName_);
        let success = sdk::natives::start_save_array_with_size(
            &mut p0_,
size_,
arrayName_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_start_save_array_with_size {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_is_sniper_inverted(&self, ) -> ResultOf_is_sniper_inverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_sniper_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_sniper_inverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_rippleminbumpiness(&self, minBumpiness_: f32) -> ResultOf_water_override_set_rippleminbumpiness {
    unsafe {
        let mut minBumpiness_ = minBumpiness_;
        let success = sdk::natives::water_override_set_rippleminbumpiness(
            minBumpiness_,
        );
        
        
        ResultOf_water_override_set_rippleminbumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_tan(&self, p0_: f32) -> ResultOf_tan {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::tan(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_tan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_rain(&self, intensity_: f32) -> ResultOf_set_rain {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::set_rain(
            intensity_,
        );
        
        
        ResultOf_set_rain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_high_prio(&self, toggle_: bool) -> ResultOf_set_script_high_prio {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_high_prio(
            toggle_,
        );
        
        
        ResultOf_set_script_high_prio {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_pop_multiplier_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: f32,
p7_: f32,
p8_: bool,
p9_: bool) -> ResultOf_add_pop_multiplier_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::add_pop_multiplier_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_add_pop_multiplier_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_plm_is_in_constrained_mode(&self, ) -> ResultOf_plm_is_in_constrained_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::plm_is_in_constrained_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_plm_is_in_constrained_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_total_successful_stunt_jumps(&self, ) -> ResultOf_get_total_successful_stunt_jumps {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_total_successful_stunt_jumps(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_total_successful_stunt_jumps {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_find_spawn_point_in_direction(&self, posX_: f32,
posY_: f32,
posZ_: f32,
fwdVecX_: f32,
fwdVecY_: f32,
fwdVecZ_: f32,
distance_: f32,
spawnPoint_: Option<shared::Vector3>) -> ResultOf_find_spawn_point_in_direction {
    unsafe {
        let mut native_return = Default::default();
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut fwdVecX_ = fwdVecX_;
let mut fwdVecY_ = fwdVecY_;
let mut fwdVecZ_ = fwdVecZ_;
let mut distance_ = distance_;
let mut spawnPoint_ = sdk_helpers::create_vector3_ptr(spawnPoint_);
        let success = sdk::natives::find_spawn_point_in_direction(
            &mut native_return,
spawnPoint_.pin_mut(),
posX_,
posY_,
posZ_,
fwdVecX_,
fwdVecY_,
fwdVecZ_,
distance_,
        );
        let native_return = native_return;
let spawnPoint_ = sdk_helpers::read_cpp_vector3(spawnPoint_);
        
        ResultOf_find_spawn_point_in_direction {
            success,
            ret: native_return,
            spawnPoint_
        }
    }
}

    fn native_is_auto_save_in_progress(&self, ) -> ResultOf_is_auto_save_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_auto_save_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_auto_save_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_active_camera_for_timeslicing_centre(&self, ) -> ResultOf_use_active_camera_for_timeslicing_centre {
    unsafe {
        
        let success = sdk::natives::use_active_camera_for_timeslicing_centre(
            
        );
        
        
        ResultOf_use_active_camera_for_timeslicing_centre {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_replay_stat_value(&self, value_: i32) -> ResultOf_add_replay_stat_value {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::add_replay_stat_value(
            value_,
        );
        
        
        ResultOf_add_replay_stat_value {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_auto_save_off(&self, ) -> ResultOf_get_is_auto_save_off {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_auto_save_off(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_auto_save_off {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_is_a_trigger_script(&self, toggle_: bool) -> ResultOf_set_this_is_a_trigger_script {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_is_a_trigger_script(
            toggle_,
        );
        
        
        ResultOf_set_this_is_a_trigger_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label_15_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_text_label_15_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_15_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_text_label_15_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_has_game_installed_this_session(&self, ) -> ResultOf_has_game_installed_this_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_game_installed_this_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_game_installed_this_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_ideal_spawn_distance(&self, distance_: f32) -> ResultOf_set_dispatch_ideal_spawn_distance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::set_dispatch_ideal_spawn_distance(
            distance_,
        );
        
        
        ResultOf_set_dispatch_ideal_spawn_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_action_start_with_command_line_add(&self, p0_: Option<String>) -> ResultOf_activity_feed_action_start_with_command_line_add {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_action_start_with_command_line_add(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_action_start_with_command_line_add {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_persist(&self, weatherType_: Option<String>) -> ResultOf_set_weather_type_persist {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::set_weather_type_persist(
            weatherType_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_weather_type_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_restart_coord_override(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOf_set_restart_coord_override {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::set_restart_coord_override(
            x_,
y_,
z_,
heading_,
        );
        
        
        ResultOf_set_restart_coord_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_weather_type_hash_name(&self, ) -> ResultOf_get_next_weather_type_hash_name {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_next_weather_type_hash_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_next_weather_type_hash_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_queue_mission_repeat_load(&self, ) -> ResultOf_queue_mission_repeat_load {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_load(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_queue_mission_repeat_load {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_absf(&self, value_: f32) -> ResultOf_absf {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::absf(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_absf {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gravity_level(&self, level_: i32) -> ResultOf_set_gravity_level {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::set_gravity_level(
            level_,
        );
        
        
        ResultOf_set_gravity_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_populate_now(&self, ) -> ResultOf_populate_now {
    unsafe {
        
        let success = sdk::natives::populate_now(
            
        );
        
        
        ResultOf_populate_now {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_save_data(&self, ) -> ResultOf_stop_save_data {
    unsafe {
        
        let success = sdk::natives::stop_save_data(
            
        );
        
        
        ResultOf_stop_save_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_ideal_spawn_distance(&self, ) -> ResultOf_reset_dispatch_ideal_spawn_distance {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_ideal_spawn_distance(
            
        );
        
        
        ResultOf_reset_dispatch_ideal_spawn_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stunt_jump_in_progress(&self, ) -> ResultOf_is_stunt_jump_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stunt_jump_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_stunt_jump_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_a_minigame_script(&self, ) -> ResultOf_is_this_a_minigame_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_this_a_minigame_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_this_a_minigame_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_ripplebumpiness(&self, bumpiness_: f32) -> ResultOf_water_override_set_ripplebumpiness {
    unsafe {
        let mut bumpiness_ = bumpiness_;
        let success = sdk::natives::water_override_set_ripplebumpiness(
            bumpiness_,
        );
        
        
        ResultOf_water_override_set_ripplebumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_float_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_float_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_float_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_float_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_is_frontend_fading(&self, ) -> ResultOf_is_frontend_fading {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_frontend_fading(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_frontend_fading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_scenario_spawn_history(&self, ) -> ResultOf_clear_scenario_spawn_history {
    unsafe {
        
        let success = sdk::natives::clear_scenario_spawn_history(
            
        );
        
        
        ResultOf_clear_scenario_spawn_history {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_snow(&self, level_: f32) -> ResultOf_set_snow {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::set_snow(
            level_,
        );
        
        
        ResultOf_set_snow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ratio_of_closest_point_on_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
clamp_: bool) -> ResultOf_get_ratio_of_closest_point_on_line {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut clamp_ = clamp_;
        let success = sdk::natives::get_ratio_of_closest_point_on_line(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
clamp_,
        );
        let native_return = native_return;
        
        ResultOf_get_ratio_of_closest_point_on_line {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_prospero_version(&self, ) -> ResultOf_is_prospero_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_prospero_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_prospero_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_at_index(&self, index_: i32) -> ResultOf_get_replay_stat_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::get_replay_stat_at_index(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_get_replay_stat_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_text_label_31_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_text_label_31_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_31_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_text_label_31_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_get_projectile_of_projectile_type_within_distance(&self, ped_: u32,
weaponHash_: u32,
distance_: f32,
outCoords_: Option<shared::Vector3>,
outProjectile_: u32,
p5_: bool) -> ResultOf_get_projectile_of_projectile_type_within_distance {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut distance_ = distance_;
let mut outCoords_ = sdk_helpers::create_vector3_ptr(outCoords_);
let mut outProjectile_ = Default::default();
let mut p5_ = p5_;
        let success = sdk::natives::get_projectile_of_projectile_type_within_distance(
            &mut native_return,
outCoords_.pin_mut(),
&mut outProjectile_,
ped_,
weaponHash_,
distance_,
p5_,
        );
        let native_return = native_return;
let outCoords_ = sdk_helpers::read_cpp_vector3(outCoords_);
let outProjectile_ = outProjectile_;
        
        ResultOf_get_projectile_of_projectile_type_within_distance {
            success,
            ret: native_return,
            outCoords_,
outProjectile_
        }
    }
}

    fn native_get_onscreen_keyboard_result(&self, ) -> ResultOf_get_onscreen_keyboard_result {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_onscreen_keyboard_result(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_onscreen_keyboard_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shoot_single_bullet_between_coords(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weaponHash_: u32,
ownerPed_: u32,
isAudible_: bool,
isInvisible_: bool,
speed_: f32) -> ResultOf_shoot_single_bullet_between_coords {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weaponHash_ = weaponHash_;
let mut ownerPed_ = ownerPed_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut speed_ = speed_;
        let success = sdk::natives::shoot_single_bullet_between_coords(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weaponHash_,
ownerPed_,
isAudible_,
isInvisible_,
speed_,
        );
        
        
        ResultOf_shoot_single_bullet_between_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_atan2(&self, p0_: f32,
p1_: f32) -> ResultOf_atan2 {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::atan2(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_atan2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_post(&self, ) -> ResultOf_activity_feed_post {
    unsafe {
        
        let success = sdk::natives::activity_feed_post(
            
        );
        
        
        ResultOf_activity_feed_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_memory_card_in_use(&self, ) -> ResultOf_is_memory_card_in_use {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_memory_card_in_use(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_memory_card_in_use {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_weather_type(&self, ) -> ResultOf_set_random_weather_type {
    unsafe {
        
        let success = sdk::natives::set_random_weather_type(
            
        );
        
        
        ResultOf_set_random_weather_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_allocated_stack_size(&self, ) -> ResultOf_get_allocated_stack_size {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_allocated_stack_size(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_allocated_stack_size {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ground_z_and_normal_for_3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
groundZ_: f32,
normal_: Option<shared::Vector3>) -> ResultOf_get_ground_z_and_normal_for_3d_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut groundZ_ = Default::default();
let mut normal_ = sdk_helpers::create_vector3_ptr(normal_);
        let success = sdk::natives::get_ground_z_and_normal_for_3d_coord(
            &mut native_return,
&mut groundZ_,
normal_.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let groundZ_ = groundZ_;
let normal_ = sdk_helpers::read_cpp_vector3(normal_);
        
        ResultOf_get_ground_z_and_normal_for_3d_coord {
            success,
            ret: native_return,
            groundZ_,
normal_
        }
    }
}

    fn native_inform_code_of_content_id_of_current_ugc_mission(&self, p0_: Option<String>) -> ResultOf_inform_code_of_content_id_of_current_ugc_mission {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::inform_code_of_content_id_of_current_ugc_mission(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_inform_code_of_content_id_of_current_ugc_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_coords_of_projectile_type_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
projectileHash_: u32,
projectilePos_: Option<shared::Vector3>,
ownedByPlayer_: bool) -> ResultOf_get_coords_of_projectile_type_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut projectileHash_ = projectileHash_;
let mut projectilePos_ = sdk_helpers::create_vector3_ptr(projectilePos_);
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::get_coords_of_projectile_type_in_area(
            &mut native_return,
projectilePos_.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
projectileHash_,
ownedByPlayer_,
        );
        let native_return = native_return;
let projectilePos_ = sdk_helpers::read_cpp_vector3(projectilePos_);
        
        ResultOf_get_coords_of_projectile_type_in_area {
            success,
            ret: native_return,
            projectilePos_
        }
    }
}

    fn native_set_bits_in_range(&self, unkVar_: i32,
rangeStart_: i32,
rangeEnd_: i32,
p3_: i32) -> ResultOf_set_bits_in_range {
    unsafe {
        let mut unkVar_ = Default::default();
let mut rangeStart_ = rangeStart_;
let mut rangeEnd_ = rangeEnd_;
let mut p3_ = p3_;
        let success = sdk::natives::set_bits_in_range(
            &mut unkVar_,
rangeStart_,
rangeEnd_,
p3_,
        );
        let unkVar_ = unkVar_;
        
        ResultOf_set_bits_in_range {
            success,
            ret: (),
            unkVar_
        }
    }
}

    fn native_script_race_get_player_split_time(&self, player_: u32,
p1_: i32,
p2_: i32) -> ResultOf_script_race_get_player_split_time {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = Default::default();
let mut p2_ = Default::default();
        let success = sdk::natives::script_race_get_player_split_time(
            &mut native_return,
&mut p1_,
&mut p2_,
player_,
        );
        let native_return = native_return;
let p1_ = p1_;
let p2_ = p2_;
        
        ResultOf_script_race_get_player_split_time {
            success,
            ret: native_return,
            p1_,
p2_
        }
    }
}

    fn native_play_tennis_dive_anim(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOf_play_tennis_dive_anim {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_tennis_dive_anim(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_play_tennis_dive_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_large_image_url(&self, p0_: Option<String>) -> ResultOf_activity_feed_large_image_url {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_large_image_url(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_large_image_url {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_dispatch_spawn_angled_blocking_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOf_add_dispatch_spawn_angled_blocking_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::add_dispatch_spawn_angled_blocking_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOf_add_dispatch_spawn_angled_blocking_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_is_safe_for_network_game(&self, ) -> ResultOf_network_set_script_is_safe_for_network_game {
    unsafe {
        
        let success = sdk::natives::network_set_script_is_safe_for_network_game(
            
        );
        
        
        ResultOf_network_set_script_is_safe_for_network_game {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_end_user_benchmark(&self, ) -> ResultOf_start_end_user_benchmark {
    unsafe {
        
        let success = sdk::natives::start_end_user_benchmark(
            
        );
        
        
        ResultOf_start_end_user_benchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bit(&self, address_: i32,
offset_: i32) -> ResultOf_set_bit {
    unsafe {
        let mut address_ = Default::default();
let mut offset_ = offset_;
        let success = sdk::natives::set_bit(
            &mut address_,
offset_,
        );
        let address_ = address_;
        
        ResultOf_set_bit {
            success,
            ret: (),
            address_
        }
    }
}

    fn native_clear_area_leave_vehicle_health(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool) -> ResultOf_clear_area_leave_vehicle_health {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::clear_area_leave_vehicle_health(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_clear_area_leave_vehicle_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_unload_all_cloud_hats(&self, ) -> ResultOf_unload_all_cloud_hats {
    unsafe {
        
        let success = sdk::natives::unload_all_cloud_hats(
            
        );
        
        
        ResultOf_unload_all_cloud_hats {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rain_level(&self, ) -> ResultOf_get_rain_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_rain_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_rain_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_player_in_animal_form(&self, ) -> ResultOf_get_is_player_in_animal_form {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_player_in_animal_form(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_player_in_animal_form {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_event_flag(&self, toggle_: bool) -> ResultOf_set_random_event_flag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_event_flag(
            toggle_,
        );
        
        
        ResultOf_set_random_event_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_add_int_to_caption(&self, p0_: i32) -> ResultOf_activity_feed_add_int_to_caption {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::activity_feed_add_int_to_caption(
            p0_,
        );
        
        
        ResultOf_activity_feed_add_int_to_caption {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_bullet_impacted_in_area(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: bool,
p5_: bool) -> ResultOf_has_bullet_impacted_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::has_bullet_impacted_in_area(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_has_bullet_impacted_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_successful_stunt_jumps(&self, ) -> ResultOf_get_num_successful_stunt_jumps {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_successful_stunt_jumps(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_successful_stunt_jumps {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_dispatch_service_resource_creation(&self, dispatchService_: i32,
toggle_: bool) -> ResultOf_block_dispatch_service_resource_creation {
    unsafe {
        let mut dispatchService_ = dispatchService_;
let mut toggle_ = toggle_;
        let success = sdk::natives::block_dispatch_service_resource_creation(
            dispatchService_,
toggle_,
        );
        
        
        ResultOf_block_dispatch_service_resource_creation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_instance_priority_mode(&self, p0_: i32) -> ResultOf_set_instance_priority_mode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_instance_priority_mode(
            p0_,
        );
        
        
        ResultOf_set_instance_priority_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_game_timer(&self, ) -> ResultOf_get_game_timer {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_game_timer(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_game_timer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_is_repeating_a_mission(&self, toggle_: bool) -> ResultOf_set_player_is_repeating_a_mission {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_repeating_a_mission(
            toggle_,
        );
        
        
        ResultOf_set_player_is_repeating_a_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_all_scripts_with_this_name(&self, scriptName_: Option<String>) -> ResultOf_terminate_all_scripts_with_this_name {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::terminate_all_scripts_with_this_name(
            scriptName_.as_ref().unwrap(),
        );
        
        
        ResultOf_terminate_all_scripts_with_this_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ground_z_excluding_objects_for_3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
groundZ_: f32,
p4_: bool,
p5_: bool) -> ResultOf_get_ground_z_excluding_objects_for_3d_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut groundZ_ = Default::default();
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::get_ground_z_excluding_objects_for_3d_coord(
            &mut native_return,
&mut groundZ_,
x_,
y_,
z_,
p4_,
p5_,
        );
        let native_return = native_return;
let groundZ_ = groundZ_;
        
        ResultOf_get_ground_z_excluding_objects_for_3d_coord {
            success,
            ret: native_return,
            groundZ_
        }
    }
}

    fn native_is_aussie_version(&self, ) -> ResultOf_is_aussie_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aussie_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_aussie_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_ripplemaxbumpiness(&self, maxBumpiness_: f32) -> ResultOf_water_override_set_ripplemaxbumpiness {
    unsafe {
        let mut maxBumpiness_ = maxBumpiness_;
        let success = sdk::natives::water_override_set_ripplemaxbumpiness(
            maxBumpiness_,
        );
        
        
        ResultOf_water_override_set_ripplemaxbumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commandline_end_user_benchmark(&self, ) -> ResultOf_is_commandline_end_user_benchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commandline_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_commandline_end_user_benchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_size_of_save_data(&self, p0_: bool) -> ResultOf_get_size_of_save_data {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_size_of_save_data(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_size_of_save_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_point_area_overlap(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32,
p13_: i32) -> ResultOf_get_point_area_overlap {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::get_point_area_overlap(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        let native_return = native_return;
        
        ResultOf_get_point_area_overlap {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_forced_jump_this_frame(&self, player_: u32) -> ResultOf_set_forced_jump_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_forced_jump_this_frame(
            player_,
        );
        
        
        ResultOf_set_forced_jump_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_replay_stats(&self, ) -> ResultOf_end_replay_stats {
    unsafe {
        
        let success = sdk::natives::end_replay_stats(
            
        );
        
        
        ResultOf_end_replay_stats {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_restart_coord_override(&self, ) -> ResultOf_clear_restart_coord_override {
    unsafe {
        
        let success = sdk::natives::clear_restart_coord_override(
            
        );
        
        
        ResultOf_clear_restart_coord_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mission_flag(&self, ) -> ResultOf_get_mission_flag {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_mission_flag(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_mission_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_weather(&self, weatherType_: Option<String>) -> ResultOf_set_override_weather {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::set_override_weather(
            weatherType_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_override_weather {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_save_house_details_after_successful_load(&self, p0_: Option<shared::Vector3>,
p1_: f32,
fadeInAfterLoad_: bool,
p3_: bool) -> ResultOf_get_save_house_details_after_successful_load {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_vector3_ptr(p0_);
let mut p1_ = Default::default();
let mut fadeInAfterLoad_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::get_save_house_details_after_successful_load(
            &mut native_return,
p0_.pin_mut(),
&mut p1_,
&mut fadeInAfterLoad_,
&mut p3_,
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_cpp_vector3(p0_);
let p1_ = p1_;
let fadeInAfterLoad_ = fadeInAfterLoad_;
let p3_ = p3_;
        
        ResultOf_get_save_house_details_after_successful_load {
            success,
            ret: native_return,
            p0_,
p1_,
fadeInAfterLoad_,
p3_
        }
    }
}

    fn native_disable_stunt_jump_set(&self, p0_: i32) -> ResultOf_disable_stunt_jump_set {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_stunt_jump_set(
            p0_,
        );
        
        
        ResultOf_disable_stunt_jump_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area(&self, X_: f32,
Y_: f32,
Z_: f32,
radius_: f32,
p4_: bool,
ignoreCopCars_: bool,
ignoreObjects_: bool,
p7_: bool) -> ResultOf_clear_area {
    unsafe {
        let mut X_ = X_;
let mut Y_ = Y_;
let mut Z_ = Z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut ignoreCopCars_ = ignoreCopCars_;
let mut ignoreObjects_ = ignoreObjects_;
let mut p7_ = p7_;
        let success = sdk::natives::clear_area(
            X_,
Y_,
Z_,
radius_,
p4_,
ignoreCopCars_,
ignoreObjects_,
p7_,
        );
        
        
        ResultOf_clear_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_area_occupied(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: bool,
p11_: i32,
p12_: bool) -> ResultOf_is_area_occupied {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::is_area_occupied(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        let native_return = native_return;
        
        ResultOf_is_area_occupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_explosive_ammo_this_frame(&self, player_: u32) -> ResultOf_set_explosive_ammo_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_explosive_ammo_this_frame(
            player_,
        );
        
        
        ResultOf_set_explosive_ammo_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_action_manager_enable_action(&self, hash_: u32,
enable_: bool) -> ResultOf_action_manager_enable_action {
    unsafe {
        let mut hash_ = hash_;
let mut enable_ = enable_;
        let success = sdk::natives::action_manager_enable_action(
            hash_,
enable_,
        );
        
        
        ResultOf_action_manager_enable_action {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_orbis_version(&self, ) -> ResultOf_is_orbis_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_orbis_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_orbis_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_int64_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_int64_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_int64_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_int64_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_unload_cloud_hat(&self, name_: Option<String>,
p1_: f32) -> ResultOf_unload_cloud_hat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::unload_cloud_hat(
            name_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_unload_cloud_hat {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_shorewavemaxamplitude(&self, maxAmplitude_: f32) -> ResultOf_water_override_set_shorewavemaxamplitude {
    unsafe {
        let mut maxAmplitude_ = maxAmplitude_;
        let success = sdk::natives::water_override_set_shorewavemaxamplitude(
            maxAmplitude_,
        );
        
        
        ResultOf_water_override_set_shorewavemaxamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_fade_in(&self, p0_: f32) -> ResultOf_water_override_fade_in {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_override_fade_in(
            p0_,
        );
        
        
        ResultOf_water_override_fade_in {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wind_speed(&self, ) -> ResultOf_get_wind_speed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_wind_speed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_wind_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_save_data(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOf_start_save_data {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::start_save_data(
            &mut p0_,
p1_,
p2_,
        );
        let p0_ = p0_;
        
        ResultOf_start_save_data {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_atan(&self, p0_: f32) -> ResultOf_atan {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::atan(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_atan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_script_can_be_paused(&self, toggle_: bool) -> ResultOf_set_this_script_can_be_paused {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_script_can_be_paused(
            toggle_,
        );
        
        
        ResultOf_set_this_script_can_be_paused {
            success,
            ret: (),
            
        }
    }
}

    fn native_plm_get_constrained_duration_ms(&self, ) -> ResultOf_plm_get_constrained_duration_ms {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::plm_get_constrained_duration_ms(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_plm_get_constrained_duration_ms {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wind(&self, speed_: f32) -> ResultOf_set_wind {
    unsafe {
        let mut speed_ = speed_;
        let success = sdk::natives::set_wind(
            speed_,
        );
        
        
        ResultOf_set_wind {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_spawn_blocking_areas(&self, ) -> ResultOf_reset_dispatch_spawn_blocking_areas {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_spawn_blocking_areas(
            
        );
        
        
        ResultOf_reset_dispatch_spawn_blocking_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_position_occupied(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: bool,
checkVehicles_: bool,
checkPeds_: bool,
p7_: bool,
p8_: bool,
ignoreEntity_: u32,
p10_: bool) -> ResultOf_is_position_occupied {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
let mut checkVehicles_ = checkVehicles_;
let mut checkPeds_ = checkPeds_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut ignoreEntity_ = ignoreEntity_;
let mut p10_ = p10_;
        let success = sdk::natives::is_position_occupied(
            &mut native_return,
x_,
y_,
z_,
range_,
p4_,
checkVehicles_,
checkPeds_,
p7_,
p8_,
ignoreEntity_,
p10_,
        );
        let native_return = native_return;
        
        ResultOf_is_position_occupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_incident_requested_units(&self, incidentId_: i32,
dispatchService_: i32,
numUnits_: i32) -> ResultOf_set_incident_requested_units {
    unsafe {
        let mut incidentId_ = incidentId_;
let mut dispatchService_ = dispatchService_;
let mut numUnits_ = numUnits_;
        let success = sdk::natives::set_incident_requested_units(
            incidentId_,
dispatchService_,
numUnits_,
        );
        
        
        ResultOf_set_incident_requested_units {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pop_multiplier_area(&self, id_: i32,
p1_: bool) -> ResultOf_remove_pop_multiplier_area {
    unsafe {
        let mut id_ = id_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_pop_multiplier_area(
            id_,
p1_,
        );
        
        
        ResultOf_remove_pop_multiplier_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_base_element_location_from_metadata_block(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool) -> ResultOf_get_base_element_location_from_metadata_block {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::get_base_element_location_from_metadata_block(
            &mut native_return,
&mut p0_,
&mut p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_get_base_element_location_from_metadata_block {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_clear_tactical_nav_mesh_points(&self, ) -> ResultOf_clear_tactical_nav_mesh_points {
    unsafe {
        
        let success = sdk::natives::clear_tactical_nav_mesh_points(
            
        );
        
        
        ResultOf_clear_tactical_nav_mesh_points {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_oceanwavemaxamplitude(&self, maxAmplitude_: f32) -> ResultOf_water_override_set_oceanwavemaxamplitude {
    unsafe {
        let mut maxAmplitude_ = maxAmplitude_;
        let success = sdk::natives::water_override_set_oceanwavemaxamplitude(
            maxAmplitude_,
        );
        
        
        ResultOf_water_override_set_oceanwavemaxamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_credits_fade_out_with_screen(&self, toggle_: bool) -> ResultOf_set_credits_fade_out_with_screen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_credits_fade_out_with_screen(
            toggle_,
        );
        
        
        ResultOf_set_credits_fade_out_with_screen {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_tactical_nav_mesh_point(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_add_tactical_nav_mesh_point {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_tactical_nav_mesh_point(
            x_,
y_,
z_,
        );
        
        
        ResultOf_add_tactical_nav_mesh_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_japanese_version(&self, ) -> ResultOf_is_japanese_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_japanese_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_japanese_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_shorewaveamplitude(&self, amplitude_: f32) -> ResultOf_water_override_set_shorewaveamplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::water_override_set_shorewaveamplitude(
            amplitude_,
        );
        
        
        ResultOf_water_override_set_shorewaveamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_credits_active(&self, toggle_: bool) -> ResultOf_set_credits_active {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_credits_active(
            toggle_,
        );
        
        
        ResultOf_set_credits_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_this_script_can_remove_blips_created_by_any_script(&self, toggle_: bool) -> ResultOf_set_this_script_can_remove_blips_created_by_any_script {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_script_can_remove_blips_created_by_any_script(
            toggle_,
        );
        
        
        ResultOf_set_this_script_can_remove_blips_created_by_any_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_rippledisturb(&self, disturb_: f32) -> ResultOf_water_override_set_rippledisturb {
    unsafe {
        let mut disturb_ = disturb_;
        let success = sdk::natives::water_override_set_rippledisturb(
            disturb_,
        );
        
        
        ResultOf_water_override_set_rippledisturb {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_online_played_with_post(&self, p0_: Option<String>) -> ResultOf_activity_feed_online_played_with_post {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_online_played_with_post(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_online_played_with_post {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_stunt_jump_angled(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius1_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
x4_: f32,
y4_: f32,
z4_: f32,
radius2_: f32,
camX_: f32,
camY_: f32,
camZ_: f32,
p17_: i32,
p18_: i32,
p19_: i32) -> ResultOf_add_stunt_jump_angled {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius1_ = radius1_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut x4_ = x4_;
let mut y4_ = y4_;
let mut z4_ = z4_;
let mut radius2_ = radius2_;
let mut camX_ = camX_;
let mut camY_ = camY_;
let mut camZ_ = camZ_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
        let success = sdk::natives::add_stunt_jump_angled(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius1_,
x3_,
y3_,
z3_,
x4_,
y4_,
z4_,
radius2_,
camX_,
camY_,
camZ_,
p17_,
p18_,
p19_,
        );
        let native_return = native_return;
        
        ResultOf_add_stunt_jump_angled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_peds(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOf_clear_area_of_peds {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_peds(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOf_clear_area_of_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_save_struct_with_size(&self, p0_: i32,
size_: i32,
structName_: Option<String>) -> ResultOf_start_save_struct_with_size {
    unsafe {
        let mut p0_ = Default::default();
let mut size_ = size_;
let mut structName_ = sdk_helpers::create_c_string_ptr(structName_);
        let success = sdk::natives::start_save_struct_with_size(
            &mut p0_,
size_,
structName_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_start_save_struct_with_size {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_shoot_single_bullet_between_coords_ignore_entity_new(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weaponHash_: u32,
ownerPed_: u32,
isAudible_: bool,
isInvisible_: bool,
speed_: f32,
entity_: u32,
p14_: bool,
p15_: bool,
targetEntity_: u32,
p17_: bool,
p18_: i32,
p19_: i32,
p20_: i32) -> ResultOf_shoot_single_bullet_between_coords_ignore_entity_new {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weaponHash_ = weaponHash_;
let mut ownerPed_ = ownerPed_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut speed_ = speed_;
let mut entity_ = entity_;
let mut p14_ = p14_;
let mut p15_ = p15_;
let mut targetEntity_ = targetEntity_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
let mut p20_ = p20_;
        let success = sdk::natives::shoot_single_bullet_between_coords_ignore_entity_new(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weaponHash_,
ownerPed_,
isAudible_,
isInvisible_,
speed_,
entity_,
p14_,
p15_,
targetEntity_,
p17_,
p18_,
p19_,
p20_,
        );
        
        
        ResultOf_shoot_single_bullet_between_coords_ignore_entity_new {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_save_house(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: Option<String>,
p5_: i32,
p6_: i32) -> ResultOf_register_save_house {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::register_save_house(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_.as_ref().unwrap(),
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_register_save_house {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_game_state_playing(&self, ) -> ResultOf_force_game_state_playing {
    unsafe {
        
        let success = sdk::natives::force_game_state_playing(
            
        );
        
        
        ResultOf_force_game_state_playing {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_fade_out(&self, p0_: f32) -> ResultOf_water_override_fade_out {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_override_fade_out(
            p0_,
        );
        
        
        ResultOf_water_override_fade_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_shorewaveminamplitude(&self, minAmplitude_: f32) -> ResultOf_water_override_set_shorewaveminamplitude {
    unsafe {
        let mut minAmplitude_ = minAmplitude_;
        let success = sdk::natives::water_override_set_shorewaveminamplitude(
            minAmplitude_,
        );
        
        
        ResultOf_water_override_set_shorewaveminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mission_flag(&self, toggle_: bool) -> ResultOf_set_mission_flag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mission_flag(
            toggle_,
        );
        
        
        ResultOf_set_mission_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_profile_setting(&self, profileSetting_: i32) -> ResultOf_get_profile_setting {
    unsafe {
        let mut native_return = Default::default();
let mut profileSetting_ = profileSetting_;
        let success = sdk::natives::get_profile_setting(
            &mut native_return,
profileSetting_,
        );
        let native_return = native_return;
        
        ResultOf_get_profile_setting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scarlett_version(&self, ) -> ResultOf_is_scarlett_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scarlett_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_scarlett_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_strength(&self, strength_: f32) -> ResultOf_water_override_set_strength {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::water_override_set_strength(
            strength_,
        );
        
        
        ResultOf_water_override_set_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_snow_level(&self, ) -> ResultOf_get_snow_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_snow_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_snow_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_instance_priority_hint(&self, flag_: i32) -> ResultOf_set_instance_priority_hint {
    unsafe {
        let mut flag_ = flag_;
        let success = sdk::natives::set_instance_priority_hint(
            flag_,
        );
        
        
        ResultOf_set_instance_priority_hint {
            success,
            ret: (),
            
        }
    }
}

    fn native_cleanup_async_install(&self, ) -> ResultOf_cleanup_async_install {
    unsafe {
        
        let success = sdk::natives::cleanup_async_install(
            
        );
        
        
        ResultOf_cleanup_async_install {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_end_user_benchmark(&self, ) -> ResultOf_stop_end_user_benchmark {
    unsafe {
        
        let success = sdk::natives::stop_end_user_benchmark(
            
        );
        
        
        ResultOf_stop_end_user_benchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_asin(&self, p0_: f32) -> ResultOf_asin {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::asin(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_asin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_hospital_restart(&self, hospitalIndex_: i32,
toggle_: bool) -> ResultOf_disable_hospital_restart {
    unsafe {
        let mut hospitalIndex_ = hospitalIndex_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_hospital_restart(
            hospitalIndex_,
toggle_,
        );
        
        
        ResultOf_disable_hospital_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_incident_valid(&self, incidentId_: i32) -> ResultOf_is_incident_valid {
    unsafe {
        let mut native_return = Default::default();
let mut incidentId_ = incidentId_;
        let success = sdk::natives::is_incident_valid(
            &mut native_return,
incidentId_,
        );
        let native_return = native_return;
        
        ResultOf_is_incident_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_bool_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_bool_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_bool_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_bool_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_get_ground_z_for_3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
groundZ_: f32,
ignoreWater_: bool,
p5_: bool) -> ResultOf_get_ground_z_for_3d_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut groundZ_ = Default::default();
let mut ignoreWater_ = ignoreWater_;
let mut p5_ = p5_;
        let success = sdk::natives::get_ground_z_for_3d_coord(
            &mut native_return,
&mut groundZ_,
x_,
y_,
z_,
ignoreWater_,
p5_,
        );
        let native_return = native_return;
let groundZ_ = groundZ_;
        
        ResultOf_get_ground_z_for_3d_coord {
            success,
            ret: native_return,
            groundZ_
        }
    }
}

    fn native_set_save_menu_active(&self, ignoreVehicle_: bool) -> ResultOf_set_save_menu_active {
    unsafe {
        let mut ignoreVehicle_ = ignoreVehicle_;
        let success = sdk::natives::set_save_menu_active(
            ignoreVehicle_,
        );
        
        
        ResultOf_set_save_menu_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_string_null_or_empty(&self, string_: Option<String>) -> ResultOf_is_string_null_or_empty {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::is_string_null_or_empty(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_string_null_or_empty {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_onscreen_keyboard_with_longer_initial_string(&self, p0_: i32,
windowTitle_: Option<String>,
p2_: i32,
defaultText_: Option<String>,
defaultConcat1_: Option<String>,
defaultConcat2_: Option<String>,
defaultConcat3_: Option<String>,
defaultConcat4_: Option<String>,
defaultConcat5_: Option<String>,
defaultConcat6_: Option<String>,
defaultConcat7_: Option<String>,
maxInputLength_: i32) -> ResultOf_display_onscreen_keyboard_with_longer_initial_string {
    unsafe {
        let mut p0_ = p0_;
let mut windowTitle_ = sdk_helpers::create_c_string_ptr(windowTitle_);
let mut p2_ = Default::default();
let mut defaultText_ = sdk_helpers::create_c_string_ptr(defaultText_);
let mut defaultConcat1_ = sdk_helpers::create_c_string_ptr(defaultConcat1_);
let mut defaultConcat2_ = sdk_helpers::create_c_string_ptr(defaultConcat2_);
let mut defaultConcat3_ = sdk_helpers::create_c_string_ptr(defaultConcat3_);
let mut defaultConcat4_ = sdk_helpers::create_c_string_ptr(defaultConcat4_);
let mut defaultConcat5_ = sdk_helpers::create_c_string_ptr(defaultConcat5_);
let mut defaultConcat6_ = sdk_helpers::create_c_string_ptr(defaultConcat6_);
let mut defaultConcat7_ = sdk_helpers::create_c_string_ptr(defaultConcat7_);
let mut maxInputLength_ = maxInputLength_;
        let success = sdk::natives::display_onscreen_keyboard_with_longer_initial_string(
            &mut p2_,
p0_,
windowTitle_.as_ref().unwrap(),
defaultText_.as_ref().unwrap(),
defaultConcat1_.as_ref().unwrap(),
defaultConcat2_.as_ref().unwrap(),
defaultConcat3_.as_ref().unwrap(),
defaultConcat4_.as_ref().unwrap(),
defaultConcat5_.as_ref().unwrap(),
defaultConcat6_.as_ref().unwrap(),
defaultConcat7_.as_ref().unwrap(),
maxInputLength_,
        );
        let p2_ = p2_;
        
        ResultOf_display_onscreen_keyboard_with_longer_initial_string {
            success,
            ret: (),
            p2_
        }
    }
}

    fn native_get_index_of_current_level(&self, ) -> ResultOf_get_index_of_current_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_index_of_current_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_index_of_current_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ps3_version(&self, ) -> ResultOf_is_ps3_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_ps3_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_ps3_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_weather_type_persist(&self, ) -> ResultOf_clear_weather_type_persist {
    unsafe {
        
        let success = sdk::natives::clear_weather_type_persist(
            
        );
        
        
        ResultOf_clear_weather_type_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_city_density(&self, ) -> ResultOf_get_city_density {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_city_density(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_city_density {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_spawn_location(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_dispatch_spawn_location {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_dispatch_spawn_location(
            x_,
y_,
z_,
        );
        
        
        ResultOf_set_dispatch_spawn_location {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_credits_running(&self, ) -> ResultOf_are_credits_running {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_credits_running(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_credits_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_key(&self, string_: Option<String>) -> ResultOf_get_hash_key {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_hash_key(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_hash_key {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ideal_spawn_distance_for_incident(&self, incidentId_: i32,
p1_: f32) -> ResultOf_set_ideal_spawn_distance_for_incident {
    unsafe {
        let mut incidentId_ = incidentId_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ideal_spawn_distance_for_incident(
            incidentId_,
p1_,
        );
        
        
        ResultOf_set_ideal_spawn_distance_for_incident {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_event_flag(&self, ) -> ResultOf_get_random_event_flag {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_random_event_flag(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_random_event_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_should_use_metric_measurements(&self, ) -> ResultOf_should_use_metric_measurements {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::should_use_metric_measurements(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_should_use_metric_measurements {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_int_in_range(&self, startRange_: i32,
endRange_: i32) -> ResultOf_get_random_int_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut startRange_ = startRange_;
let mut endRange_ = endRange_;
        let success = sdk::natives::get_random_int_in_range(
            &mut native_return,
startRange_,
endRange_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_int_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_replay_stats_been_stored(&self, ) -> ResultOf_have_replay_stats_been_stored {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::have_replay_stats_been_stored(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_have_replay_stats_been_stored {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_stunt_jumps_can_trigger(&self, toggle_: bool) -> ResultOf_set_stunt_jumps_can_trigger {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_stunt_jumps_can_trigger(
            toggle_,
        );
        
        
        ResultOf_set_stunt_jumps_can_trigger {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_wanted_response_num_peds_to_spawn(&self, ) -> ResultOf_reset_wanted_response_num_peds_to_spawn {
    unsafe {
        
        let success = sdk::natives::reset_wanted_response_num_peds_to_spawn(
            
        );
        
        
        ResultOf_reset_wanted_response_num_peds_to_spawn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fade_in_after_death_arrest(&self, toggle_: bool) -> ResultOf_set_fade_in_after_death_arrest {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_in_after_death_arrest(
            toggle_,
        );
        
        
        ResultOf_set_fade_in_after_death_arrest {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_dispatch_service(&self, dispatchService_: i32,
toggle_: bool) -> ResultOf_enable_dispatch_service {
    unsafe {
        let mut dispatchService_ = dispatchService_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_dispatch_service(
            dispatchService_,
toggle_,
        );
        
        
        ResultOf_enable_dispatch_service {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_stunt_jump(&self, p0_: i32) -> ResultOf_delete_stunt_jump {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::delete_stunt_jump(
            p0_,
        );
        
        
        ResultOf_delete_stunt_jump {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_bullet_impacted_in_box(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: bool) -> ResultOf_has_bullet_impacted_in_box {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::has_bullet_impacted_in_box(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_has_bullet_impacted_in_box {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_count(&self, ) -> ResultOf_get_replay_stat_count {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_replay_stat_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_objects(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOf_clear_area_of_objects {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_objects(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOf_clear_area_of_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
ownedByPlayer_: bool) -> ResultOf_is_bullet_in_box {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_bullet_in_box(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_bullet_in_box {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_mission_creator_warp(&self, toggle_: bool) -> ResultOf_allow_mission_creator_warp {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::allow_mission_creator_warp(
            toggle_,
        );
        
        
        ResultOf_allow_mission_creator_warp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_coords_of_projectile_type_within_distance(&self, ped_: u32,
weaponHash_: u32,
distance_: f32,
outCoords_: Option<shared::Vector3>,
p4_: bool) -> ResultOf_get_coords_of_projectile_type_within_distance {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut distance_ = distance_;
let mut outCoords_ = sdk_helpers::create_vector3_ptr(outCoords_);
let mut p4_ = p4_;
        let success = sdk::natives::get_coords_of_projectile_type_within_distance(
            &mut native_return,
outCoords_.pin_mut(),
ped_,
weaponHash_,
distance_,
p4_,
        );
        let native_return = native_return;
let outCoords_ = sdk_helpers::read_cpp_vector3(outCoords_);
        
        ResultOf_get_coords_of_projectile_type_within_distance {
            success,
            ret: native_return,
            outCoords_
        }
    }
}

    fn native_begin_replay_stats(&self, p0_: i32,
p1_: i32) -> ResultOf_begin_replay_stats {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::begin_replay_stats(
            p0_,
p1_,
        );
        
        
        ResultOf_begin_replay_stats {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_tennis_swing_anim(&self, ped_: u32,
animDict_: Option<String>,
animName_: Option<String>,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOf_play_tennis_swing_anim {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_tennis_swing_anim(
            ped_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_play_tennis_swing_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stunt_jump_set(&self, p0_: i32) -> ResultOf_enable_stunt_jump_set {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::enable_stunt_jump_set(
            p0_,
        );
        
        
        ResultOf_enable_stunt_jump_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_shoot_single_bullet_between_coords_ignore_entity(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weaponHash_: u32,
ownerPed_: u32,
isAudible_: bool,
isInvisible_: bool,
speed_: f32,
entity_: u32,
p14_: i32) -> ResultOf_shoot_single_bullet_between_coords_ignore_entity {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weaponHash_ = weaponHash_;
let mut ownerPed_ = ownerPed_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut speed_ = speed_;
let mut entity_ = entity_;
let mut p14_ = p14_;
        let success = sdk::natives::shoot_single_bullet_between_coords_ignore_entity(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weaponHash_,
ownerPed_,
isAudible_,
isInvisible_,
speed_,
entity_,
p14_,
        );
        
        
        ResultOf_shoot_single_bullet_between_coords_ignore_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_prevent_arrest_state_this_frame(&self, ) -> ResultOf_prevent_arrest_state_this_frame {
    unsafe {
        
        let success = sdk::natives::prevent_arrest_state_this_frame(
            
        );
        
        
        ResultOf_prevent_arrest_state_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_response_num_peds_to_spawn(&self, p0_: i32,
p1_: i32) -> ResultOf_set_wanted_response_num_peds_to_spawn {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_wanted_response_num_peds_to_spawn(
            p0_,
p1_,
        );
        
        
        ResultOf_set_wanted_response_num_peds_to_spawn {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_obscured_by_a_mission_entity(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOf_is_point_obscured_by_a_mission_entity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::is_point_obscured_by_a_mission_entity(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_is_point_obscured_by_a_mission_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_restart_game(&self, ) -> ResultOf_restart_game {
    unsafe {
        
        let success = sdk::natives::restart_game(
            
        );
        
        
        ResultOf_restart_game {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_system_time_step(&self, ) -> ResultOf_get_system_time_step {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_system_time_step(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_system_time_step {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_pop_multiplier_sphere(&self, id_: i32,
p1_: bool) -> ResultOf_remove_pop_multiplier_sphere {
    unsafe {
        let mut id_ = id_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_pop_multiplier_sphere(
            id_,
p1_,
        );
        
        
        ResultOf_remove_pop_multiplier_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_stunt_jump(&self, ) -> ResultOf_cancel_stunt_jump {
    unsafe {
        
        let success = sdk::natives::cancel_stunt_jump(
            
        );
        
        
        ResultOf_cancel_stunt_jump {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_bit(&self, address_: i32,
offset_: i32) -> ResultOf_clear_bit {
    unsafe {
        let mut address_ = Default::default();
let mut offset_ = offset_;
        let success = sdk::natives::clear_bit(
            &mut address_,
offset_,
        );
        let address_ = address_;
        
        ResultOf_clear_bit {
            success,
            ret: (),
            address_
        }
    }
}

    fn native_has_resumed_from_suspend(&self, ) -> ResultOf_has_resumed_from_suspend {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_resumed_from_suspend(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_resumed_from_suspend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_swung(&self, ped_: u32) -> ResultOf_get_tennis_swing_anim_swung {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_swung(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_tennis_swing_anim_swung {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui_started_end_user_benchmark(&self, ) -> ResultOf_ui_started_end_user_benchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ui_started_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ui_started_end_user_benchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_action_start_with_command_line(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOf_activity_feed_action_start_with_command_line {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::activity_feed_action_start_with_command_line(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_action_start_with_command_line {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wind_direction(&self, direction_: f32) -> ResultOf_set_wind_direction {
    unsafe {
        let mut direction_ = direction_;
        let success = sdk::natives::set_wind_direction(
            direction_,
        );
        
        
        ResultOf_set_wind_direction {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_save_struct(&self, ) -> ResultOf_stop_save_struct {
    unsafe {
        
        let success = sdk::natives::stop_save_struct(
            
        );
        
        
        ResultOf_stop_save_struct {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_mission_repeat_save_for_benchmark_test(&self, ) -> ResultOf_queue_mission_repeat_save_for_benchmark_test {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_save_for_benchmark_test(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_queue_mission_repeat_save_for_benchmark_test {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_dispatch_time_between_spawn_attempts(&self, p0_: i32) -> ResultOf_reset_dispatch_time_between_spawn_attempts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::reset_dispatch_time_between_spawn_attempts(
            p0_,
        );
        
        
        ResultOf_reset_dispatch_time_between_spawn_attempts {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_resources_allocated_to_wanted_level(&self, dispatchService_: i32) -> ResultOf_get_number_resources_allocated_to_wanted_level {
    unsafe {
        let mut native_return = Default::default();
let mut dispatchService_ = dispatchService_;
        let success = sdk::natives::get_number_resources_allocated_to_wanted_level(
            &mut native_return,
dispatchService_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_resources_allocated_to_wanted_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_quit_game(&self, ) -> ResultOf_quit_game {
    unsafe {
        
        let success = sdk::natives::quit_game(
            
        );
        
        
        ResultOf_quit_game {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_add_literal_substring_to_caption(&self, p0_: Option<String>) -> ResultOf_activity_feed_add_literal_substring_to_caption {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_add_literal_substring_to_caption(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_activity_feed_add_literal_substring_to_caption {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_content_id_index(&self, contentId_: u32) -> ResultOf_get_content_id_index {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = contentId_;
        let success = sdk::natives::get_content_id_index(
            &mut native_return,
contentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_content_id_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_type_now_persist(&self, weatherType_: Option<String>) -> ResultOf_set_weather_type_now_persist {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
        let success = sdk::natives::set_weather_type_now_persist(
            weatherType_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_weather_type_now_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_text_label_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_text_label_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_wind_speed(&self, speed_: f32) -> ResultOf_set_wind_speed {
    unsafe {
        let mut speed_ = speed_;
        let success = sdk::natives::set_wind_speed(
            speed_,
        );
        
        
        ResultOf_set_wind_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_type_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: i32,
ownedByPlayer_: bool) -> ResultOf_is_projectile_type_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
let mut ownedByPlayer_ = ownedByPlayer_;
        let success = sdk::natives::is_projectile_type_in_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
ownedByPlayer_,
        );
        let native_return = native_return;
        
        ResultOf_is_projectile_type_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_absi(&self, value_: i32) -> ResultOf_absi {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::absi(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_absi {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_using_mission_creator(&self, toggle_: bool) -> ResultOf_using_mission_creator {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::using_mission_creator(
            toggle_,
        );
        
        
        ResultOf_using_mission_creator {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_distance_between_coords(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
useZ_: bool) -> ResultOf_get_distance_between_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut useZ_ = useZ_;
        let success = sdk::natives::get_distance_between_coords(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
useZ_,
        );
        let native_return = native_return;
        
        ResultOf_get_distance_between_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_string_null(&self, string_: Option<String>) -> ResultOf_is_string_null {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::is_string_null(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_string_null {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_mwc_int_in_range(&self, startRange_: i32,
endRange_: i32) -> ResultOf_get_random_mwc_int_in_range {
    unsafe {
        let mut native_return = Default::default();
let mut startRange_ = startRange_;
let mut endRange_ = endRange_;
        let success = sdk::natives::get_random_mwc_int_in_range(
            &mut native_return,
startRange_,
endRange_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_mwc_int_in_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_slerp_near_quaternion(&self, t_: f32,
x_: f32,
y_: f32,
z_: f32,
w_: f32,
x1_: f32,
y1_: f32,
z1_: f32,
w1_: f32,
outX_: f32,
outY_: f32,
outZ_: f32,
outW_: f32) -> ResultOf_slerp_near_quaternion {
    unsafe {
        let mut t_ = t_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut w_ = w_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut w1_ = w1_;
let mut outX_ = Default::default();
let mut outY_ = Default::default();
let mut outZ_ = Default::default();
let mut outW_ = Default::default();
        let success = sdk::natives::slerp_near_quaternion(
            &mut outX_,
&mut outY_,
&mut outZ_,
&mut outW_,
t_,
x_,
y_,
z_,
w_,
x1_,
y1_,
z1_,
w1_,
        );
        let outX_ = outX_;
let outY_ = outY_;
let outZ_ = outZ_;
let outW_ = outW_;
        
        ResultOf_slerp_near_quaternion {
            success,
            ret: (),
            outX_,
outY_,
outZ_,
outW_
        }
    }
}

    fn native_set_clouds_alpha(&self, opacity_: f32) -> ResultOf_set_clouds_alpha {
    unsafe {
        let mut opacity_ = opacity_;
        let success = sdk::natives::set_clouds_alpha(
            opacity_,
        );
        
        
        ResultOf_set_clouds_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_curr_weather_state(&self, weatherType1_: u32,
weatherType2_: u32,
percentWeather2_: f32) -> ResultOf_get_curr_weather_state {
    unsafe {
        let mut weatherType1_ = Default::default();
let mut weatherType2_ = Default::default();
let mut percentWeather2_ = Default::default();
        let success = sdk::natives::get_curr_weather_state(
            &mut weatherType1_,
&mut weatherType2_,
&mut percentWeather2_,
        );
        let weatherType1_ = weatherType1_;
let weatherType2_ = weatherType2_;
let percentWeather2_ = percentWeather2_;
        
        ResultOf_get_curr_weather_state {
            success,
            ret: (),
            weatherType1_,
weatherType2_,
percentWeather2_
        }
    }
}

    fn native_set_fade_in_after_load(&self, toggle_: bool) -> ResultOf_set_fade_in_after_load {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_in_after_load(
            toggle_,
        );
        
        
        ResultOf_set_fade_in_after_load {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_line_plane_intersection(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32) -> ResultOf_get_line_plane_intersection {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = Default::default();
        let success = sdk::natives::get_line_plane_intersection(
            &mut native_return,
&mut p12_,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
        );
        let native_return = native_return;
let p12_ = p12_;
        
        ResultOf_get_line_plane_intersection {
            success,
            ret: native_return,
            p12_
        }
    }
}

    fn native_force_lightning_flash(&self, ) -> ResultOf_force_lightning_flash {
    unsafe {
        
        let success = sdk::natives::force_lightning_flash(
            
        );
        
        
        ResultOf_force_lightning_flash {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_xbox360_version(&self, ) -> ResultOf_is_xbox360_version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_xbox360_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_xbox360_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_oceanwaveminamplitude(&self, minAmplitude_: f32) -> ResultOf_water_override_set_oceanwaveminamplitude {
    unsafe {
        let mut minAmplitude_ = minAmplitude_;
        let success = sdk::natives::water_override_set_oceanwaveminamplitude(
            minAmplitude_,
        );
        
        
        ResultOf_water_override_set_oceanwaveminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_sce_platform(&self, ) -> ResultOf_is_sce_platform {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_sce_platform(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_sce_platform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_freeze_flags(&self, p0_: bool) -> ResultOf_override_freeze_flags {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::override_freeze_flags(
            p0_,
        );
        
        
        ResultOf_override_freeze_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label_63_to_save(&self, p0_: i32,
name_: Option<String>) -> ResultOf_register_text_label_63_to_save {
    unsafe {
        let mut p0_ = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_63_to_save(
            &mut p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = p0_;
        
        ResultOf_register_text_label_63_to_save {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_ticker_johnmarston_is_done(&self, ) -> ResultOf_set_ticker_johnmarston_is_done {
    unsafe {
        
        let success = sdk::natives::set_ticker_johnmarston_is_done(
            
        );
        
        
        ResultOf_set_ticker_johnmarston_is_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_overtime_persist(&self, weatherType_: Option<String>,
time_: f32) -> ResultOf_set_weather_type_overtime_persist {
    unsafe {
        let mut weatherType_ = sdk_helpers::create_c_string_ptr(weatherType_);
let mut time_ = time_;
        let success = sdk::natives::set_weather_type_overtime_persist(
            weatherType_.as_ref().unwrap(),
time_,
        );
        
        
        ResultOf_set_weather_type_overtime_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_show_optional_stunt_jump_camera(&self, toggle_: bool) -> ResultOf_toggle_show_optional_stunt_jump_camera {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_show_optional_stunt_jump_camera(
            toggle_,
        );
        
        
        ResultOf_toggle_show_optional_stunt_jump_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_cloud_hat(&self, name_: Option<String>,
transitionTime_: f32) -> ResultOf_load_cloud_hat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut transitionTime_ = transitionTime_;
        let success = sdk::natives::load_cloud_hat(
            name_.as_ref().unwrap(),
transitionTime_,
        );
        
        
        ResultOf_load_cloud_hat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_frame_count(&self, ) -> ResultOf_get_frame_count {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_frame_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_frame_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_free_stacks_of_this_size(&self, stackSize_: i32) -> ResultOf_get_number_of_free_stacks_of_this_size {
    unsafe {
        let mut native_return = Default::default();
let mut stackSize_ = stackSize_;
        let success = sdk::natives::get_number_of_free_stacks_of_this_size(
            &mut native_return,
stackSize_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_free_stacks_of_this_size {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sniper_bullet_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_is_sniper_bullet_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_sniper_bullet_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_sniper_bullet_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_explosive_melee_this_frame(&self, player_: u32) -> ResultOf_set_explosive_melee_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_explosive_melee_this_frame(
            player_,
        );
        
        
        ResultOf_set_explosive_melee_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate_selfie_mode(&self, toggle_: bool) -> ResultOf_cell_cam_activate_selfie_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_cam_activate_selfie_mode(
            toggle_,
        );
        
        
        ResultOf_cell_cam_activate_selfie_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_roll_offset(&self, roll_: f32) -> ResultOf_cell_cam_set_selfie_mode_roll_offset {
    unsafe {
        let mut roll_ = roll_;
        let success = sdk::natives::cell_cam_set_selfie_mode_roll_offset(
            roll_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_roll_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_side_offset_scaling(&self, p0_: f32) -> ResultOf_cell_cam_set_selfie_mode_side_offset_scaling {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cell_cam_set_selfie_mode_side_offset_scaling(
            p0_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_side_offset_scaling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_rotation(&self, rotation_: Option<shared::Vector3>,
p1_: u32) -> ResultOf_get_mobile_phone_rotation {
    unsafe {
        let mut rotation_ = sdk_helpers::create_vector3_ptr(rotation_);
let mut p1_ = p1_;
        let success = sdk::natives::get_mobile_phone_rotation(
            rotation_.pin_mut(),
p1_,
        );
        let rotation_ = sdk_helpers::read_cpp_vector3(rotation_);
        
        ResultOf_get_mobile_phone_rotation {
            success,
            ret: (),
            rotation_
        }
    }
}

    fn native_cell_cam_set_selfie_mode_vert_pan_offset(&self, vertPan_: f32) -> ResultOf_cell_cam_set_selfie_mode_vert_pan_offset {
    unsafe {
        let mut vertPan_ = vertPan_;
        let success = sdk::natives::cell_cam_set_selfie_mode_vert_pan_offset(
            vertPan_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_vert_pan_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mobile_phone_dof_state(&self, toggle_: bool) -> ResultOf_set_mobile_phone_dof_state {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mobile_phone_dof_state(
            toggle_,
        );
        
        
        ResultOf_set_mobile_phone_dof_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_mobile_phone(&self, ) -> ResultOf_destroy_mobile_phone {
    unsafe {
        
        let success = sdk::natives::destroy_mobile_phone(
            
        );
        
        
        ResultOf_destroy_mobile_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_is_char_visible_no_face_check(&self, entity_: u32) -> ResultOf_cell_cam_is_char_visible_no_face_check {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::cell_cam_is_char_visible_no_face_check(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_cell_cam_is_char_visible_no_face_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cell_horizontal_mode_toggle(&self, toggle_: bool) -> ResultOf_cell_horizontal_mode_toggle {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_horizontal_mode_toggle(
            toggle_,
        );
        
        
        ResultOf_cell_horizontal_mode_toggle {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_pitch_offset(&self, pitch_: f32) -> ResultOf_cell_cam_set_selfie_mode_head_pitch_offset {
    unsafe {
        let mut pitch_ = pitch_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_pitch_offset(
            pitch_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_head_pitch_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_horz_pan_offset(&self, horizontalPan_: f32) -> ResultOf_cell_cam_set_selfie_mode_horz_pan_offset {
    unsafe {
        let mut horizontalPan_ = horizontalPan_;
        let success = sdk::natives::cell_cam_set_selfie_mode_horz_pan_offset(
            horizontalPan_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_horz_pan_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_position(&self, position_: Option<shared::Vector3>) -> ResultOf_get_mobile_phone_position {
    unsafe {
        let mut position_ = sdk_helpers::create_vector3_ptr(position_);
        let success = sdk::natives::get_mobile_phone_position(
            position_.pin_mut(),
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOf_get_mobile_phone_position {
            success,
            ret: (),
            position_
        }
    }
}

    fn native_set_mobile_phone_position(&self, posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_mobile_phone_position {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_mobile_phone_position(
            posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_mobile_phone_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_set_input(&self, direction_: i32) -> ResultOf_cell_set_input {
    unsafe {
        let mut direction_ = direction_;
        let success = sdk::natives::cell_set_input(
            direction_,
        );
        
        
        ResultOf_cell_set_input {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate_shallow_dof_mode(&self, toggle_: bool) -> ResultOf_cell_cam_activate_shallow_dof_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_cam_activate_shallow_dof_mode(
            toggle_,
        );
        
        
        ResultOf_cell_cam_activate_shallow_dof_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_mobile_phone(&self, phoneType_: i32) -> ResultOf_create_mobile_phone {
    unsafe {
        let mut phoneType_ = phoneType_;
        let success = sdk::natives::create_mobile_phone(
            phoneType_,
        );
        
        
        ResultOf_create_mobile_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_distance_scaling(&self, distanceScaling_: f32) -> ResultOf_cell_cam_set_selfie_mode_distance_scaling {
    unsafe {
        let mut distanceScaling_ = distanceScaling_;
        let success = sdk::natives::cell_cam_set_selfie_mode_distance_scaling(
            distanceScaling_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_distance_scaling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_render_id(&self, renderId_: i32) -> ResultOf_get_mobile_phone_render_id {
    unsafe {
        let mut renderId_ = Default::default();
        let success = sdk::natives::get_mobile_phone_render_id(
            &mut renderId_,
        );
        let renderId_ = renderId_;
        
        ResultOf_get_mobile_phone_render_id {
            success,
            ret: (),
            renderId_
        }
    }
}

    fn native_set_mobile_phone_rotation(&self, rotX_: f32,
rotY_: f32,
rotZ_: f32,
p3_: i32) -> ResultOf_set_mobile_phone_rotation {
    unsafe {
        let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut p3_ = p3_;
        let success = sdk::natives::set_mobile_phone_rotation(
            rotX_,
rotY_,
rotZ_,
p3_,
        );
        
        
        ResultOf_set_mobile_phone_rotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_phone_be_seen_on_screen(&self, ) -> ResultOf_can_phone_be_seen_on_screen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_phone_be_seen_on_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_phone_be_seen_on_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mobile_phone_scale(&self, scale_: f32) -> ResultOf_set_mobile_phone_scale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_mobile_phone_scale(
            scale_,
        );
        
        
        ResultOf_set_mobile_phone_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_yaw_offset(&self, yaw_: f32) -> ResultOf_cell_cam_set_selfie_mode_head_yaw_offset {
    unsafe {
        let mut yaw_ = yaw_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_yaw_offset(
            yaw_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_head_yaw_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_roll_offset(&self, roll_: f32) -> ResultOf_cell_cam_set_selfie_mode_head_roll_offset {
    unsafe {
        let mut roll_ = roll_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_roll_offset(
            roll_,
        );
        
        
        ResultOf_cell_cam_set_selfie_mode_head_roll_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_script_is_moving_mobile_phone_offscreen(&self, toggle_: bool) -> ResultOf_script_is_moving_mobile_phone_offscreen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::script_is_moving_mobile_phone_offscreen(
            toggle_,
        );
        
        
        ResultOf_script_is_moving_mobile_phone_offscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate(&self, p0_: bool,
p1_: bool) -> ResultOf_cell_cam_activate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::cell_cam_activate(
            p0_,
p1_,
        );
        
        
        ResultOf_cell_cam_activate {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pay_business_supplies(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pay_business_supplies {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pay_business_supplies(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pay_business_supplies {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_wage_payment_bonus(&self, amount_: i32) -> ResultOf_network_earn_wage_payment_bonus {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_wage_payment_bonus(
            amount_,
        );
        
        
        ResultOf_network_earn_wage_payment_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_rockstar(&self, amount_: i32) -> ResultOf_network_earn_from_rockstar {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_rockstar(
            amount_,
        );
        
        
        ResultOf_network_earn_from_rockstar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_vehicle_requested(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_vehicle_requested {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_vehicle_requested(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_vehicle_requested {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_arena(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: Option<String>) -> ResultOf_network_spend_upgrade_arena {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::network_spend_upgrade_arena(
            amount_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_spend_upgrade_arena {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_delete_character(&self, characterSlot_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_delete_character {
    unsafe {
        let mut characterSlot_ = characterSlot_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_delete_character(
            characterSlot_,
p1_,
p2_,
        );
        
        
        ResultOf_network_delete_character {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_order_warehouse_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_order_warehouse_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_order_warehouse_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_order_warehouse_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_time_trial_win(&self, amount_: i32) -> ResultOf_network_earn_casino_time_trial_win {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_time_trial_win(
            amount_,
        );
        
        
        ResultOf_network_earn_casino_time_trial_win {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_goon(&self, p0_: i32,
p1_: i32,
amount_: i32) -> ResultOf_network_spend_goon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
        let success = sdk::natives::network_spend_goon(
            p0_,
p1_,
amount_,
        );
        
        
        ResultOf_network_spend_goon {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_boss(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_boss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_boss(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_boss {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_transfer_cash(&self, amount_: i32) -> ResultOf_network_get_can_transfer_cash {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_get_can_transfer_cash(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_can_transfer_cash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_casino_mission_participation(&self, amount_: i32) -> ResultOf_network_earn_casino_mission_participation {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_mission_participation(
            amount_,
        );
        
        
        ResultOf_network_earn_casino_mission_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_hub_sell(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_from_business_hub_sell {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_business_hub_sell(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_from_business_hub_sell {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_uprade_bunker(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_uprade_bunker {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_uprade_bunker(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_uprade_bunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_agency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_tiltrotor(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_buy_tiltrotor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_tiltrotor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_tiltrotor {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_snack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pa_service_snack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_snack(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pa_service_snack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_challenge(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_challenge {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_challenge(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_challenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_base(&self, amount_: i32,
baseNameHash_: u32) -> ResultOf_network_earn_sell_base {
    unsafe {
        let mut amount_ = amount_;
let mut baseNameHash_ = baseNameHash_;
        let success = sdk::natives::network_earn_sell_base(
            amount_,
baseNameHash_,
        );
        
        
        ResultOf_network_earn_sell_base {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_career_progression(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_arena_career_progression {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_arena_career_progression(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_arena_career_progression {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_heli_pickup(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pa_heli_pickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_heli_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pa_heli_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_upgrade_acid_lab_equipment(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_upgrade_acid_lab_equipment {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_upgrade_acid_lab_equipment(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_upgrade_acid_lab_equipment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_heli(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pa_service_heli {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_heli(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pa_service_heli {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_first_time_bonus(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_first_time_bonus {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_first_time_bonus(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_first_time_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_apartment_utilities(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: i32) -> ResultOf_network_spend_apartment_utilities {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = Default::default();
        let success = sdk::natives::network_spend_apartment_utilities(
            &mut data_,
amount_,
p1_,
p2_,
        );
        let data_ = data_;
        
        ResultOf_network_spend_apartment_utilities {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_earn_doomsday_finale_bonus(&self, amount_: i32,
vehicleHash_: u32) -> ResultOf_network_earn_doomsday_finale_bonus {
    unsafe {
        let mut amount_ = amount_;
let mut vehicleHash_ = vehicleHash_;
        let success = sdk::natives::network_earn_doomsday_finale_bonus(
            amount_,
vehicleHash_,
        );
        
        
        ResultOf_network_earn_doomsday_finale_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_bunker(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_buy_bunker {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_bunker(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_bunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_bounty(&self, amount_: i32,
gamerHandle_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_from_bounty {
    unsafe {
        let mut amount_ = amount_;
let mut gamerHandle_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_from_bounty(
            &mut gamerHandle_,
&mut p2_,
amount_,
p3_,
        );
        let gamerHandle_ = gamerHandle_;
let p2_ = p2_;
        
        ResultOf_network_earn_from_bounty {
            success,
            ret: (),
            gamerHandle_,
p2_
        }
    }
}

    fn native__network_earn_source_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_source_participation_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_source_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_source_participation_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_pvc_transfer_balance(&self, ) -> ResultOf_network_get_pvc_transfer_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_pvc_transfer_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_pvc_transfer_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_car_club_membership(&self, amount1_: i32,
p1_: i32,
p2_: i32,
amount2_: i32,
p4_: i32) -> ResultOf_network_spend_car_club_membership {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut amount2_ = amount2_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_car_club_membership(
            amount1_,
p1_,
p2_,
amount2_,
p4_,
        );
        
        
        ResultOf_network_spend_car_club_membership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_contract(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_award_contract {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_contract(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_award_contract {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_arena_join_spectator(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_arena_join_spectator {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_arena_join_spectator(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_arena_join_spectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet(&self, hash_: u32) -> ResultOf_network_casino_can_bet {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::network_casino_can_bet(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_can_bet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_gangops_wages_bonus(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_gangops_wages_bonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_gangops_wages_bonus(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_gangops_wages_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_tiltrotor(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_tiltrotor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_tiltrotor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_tiltrotor {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_taxi(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32,
p4_: i32) -> ResultOf_network_spent_taxi {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_taxi(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spent_taxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_deduct_cash(&self, amount_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOf_network_deduct_cash {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_deduct_cash(
            amount_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_network_deduct_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_agency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_agency(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_service_earn_gangops_rival_delivery(&self, earnedMoney_: i32) -> ResultOf_network_service_earn_gangops_rival_delivery {
    unsafe {
        let mut earnedMoney_ = earnedMoney_;
        let success = sdk::natives::network_service_earn_gangops_rival_delivery(
            earnedMoney_,
        );
        
        
        ResultOf_network_service_earn_gangops_rival_delivery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_bounty_hunter_mission(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spend_bounty_hunter_mission {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_bounty_hunter_mission(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_bounty_hunter_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_finale(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_gangops_finale {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_gangops_finale(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_gangops_finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_share_job_cash(&self, ) -> ResultOf_network_can_share_job_cash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_share_job_cash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_share_job_cash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_betting(&self, amount_: i32,
p1_: i32,
matchId_: Option<String>,
p3_: bool,
p4_: bool) -> ResultOf_network_spent_betting {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut matchId_ = sdk_helpers::create_c_string_ptr(matchId_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_betting(
            amount_,
p1_,
matchId_.as_ref().unwrap(),
p3_,
p4_,
        );
        
        
        ResultOf_network_spent_betting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_nightclub_and_warehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_nightclub_and_warehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_fmbb_boss_work(&self, p0_: i32) -> ResultOf_network_earn_from_fmbb_boss_work {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_fmbb_boss_work(
            p0_,
        );
        
        
        ResultOf_network_earn_from_fmbb_boss_work {
            success,
            ret: (),
            
        }
    }
}

    fn native_process_cash_gift(&self, p0_: i32,
p1_: i32,
p2_: Option<String>) -> ResultOf_process_cash_gift {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::process_cash_gift(
            native_return.pin_mut(),
&mut p0_,
&mut p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_process_cash_gift {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_spent_upgrade_hacker_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_hacker_truck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_hacker_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_hacker_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_rival_delivery(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_fixer_rival_delivery {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_rival_delivery(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_fixer_rival_delivery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_elite(&self, amount_: i32,
p1_: Option<String>,
actIndex_: i32) -> ResultOf_network_earn_gangops_elite {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut actIndex_ = actIndex_;
        let success = sdk::natives::network_earn_gangops_elite(
            amount_,
p1_.as_ref().unwrap(),
actIndex_,
        );
        
        
        ResultOf_network_earn_gangops_elite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cash_drop(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_cash_drop {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_cash_drop(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_cash_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_job_skip(&self, amount_: i32,
matchId_: Option<String>,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_job_skip {
    unsafe {
        let mut amount_ = amount_;
let mut matchId_ = sdk_helpers::create_c_string_ptr(matchId_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_job_skip(
            amount_,
matchId_.as_ref().unwrap(),
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_job_skip {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_upgrade_acid_lab_scoop(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf__network_spend_upgrade_acid_lab_scoop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_upgrade_acid_lab_scoop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_upgrade_acid_lab_scoop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bounty(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_bounty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_bounty(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_bounty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_repair_cost(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spend_gangops_repair_cost {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_gangops_repair_cost(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_gangops_repair_cost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_hacker_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_hacker_truck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_hacker_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_hacker_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_office_garage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_office_garage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_office_garage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_office_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_challenge_win(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOf_network_earn_from_challenge_win {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_challenge_win(
            &mut p1_,
p0_,
p2_,
        );
        let p1_ = p1_;
        
        ResultOf_network_earn_from_challenge_win {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_earn_biker_shop(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_biker_shop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_biker_shop(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_biker_shop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gunrunning(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_gunrunning {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gunrunning(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_gunrunning {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_wages(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_gangops_wages {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_gangops_wages(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_gangops_wages {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_trade_impexp_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_trade_impexp_warehouse_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_trade_impexp_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_trade_impexp_warehouse_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_contraband_mission(&self, p0_: i32,
p1_: i32,
p2_: u32,
p3_: bool,
p4_: bool) -> ResultOf_network_buy_contraband_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_contraband_mission(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_buy_contraband_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_hangar_trade(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_from_hangar_trade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_hangar_trade(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_from_hangar_trade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_impexp_warehouse_property(&self, amount_: i32,
data_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_purchase_impexp_warehouse_property {
    unsafe {
        let mut amount_ = amount_;
let mut data_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_impexp_warehouse_property(
            &mut data_,
amount_,
p2_,
p3_,
        );
        let data_ = data_;
        
        ResultOf_network_spent_purchase_impexp_warehouse_property {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_spend_buy_casino(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: i32) -> ResultOf_network_spend_buy_casino {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = Default::default();
        let success = sdk::natives::network_spend_buy_casino(
            &mut data_,
amount_,
p1_,
p2_,
        );
        let data_ = data_;
        
        ResultOf_network_spend_buy_casino {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_earn_wage_payment(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_wage_payment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_wage_payment(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_wage_payment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_truck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_autoshop_business(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_autoshop_business {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_autoshop_business(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_autoshop_business {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_contract(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_agency_contract {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_agency_contract(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_agency_contract {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet_pvc(&self, ) -> ResultOf_network_casino_can_bet_pvc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_casino_can_bet_pvc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_can_bet_pvc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_bet(&self, amount_: i32) -> ResultOf_network_can_bet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_can_bet(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_network_can_bet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_casino_buy_chips(&self, p0_: i32,
p1_: i32) -> ResultOf_network_casino_buy_chips {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_casino_buy_chips(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_buy_chips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_initialize_cash(&self, wallet_: i32,
bank_: i32) -> ResultOf_network_initialize_cash {
    unsafe {
        let mut wallet_ = wallet_;
let mut bank_ = bank_;
        let success = sdk::natives::network_initialize_cash(
            wallet_,
bank_,
        );
        
        
        ResultOf_network_initialize_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_base(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_base {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_base(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_base {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_warehouse(&self, amount_: i32,
id_: i32) -> ResultOf_network_earn_from_warehouse {
    unsafe {
        let mut amount_ = amount_;
let mut id_ = id_;
        let success = sdk::natives::network_earn_from_warehouse(
            amount_,
id_,
        );
        
        
        ResultOf_network_earn_from_warehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_heist_awards(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_earn_casino_heist_awards {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_casino_heist_awards(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_earn_casino_heist_awards {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_personal_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32) -> ResultOf_network_earn_from_personal_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::network_earn_from_personal_vehicle(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOf_network_earn_from_personal_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_arena(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: Option<String>) -> ResultOf_network_spend_buy_arena {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::network_spend_buy_arena(
            amount_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_spend_buy_arena {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_juggalo_story_mission_participation(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_juggalo_story_mission_participation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_juggalo_story_mission_participation(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_juggalo_story_mission_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_impexp_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_impexp_warehouse_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_impexp_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_impexp_warehouse_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_battle(&self, p0_: i32) -> ResultOf_network_earn_from_business_battle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_business_battle(
            p0_,
        );
        
        
        ResultOf_network_earn_from_business_battle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_not_badsport(&self, amount_: i32) -> ResultOf_network_earn_from_not_badsport {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_not_badsport(
            amount_,
        );
        
        
        ResultOf_network_earn_from_not_badsport {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_rename_acid_product(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_rename_acid_product {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_rename_acid_product(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_rename_acid_product {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sightseeing_reward(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_sightseeing_reward {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_sightseeing_reward(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_sightseeing_reward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_holdups(&self, amount_: i32) -> ResultOf_network_earn_from_holdups {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_holdups(
            amount_,
        );
        
        
        ResultOf_network_earn_from_holdups {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_casino(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: i32) -> ResultOf_network_spend_upgrade_casino {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = Default::default();
        let success = sdk::natives::network_spend_upgrade_casino(
            &mut data_,
amount_,
p1_,
p2_,
        );
        let data_ = data_;
        
        ResultOf_network_spend_upgrade_casino {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_spend_casino_heist_skip_mission(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_casino_heist_skip_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_casino_heist_skip_mission(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_casino_heist_skip_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_upgrade_acid_lab_mines(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf__network_spend_upgrade_acid_lab_mines {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_upgrade_acid_lab_mines(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_upgrade_acid_lab_mines {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_upgrade_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_upgrade_arcade(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_upgrade_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_base(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_buy_base {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_base(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_base {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_pvc_balance(&self, ) -> ResultOf_network_get_pvc_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_pvc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_pvc_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_daily_objective_event(&self, amount_: i32) -> ResultOf_network_earn_daily_objective_event {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_daily_objective_event(
            amount_,
        );
        
        
        ResultOf_network_earn_daily_objective_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_ai_target_kill(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_from_ai_target_kill {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_ai_target_kill(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_from_ai_target_kill {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_boat_pickup(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_boat_pickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_boat_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_boat_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_vehicle(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_daily_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_daily_vehicle(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_daily_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_beach_party(&self, p0_: i32) -> ResultOf_network_spend_beach_party {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_spend_beach_party(
            p0_,
        );
        
        
        ResultOf_network_spend_beach_party {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectables_action_figures(&self, amount_: i32) -> ResultOf_network_earn_collectables_action_figures {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_collectables_action_figures(
            amount_,
        );
        
        
        ResultOf_network_earn_collectables_action_figures {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_upgrade_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_arcade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_upgrade_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_purchase_club_house(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_purchase_club_house {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_purchase_club_house(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_purchase_club_house {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_mission_reward(&self, amount_: i32) -> ResultOf_network_earn_casino_mission_reward {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_mission_reward(
            amount_,
        );
        
        
        ResultOf_network_earn_casino_mission_reward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_receive_player_jobshare_cash(&self, value_: i32,
gamerHandle_: i32) -> ResultOf_network_receive_player_jobshare_cash {
    unsafe {
        let mut value_ = value_;
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_receive_player_jobshare_cash(
            &mut gamerHandle_,
value_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_receive_player_jobshare_cash {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_yohan_source_goods(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_yohan_source_goods {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_yohan_source_goods(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_yohan_source_goods {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_short_trip(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_award_short_trip {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_short_trip(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_award_short_trip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_target_refund(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_target_refund {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_target_refund(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_target_refund {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_employ_assassins(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_employ_assassins {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_employ_assassins(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_employ_assassins {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_jukebox(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_jukebox {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_jukebox(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_jukebox {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectable_completed_collection(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_collectable_completed_collection {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_collectable_completed_collection(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_collectable_completed_collection {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_balance(&self, ) -> ResultOf_network_get_vc_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_vc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_vc_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_receive_player_cash(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_can_receive_player_cash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_can_receive_player_cash(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_network_can_receive_player_cash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_evc_balance(&self, ) -> ResultOf_network_get_evc_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_evc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_evc_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_ballistic_equipment(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_ballistic_equipment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_ballistic_equipment(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_ballistic_equipment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war_assassinate_target(&self, amount_: i32) -> ResultOf_network_earn_arena_war_assassinate_target {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_arena_war_assassinate_target(
            amount_,
        );
        
        
        ResultOf_network_earn_arena_war_assassinate_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_trip_skip(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spend_gangops_trip_skip {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_gangops_trip_skip(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_gangops_trip_skip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_change_appearance(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spent_change_appearance {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_change_appearance(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_change_appearance {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_pay_employee_wage(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_pay_employee_wage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_pay_employee_wage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_pay_employee_wage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_bend_job(&self, amount_: i32,
heistHash_: Option<String>) -> ResultOf_network_earn_from_bend_job {
    unsafe {
        let mut amount_ = amount_;
let mut heistHash_ = sdk_helpers::create_c_string_ptr(heistHash_);
        let success = sdk::natives::network_earn_from_bend_job(
            amount_,
heistHash_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_from_bend_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_hangar(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_hangar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_hangar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_hangar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arena_premium(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spend_arena_premium {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_arena_premium(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_arena_premium {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_suv_fst_trvl(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spend_suv_fst_trvl {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_suv_fst_trvl(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_suv_fst_trvl {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_prep(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_fixer_prep {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_prep(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_fixer_prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_arena_war {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_arena_war(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_arena_war {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_property(&self, cost_: i32,
propertyName_: u32,
p2_: bool,
p3_: bool) -> ResultOf_network_buy_property {
    unsafe {
        let mut cost_ = cost_;
let mut propertyName_ = propertyName_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_property(
            cost_,
propertyName_,
p2_,
p3_,
        );
        
        
        ResultOf_network_buy_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_nightclub_and_warehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_nightclub_and_warehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_safe(&self, p0_: i32) -> ResultOf_network_earn_agency_safe {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_agency_safe(
            p0_,
        );
        
        
        ResultOf_network_earn_agency_safe {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_business_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_business_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_spin_the_wheel_cash(&self, amount_: i32) -> ResultOf_network_earn_spin_the_wheel_cash {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_spin_the_wheel_cash(
            amount_,
        );
        
        
        ResultOf_network_earn_spin_the_wheel_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_job_bonus(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_from_job_bonus {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = Default::default();
        let success = sdk::natives::network_earn_from_job_bonus(
            &mut p1_,
&mut p2_,
p0_,
        );
        let p1_ = p1_;
let p2_ = p2_;
        
        ResultOf_network_earn_from_job_bonus {
            success,
            ret: (),
            p1_,
p2_
        }
    }
}

    fn native_network_spent_purchase_office_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_office_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_office_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_office_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_from_rockstar(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_from_rockstar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_from_rockstar(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_from_rockstar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cinema(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_cinema {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_cinema(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_cinema {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_smuggler_work(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_earn_from_smuggler_work {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_from_smuggler_work(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_earn_from_smuggler_work {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_submarine(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_network_spend_submarine {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_spend_submarine(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_network_spend_submarine {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_upgrade_agency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_upgrade_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_passive_mode(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_buy_passive_mode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_passive_mode(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_passive_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_reveal_players(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_buy_reveal_players {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_reveal_players(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_reveal_players {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_daily_objectives(&self, amount_: i32,
type_: Option<String>,
characterSlot_: i32) -> ResultOf_network_earn_from_daily_objectives {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = sdk_helpers::create_c_string_ptr(type_);
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_earn_from_daily_objectives(
            amount_,
type_.as_ref().unwrap(),
characterSlot_,
        );
        
        
        ResultOf_network_earn_from_daily_objectives {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_vc_withdrawal_successful(&self, p0_: i32) -> ResultOf_was_vc_withdrawal_successful {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::was_vc_withdrawal_successful(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_was_vc_withdrawal_successful {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_purchase_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_business_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_business_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_bank_wallet_balance(&self, ) -> ResultOf_network_get_string_bank_wallet_balance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::network_get_string_bank_wallet_balance(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_string_bank_wallet_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_arena_spectator_box(&self, amount_: i32,
type_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spend_arena_spectator_box {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = type_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_arena_spectator_box(
            amount_,
type_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_arena_spectator_box {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_cashing_out(&self, amount_: i32) -> ResultOf_network_earn_from_cashing_out {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_cashing_out(
            amount_,
        );
        
        
        ResultOf_network_earn_from_cashing_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_biker(&self, p0_: i32) -> ResultOf_network_earn_biker {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_biker(
            p0_,
        );
        
        
        ResultOf_network_earn_biker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_network_earn_casino_heist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_earn_casino_heist(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_network_earn_casino_heist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_spend_money2(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_network_can_spend_money2 {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = Default::default();
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_can_spend_money2(
            &mut native_return,
&mut p4_,
p0_,
p1_,
p2_,
p3_,
p5_,
p6_,
        );
        let native_return = native_return;
let p4_ = p4_;
        
        ResultOf_network_can_spend_money2 {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_earn_award_phone(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_award_phone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_phone(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_award_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_smokes(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_buy_smokes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_buy_smokes(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_buy_smokes {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_airstrike(&self, cost_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_buy_airstrike {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_airstrike(
            cost_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_buy_airstrike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_bank_balance(&self, ) -> ResultOf_network_get_vc_bank_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_vc_bank_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_vc_bank_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_gangops_cannon(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_gangops_cannon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_cannon(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_gangops_cannon {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_sell_acid(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_sell_acid {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_sell_acid(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_sell_acid {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_rdr_bonus(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_rdr_bonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_rdr_bonus(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_rdr_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_bounty(&self, amount_: i32,
victim_: u32,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOf_network_buy_bounty {
    unsafe {
        let mut amount_ = amount_;
let mut victim_ = victim_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_bounty(
            amount_,
victim_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_buy_bounty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_heli_pickup(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_heli_pickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_heli_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_heli_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_economy_has_fixed_crazy_numbers(&self, ) -> ResultOf_network_economy_has_fixed_crazy_numbers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_economy_has_fixed_crazy_numbers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_economy_has_fixed_crazy_numbers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_player_healthcare(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_player_healthcare {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_player_healthcare(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_player_healthcare {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_set_discount(&self, p0_: bool) -> ResultOf_network_spend_set_discount {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_spend_set_discount(
            p0_,
        );
        
        
        ResultOf_network_spend_set_discount {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_telescope(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_telescope {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_telescope(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_telescope {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_arrest_bail(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_arrest_bail {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_arrest_bail(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_arrest_bail {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_money_can_bet(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_money_can_bet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_money_can_bet(
            &mut native_return,
amount_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_money_can_bet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_heli_strike(&self, cost_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_buy_heli_strike {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_heli_strike(
            cost_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_buy_heli_strike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_request_job(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_request_job {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_request_job(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_request_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_manual_delete_character(&self, characterSlot_: i32) -> ResultOf_network_manual_delete_character {
    unsafe {
        let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_manual_delete_character(
            characterSlot_,
        );
        
        
        ResultOf_network_manual_delete_character {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_betting(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_from_betting {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_betting(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_from_betting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_collectable_completed_collection(&self, amount_: i32) -> ResultOf_network_earn_casino_collectable_completed_collection {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_collectable_completed_collection(
            amount_,
        );
        
        
        ResultOf_network_earn_casino_collectable_completed_collection {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_rename_acid_lab(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_rename_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_rename_acid_lab(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_rename_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_property(&self, amount_: i32,
propertyName_: u32) -> ResultOf_network_earn_from_property {
    unsafe {
        let mut amount_ = amount_;
let mut propertyName_ = propertyName_;
        let success = sdk::natives::network_earn_from_property(
            amount_,
propertyName_,
        );
        
        
        ResultOf_network_earn_from_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_destroying_contraband(&self, p0_: i32) -> ResultOf_network_earn_from_destroying_contraband {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_destroying_contraband(
            p0_,
        );
        
        
        ResultOf_network_earn_from_destroying_contraband {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectable_item(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_collectable_item {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_collectable_item(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_collectable_item {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_product(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_from_business_product {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_from_business_product(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_from_business_product {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_buy_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_arcade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_buy_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_nightclub_entry_fee(&self, player_: u32,
amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_nightclub_entry_fee {
    unsafe {
        let mut player_ = player_;
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_nightclub_entry_fee(
            player_,
amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_nightclub_entry_fee {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_generic(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_casino_generic {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_casino_generic(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_casino_generic {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_fixer_mission(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_award_fixer_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_fixer_mission(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_award_fixer_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_sub(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_upgrade_sub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_sub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_upgrade_sub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_buy_chips_pvc(&self, ) -> ResultOf_network_casino_can_buy_chips_pvc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_casino_can_buy_chips_pvc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_can_buy_chips_pvc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_fairground_ride(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOf_network_buy_fairground_ride {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_fairground_ride(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_buy_fairground_ride {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_prize_vehicle(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_sell_prize_vehicle {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_sell_prize_vehicle(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_sell_prize_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_office_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_office_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_office_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_office_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_sub(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_buy_sub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_sub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_buy_sub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_bike_shop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_bike_shop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_bike_shop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_bike_shop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_sell_bunker(&self, amount_: i32,
bunkerHash_: u32) -> ResultOf_network_earn_from_sell_bunker {
    unsafe {
        let mut amount_ = amount_;
let mut bunkerHash_ = bunkerHash_;
        let success = sdk::natives::network_earn_from_sell_bunker(
            amount_,
bunkerHash_,
        );
        
        
        ResultOf_network_earn_from_sell_bunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_car_club_bar(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spend_car_club_bar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_car_club_bar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_car_club_bar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_business_property_fees(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_business_property_fees {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_business_property_fees(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_business_property_fees {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_pay_match_entry_fee(&self, amount_: i32,
matchId_: Option<String>,
p2_: bool,
p3_: bool) -> ResultOf_network_pay_match_entry_fee {
    unsafe {
        let mut amount_ = amount_;
let mut matchId_ = sdk_helpers::create_c_string_ptr(matchId_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_pay_match_entry_fee(
            amount_,
matchId_.as_ref().unwrap(),
p2_,
p3_,
        );
        
        
        ResultOf_network_pay_match_entry_fee {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_interaction_menu_ability(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_interaction_menu_ability {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_interaction_menu_ability(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_interaction_menu_ability {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cargo_sourcing(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_network_spent_cargo_sourcing {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_spent_cargo_sourcing(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_network_spent_cargo_sourcing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_award(&self, amount_: i32,
hash_: u32) -> ResultOf_network_earn_casino_award {
    unsafe {
        let mut amount_ = amount_;
let mut hash_ = hash_;
        let success = sdk::natives::network_earn_casino_award(
            amount_,
hash_,
        );
        
        
        ResultOf_network_earn_casino_award {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_pay_amount_to_boss(&self, p0_: i32,
p1_: i32,
amount_: i32,
p3_: i32) -> ResultOf_can_pay_amount_to_boss {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
let mut p3_ = Default::default();
        let success = sdk::natives::can_pay_amount_to_boss(
            &mut native_return,
&mut p3_,
p0_,
p1_,
amount_,
        );
        let native_return = native_return;
let p3_ = p3_;
        
        ResultOf_can_pay_amount_to_boss {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native__network_earn_taxi_job(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_taxi_job {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_taxi_job(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_taxi_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_robbed_by_mugger(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_robbed_by_mugger {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_robbed_by_mugger(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_robbed_by_mugger {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_club_house(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_club_house {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_club_house(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_club_house {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_spin_the_wheel_payment(&self, amount_: i32,
p1_: i32,
p2_: bool) -> ResultOf_network_spend_spin_the_wheel_payment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_spin_the_wheel_payment(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_spin_the_wheel_payment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_earned_from_bank_and_wallets(&self, amount_: i32) -> ResultOf_network_spend_earned_from_bank_and_wallets {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_spend_earned_from_bank_and_wallets(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_network_spend_earned_from_bank_and_wallets {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_autoshop_modify(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_autoshop_modify {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_autoshop_modify(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_autoshop_modify {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_daily_stash_house_participation(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_daily_stash_house_participation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_daily_stash_house_participation(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_daily_stash_house_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_request_heist(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_request_heist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_request_heist(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_request_heist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_heist_award(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_heist_award {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_heist_award(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_heist_award {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pay_vehicle_insurance_premium(&self, amount_: i32,
vehicleModel_: u32,
gamerHandle_: i32,
notBankrupt_: bool,
hasTheMoney_: bool) -> ResultOf_network_spent_pay_vehicle_insurance_premium {
    unsafe {
        let mut amount_ = amount_;
let mut vehicleModel_ = vehicleModel_;
let mut gamerHandle_ = Default::default();
let mut notBankrupt_ = notBankrupt_;
let mut hasTheMoney_ = hasTheMoney_;
        let success = sdk::natives::network_spent_pay_vehicle_insurance_premium(
            &mut gamerHandle_,
amount_,
vehicleModel_,
notBankrupt_,
hasTheMoney_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_spent_pay_vehicle_insurance_premium {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_earn_from_gangattack_pickup(&self, amount_: i32) -> ResultOf_network_earn_from_gangattack_pickup {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_gangattack_pickup(
            amount_,
        );
        
        
        ResultOf_network_earn_from_gangattack_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_start_strand(&self, type_: i32,
amount_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spend_gangops_start_strand {
    unsafe {
        let mut type_ = type_;
let mut amount_ = amount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_start_strand(
            type_,
amount_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_gangops_start_strand {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_buy_mfgarage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_buy_mfgarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_buy_mfgarage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_buy_mfgarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_spend_from_bank(&self, amount_: i32) -> ResultOf_network_get_can_spend_from_bank {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_get_can_spend_from_bank(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_can_spend_from_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_backup_gang(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_buy_backup_gang {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_backup_gang(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_buy_backup_gang {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_wallet_balance(&self, characterSlot_: i32) -> ResultOf_network_get_vc_wallet_balance {
    unsafe {
        let mut native_return = Default::default();
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_get_vc_wallet_balance(
            &mut native_return,
characterSlot_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_vc_wallet_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_beach_party_lost_found(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_beach_party_lost_found {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_beach_party_lost_found(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_beach_party_lost_found {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_trade_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_trade_business_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_trade_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_trade_business_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_offtheradar(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_buy_offtheradar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_offtheradar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_offtheradar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bull_shark(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_bull_shark {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_bull_shark(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_bull_shark {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_bank_balance(&self, ) -> ResultOf_network_get_string_bank_balance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::network_get_string_bank_balance(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_string_bank_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_vehicle_export_mods(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOf_network_spent_vehicle_export_mods {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_spent_vehicle_export_mods(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_network_spent_vehicle_export_mods {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_club_management_participation(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_from_club_management_participation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_club_management_participation(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_from_club_management_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_upgrade_acid_lab_armor(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf__network_spend_upgrade_acid_lab_armor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_upgrade_acid_lab_armor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_upgrade_acid_lab_armor {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_street_dealer(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_street_dealer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_street_dealer(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_street_dealer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war_event_cargo(&self, amount_: i32) -> ResultOf_network_earn_arena_war_event_cargo {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_arena_war_event_cargo(
            amount_,
        );
        
        
        ResultOf_network_earn_arena_war_event_cargo {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_taxi(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_taxi {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_taxi(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_taxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_setup(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_gangops_setup {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_gangops_setup(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_gangops_setup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_character_wallet(&self, characterSlot_: i32) -> ResultOf_network_clear_character_wallet {
    unsafe {
        let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_clear_character_wallet(
            characterSlot_,
        );
        
        
        ResultOf_network_clear_character_wallet {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_collectables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_collectables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_collectables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_warehouse_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_warehouse_property {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_award(&self, amount_: i32,
p1_: Option<String>,
p2_: i32) -> ResultOf_network_earn_gangops_award {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_gangops_award(
            amount_,
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_network_earn_gangops_award {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_spend_money(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32,
p5_: i32) -> ResultOf_network_can_spend_money {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_can_spend_money(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_network_can_spend_money {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_buy_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_buy_truck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_buy_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_story_mission_reward(&self, amount_: i32) -> ResultOf_network_earn_casino_story_mission_reward {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_story_mission_reward(
            amount_,
        );
        
        
        ResultOf_network_earn_casino_story_mission_reward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_call_player(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_call_player {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_call_player(
            &mut p1_,
p0_,
p2_,
p3_,
        );
        let p1_ = p1_;
        
        ResultOf_network_spent_call_player {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_spent_ammo_drop(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_ammo_drop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_ammo_drop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_ammo_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hangar_utility_charges(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_hangar_utility_charges {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_hangar_utility_charges(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_hangar_utility_charges {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_crate_drop(&self, amount_: i32) -> ResultOf_network_earn_from_crate_drop {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_crate_drop(
            amount_,
        );
        
        
        ResultOf_network_earn_from_crate_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hangar_staff_charges(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_hangar_staff_charges {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_hangar_staff_charges(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_hangar_staff_charges {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_prostitutes(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_prostitutes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_prostitutes(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_prostitutes {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_job(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_from_job {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_job(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_from_job {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_buy_supplies(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf__network_spend_buy_supplies {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_buy_supplies(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_buy_supplies {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_dancer(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pa_service_dancer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_dancer(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pa_service_dancer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_office_garage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_office_garage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_office_garage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_office_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub_dancing(&self, p0_: i32) -> ResultOf_network_earn_nightclub_dancing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_nightclub_dancing(
            p0_,
        );
        
        
        ResultOf_network_earn_nightclub_dancing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOf_network_earn_from_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::network_earn_from_vehicle(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_network_earn_from_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arcade_mgmt(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_arcade_mgmt {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_arcade_mgmt(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_arcade_mgmt {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_tuner_award(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_tuner_award {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_tuner_award(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_tuner_award {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_set_common_fields(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool) -> ResultOf_network_spend_set_common_fields {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_set_common_fields(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_set_common_fields {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_finale(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_fixer_finale {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_finale(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_fixer_finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_carclub_membership(&self, p0_: i32) -> ResultOf_network_earn_carclub_membership {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_carclub_membership(
            p0_,
        );
        
        
        ResultOf_network_earn_carclub_membership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_tuner_robbery(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_earn_tuner_robbery {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_tuner_robbery(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_earn_tuner_robbery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_warehouse_property {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_warehouse_property {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_random_event(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_random_event {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_random_event(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_random_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_hidden(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_hidden {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_hidden(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_hidden {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_autoshop(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_upgrade_autoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_upgrade_autoshop(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_upgrade_autoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_import_export_repair(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spent_import_export_repair {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_import_export_repair(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_import_export_repair {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_daily_stash(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_daily_stash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_daily_stash(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_daily_stash {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_fooligan_job_participation(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_fooligan_job_participation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_fooligan_job_participation(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_fooligan_job_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_fmbb_phonecall_mission(&self, p0_: i32) -> ResultOf_network_earn_from_fmbb_phonecall_mission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_fmbb_phonecall_mission(
            p0_,
        );
        
        
        ResultOf_network_earn_from_fmbb_phonecall_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_autoshop_income(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_autoshop_income {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_autoshop_income(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_autoshop_income {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_network_earn_nightclub_and_warehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_earn_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_network_earn_nightclub_and_warehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_premium_job(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_from_premium_job {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_premium_job(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_from_premium_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_club(&self, amount1_: i32,
p1_: i32,
p2_: bool,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
amount2_: i32,
p8_: i32) -> ResultOf_network_spend_casino_club {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut amount2_ = amount2_;
let mut p8_ = p8_;
        let success = sdk::natives::network_spend_casino_club(
            amount1_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
amount2_,
p8_,
        );
        
        
        ResultOf_network_spend_casino_club {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bank_interest(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_bank_interest {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_bank_interest(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_bank_interest {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_sell_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_sell_participation_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_sell_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_sell_participation_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_daily_stash_house_completed(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_daily_stash_house_completed {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_daily_stash_house_completed(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_daily_stash_house_completed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_dar_challenge(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_dar_challenge {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_dar_challenge(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_dar_challenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_hangar(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_hangar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_hangar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_hangar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_defer_cash_transactions_until_shop_save(&self, ) -> ResultOf_network_defer_cash_transactions_until_shop_save {
    unsafe {
        
        let success = sdk::natives::network_defer_cash_transactions_until_shop_save(
            
        );
        
        
        ResultOf_network_defer_cash_transactions_until_shop_save {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_move_submarine(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spent_move_submarine {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_move_submarine(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_move_submarine {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_goon(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_goon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_goon(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_goon {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_fooligan_job(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_fooligan_job {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_fooligan_job(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_fooligan_job {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_upgrade_mfgarage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_upgrade_mfgarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_upgrade_mfgarage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_upgrade_mfgarage {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_dead_drop(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_dead_drop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_dead_drop(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_dead_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_agency(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_upgrade_agency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_upgrade_agency(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_upgrade_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_car_club_takeover(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_car_club_takeover {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_car_club_takeover(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_car_club_takeover {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_island_heist(&self, amount1_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
amount2_: i32,
p5_: i32) -> ResultOf_network_earn_island_heist {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut amount2_ = amount2_;
let mut p5_ = p5_;
        let success = sdk::natives::network_earn_island_heist(
            amount1_,
p1_,
p2_,
p3_,
amount2_,
p5_,
        );
        
        
        ResultOf_network_earn_island_heist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_earn_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_earn_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOf_network_spend_casino_heist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::network_spend_casino_heist(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_network_spend_casino_heist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_no_cops(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_no_cops {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_no_cops(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_no_cops {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_mc_ability(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spent_mc_ability {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_mc_ability(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spent_mc_ability {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_comp_suv(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_comp_suv {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_comp_suv(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_comp_suv {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_wager(&self, p0_: i32,
p1_: i32,
amount_: i32) -> ResultOf_network_spent_wager {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
        let success = sdk::natives::network_spent_wager(
            p0_,
p1_,
amount_,
        );
        
        
        ResultOf_network_spent_wager {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_healthcare(&self, cost_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_buy_healthcare {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_buy_healthcare(
            cost_,
p1_,
p2_,
        );
        
        
        ResultOf_network_buy_healthcare {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_holdups(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_holdups {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_holdups(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_holdups {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_source_bike(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_source_bike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_source_bike(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_source_bike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_skip_mission(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_gangops_skip_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_skip_mission(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_gangops_skip_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_boss(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spend_boss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_boss(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_boss {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_spend_from_bank_and_wallet(&self, amount_: i32,
characterSlot_: i32) -> ResultOf_network_get_can_spend_from_bank_and_wallet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_get_can_spend_from_bank_and_wallet(
            &mut native_return,
amount_,
characterSlot_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_can_spend_from_bank_and_wallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_nightclub_bar_drink(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spend_nightclub_bar_drink {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_nightclub_bar_drink(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_nightclub_bar_drink {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_autoshop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_upgrade_autoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_autoshop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_upgrade_autoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_award_juggalo_mission(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_award_juggalo_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_award_juggalo_mission(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_award_juggalo_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_yatch_mission(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_yatch_mission {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_yatch_mission(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_yatch_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_jobx2(&self, amount_: i32,
p1_: Option<String>) -> ResultOf_network_earn_from_jobx2 {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_jobx2(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_earn_from_jobx2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_smuggler_agency(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_smuggler_agency {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_smuggler_agency(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_smuggler_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_rc_time_trial(&self, amount_: i32) -> ResultOf_network_earn_rc_time_trial {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_rc_time_trial(
            amount_,
        );
        
        
        ResultOf_network_earn_rc_time_trial {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_juggalo_story_mission(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_juggalo_story_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_juggalo_story_mission(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_juggalo_story_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_skill_level_progression(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_arena_skill_level_progression {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_arena_skill_level_progression(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_arena_skill_level_progression {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub(&self, p0_: i32) -> ResultOf_network_earn_nightclub {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_nightclub(
            p0_,
        );
        
        
        ResultOf_network_earn_nightclub {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vc_withdrawal_completed(&self, p0_: i32) -> ResultOf_has_vc_withdrawal_completed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::has_vc_withdrawal_completed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_has_vc_withdrawal_completed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_buy_wantedlevel(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOf_network_spent_buy_wantedlevel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_buy_wantedlevel(
            &mut p1_,
p0_,
p2_,
p3_,
p4_,
        );
        let p1_ = p1_;
        
        ResultOf_network_spent_buy_wantedlevel {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_spent_pa_service_impound(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spent_pa_service_impound {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_pa_service_impound(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_pa_service_impound {
            success,
            ret: (),
            
        }
    }
}

    fn native_deposit_vc(&self, amount_: i32) -> ResultOf_deposit_vc {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::deposit_vc(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_deposit_vc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_rdr_hatchet_bonus(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_rdr_hatchet_bonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_rdr_hatchet_bonus(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_rdr_hatchet_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_phone(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_agency_phone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_agency_phone(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_agency_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_island_heist_dj_mission(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_from_island_heist_dj_mission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_island_heist_dj_mission(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_from_island_heist_dj_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_dispatch_call(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_dispatch_call {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_dispatch_call(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_dispatch_call {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_earn_setup_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOf__network_earn_setup_participation_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::_network_earn_setup_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOf__network_earn_setup_participation_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hire_mugger(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_hire_mugger {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_hire_mugger(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_hire_mugger {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_make_it_rain(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spend_make_it_rain {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_make_it_rain(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spend_make_it_rain {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hire_mercenary(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spent_hire_mercenary {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_hire_mercenary(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_hire_mercenary {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_move_yacht(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_move_yacht {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_move_yacht(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_move_yacht {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_island_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_island_heist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_island_heist(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_island_heist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_hacker_truck(&self, p0_: i32,
amount_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_earn_hacker_truck {
    unsafe {
        let mut p0_ = p0_;
let mut amount_ = amount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_hacker_truck(
            p0_,
amount_,
p2_,
p3_,
        );
        
        
        ResultOf_network_earn_hacker_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_order_bodyguard_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_order_bodyguard_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_order_bodyguard_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_order_bodyguard_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_remaining_transfer_balance(&self, ) -> ResultOf_network_get_remaining_transfer_balance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_remaining_transfer_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_remaining_transfer_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_buy_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_buy_agency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_buy_agency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_play_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_spend_play_arcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_play_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spend_play_arcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_supply(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_supply {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_supply(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_supply {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_carwash(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: bool) -> ResultOf_network_spent_carwash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_carwash(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_network_spent_carwash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_contraband(&self, amount_: i32,
p1_: i32) -> ResultOf_network_earn_from_contraband {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_contraband(
            amount_,
p1_,
        );
        
        
        ResultOf_network_earn_from_contraband {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_pickup(&self, amount_: i32) -> ResultOf_network_earn_from_pickup {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_pickup(
            amount_,
        );
        
        
        ResultOf_network_earn_from_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_prep_participation(&self, amount_: i32) -> ResultOf_network_earn_gangops_prep_participation {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_gangops_prep_participation(
            amount_,
        );
        
        
        ResultOf_network_earn_gangops_prep_participation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_sell_chips(&self, p0_: i32,
p1_: i32) -> ResultOf_network_casino_sell_chips {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_casino_sell_chips(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_sell_chips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_can_spend_from_wallet(&self, amount_: i32,
characterSlot_: i32) -> ResultOf_network_get_can_spend_from_wallet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_get_can_spend_from_wallet(
            &mut native_return,
amount_,
characterSlot_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_can_spend_from_wallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_pa_service_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_pa_service_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_pa_service_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_purchase_nightclub_and_warehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_purchase_nightclub_and_warehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_vehicle_export(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_from_vehicle_export {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_vehicle_export(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_from_vehicle_export {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_in_stripclub(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: bool) -> ResultOf_network_spent_in_stripclub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_in_stripclub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_in_stripclub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_autoshop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spend_buy_autoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_autoshop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_buy_autoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_item(&self, amount_: i32,
item_: u32,
p2_: i32,
p3_: i32,
p4_: bool,
item_name_: Option<String>,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: bool) -> ResultOf_network_buy_item {
    unsafe {
        let mut amount_ = amount_;
let mut item_ = item_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut item_name_ = sdk_helpers::create_c_string_ptr(item_name_);
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_buy_item(
            amount_,
item_,
p2_,
p3_,
p4_,
item_name_.as_ref().unwrap(),
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_network_buy_item {
            success,
            ret: (),
            
        }
    }
}

    fn native__network_spend_buy_acid_lab(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf__network_spend_buy_acid_lab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::_network_spend_buy_acid_lab(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf__network_spend_buy_acid_lab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_agency_short_trip(&self, p0_: i32,
p1_: i32) -> ResultOf_network_earn_fixer_agency_short_trip {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_agency_short_trip(
            p0_,
p1_,
        );
        
        
        ResultOf_network_earn_fixer_agency_short_trip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_rob_armored_cars(&self, amount_: i32) -> ResultOf_network_earn_from_rob_armored_cars {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_rob_armored_cars(
            amount_,
        );
        
        
        ResultOf_network_earn_from_rob_armored_cars {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet_amount(&self, p0_: i32) -> ResultOf_network_casino_can_bet_amount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_casino_can_bet_amount(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_casino_can_bet_amount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_bounty_hunter_reward(&self, p0_: i32) -> ResultOf_network_earn_bounty_hunter_reward {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_bounty_hunter_reward(
            p0_,
        );
        
        
        ResultOf_network_earn_bounty_hunter_reward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_rehire_dj(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOf_network_spent_rehire_dj {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_rehire_dj(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_rehire_dj {
            success,
            ret: (),
            
        }
    }
}

    fn native_withdraw_vc(&self, amount_: i32) -> ResultOf_withdraw_vc {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::withdraw_vc(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_withdraw_vc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_from_import_export(&self, amount_: i32,
modelHash_: u32) -> ResultOf_network_earn_from_import_export {
    unsafe {
        let mut amount_ = amount_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::network_earn_from_import_export(
            amount_,
modelHash_,
        );
        
        
        ResultOf_network_earn_from_import_export {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_wallet_balance(&self, characterSlot_: i32) -> ResultOf_network_get_string_wallet_balance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::network_get_string_wallet_balance(
            native_return.pin_mut(),
characterSlot_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_string_wallet_balance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_refund_cash(&self, index_: i32,
context_: Option<String>,
reason_: Option<String>,
p3_: bool) -> ResultOf_network_refund_cash {
    unsafe {
        let mut index_ = index_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut reason_ = sdk_helpers::create_c_string_ptr(reason_);
let mut p3_ = p3_;
        let success = sdk::natives::network_refund_cash(
            index_,
context_.as_ref().unwrap(),
reason_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_network_refund_cash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_criminal_mastermind(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_earn_from_criminal_mastermind {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_criminal_mastermind(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_earn_from_criminal_mastermind {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_club_house(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_spent_upgrade_club_house {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_club_house(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spent_upgrade_club_house {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_assassinate_target_killed(&self, amount_: i32) -> ResultOf_network_earn_assassinate_target_killed {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_assassinate_target_killed(
            amount_,
        );
        
        
        ResultOf_network_earn_assassinate_target_killed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_give_player_jobshare_cash(&self, amount_: i32,
gamerHandle_: i32) -> ResultOf_network_give_player_jobshare_cash {
    unsafe {
        let mut amount_ = amount_;
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_give_player_jobshare_cash(
            &mut gamerHandle_,
amount_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_give_player_jobshare_cash {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_get_player_is_high_earner(&self, ) -> ResultOf_network_get_player_is_high_earner {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_player_is_high_earner(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_is_high_earner {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_from_ambient_job(&self, p0_: i32,
p1_: Option<String>,
p2_: i32) -> ResultOf_network_earn_from_ambient_job {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = Default::default();
        let success = sdk::natives::network_earn_from_ambient_job(
            &mut p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let p2_ = p2_;
        
        ResultOf_network_earn_from_ambient_job {
            success,
            ret: (),
            p2_
        }
    }
}

    fn native_network_spend_casino_membership(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_network_spend_casino_membership {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_casino_membership(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_spend_casino_membership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_rename_organization(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_spent_rename_organization {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_rename_organization(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_spent_rename_organization {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_bb_event_bonus(&self, amount_: i32) -> ResultOf_network_earn_bb_event_bonus {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_bb_event_bonus(
            amount_,
        );
        
        
        ResultOf_network_earn_bb_event_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_vehicle_bonus(&self, p0_: i32) -> ResultOf_network_earn_daily_vehicle_bonus {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_daily_vehicle_bonus(
            p0_,
        );
        
        
        ResultOf_network_earn_daily_vehicle_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_boss_goon(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOf_network_spent_boss_goon {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_boss_goon(
            &mut native_return,
amount_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_spent_boss_goon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_fmbb_wage_bonus(&self, p0_: i32) -> ResultOf_network_earn_fmbb_wage_bonus {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_fmbb_wage_bonus(
            p0_,
        );
        
        
        ResultOf_network_earn_fmbb_wage_bonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_net_gameserver_retrieve_init_session_status(&self, p0_: i32) -> ResultOf_net_gameserver_retrieve_init_session_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::net_gameserver_retrieve_init_session_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_net_gameserver_retrieve_init_session_status {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_delete_character_get_status(&self, ) -> ResultOf_net_gameserver_delete_character_get_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_delete_character_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_delete_character_get_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_delete_set_telemetry_nonce_seed(&self, ) -> ResultOf_net_gameserver_delete_set_telemetry_nonce_seed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_delete_set_telemetry_nonce_seed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_delete_set_telemetry_nonce_seed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_start_session_status(&self, p0_: i32) -> ResultOf_net_gameserver_retrieve_start_session_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::net_gameserver_retrieve_start_session_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_net_gameserver_retrieve_start_session_status {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_transfer_bank_to_wallet_get_status(&self, ) -> ResultOf_net_gameserver_transfer_bank_to_wallet_get_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_bank_to_wallet_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transfer_bank_to_wallet_get_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_item_key_is_valid(&self, hash_: u32) -> ResultOf_net_gameserver_catalog_item_key_is_valid {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::net_gameserver_catalog_item_key_is_valid(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_catalog_item_key_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_start(&self, transactionId_: i32,
categoryHash_: u32,
actionHash_: u32,
flags_: i32) -> ResultOf_net_gameserver_basket_start {
    unsafe {
        let mut native_return = Default::default();
let mut transactionId_ = Default::default();
let mut categoryHash_ = categoryHash_;
let mut actionHash_ = actionHash_;
let mut flags_ = flags_;
        let success = sdk::natives::net_gameserver_basket_start(
            &mut native_return,
&mut transactionId_,
categoryHash_,
actionHash_,
flags_,
        );
        let native_return = native_return;
let transactionId_ = transactionId_;
        
        ResultOf_net_gameserver_basket_start {
            success,
            ret: native_return,
            transactionId_
        }
    }
}

    fn native_net_gameserver_basket_is_full(&self, ) -> ResultOf_net_gameserver_basket_is_full {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_is_full(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_basket_is_full {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_catalog_current(&self, ) -> ResultOf_net_gameserver_is_catalog_current {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_is_catalog_current(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_is_catalog_current {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_session_apply_received_data(&self, charSlot_: i32) -> ResultOf_net_gameserver_session_apply_received_data {
    unsafe {
        let mut native_return = Default::default();
let mut charSlot_ = charSlot_;
        let success = sdk::natives::net_gameserver_session_apply_received_data(
            &mut native_return,
charSlot_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_session_apply_received_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transfer_wallet_to_bank_get_status(&self, ) -> ResultOf_net_gameserver_transfer_wallet_to_bank_get_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_wallet_to_bank_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transfer_wallet_to_bank_get_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_refresh_server_catalog(&self, ) -> ResultOf_net_gameserver_refresh_server_catalog {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_refresh_server_catalog(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_refresh_server_catalog {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session_restart(&self, inventory_: bool,
playerbalance_: bool) -> ResultOf_net_gameserver_start_session_restart {
    unsafe {
        let mut native_return = Default::default();
let mut inventory_ = inventory_;
let mut playerbalance_ = playerbalance_;
        let success = sdk::natives::net_gameserver_start_session_restart(
            &mut native_return,
inventory_,
playerbalance_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_start_session_restart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_checkout_start(&self, transactionId_: i32) -> ResultOf_net_gameserver_checkout_start {
    unsafe {
        let mut native_return = Default::default();
let mut transactionId_ = transactionId_;
        let success = sdk::natives::net_gameserver_checkout_start(
            &mut native_return,
transactionId_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_checkout_start {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_is_valid(&self, ) -> ResultOf_net_gameserver_catalog_is_valid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_catalog_is_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_catalog_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_begin_service(&self, transactionId_: i32,
categoryHash_: u32,
itemHash_: u32,
actionTypeHash_: u32,
value_: i32,
flags_: i32) -> ResultOf_net_gameserver_begin_service {
    unsafe {
        let mut native_return = Default::default();
let mut transactionId_ = Default::default();
let mut categoryHash_ = categoryHash_;
let mut itemHash_ = itemHash_;
let mut actionTypeHash_ = actionTypeHash_;
let mut value_ = value_;
let mut flags_ = flags_;
        let success = sdk::natives::net_gameserver_begin_service(
            &mut native_return,
&mut transactionId_,
categoryHash_,
itemHash_,
actionTypeHash_,
value_,
flags_,
        );
        let native_return = native_return;
let transactionId_ = transactionId_;
        
        ResultOf_net_gameserver_begin_service {
            success,
            ret: native_return,
            transactionId_
        }
    }
}

    fn native_net_gameserver_transfer_cash_set_telemetry_nonce_seed(&self, ) -> ResultOf_net_gameserver_transfer_cash_set_telemetry_nonce_seed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_cash_set_telemetry_nonce_seed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transfer_cash_set_telemetry_nonce_seed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_delete_character(&self, slot_: i32,
transfer_: bool,
reason_: u32) -> ResultOf_net_gameserver_delete_character {
    unsafe {
        let mut native_return = Default::default();
let mut slot_ = slot_;
let mut transfer_ = transfer_;
let mut reason_ = reason_;
        let success = sdk::natives::net_gameserver_delete_character(
            &mut native_return,
slot_,
transfer_,
reason_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_delete_character {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transaction_in_progress(&self, ) -> ResultOf_net_gameserver_transaction_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transaction_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transaction_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session_pending(&self, ) -> ResultOf_net_gameserver_start_session_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_start_session_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_start_session_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_clear_session(&self, p0_: i32) -> ResultOf_net_gameserver_clear_session {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_clear_session(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_clear_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_use_server_transactions(&self, ) -> ResultOf_net_gameserver_use_server_transactions {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_use_server_transactions(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_use_server_transactions {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_session_refresh_pending(&self, ) -> ResultOf_net_gameserver_is_session_refresh_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_is_session_refresh_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_is_session_refresh_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_get_catalog_cloud_crc(&self, ) -> ResultOf_net_gameserver_get_catalog_cloud_crc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_get_catalog_cloud_crc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_get_catalog_cloud_crc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_get_session_state_and_status(&self, p0_: i32,
p1_: bool) -> ResultOf_net_gameserver_get_session_state_and_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::net_gameserver_get_session_state_and_status(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_net_gameserver_get_session_state_and_status {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_net_gameserver_set_telemetry_nonce_seed(&self, p0_: i32) -> ResultOf_net_gameserver_set_telemetry_nonce_seed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_set_telemetry_nonce_seed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_set_telemetry_nonce_seed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session(&self, charSlot_: i32) -> ResultOf_net_gameserver_start_session {
    unsafe {
        let mut native_return = Default::default();
let mut charSlot_ = charSlot_;
        let success = sdk::natives::net_gameserver_start_session(
            &mut native_return,
charSlot_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_start_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_is_active(&self, ) -> ResultOf_net_gameserver_basket_is_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_basket_is_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_session_valid(&self, charSlot_: i32) -> ResultOf_net_gameserver_is_session_valid {
    unsafe {
        let mut native_return = Default::default();
let mut charSlot_ = charSlot_;
        let success = sdk::natives::net_gameserver_is_session_valid(
            &mut native_return,
charSlot_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_is_session_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_item_is_valid(&self, name_: Option<String>) -> ResultOf_net_gameserver_catalog_item_is_valid {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::net_gameserver_catalog_item_is_valid(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_catalog_item_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_session_error_code(&self, p0_: i32) -> ResultOf_net_gameserver_retrieve_session_error_code {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::net_gameserver_retrieve_session_error_code(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_net_gameserver_retrieve_session_error_code {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_get_price(&self, itemHash_: u32,
categoryHash_: u32,
p2_: bool) -> ResultOf_net_gameserver_get_price {
    unsafe {
        let mut native_return = Default::default();
let mut itemHash_ = itemHash_;
let mut categoryHash_ = categoryHash_;
let mut p2_ = p2_;
        let success = sdk::natives::net_gameserver_get_price(
            &mut native_return,
itemHash_,
categoryHash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_get_price {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transfer_wallet_to_bank(&self, charSlot_: i32,
amount_: i32) -> ResultOf_net_gameserver_transfer_wallet_to_bank {
    unsafe {
        let mut native_return = Default::default();
let mut charSlot_ = charSlot_;
let mut amount_ = amount_;
        let success = sdk::natives::net_gameserver_transfer_wallet_to_bank(
            &mut native_return,
charSlot_,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transfer_wallet_to_bank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_catalog_refresh_status(&self, state_: i32) -> ResultOf_net_gameserver_retrieve_catalog_refresh_status {
    unsafe {
        let mut native_return = Default::default();
let mut state_ = Default::default();
        let success = sdk::natives::net_gameserver_retrieve_catalog_refresh_status(
            &mut native_return,
&mut state_,
        );
        let native_return = native_return;
let state_ = state_;
        
        ResultOf_net_gameserver_retrieve_catalog_refresh_status {
            success,
            ret: native_return,
            state_
        }
    }
}

    fn native_net_gameserver_transfer_bank_to_wallet(&self, charSlot_: i32,
amount_: i32) -> ResultOf_net_gameserver_transfer_bank_to_wallet {
    unsafe {
        let mut native_return = Default::default();
let mut charSlot_ = charSlot_;
let mut amount_ = amount_;
        let success = sdk::natives::net_gameserver_transfer_bank_to_wallet(
            &mut native_return,
charSlot_,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_transfer_bank_to_wallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_apply_server_data(&self, p0_: i32,
p1_: i32) -> ResultOf_net_gameserver_basket_apply_server_data {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::net_gameserver_basket_apply_server_data(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_net_gameserver_basket_apply_server_data {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_net_gameserver_end_service(&self, transactionId_: i32) -> ResultOf_net_gameserver_end_service {
    unsafe {
        let mut native_return = Default::default();
let mut transactionId_ = transactionId_;
        let success = sdk::natives::net_gameserver_end_service(
            &mut native_return,
transactionId_,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_end_service {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_init_session(&self, ) -> ResultOf_net_gameserver_init_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_init_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_init_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_add_item(&self, itemData_: i32,
quantity_: i32) -> ResultOf_net_gameserver_basket_add_item {
    unsafe {
        let mut native_return = Default::default();
let mut itemData_ = Default::default();
let mut quantity_ = quantity_;
        let success = sdk::natives::net_gameserver_basket_add_item(
            &mut native_return,
&mut itemData_,
quantity_,
        );
        let native_return = native_return;
let itemData_ = itemData_;
        
        ResultOf_net_gameserver_basket_add_item {
            success,
            ret: native_return,
            itemData_
        }
    }
}

    fn native_net_gameserver_basket_end(&self, ) -> ResultOf_net_gameserver_basket_end {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_net_gameserver_basket_end {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_offset(&self, timeA_: i32,
timeB_: i32) -> ResultOf_get_time_offset {
    unsafe {
        let mut native_return = Default::default();
let mut timeA_ = timeA_;
let mut timeB_ = timeB_;
        let success = sdk::natives::get_time_offset(
            &mut native_return,
timeA_,
timeB_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_offset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_platform_party_member_count(&self, ) -> ResultOf_network_get_platform_party_member_count {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_platform_party_member_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_platform_party_member_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_entity(&self, entity_: u32) -> ResultOf_network_has_control_of_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_has_control_of_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_control_of_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_send_local_invite(&self, gamerHandle_: i32) -> ResultOf_network_can_send_local_invite {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_send_local_invite(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_send_local_invite {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_cancel_transition_matchmaking(&self, ) -> ResultOf_network_cancel_transition_matchmaking {
    unsafe {
        
        let success = sdk::natives::network_cancel_transition_matchmaking(
            
        );
        
        
        ResultOf_network_cancel_transition_matchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_should_show_promotion_alert_screen(&self, ) -> ResultOf_network_should_show_promotion_alert_screen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_should_show_promotion_alert_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_should_show_promotion_alert_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_gamer_status_result(&self, p0_: i32,
p1_: i32) -> ResultOf_network_get_gamer_status_result {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_get_gamer_status_result(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_get_gamer_status_result {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_ugc_has_get_finished(&self, ) -> ResultOf_ugc_has_get_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_get_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_has_get_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_local_scene_from_network_id(&self, netId_: i32) -> ResultOf_network_get_local_scene_from_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_get_local_scene_from_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_local_scene_from_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_talking(&self, player_: u32) -> ResultOf_network_is_player_talking {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_talking(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_talking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_object_can_blend_when_fixed(&self, object_: u32,
toggle_: bool) -> ResultOf_network_set_object_can_blend_when_fixed {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_object_can_blend_when_fixed(
            object_,
toggle_,
        );
        
        
        ResultOf_network_set_object_can_blend_when_fixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_invalid_object_models(&self, ) -> ResultOf_network_clear_invalid_object_models {
    unsafe {
        
        let success = sdk::natives::network_clear_invalid_object_models(
            
        );
        
        
        ResultOf_network_clear_invalid_object_models {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_reserve_slots_transition(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_session_reserve_slots_transition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_session_reserve_slots_transition(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_reserve_slots_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_cancel(&self, ) -> ResultOf_network_get_primary_clan_data_cancel {
    unsafe {
        
        let success = sdk::natives::network_get_primary_clan_data_cancel(
            
        );
        
        
        ResultOf_network_get_primary_clan_data_cancel {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_tunable_cloud_request_pending(&self, ) -> ResultOf_network_is_tunable_cloud_request_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_tunable_cloud_request_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_tunable_cloud_request_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_spectator_mode(&self, ) -> ResultOf_network_is_in_spectator_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_spectator_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_spectator_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_finish(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_transition_finish {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_transition_finish(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_transition_finish {
            success,
            ret: native_return,
            
        }
    }
}

    fn native__network_get_random_float_ranged(&self, rangeStart_: f32,
rangeEnd_: f32) -> ResultOf__network_get_random_float_ranged {
    unsafe {
        let mut native_return = Default::default();
let mut rangeStart_ = rangeStart_;
let mut rangeEnd_ = rangeEnd_;
        let success = sdk::natives::_network_get_random_float_ranged(
            &mut native_return,
rangeStart_,
rangeEnd_,
        );
        let native_return = native_return;
        
        ResultOf__network_get_random_float_ranged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_activity_session(&self, ) -> ResultOf_network_is_activity_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_activity_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_activity_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_signed_in(&self, ) -> ResultOf_network_is_signed_in {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_signed_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_signed_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_followers(&self, ) -> ResultOf_network_clear_followers {
    unsafe {
        
        let success = sdk::natives::network_clear_followers(
            
        );
        
        
        ResultOf_network_clear_followers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_entity_as_networked(&self, entity_: u32) -> ResultOf_network_register_entity_as_networked {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_register_entity_as_networked(
            entity_,
        );
        
        
        ResultOf_network_register_entity_as_networked {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_play_multiplayer_with_gamer(&self, gamerHandle_: i32) -> ResultOf_network_can_play_multiplayer_with_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_play_multiplayer_with_gamer(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_play_multiplayer_with_gamer {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_check_text_communication_privileges(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_check_text_communication_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_text_communication_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_check_text_communication_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_completed_heist(&self, heistName_: Option<String>,
cashEarned_: i32,
xpEarned_: i32) -> ResultOf_facebook_post_completed_heist {
    unsafe {
        let mut native_return = Default::default();
let mut heistName_ = sdk_helpers::create_c_string_ptr(heistName_);
let mut cashEarned_ = cashEarned_;
let mut xpEarned_ = xpEarned_;
        let success = sdk::natives::facebook_post_completed_heist(
            &mut native_return,
heistName_.as_ref().unwrap(),
cashEarned_,
xpEarned_,
        );
        let native_return = native_return;
        
        ResultOf_facebook_post_completed_heist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_entity_is_local(&self, entity_: u32) -> ResultOf_network_get_entity_is_local {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_entity_is_local(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_entity_is_local {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_pickups(&self, amount_: i32) -> ResultOf_can_register_mission_pickups {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_pickups(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_pickups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_completed_milestone(&self, milestoneId_: i32) -> ResultOf_facebook_post_completed_milestone {
    unsafe {
        let mut native_return = Default::default();
let mut milestoneId_ = milestoneId_;
        let success = sdk::natives::facebook_post_completed_milestone(
            &mut native_return,
milestoneId_,
        );
        let native_return = native_return;
        
        ResultOf_facebook_post_completed_milestone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_vehicles(&self, ) -> ResultOf_get_max_num_network_vehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_max_num_network_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_get_availability_check_result(&self, ) -> ResultOf_cloud_get_availability_check_result {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::cloud_get_availability_check_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_cloud_get_availability_check_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_title_texture_download_request(&self, filePath_: Option<String>,
name_: Option<String>,
p2_: bool) -> ResultOf_title_texture_download_request {
    unsafe {
        let mut native_return = Default::default();
let mut filePath_ = sdk_helpers::create_c_string_ptr(filePath_);
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p2_ = p2_;
        let success = sdk::natives::title_texture_download_request(
            &mut native_return,
filePath_.as_ref().unwrap(),
name_.as_ref().unwrap(),
p2_,
        );
        let native_return = native_return;
        
        ResultOf_title_texture_download_request {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_host(&self, ) -> ResultOf_network_is_transition_host {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_host {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_pending_friend(&self, p0_: i32) -> ResultOf_network_is_pending_friend {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_is_pending_friend(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_pending_friend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_peds(&self, ) -> ResultOf_get_max_num_network_peds {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_peds(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_max_num_network_peds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_visibility_lock(&self, p0_: bool,
p1_: bool) -> ResultOf_network_set_transition_visibility_lock {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_transition_visibility_lock(
            p0_,
p1_,
        );
        
        
        ResultOf_network_set_transition_visibility_lock {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_vehicles(&self, p0_: bool) -> ResultOf_get_num_created_mission_vehicles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_vehicles(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_created_mission_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_privileges(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_check_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_check_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_invite_failed_message_for_invite_menu(&self, p0_: i32,
p1_: i32) -> ResultOf_network_set_invite_failed_message_for_invite_menu {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::network_set_invite_failed_message_for_invite_menu(
            &mut p0_,
&mut p1_,
        );
        let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_network_set_invite_failed_message_for_invite_menu {
            success,
            ret: (),
            p0_,
p1_
        }
    }
}

    fn native_network_is_transition_closed_crew(&self, ) -> ResultOf_network_is_transition_closed_crew {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_closed_crew(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_closed_crew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_average_ping(&self, player_: u32) -> ResultOf_network_get_average_ping {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_ping(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_average_ping {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_player_max(&self, p0_: i32) -> ResultOf_network_set_activity_player_max {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_activity_player_max(
            p0_,
        );
        
        
        ResultOf_network_set_activity_player_max {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_attribute_damage_to_player(&self, ped_: u32,
player_: u32) -> ResultOf_network_set_attribute_damage_to_player {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut player_ = player_;
        let success = sdk::natives::network_set_attribute_damage_to_player(
            &mut native_return,
ped_,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_set_attribute_damage_to_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ped_to_net(&self, ped_: u32) -> ResultOf_ped_to_net {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::ped_to_net(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_ped_to_net {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_gamer_in_my_session(&self, gamerHandle_: i32) -> ResultOf_network_is_gamer_in_my_session {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_gamer_in_my_session(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_gamer_in_my_session {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_allow_cloning_while_in_tutorial(&self, p0_: i32,
p1_: i32) -> ResultOf_network_allow_cloning_while_in_tutorial {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_allow_cloning_while_in_tutorial(
            p0_,
p1_,
        );
        
        
        ResultOf_network_allow_cloning_while_in_tutorial {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_receive_restrictions_all(&self, toggle_: bool) -> ResultOf_network_override_receive_restrictions_all {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_receive_restrictions_all(
            toggle_,
        );
        
        
        ResultOf_network_override_receive_restrictions_all {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_signed_online(&self, ) -> ResultOf_network_is_signed_online {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_signed_online(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_signed_online {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_tunable_cloud_crc(&self, ) -> ResultOf_network_get_tunable_cloud_crc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_tunable_cloud_crc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_tunable_cloud_crc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_game_in_progress(&self, ) -> ResultOf_network_is_game_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_game_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_game_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_release_emblem(&self, p0_: i32) -> ResultOf_network_clan_release_emblem {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_clan_release_emblem(
            p0_,
        );
        
        
        ResultOf_network_clan_release_emblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_script_validate_join(&self, ) -> ResultOf_network_session_set_script_validate_join {
    unsafe {
        
        let success = sdk::natives::network_session_set_script_validate_join(
            
        );
        
        
        ResultOf_network_session_set_script_validate_join {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_send_important_transition_invite_via_presence(&self, gamerHandle_: i32,
p1_: Option<String>,
dataCount_: i32,
p3_: i32) -> ResultOf_network_send_important_transition_invite_via_presence {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut dataCount_ = dataCount_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_important_transition_invite_via_presence(
            &mut native_return,
&mut gamerHandle_,
p1_.as_ref().unwrap(),
dataCount_,
p3_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_send_important_transition_invite_via_presence {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_get_platform_party_members(&self, data_: i32,
dataSize_: i32) -> ResultOf_network_get_platform_party_members {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
let mut dataSize_ = dataSize_;
        let success = sdk::natives::network_get_platform_party_members(
            &mut native_return,
&mut data_,
dataSize_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_network_get_platform_party_members {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_is_activity_spectator(&self, ) -> ResultOf_network_is_activity_spectator {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_activity_spectator(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_activity_spectator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_last_player_pos_received_over_network(&self, player_: u32) -> ResultOf_network_get_last_player_pos_received_over_network {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::network_get_last_player_pos_received_over_network(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_network_get_last_player_pos_received_over_network {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_invisible_locally(&self, player_: u32,
bIncludePlayersVehicle_: bool) -> ResultOf_set_player_invisible_locally {
    unsafe {
        let mut player_ = player_;
let mut bIncludePlayersVehicle_ = bIncludePlayersVehicle_;
        let success = sdk::natives::set_player_invisible_locally(
            player_,
bIncludePlayersVehicle_,
        );
        
        
        ResultOf_set_player_invisible_locally {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_objects(&self, p0_: bool) -> ResultOf_get_num_created_mission_objects {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_objects(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_created_mission_objects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_request_emblem(&self, p0_: i32) -> ResultOf_network_clan_request_emblem {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_clan_request_emblem(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_request_emblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_age_restrictions(&self, ) -> ResultOf_network_has_age_restrictions {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_age_restrictions(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_age_restrictions {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_gamer_play_multiplayer_with_me(&self, gamerHandle_: i32) -> ResultOf_network_can_gamer_play_multiplayer_with_me {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_gamer_play_multiplayer_with_me(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_gamer_play_multiplayer_with_me {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_transition_set_in_progress(&self, p0_: i32) -> ResultOf_network_transition_set_in_progress {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_in_progress(
            p0_,
        );
        
        
        ResultOf_network_transition_set_in_progress {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_non_participants_of_this_script_as_ghosts(&self, p0_: bool) -> ResultOf_set_non_participants_of_this_script_as_ghosts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_non_participants_of_this_script_as_ghosts(
            p0_,
        );
        
        
        ResultOf_set_non_participants_of_this_script_as_ghosts {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_offline_invite_pending(&self, ) -> ResultOf_network_clear_offline_invite_pending {
    unsafe {
        
        let success = sdk::natives::network_clear_offline_invite_pending(
            
        );
        
        
        ResultOf_network_clear_offline_invite_pending {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_remote_synced_scene_local_player_requests(&self, p0_: i32) -> ResultOf_network_allow_remote_synced_scene_local_player_requests {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_allow_remote_synced_scene_local_player_requests(
            p0_,
        );
        
        
        ResultOf_network_allow_remote_synced_scene_local_player_requests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_queuing_for_session_join(&self, ) -> ResultOf_network_is_queuing_for_session_join {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_queuing_for_session_join(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_queuing_for_session_join {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_copy_content(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_copy_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::ugc_copy_content(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_ugc_copy_content {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_am_i_blocked_by_gamer(&self, gamerHandle_: i32) -> ResultOf_network_am_i_blocked_by_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_am_i_blocked_by_gamer(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_am_i_blocked_by_gamer {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_get_user_starter_access(&self, ) -> ResultOf_get_user_starter_access {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_user_starter_access(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_user_starter_access {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_query_by_content_id(&self, contentId_: Option<String>,
latestVersion_: bool,
contentTypeName_: Option<String>) -> ResultOf_ugc_query_by_content_id {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut latestVersion_ = latestVersion_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_query_by_content_id(
            &mut native_return,
contentId_.as_ref().unwrap(),
latestVersion_,
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_ugc_query_by_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_texture_download_request(&self, gamerHandle_: i32,
filePath_: Option<String>,
name_: Option<String>,
p3_: bool) -> ResultOf_texture_download_request {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut filePath_ = sdk_helpers::create_c_string_ptr(filePath_);
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p3_ = p3_;
        let success = sdk::natives::texture_download_request(
            &mut native_return,
&mut gamerHandle_,
filePath_.as_ref().unwrap(),
name_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_texture_download_request {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_did_description_request_succeed(&self, p0_: i32) -> ResultOf_ugc_did_description_request_succeed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_did_description_request_succeed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_did_description_request_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_conceal_entity(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_conceal_entity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_conceal_entity(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_conceal_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_connected_via_relay(&self, player_: u32) -> ResultOf_network_is_connected_via_relay {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_connected_via_relay(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_connected_via_relay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_content_data_from_index(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_request_content_data_from_index {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_request_content_data_from_index(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_request_content_data_from_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_get_cheater_reason(&self, ) -> ResultOf_network_player_get_cheater_reason {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_get_cheater_reason(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_player_get_cheater_reason {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ghost_alpha(&self, ) -> ResultOf_reset_ghost_alpha {
    unsafe {
        
        let success = sdk::natives::reset_ghost_alpha(
            
        );
        
        
        ResultOf_reset_ghost_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_clear_create_result(&self, ) -> ResultOf_ugc_clear_create_result {
    unsafe {
        
        let success = sdk::natives::ugc_clear_create_result(
            
        );
        
        
        ResultOf_ugc_clear_create_result {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_property_id(&self, id_: i32) -> ResultOf_network_set_property_id {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::network_set_property_id(
            id_,
        );
        
        
        ResultOf_network_set_property_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_keep_entity_collision_disabled_after_anim_scene(&self, p0_: i32,
p1_: i32) -> ResultOf_network_keep_entity_collision_disabled_after_anim_scene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_keep_entity_collision_disabled_after_anim_scene(
            p0_,
p1_,
        );
        
        
        ResultOf_network_keep_entity_collision_disabled_after_anim_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_start_solo_tutorial_session(&self, ) -> ResultOf_network_start_solo_tutorial_session {
    unsafe {
        
        let success = sdk::natives::network_start_solo_tutorial_session(
            
        );
        
        
        ResultOf_network_start_solo_tutorial_session {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_content_modifier_list_id(&self, contentHash_: u32) -> ResultOf_network_get_content_modifier_list_id {
    unsafe {
        let mut native_return = Default::default();
let mut contentHash_ = contentHash_;
        let success = sdk::natives::network_get_content_modifier_list_id(
            &mut native_return,
contentHash_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_content_modifier_list_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_group_activity(&self, ) -> ResultOf_network_clear_group_activity {
    unsafe {
        
        let success = sdk::natives::network_clear_group_activity(
            
        );
        
        
        ResultOf_network_clear_group_activity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_does_entity_exist_with_network_id(&self, netId_: i32) -> ResultOf_network_does_entity_exist_with_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_does_entity_exist_with_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_does_entity_exist_with_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_participants(&self, ) -> ResultOf_network_get_num_participants {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_participants(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_participants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_float_modification_detection_registration_hash(&self, contextHash_: u32,
nameHash_: u32,
value_: f32) -> ResultOf_network_access_tunable_float_modification_detection_registration_hash {
    unsafe {
        let mut native_return = Default::default();
let mut contextHash_ = contextHash_;
let mut nameHash_ = nameHash_;
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_float_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
contextHash_,
nameHash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_float_modification_detection_registration_hash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_player_is_badsport(&self, ) -> ResultOf_network_player_is_badsport {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_is_badsport(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_player_is_badsport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend(&self, gamerHandle_: i32) -> ResultOf_network_is_friend {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_friend(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_friend {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_get_content_rating(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_rating {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_rating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_a_participant_on_script(&self, player_: u32,
script_: Option<String>,
instance_id_: i32) -> ResultOf_network_is_player_a_participant_on_script {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut instance_id_ = instance_id_;
        let success = sdk::natives::network_is_player_a_participant_on_script(
            &mut native_return,
player_,
script_.as_ref().unwrap(),
instance_id_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_a_participant_on_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_participant_index(&self, index_: i32) -> ResultOf_network_get_participant_index {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::network_get_participant_index(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_participant_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_player_is_passive(&self, toggle_: bool) -> ResultOf_network_set_player_is_passive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_player_is_passive(
            toggle_,
        );
        
        
        ResultOf_network_set_player_is_passive {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_this_script_is_network_script(&self, maxNumMissionParticipants_: i32,
p1_: bool,
instanceId_: i32) -> ResultOf_network_set_this_script_is_network_script {
    unsafe {
        let mut maxNumMissionParticipants_ = maxNumMissionParticipants_;
let mut p1_ = p1_;
let mut instanceId_ = instanceId_;
        let success = sdk::natives::network_set_this_script_is_network_script(
            maxNumMissionParticipants_,
p1_,
instanceId_,
        );
        
        
        ResultOf_network_set_this_script_is_network_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commerce_data_fetch_in_progress(&self, ) -> ResultOf_is_commerce_data_fetch_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_data_fetch_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_commerce_data_fetch_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_has_lo_res_photo(&self, p0_: i32) -> ResultOf_ugc_get_content_has_lo_res_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_lo_res_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_has_lo_res_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_of_script(&self, scriptName_: Option<String>,
instance_id_: i32,
position_hash_: i32) -> ResultOf_network_get_host_of_script {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut instance_id_ = instance_id_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_get_host_of_script(
            &mut native_return,
scriptName_.as_ref().unwrap(),
instance_id_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_host_of_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_rich_presence(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_set_rich_presence {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_set_rich_presence(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_network_set_rich_presence {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_publish(&self, contentId_: Option<String>,
baseContentId_: Option<String>,
contentTypeName_: Option<String>) -> ResultOf_ugc_publish {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut baseContentId_ = sdk_helpers::create_c_string_ptr(baseContentId_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_publish(
            &mut native_return,
contentId_.as_ref().unwrap(),
baseContentId_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_ugc_publish {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_reserved_mission_peds(&self, p0_: bool,
p1_: i32) -> ResultOf_get_num_reserved_mission_peds {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_peds(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_reserved_mission_peds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_local_memberships_count(&self, ) -> ResultOf_network_clan_get_local_memberships_count {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_get_local_memberships_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_get_local_memberships_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_fade_in_entity(&self, entity_: u32,
state_: bool,
p2_: i32) -> ResultOf_network_fade_in_entity {
    unsafe {
        let mut entity_ = entity_;
let mut state_ = state_;
let mut p2_ = p2_;
        let success = sdk::natives::network_fade_in_entity(
            entity_,
state_,
p2_,
        );
        
        
        ResultOf_network_fade_in_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_privilege_check_result_not_needed(&self, ) -> ResultOf_network_set_privilege_check_result_not_needed {
    unsafe {
        
        let success = sdk::natives::network_set_privilege_check_result_not_needed(
            
        );
        
        
        ResultOf_network_set_privilege_check_result_not_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_transition_set_content_creator(&self, p0_: i32) -> ResultOf_network_transition_set_content_creator {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_content_creator(
            p0_,
        );
        
        
        ResultOf_network_transition_set_content_creator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_friend_count(&self, ) -> ResultOf_network_get_friend_count {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_friend_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_friend_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_loudness(&self, player_: u32) -> ResultOf_network_get_player_loudness {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_loudness(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_loudness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_ghost(&self, entity_: u32) -> ResultOf_is_entity_a_ghost {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_ghost(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_a_ghost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_prevent_script_host_migration(&self, ) -> ResultOf_network_prevent_script_host_migration {
    unsafe {
        
        let success = sdk::natives::network_prevent_script_host_migration(
            
        );
        
        
        ResultOf_network_prevent_script_host_migration {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_followers(&self, p0_: i32,
p1_: i32) -> ResultOf_network_add_followers {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_add_followers(
            &mut p0_,
p1_,
        );
        let p0_ = p0_;
        
        ResultOf_network_add_followers {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_disable_realtime_multiplayer(&self, ) -> ResultOf_network_disable_realtime_multiplayer {
    unsafe {
        
        let success = sdk::natives::network_disable_realtime_multiplayer(
            
        );
        
        
        ResultOf_network_disable_realtime_multiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_cached_player_head_blend_data(&self, player_: u32) -> ResultOf_network_has_cached_player_head_blend_data {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_has_cached_player_head_blend_data(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_cached_player_head_blend_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_was_invited(&self, ) -> ResultOf_network_session_was_invited {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_was_invited(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_was_invited {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_locally_visible(&self, entity_: u32) -> ResultOf_set_entity_locally_visible {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_locally_visible(
            entity_,
        );
        
        
        ResultOf_set_entity_locally_visible {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_content_id(&self, p0_: i32) -> ResultOf_network_get_presence_invite_content_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_presence_invite_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_did_create_succeed(&self, ) -> ResultOf_ugc_did_create_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_create_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_did_create_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_index(&self, player_: u32) -> ResultOf_network_get_player_index {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_index(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_signalling_info(&self, p0_: i32) -> ResultOf_network_get_signalling_info {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::network_get_signalling_info(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_network_get_signalling_info {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_get_position_hash_of_this_script(&self, ) -> ResultOf_network_get_position_hash_of_this_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_position_hash_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_position_hash_of_this_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_client_entity_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_network_add_client_entity_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::network_add_client_entity_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_network_add_client_entity_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_online_privileges(&self, ) -> ResultOf_network_have_online_privileges {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_online_privileges(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_online_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_all_queued_join_requests(&self, ) -> ResultOf_network_remove_all_queued_join_requests {
    unsafe {
        
        let success = sdk::natives::network_remove_all_queued_join_requests(
            
        );
        
        
        ResultOf_network_remove_all_queued_join_requests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_are_transition_details_valid(&self, p0_: i32) -> ResultOf_network_are_transition_details_valid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_are_transition_details_valid(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_are_transition_details_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_mark_as_preferred_activity(&self, p0_: bool) -> ResultOf_network_mark_as_preferred_activity {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_mark_as_preferred_activity(
            p0_,
        );
        
        
        ResultOf_network_mark_as_preferred_activity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_script_controlling_teams(&self, p0_: i32) -> ResultOf_network_set_script_controlling_teams {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_script_controlling_teams(
            p0_,
        );
        
        
        ResultOf_network_set_script_controlling_teams {
            success,
            ret: (),
            
        }
    }
}

    fn native_delay_mp_store_open(&self, ) -> ResultOf_delay_mp_store_open {
    unsafe {
        
        let success = sdk::natives::delay_mp_store_open(
            
        );
        
        
        ResultOf_delay_mp_store_open {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_remote_attachment_modification(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_allow_remote_attachment_modification {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_allow_remote_attachment_modification(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_allow_remote_attachment_modification {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_session_id(&self, p0_: i32) -> ResultOf_network_get_presence_invite_session_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_session_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_session_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_automute_override(&self, ) -> ResultOf_network_has_automute_override {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_automute_override(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_automute_override {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_mark_visible(&self, toggle_: bool) -> ResultOf_network_session_mark_visible {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_session_mark_visible(
            toggle_,
        );
        
        
        ResultOf_network_session_mark_visible {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_bookmarked(&self, contentId_: Option<String>,
bookmarked_: bool,
contentTypeName_: Option<String>) -> ResultOf_ugc_set_bookmarked {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut bookmarked_ = bookmarked_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_set_bookmarked(
            &mut native_return,
contentId_.as_ref().unwrap(),
bookmarked_,
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_ugc_set_bookmarked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_activity_spectator_from_handle(&self, gamerHandle_: i32) -> ResultOf_network_is_activity_spectator_from_handle {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_activity_spectator_from_handle(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_activity_spectator_from_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_on_return_to_single_player(&self, ) -> ResultOf_network_on_return_to_single_player {
    unsafe {
        
        let success = sdk::natives::network_on_return_to_single_player(
            
        );
        
        
        ResultOf_network_on_return_to_single_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_this_script_is_network_script(&self, ) -> ResultOf_network_get_this_script_is_network_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_this_script_is_network_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_this_script_is_network_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_matchmaking(&self, ) -> ResultOf_network_is_transition_matchmaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_matchmaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_matchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_can_migrate(&self, netId_: i32,
toggle_: bool) -> ResultOf_set_network_id_can_migrate {
    unsafe {
        let mut netId_ = netId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_can_migrate(
            netId_,
toggle_,
        );
        
        
        ResultOf_set_network_id_can_migrate {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_has_modify_finished(&self, ) -> ResultOf_ugc_has_modify_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_modify_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_has_modify_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_explode_heli(&self, vehicle_: u32,
isAudible_: bool,
isInvisible_: bool,
netId_: i32) -> ResultOf_network_explode_heli {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut netId_ = netId_;
        let success = sdk::natives::network_explode_heli(
            vehicle_,
isAudible_,
isInvisible_,
netId_,
        );
        
        
        ResultOf_network_explode_heli {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_commerce_item_num_cats(&self, index_: i32) -> ResultOf_get_commerce_item_num_cats {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_num_cats(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_get_commerce_item_num_cats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_use_high_precision_blending(&self, netID_: i32,
toggle_: bool) -> ResultOf_network_use_high_precision_blending {
    unsafe {
        let mut netID_ = netID_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_use_high_precision_blending(
            netID_,
toggle_,
        );
        
        
        ResultOf_network_use_high_precision_blending {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_client_entity_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32) -> ResultOf_network_add_client_entity_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
        let success = sdk::natives::network_add_client_entity_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_network_add_client_entity_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_open_transition_matchmaking(&self, ) -> ResultOf_network_open_transition_matchmaking {
    unsafe {
        
        let success = sdk::natives::network_open_transition_matchmaking(
            
        );
        
        
        ResultOf_network_open_transition_matchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_crewinfo_get_crewranktitle(&self, p0_: i32,
p1_: Option<String>) -> ResultOf_network_clan_crewinfo_get_crewranktitle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_clan_crewinfo_get_crewranktitle(
            &mut native_return,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_clan_crewinfo_get_crewranktitle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_queue_for_previous_session_join(&self, ) -> ResultOf_network_can_queue_for_previous_session_join {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_queue_for_previous_session_join(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_queue_for_previous_session_join {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_public_content_id(&self, missionId_: Option<String>) -> ResultOf_network_set_current_public_content_id {
    unsafe {
        let mut missionId_ = sdk_helpers::create_c_string_ptr(missionId_);
        let success = sdk::natives::network_set_current_public_content_id(
            missionId_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_set_current_public_content_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_reserve_local_network_mission_peds(&self, amount_: i32) -> ResultOf_reserve_local_network_mission_peds {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_peds(
            amount_,
        );
        
        
        ResultOf_reserve_local_network_mission_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_gamer_status_from_queue(&self, ) -> ResultOf_network_get_gamer_status_from_queue {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_gamer_status_from_queue(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_gamer_status_from_queue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_progress_finish_time(&self, p0_: i32) -> ResultOf_network_set_in_progress_finish_time {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_in_progress_finish_time(
            p0_,
        );
        
        
        ResultOf_network_set_in_progress_finish_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_do_friend_matchmaking(&self, p0_: i32,
p1_: i32,
maxPlayers_: i32) -> ResultOf_network_session_do_friend_matchmaking {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_session_do_friend_matchmaking(
            &mut native_return,
p0_,
p1_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_do_friend_matchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_is_description_request_in_progress(&self, p0_: i32) -> ResultOf_ugc_is_description_request_in_progress {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_is_description_request_in_progress(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_is_description_request_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_local_player_invincible_time(&self, time_: i32) -> ResultOf_network_set_local_player_invincible_time {
    unsafe {
        let mut time_ = time_;
        let success = sdk::natives::network_set_local_player_invincible_time(
            time_,
        );
        
        
        ResultOf_network_set_local_player_invincible_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_killer_of_player(&self, player_: u32,
weaponHash_: u32) -> ResultOf_network_get_killer_of_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut weaponHash_ = Default::default();
        let success = sdk::natives::network_get_killer_of_player(
            &mut native_return,
&mut weaponHash_,
player_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_network_get_killer_of_player {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_network_launch_transition(&self, ) -> ResultOf_network_launch_transition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_launch_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_launch_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_bone_been_hit_by_killer(&self, boneIndex_: i32) -> ResultOf_network_has_bone_been_hit_by_killer {
    unsafe {
        let mut native_return = Default::default();
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::network_has_bone_been_hit_by_killer(
            &mut native_return,
boneIndex_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_bone_been_hit_by_killer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_any_player_near(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_network_is_any_player_near {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_is_any_player_near(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_any_player_near {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_in_same_title(&self, friendName_: Option<String>) -> ResultOf_network_is_friend_in_same_title {
    unsafe {
        let mut native_return = Default::default();
let mut friendName_ = sdk_helpers::create_c_string_ptr(friendName_);
        let success = sdk::natives::network_is_friend_in_same_title(
            &mut native_return,
friendName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_is_friend_in_same_title {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_commerce_store_open(&self, ) -> ResultOf_is_commerce_store_open {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_store_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_commerce_store_open {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_cancel_invite(&self, ) -> ResultOf_network_session_cancel_invite {
    unsafe {
        
        let success = sdk::natives::network_session_cancel_invite(
            
        );
        
        
        ResultOf_network_session_cancel_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_in_platform_party(&self, ) -> ResultOf_network_is_in_platform_party {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_platform_party(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_platform_party {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_explode_vehicle(&self, vehicle_: u32,
isAudible_: bool,
isInvisible_: bool,
netId_: i32) -> ResultOf_network_explode_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
let mut netId_ = netId_;
        let success = sdk::natives::network_explode_vehicle(
            &mut native_return,
vehicle_,
isAudible_,
isInvisible_,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_explode_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_chat_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOf_network_override_chat_restrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_chat_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOf_network_override_chat_restrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_is_published(&self, p0_: i32) -> ResultOf_ugc_get_content_is_published {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_published(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_is_published {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_texture_download_request(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: Option<String>,
p5_: bool) -> ResultOf_ugc_texture_download_request {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = p5_;
        let success = sdk::natives::ugc_texture_download_request(
            &mut native_return,
p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
p4_.as_ref().unwrap(),
p5_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_texture_download_request {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_activity_id(&self, p0_: i32) -> ResultOf_network_set_transition_activity_id {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_transition_activity_id(
            p0_,
        );
        
        
        ResultOf_network_set_transition_activity_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_my_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: i32) -> ResultOf_ugc_get_my_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_my_content(
            &mut native_return,
&mut p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = p3_;
        
        ResultOf_ugc_get_my_content {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_send_transition_gamer_instruction(&self, gamerHandle_: i32,
p1_: Option<String>,
p2_: i32,
p3_: i32,
p4_: bool) -> ResultOf_network_send_transition_gamer_instruction {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_send_transition_gamer_instruction(
            &mut native_return,
&mut gamerHandle_,
p1_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_send_transition_gamer_instruction {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_get_content_language(&self, p0_: i32) -> ResultOf_ugc_get_content_language {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_language(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_language {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene_hack(&self, netId_: i32,
p1_: bool,
p2_: bool) -> ResultOf_set_network_id_visible_in_cutscene_hack {
    unsafe {
        let mut netId_ = netId_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_network_id_visible_in_cutscene_hack(
            netId_,
p1_,
p2_,
        );
        
        
        ResultOf_set_network_id_visible_in_cutscene_hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_do_freeroam_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
maxPlayers_: i32) -> ResultOf_network_session_do_freeroam_quickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_session_do_freeroam_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_do_freeroam_quickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_register_player_broadcast_variables(&self, unkVars_: i32,
numVars_: i32,
debugName_: Option<String>) -> ResultOf_network_register_player_broadcast_variables {
    unsafe {
        let mut unkVars_ = Default::default();
let mut numVars_ = numVars_;
let mut debugName_ = sdk_helpers::create_c_string_ptr(debugName_);
        let success = sdk::natives::network_register_player_broadcast_variables(
            &mut unkVars_,
numVars_,
debugName_.as_ref().unwrap(),
        );
        let unkVars_ = unkVars_;
        
        ResultOf_network_register_player_broadcast_variables {
            success,
            ret: (),
            unkVars_
        }
    }
}

    fn native_network_get_last_vel_received_over_network(&self, entity_: u32) -> ResultOf_network_get_last_vel_received_over_network {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_last_vel_received_over_network(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_network_get_last_vel_received_over_network {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_leave_single_player(&self, ) -> ResultOf_network_session_leave_single_player {
    unsafe {
        
        let success = sdk::natives::network_session_leave_single_player(
            
        );
        
        
        ResultOf_network_session_leave_single_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_texture_download_get_name(&self, p0_: i32) -> ResultOf_texture_download_get_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::texture_download_get_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_texture_download_get_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_block_invites(&self, toggle_: bool) -> ResultOf_network_block_invites {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_block_invites(
            toggle_,
        );
        
        
        ResultOf_network_block_invites {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_average_packet_loss(&self, player_: u32) -> ResultOf_network_get_average_packet_loss {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_packet_loss(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_average_packet_loss {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_tutorial_session_change_pending(&self, ) -> ResultOf_network_is_tutorial_session_change_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_tutorial_session_change_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_tutorial_session_change_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_communication_permissions_check(&self, p0_: i32) -> ResultOf_network_start_communication_permissions_check {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_start_communication_permissions_check(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_start_communication_permissions_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_script_participants(&self, scriptName_: Option<String>,
instance_id_: i32,
position_hash_: i32) -> ResultOf_network_get_num_script_participants {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut instance_id_ = instance_id_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_get_num_script_participants(
            &mut native_return,
scriptName_.as_ref().unwrap(),
instance_id_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_script_participants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_veh(&self, netHandle_: i32) -> ResultOf_net_to_veh {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = netHandle_;
        let success = sdk::natives::net_to_veh(
            &mut native_return,
netHandle_,
        );
        let native_return = native_return;
        
        ResultOf_net_to_veh {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_player_mental_state(&self, p0_: i32) -> ResultOf_network_set_player_mental_state {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_player_mental_state(
            p0_,
        );
        
        
        ResultOf_network_set_player_mental_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_file_version(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_file_version {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_file_version(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_file_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_respawn_result(&self, randomInt_: i32,
coordinates_: Option<shared::Vector3>,
heading_: f32) -> ResultOf_network_get_respawn_result {
    unsafe {
        let mut randomInt_ = randomInt_;
let mut coordinates_ = sdk_helpers::create_vector3_ptr(coordinates_);
let mut heading_ = Default::default();
        let success = sdk::natives::network_get_respawn_result(
            coordinates_.pin_mut(),
&mut heading_,
randomInt_,
        );
        let coordinates_ = sdk_helpers::read_cpp_vector3(coordinates_);
let heading_ = heading_;
        
        ResultOf_network_get_respawn_result {
            success,
            ret: (),
            coordinates_,
heading_
        }
    }
}

    fn native_network_get_unreliable_resend_count(&self, player_: u32) -> ResultOf_network_get_unreliable_resend_count {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_unreliable_resend_count(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_unreliable_resend_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_entity_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOf_network_add_entity_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::network_add_entity_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOf_network_add_entity_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_open_to_matchmaking(&self, ) -> ResultOf_network_is_transition_open_to_matchmaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_open_to_matchmaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_open_to_matchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_entity_from_object_id(&self, p0_: i32) -> ResultOf_network_get_entity_from_object_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_entity_from_object_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_entity_from_object_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_invite_reply_status(&self, p0_: i32) -> ResultOf_network_get_invite_reply_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_invite_reply_status(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_invite_reply_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_player(&self, player_: u32,
gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_handle_from_player {
    unsafe {
        let mut player_ = player_;
let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_handle_from_player(
            &mut gamerHandle_,
player_,
gamerHandleSize_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_handle_from_player {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_trigger_damage_event_for_zero_weapon_hash(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_trigger_damage_event_for_zero_weapon_hash {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_trigger_damage_event_for_zero_weapon_hash(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_trigger_damage_event_for_zero_weapon_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_does_network_id_exist(&self, netId_: i32) -> ResultOf_network_does_network_id_exist {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_does_network_id_exist(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_does_network_id_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_handle(&self, p0_: i32,
p1_: i32) -> ResultOf_network_get_presence_invite_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::network_get_presence_invite_handle(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_network_get_presence_invite_handle {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_mark_as_waiting_async(&self, p0_: bool) -> ResultOf_network_mark_as_waiting_async {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_mark_as_waiting_async(
            p0_,
        );
        
        
        ResultOf_network_mark_as_waiting_async {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_hash(&self, ) -> ResultOf_ugc_get_content_hash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_hash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_text_message(&self, message_: Option<String>,
gamerHandle_: i32) -> ResultOf_network_send_text_message {
    unsafe {
        let mut native_return = Default::default();
let mut message_ = sdk_helpers::create_c_string_ptr(message_);
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_send_text_message(
            &mut native_return,
&mut gamerHandle_,
message_.as_ref().unwrap(),
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_send_text_message {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_cloud_did_request_succeed(&self, requestId_: i32) -> ResultOf_cloud_did_request_succeed {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
        let success = sdk::natives::cloud_did_request_succeed(
            &mut native_return,
requestId_,
        );
        let native_return = native_return;
        
        ResultOf_cloud_did_request_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int_modification_detection_registration_hash(&self, contextHash_: u32,
nameHash_: u32,
value_: i32) -> ResultOf_network_access_tunable_int_modification_detection_registration_hash {
    unsafe {
        let mut native_return = Default::default();
let mut contextHash_ = contextHash_;
let mut nameHash_ = nameHash_;
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_int_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
contextHash_,
nameHash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_int_modification_detection_registration_hash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_do_transition_to_freemode(&self, p0_: i32,
p1_: i32,
p2_: bool,
players_: i32,
p4_: bool) -> ResultOf_network_do_transition_to_freemode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut players_ = players_;
let mut p4_ = p4_;
        let success = sdk::natives::network_do_transition_to_freemode(
            &mut native_return,
&mut p0_,
p1_,
p2_,
players_,
p4_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_do_transition_to_freemode {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_player_tutorial_session_instance(&self, player_: u32) -> ResultOf_network_get_player_tutorial_session_instance {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_tutorial_session_instance(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_tutorial_session_instance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_mission_finished(&self, ) -> ResultOf_network_set_mission_finished {
    unsafe {
        
        let success = sdk::natives::network_set_mission_finished(
            
        );
        
        
        ResultOf_network_set_mission_finished {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_override_tutorial_session_chat(&self, toggle_: bool) -> ResultOf_network_set_override_tutorial_session_chat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_override_tutorial_session_chat(
            toggle_,
        );
        
        
        ResultOf_network_set_override_tutorial_session_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_query_respawn_results(&self, p0_: i32) -> ResultOf_network_query_respawn_results {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_query_respawn_results(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_query_respawn_results {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_is_player_a_participant(&self, player_: u32) -> ResultOf_network_is_player_a_participant {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_a_participant(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_a_participant {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_chat_option(&self, newChatOption_: i32) -> ResultOf_network_set_current_chat_option {
    unsafe {
        let mut newChatOption_ = newChatOption_;
        let success = sdk::natives::network_set_current_chat_option(
            newChatOption_,
        );
        
        
        ResultOf_network_set_current_chat_option {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_from_admin(&self, p0_: i32) -> ResultOf_network_get_presence_invite_from_admin {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_from_admin(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_from_admin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_rich_presence_string(&self, p0_: i32,
textLabel_: Option<String>) -> ResultOf_network_set_rich_presence_string {
    unsafe {
        let mut p0_ = p0_;
let mut textLabel_ = sdk_helpers::create_c_string_ptr(textLabel_);
        let success = sdk::natives::network_set_rich_presence_string(
            p0_,
textLabel_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_set_rich_presence_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_host_broadcast_variables(&self, unkVars_: i32,
numVars_: i32,
debugName_: Option<String>) -> ResultOf_network_register_host_broadcast_variables {
    unsafe {
        let mut unkVars_ = Default::default();
let mut numVars_ = numVars_;
let mut debugName_ = sdk_helpers::create_c_string_ptr(debugName_);
        let success = sdk::natives::network_register_host_broadcast_variables(
            &mut unkVars_,
numVars_,
debugName_.as_ref().unwrap(),
        );
        let unkVars_ = unkVars_;
        
        ResultOf_network_register_host_broadcast_variables {
            success,
            ret: (),
            unkVars_
        }
    }
}

    fn native_network_do_transition_to_game(&self, p0_: bool,
maxPlayers_: i32) -> ResultOf_network_do_transition_to_game {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_do_transition_to_game(
            &mut native_return,
p0_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_do_transition_to_game {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_property_id(&self, p0_: bool) -> ResultOf_network_session_set_matchmaking_property_id {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_matchmaking_property_id(
            p0_,
        );
        
        
        ResultOf_network_session_set_matchmaking_property_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_transition_invite_been_acked(&self, p0_: i32) -> ResultOf_network_has_transition_invite_been_acked {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_has_transition_invite_been_acked(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_has_transition_invite_been_acked {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_set_network_id_pass_control_in_tutorial(&self, netId_: i32,
state_: bool) -> ResultOf_set_network_id_pass_control_in_tutorial {
    unsafe {
        let mut netId_ = netId_;
let mut state_ = state_;
        let success = sdk::natives::set_network_id_pass_control_in_tutorial(
            netId_,
state_,
        );
        
        
        ResultOf_set_network_id_pass_control_in_tutorial {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_has_headset(&self, player_: u32) -> ResultOf_network_player_has_headset {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_has_headset(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_player_has_headset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_no_longer_needed(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_set_no_longer_needed {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_no_longer_needed(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_set_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_disable_proximity_migration(&self, netID_: i32) -> ResultOf_network_disable_proximity_migration {
    unsafe {
        let mut netID_ = netID_;
        let success = sdk::natives::network_disable_proximity_migration(
            netID_,
        );
        
        
        ResultOf_network_disable_proximity_migration {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_cached_description(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_cached_description {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_cached_description(
            native_return.pin_mut(),
p0_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_cached_description {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int_hash(&self, tunableContext_: u32,
tunableName_: u32,
value_: i32) -> ResultOf_network_access_tunable_int_hash {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = tunableContext_;
let mut tunableName_ = tunableName_;
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_int_hash(
            &mut native_return,
&mut value_,
tunableContext_,
tunableName_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_int_hash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_get_friend_display_name(&self, friendIndex_: i32) -> ResultOf_network_get_friend_display_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut friendIndex_ = friendIndex_;
        let success = sdk::natives::network_get_friend_display_name(
            native_return.pin_mut(),
friendIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_friend_display_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fade_out_local_player(&self, p0_: bool) -> ResultOf_fade_out_local_player {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::fade_out_local_player(
            p0_,
        );
        
        
        ResultOf_fade_out_local_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_in_spectator_mode_extended(&self, toggle_: bool,
playerPed_: u32,
p2_: bool) -> ResultOf_network_set_in_spectator_mode_extended {
    unsafe {
        let mut toggle_ = toggle_;
let mut playerPed_ = playerPed_;
let mut p2_ = p2_;
        let success = sdk::natives::network_set_in_spectator_mode_extended(
            toggle_,
playerPed_,
p2_,
        );
        
        
        ResultOf_network_set_in_spectator_mode_extended {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_receive_local_invite(&self, gamerHandle_: i32) -> ResultOf_network_can_receive_local_invite {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_receive_local_invite(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_receive_local_invite {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_have_ros_leaderboard_write_priv(&self, ) -> ResultOf_network_have_ros_leaderboard_write_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_leaderboard_write_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_ros_leaderboard_write_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_entity_fading(&self, entity_: u32) -> ResultOf_network_is_entity_fading {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_is_entity_fading(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_entity_fading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_was_game_suspended(&self, ) -> ResultOf_network_was_game_suspended {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_was_game_suspended(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_was_game_suspended {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_spectator_mode(&self, toggle_: bool,
playerPed_: u32) -> ResultOf_network_set_in_spectator_mode {
    unsafe {
        let mut toggle_ = toggle_;
let mut playerPed_ = playerPed_;
        let success = sdk::natives::network_set_in_spectator_mode(
            toggle_,
playerPed_,
        );
        
        
        ResultOf_network_set_in_spectator_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_friend_online(&self, name_: Option<String>) -> ResultOf_network_is_friend_online {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::network_is_friend_online(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_is_friend_online {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_local_network_mission_vehicles(&self, amount_: i32) -> ResultOf_reserve_local_network_mission_vehicles {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_vehicles(
            amount_,
        );
        
        
        ResultOf_reserve_local_network_mission_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_gamertag_from_handle(&self, gamerHandle_: i32) -> ResultOf_network_get_gamertag_from_handle {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_get_gamertag_from_handle(
            native_return.pin_mut(),
&mut gamerHandle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_get_gamertag_from_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_get_entity_killer_of_player(&self, player_: u32,
weaponHash_: u32) -> ResultOf_network_get_entity_killer_of_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut weaponHash_ = Default::default();
        let success = sdk::natives::network_get_entity_killer_of_player(
            &mut native_return,
&mut weaponHash_,
player_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_network_get_entity_killer_of_player {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_network_override_clock_rate(&self, ms_: i32) -> ResultOf_network_override_clock_rate {
    unsafe {
        let mut ms_ = ms_;
        let success = sdk::natives::network_override_clock_rate(
            ms_,
        );
        
        
        ResultOf_network_override_clock_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_cloud_tunables(&self, ) -> ResultOf_network_request_cloud_tunables {
    unsafe {
        
        let success = sdk::natives::network_request_cloud_tunables(
            
        );
        
        
        ResultOf_network_request_cloud_tunables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_same_team_as_local_player(&self, p0_: i32,
p1_: i32) -> ResultOf_network_set_same_team_as_local_player {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_same_team_as_local_player(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_set_same_team_as_local_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_can_post_to_facebook(&self, ) -> ResultOf_facebook_can_post_to_facebook {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_can_post_to_facebook(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_facebook_can_post_to_facebook {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_follow_invite(&self, ) -> ResultOf_network_clear_follow_invite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clear_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_clear_follow_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_close_transition_matchmaking(&self, ) -> ResultOf_network_close_transition_matchmaking {
    unsafe {
        
        let success = sdk::natives::network_close_transition_matchmaking(
            
        );
        
        
        ResultOf_network_close_transition_matchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_store_network_game_tracking(&self, ) -> ResultOf_reset_store_network_game_tracking {
    unsafe {
        
        let success = sdk::natives::reset_store_network_game_tracking(
            
        );
        
        
        ResultOf_reset_store_network_game_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_data_manager_succeeded_for_handle(&self, p0_: i32,
gamerHandle_: i32) -> ResultOf_network_check_data_manager_succeeded_for_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_check_data_manager_succeeded_for_handle(
            &mut native_return,
&mut gamerHandle_,
p0_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_check_data_manager_succeeded_for_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_quit_mp_to_desktop(&self, ) -> ResultOf_network_quit_mp_to_desktop {
    unsafe {
        
        let success = sdk::natives::network_quit_mp_to_desktop(
            
        );
        
        
        ResultOf_network_quit_mp_to_desktop {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_is_modifying(&self, ) -> ResultOf_ugc_is_modifying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_modifying(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_is_modifying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_map_entity_to_synchronised_scene(&self, netScene_: i32,
modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: f32,
p6_: Option<String>,
p7_: f32,
p8_: f32,
flags_: i32) -> ResultOf_network_add_map_entity_to_synchronised_scene {
    unsafe {
        let mut netScene_ = netScene_;
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut flags_ = flags_;
        let success = sdk::natives::network_add_map_entity_to_synchronised_scene(
            netScene_,
modelHash_,
x_,
y_,
z_,
p5_,
p6_.as_ref().unwrap(),
p7_,
p8_,
flags_,
        );
        
        
        ResultOf_network_add_map_entity_to_synchronised_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_do_transition_to_new_game(&self, p0_: bool,
maxPlayers_: i32,
p2_: bool) -> ResultOf_network_do_transition_to_new_game {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut maxPlayers_ = maxPlayers_;
let mut p2_ = p2_;
        let success = sdk::natives::network_do_transition_to_new_game(
            &mut native_return,
p0_,
maxPlayers_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_do_transition_to_new_game {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_network_time_started(&self, ) -> ResultOf_has_network_time_started {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_network_time_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_network_time_started {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_player_crc_hacker_check(&self, player_: u32,
p1_: i32,
scriptHash_: u32) -> ResultOf_trigger_player_crc_hacker_check {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::trigger_player_crc_hacker_check(
            &mut native_return,
player_,
p1_,
scriptHash_,
        );
        let native_return = native_return;
        
        ResultOf_trigger_player_crc_hacker_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remote_cheater_player_detected(&self, player_: u32,
a_: i32,
b_: i32) -> ResultOf_remote_cheater_player_detected {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut a_ = a_;
let mut b_ = b_;
        let success = sdk::natives::remote_cheater_player_detected(
            &mut native_return,
player_,
a_,
b_,
        );
        let native_return = native_return;
        
        ResultOf_remote_cheater_player_detected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_attach_synchronised_scene_to_entity(&self, netScene_: i32,
entity_: u32,
bone_: i32) -> ResultOf_network_attach_synchronised_scene_to_entity {
    unsafe {
        let mut netScene_ = netScene_;
let mut entity_ = entity_;
let mut bone_ = bone_;
        let success = sdk::natives::network_attach_synchronised_scene_to_entity(
            netScene_,
entity_,
bone_,
        );
        
        
        ResultOf_network_attach_synchronised_scene_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_unique_crew_limit_transition(&self, p0_: i32) -> ResultOf_network_session_set_unique_crew_limit_transition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_limit_transition(
            p0_,
        );
        
        
        ResultOf_network_session_set_unique_crew_limit_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_texture_download_release(&self, p0_: i32) -> ResultOf_texture_download_release {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::texture_download_release(
            p0_,
        );
        
        
        ResultOf_texture_download_release {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_get_membership_valid(&self, p0_: i32,
p1_: i32) -> ResultOf_network_clan_get_membership_valid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_clan_get_membership_valid(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_clan_get_membership_valid {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_clan_get_membership_desc(&self, memberDesc_: i32,
p1_: i32) -> ResultOf_network_clan_get_membership_desc {
    unsafe {
        let mut native_return = Default::default();
let mut memberDesc_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_clan_get_membership_desc(
            &mut native_return,
&mut memberDesc_,
p1_,
        );
        let native_return = native_return;
let memberDesc_ = memberDesc_;
        
        ResultOf_network_clan_get_membership_desc {
            success,
            ret: native_return,
            memberDesc_
        }
    }
}

    fn native_network_player_get_userid(&self, player_: u32,
userID_: i32) -> ResultOf_network_player_get_userid {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
let mut userID_ = Default::default();
        let success = sdk::natives::network_player_get_userid(
            native_return.pin_mut(),
&mut userID_,
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let userID_ = userID_;
        
        ResultOf_network_player_get_userid {
            success,
            ret: native_return,
            userID_
        }
    }
}

    fn native_network_add_entity_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_network_add_entity_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::network_add_entity_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_network_add_entity_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_inviter(&self, p0_: i32) -> ResultOf_network_get_presence_invite_inviter {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_inviter(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_presence_invite_inviter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_group(&self, matchmakingGroup_: i32) -> ResultOf_network_session_set_matchmaking_group {
    unsafe {
        let mut matchmakingGroup_ = matchmakingGroup_;
        let success = sdk::natives::network_session_set_matchmaking_group(
            matchmakingGroup_,
        );
        
        
        ResultOf_network_session_set_matchmaking_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_area_is_occupied(&self, areaHandle_: i32) -> ResultOf_network_entity_area_is_occupied {
    unsafe {
        let mut native_return = Default::default();
let mut areaHandle_ = areaHandle_;
        let success = sdk::natives::network_entity_area_is_occupied(
            &mut native_return,
areaHandle_,
        );
        let native_return = native_return;
        
        ResultOf_network_entity_area_is_occupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_invite_gamers_to_transition(&self, p0_: i32,
p1_: i32) -> ResultOf_network_invite_gamers_to_transition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_invite_gamers_to_transition(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_invite_gamers_to_transition {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_set_presence_session_invites_blocked(&self, toggle_: bool) -> ResultOf_network_set_presence_session_invites_blocked {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_presence_session_invites_blocked(
            toggle_,
        );
        
        
        ResultOf_network_set_presence_session_invites_blocked {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_data_manager_for_handle(&self, p0_: i32,
gamerHandle_: i32) -> ResultOf_network_check_data_manager_for_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_check_data_manager_for_handle(
            &mut native_return,
&mut gamerHandle_,
p0_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_check_data_manager_for_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_set_entity_ghosted_for_ghost_players(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_ghosted_for_ghost_players {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_ghosted_for_ghost_players(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_ghosted_for_ghost_players {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_start_respawn_search_in_angled_area_for_player(&self, player_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
flags_: i32) -> ResultOf_network_start_respawn_search_in_angled_area_for_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut flags_ = flags_;
        let success = sdk::natives::network_start_respawn_search_in_angled_area_for_player(
            &mut native_return,
player_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p8_,
p9_,
p10_,
flags_,
        );
        let native_return = native_return;
        
        ResultOf_network_start_respawn_search_in_angled_area_for_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_ignore_remote_waypoints(&self, ) -> ResultOf_network_ignore_remote_waypoints {
    unsafe {
        
        let success = sdk::natives::network_ignore_remote_waypoints(
            
        );
        
        
        ResultOf_network_ignore_remote_waypoints {
            success,
            ret: (),
            
        }
    }
}

    fn native_cloud_has_request_completed(&self, requestId_: i32) -> ResultOf_cloud_has_request_completed {
    unsafe {
        let mut native_return = Default::default();
let mut requestId_ = requestId_;
        let success = sdk::natives::cloud_has_request_completed(
            &mut native_return,
requestId_,
        );
        let native_return = native_return;
        
        ResultOf_cloud_has_request_completed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_game_mode(&self, ) -> ResultOf_network_get_game_mode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_game_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_game_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_assisted_damage_of_entity(&self, player_: u32,
entity_: u32,
p2_: i32) -> ResultOf_network_get_assisted_damage_of_entity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
let mut p2_ = Default::default();
        let success = sdk::natives::network_get_assisted_damage_of_entity(
            &mut native_return,
&mut p2_,
player_,
entity_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_network_get_assisted_damage_of_entity {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_ugc_did_query_creators_succeed(&self, ) -> ResultOf_ugc_did_query_creators_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_query_creators_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_did_query_creators_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_network_id(&self, netId_: i32) -> ResultOf_network_has_control_of_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_has_control_of_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_control_of_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_invited_gamer(&self, p0_: i32) -> ResultOf_network_has_invited_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_has_invited_gamer(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_has_invited_gamer {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_entity_area_have_all_replied(&self, areaHandle_: i32) -> ResultOf_network_entity_area_have_all_replied {
    unsafe {
        let mut native_return = Default::default();
let mut areaHandle_ = areaHandle_;
        let success = sdk::natives::network_entity_area_have_all_replied(
            &mut native_return,
areaHandle_,
        );
        let native_return = native_return;
        
        ResultOf_network_entity_area_have_all_replied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_negative_count(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_rating_negative_count {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_negative_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_rating_negative_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_network_mission_objects(&self, amount_: i32) -> ResultOf_reserve_network_mission_objects {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_objects(
            amount_,
        );
        
        
        ResultOf_reserve_network_mission_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_session_end(&self, ) -> ResultOf_network_can_session_end {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_session_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_session_end {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_check_availability(&self, ) -> ResultOf_cloud_check_availability {
    unsafe {
        
        let success = sdk::natives::cloud_check_availability(
            
        );
        
        
        ResultOf_cloud_check_availability {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_busy(&self, ) -> ResultOf_network_is_transition_busy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_busy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_transition_parameter(&self, p0_: i32,
p1_: i32) -> ResultOf_network_apply_transition_parameter {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_apply_transition_parameter(
            p0_,
p1_,
        );
        
        
        ResultOf_network_apply_transition_parameter {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_local_player_sync_look_at(&self, toggle_: bool) -> ResultOf_network_set_local_player_sync_look_at {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_local_player_sync_look_at(
            toggle_,
        );
        
        
        ResultOf_network_set_local_player_sync_look_at {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_highest_reliable_resend_count(&self, player_: u32) -> ResultOf_network_get_highest_reliable_resend_count {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_highest_reliable_resend_count(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_highest_reliable_resend_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_top_rated_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_ugc_get_top_rated_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_top_rated_content(
            &mut native_return,
&mut p2_,
&mut p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_ugc_get_top_rated_content {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_network_session_get_private_slots(&self, ) -> ResultOf_network_session_get_private_slots {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_get_private_slots(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_get_private_slots {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_need_to_start_new_game_but_blocked(&self, ) -> ResultOf_network_need_to_start_new_game_but_blocked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_need_to_start_new_game_but_blocked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_need_to_start_new_game_but_blocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_started(&self, ) -> ResultOf_network_is_transition_started {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_started {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_is_rockstar_dev(&self, player_: u32) -> ResultOf_network_player_is_rockstar_dev {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_is_rockstar_dev(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_player_is_rockstar_dev {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_unique_crew_only_crews_transition(&self, p0_: bool) -> ResultOf_network_session_set_unique_crew_only_crews_transition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_only_crews_transition(
            p0_,
        );
        
        
        ResultOf_network_session_set_unique_crew_only_crews_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_permissions_has_gamer_record(&self, gamerHandle_: i32) -> ResultOf_network_permissions_has_gamer_record {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_permissions_has_gamer_record(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_permissions_has_gamer_record {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_get_content_id(&self, p0_: i32) -> ResultOf_ugc_get_content_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_thread_a_network_script(&self, threadId_: i32) -> ResultOf_network_is_thread_a_network_script {
    unsafe {
        let mut native_return = Default::default();
let mut threadId_ = threadId_;
        let success = sdk::natives::network_is_thread_a_network_script(
            &mut native_return,
threadId_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_thread_a_network_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_report_code_tamper(&self, ) -> ResultOf_network_report_code_tamper {
    unsafe {
        
        let success = sdk::natives::network_report_code_tamper(
            
        );
        
        
        ResultOf_network_report_code_tamper {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_index_is_cheater(&self, player_: u32) -> ResultOf_network_player_index_is_cheater {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_index_is_cheater(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_player_index_is_cheater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_get_matchmaking_group_free(&self, p0_: i32) -> ResultOf_network_session_get_matchmaking_group_free {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_session_get_matchmaking_group_free(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_get_matchmaking_group_free {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_in_multiplayer(&self, friendName_: Option<String>) -> ResultOf_network_is_friend_in_multiplayer {
    unsafe {
        let mut native_return = Default::default();
let mut friendName_ = sdk_helpers::create_c_string_ptr(friendName_);
        let success = sdk::natives::network_is_friend_in_multiplayer(
            &mut native_return,
friendName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_is_friend_in_multiplayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_mark_transition_gamer_as_fully_joined(&self, p0_: i32) -> ResultOf_network_mark_transition_gamer_as_fully_joined {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_mark_transition_gamer_as_fully_joined(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_mark_transition_gamer_as_fully_joined {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_texture_download_has_failed(&self, p0_: i32) -> ResultOf_texture_download_has_failed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::texture_download_has_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_texture_download_has_failed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_service_is_valid(&self, ) -> ResultOf_network_clan_service_is_valid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_service_is_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_service_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_participant_id_to_int(&self, ) -> ResultOf_participant_id_to_int {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::participant_id_to_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_participant_id_to_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_blocked_by_me(&self, player_: u32) -> ResultOf_network_is_player_blocked_by_me {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_blocked_by_me(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_blocked_by_me {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_send_restrictions_all(&self, toggle_: bool) -> ResultOf_network_override_send_restrictions_all {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_send_restrictions_all(
            toggle_,
        );
        
        
        ResultOf_network_override_send_restrictions_all {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_script_status(&self, ) -> ResultOf_network_get_script_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_script_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_script_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_are_handles_the_same(&self, gamerHandle1_: i32,
gamerHandle2_: i32) -> ResultOf_network_are_handles_the_same {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle1_ = Default::default();
let mut gamerHandle2_ = Default::default();
        let success = sdk::natives::network_are_handles_the_same(
            &mut native_return,
&mut gamerHandle1_,
&mut gamerHandle2_,
        );
        let native_return = native_return;
let gamerHandle1_ = gamerHandle1_;
let gamerHandle2_ = gamerHandle2_;
        
        ResultOf_network_are_handles_the_same {
            success,
            ret: native_return,
            gamerHandle1_,
gamerHandle2_
        }
    }
}

    fn native_network_can_bail(&self, ) -> ResultOf_network_can_bail {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_bail(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_bail {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_emblem_txd_name(&self, netHandle_: i32,
txdName_: Option<String>) -> ResultOf_network_clan_get_emblem_txd_name {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = Default::default();
let mut txdName_ = sdk_helpers::create_c_string_ptr(txdName_);
        let success = sdk::natives::network_clan_get_emblem_txd_name(
            &mut native_return,
&mut netHandle_,
txdName_.pin_mut(),
        );
        let native_return = native_return;
let netHandle_ = netHandle_;
let txdName_ = sdk_helpers::read_c_string_ptr(txdName_);
        
        ResultOf_network_clan_get_emblem_txd_name {
            success,
            ret: native_return,
            netHandle_,
txdName_
        }
    }
}

    fn native_ugc_get_content_creator_gamer_handle(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_creator_gamer_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::ugc_get_content_creator_gamer_handle(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_ugc_get_content_creator_gamer_handle {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_hash_from_gamer_handle(&self, gamerHandle_: i32) -> ResultOf_network_hash_from_gamer_handle {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_hash_from_gamer_handle(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_hash_from_gamer_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_open_commerce_store(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: i32) -> ResultOf_open_commerce_store {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::open_commerce_store(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_open_commerce_store {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_displaynames_from_handles(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_get_displaynames_from_handles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_get_displaynames_from_handles(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_displaynames_from_handles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_user_old_enough_to_access_store(&self, ) -> ResultOf_is_user_old_enough_to_access_store {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_user_old_enough_to_access_store(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_user_old_enough_to_access_store {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_ros_privilege_played_last_gen(&self, ) -> ResultOf_network_has_ros_privilege_played_last_gen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_ros_privilege_played_last_gen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_ros_privilege_played_last_gen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_and_launch_single_player_game(&self, ) -> ResultOf_shutdown_and_launch_single_player_game {
    unsafe {
        
        let success = sdk::natives::shutdown_and_launch_single_player_game(
            
        );
        
        
        ResultOf_shutdown_and_launch_single_player_game {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_user_content_privileges(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOf_network_check_user_content_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_user_content_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_check_user_content_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_creator_num(&self, ) -> ResultOf_ugc_get_creator_num {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_creator_num(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_creator_num {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_random_int(&self, ) -> ResultOf_network_get_random_int {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_random_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_random_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_num_bosses(&self, num_: i32) -> ResultOf_network_session_set_num_bosses {
    unsafe {
        let mut num_ = num_;
        let success = sdk::natives::network_session_set_num_bosses(
            num_,
        );
        
        
        ResultOf_network_session_set_num_bosses {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_join_previously_failed_session(&self, ) -> ResultOf_network_join_previously_failed_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_previously_failed_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_join_previously_failed_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_modify_result(&self, ) -> ResultOf_ugc_get_modify_result {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_modify_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_modify_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_release_cached_description(&self, p0_: i32) -> ResultOf_ugc_release_cached_description {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_release_cached_description(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_release_cached_description {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_private(&self, ) -> ResultOf_network_is_transition_private {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_private(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_private {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_respawn_search_for_player(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
flags_: i32) -> ResultOf_network_start_respawn_search_for_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut flags_ = flags_;
        let success = sdk::natives::network_start_respawn_search_for_player(
            &mut native_return,
player_,
x_,
y_,
z_,
radius_,
p5_,
p6_,
p7_,
flags_,
        );
        let native_return = native_return;
        
        ResultOf_network_start_respawn_search_for_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_did_get_gamer_status_succeed(&self, ) -> ResultOf_network_did_get_gamer_status_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_did_get_gamer_status_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_did_get_gamer_status_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_success(&self, ) -> ResultOf_network_get_primary_clan_data_success {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_success(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_primary_clan_data_success {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_voice_set_timeout(&self, timeout_: i32) -> ResultOf_network_session_voice_set_timeout {
    unsafe {
        let mut timeout_ = timeout_;
        let success = sdk::natives::network_session_voice_set_timeout(
            timeout_,
        );
        
        
        ResultOf_network_session_voice_set_timeout {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_download_membership_pending(&self, p0_: i32) -> ResultOf_network_clan_download_membership_pending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_clan_download_membership_pending(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_clan_download_membership_pending {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_has_control_of_pickup(&self, pickup_: i32) -> ResultOf_network_has_control_of_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::network_has_control_of_pickup(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_control_of_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_psn_ugc_restriction(&self, ) -> ResultOf_network_show_psn_ugc_restriction {
    unsafe {
        
        let success = sdk::natives::network_show_psn_ugc_restriction(
            
        );
        
        
        ResultOf_network_show_psn_ugc_restriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_antagonistic_to_player(&self, toggle_: bool,
player_: u32) -> ResultOf_network_set_antagonistic_to_player {
    unsafe {
        let mut toggle_ = toggle_;
let mut player_ = player_;
        let success = sdk::natives::network_set_antagonistic_to_player(
            toggle_,
player_,
        );
        
        
        ResultOf_network_set_antagonistic_to_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_load_offline_query(&self, p0_: i32) -> ResultOf_ugc_load_offline_query {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_load_offline_query(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_load_offline_query {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_received_host_broadcast_data(&self, ) -> ResultOf_network_has_received_host_broadcast_data {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_received_host_broadcast_data(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_received_host_broadcast_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_solo(&self, ) -> ResultOf_network_is_transition_solo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_solo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_solo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_cached_description(&self, p0_: i32) -> ResultOf_ugc_request_cached_description {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_request_cached_description(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_request_cached_description {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_has_create_finished(&self, ) -> ResultOf_ugc_has_create_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_create_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_has_create_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_enable_voice_bandwidth_restriction(&self, player_: u32) -> ResultOf_network_enable_voice_bandwidth_restriction {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_enable_voice_bandwidth_restriction(
            player_,
        );
        
        
        ResultOf_network_enable_voice_bandwidth_restriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_platform_subscription(&self, ) -> ResultOf_network_have_platform_subscription {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_platform_subscription(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_platform_subscription {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_timeout_time(&self, ) -> ResultOf_network_get_timeout_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_timeout_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_timeout_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_multiplayer_priv(&self, ) -> ResultOf_network_have_ros_multiplayer_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_multiplayer_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_ros_multiplayer_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_text_chat_is_typing(&self, ) -> ResultOf_network_text_chat_is_typing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_text_chat_is_typing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_text_chat_is_typing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_local_player_as_ghost(&self, toggle_: bool,
p1_: bool) -> ResultOf_set_local_player_as_ghost {
    unsafe {
        let mut toggle_ = toggle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_local_player_as_ghost(
            toggle_,
p1_,
        );
        
        
        ResultOf_set_local_player_as_ghost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_gamemode(&self, p0_: i32) -> ResultOf_network_session_set_gamemode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_gamemode(
            p0_,
        );
        
        
        ResultOf_network_session_set_gamemode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_ros_social_club_priv(&self, ) -> ResultOf_network_have_ros_social_club_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_social_club_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_ros_social_club_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_ros_link_wentdown_not_net(&self, ) -> ResultOf_network_check_ros_link_wentdown_not_net {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_check_ros_link_wentdown_not_net(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_check_ros_link_wentdown_not_net {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_transition_non_async_gamers(&self, ) -> ResultOf_network_get_num_transition_non_async_gamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_transition_non_async_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_transition_non_async_gamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_clear_offline_query(&self, ) -> ResultOf_ugc_clear_offline_query {
    unsafe {
        
        let success = sdk::natives::ugc_clear_offline_query(
            
        );
        
        
        ResultOf_ugc_clear_offline_query {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_vehicle_as_ghost(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_network_vehicle_as_ghost {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_vehicle_as_ghost(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_network_vehicle_as_ghost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_invite_confirmed_event(&self, ) -> ResultOf_network_request_invite_confirmed_event {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_request_invite_confirmed_event(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_request_invite_confirmed_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_has_post_completed(&self, ) -> ResultOf_facebook_has_post_completed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_has_post_completed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_facebook_has_post_completed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_fading(&self, player_: u32) -> ResultOf_network_is_player_fading {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_fading(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_fading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_instance_id_of_this_script(&self, ) -> ResultOf_network_get_instance_id_of_this_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_instance_id_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_instance_id_of_this_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_has_query_creators_finished(&self, ) -> ResultOf_ugc_has_query_creators_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_query_creators_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_has_query_creators_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_in_mp_cutscene(&self, player_: u32) -> ResultOf_network_is_player_in_mp_cutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_in_mp_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_in_mp_cutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_last_entity_pos_received_over_network(&self, entity_: u32) -> ResultOf_network_get_last_entity_pos_received_over_network {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_last_entity_pos_received_over_network(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_network_get_last_entity_pos_received_over_network {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_privilege_check_in_progress(&self, ) -> ResultOf_network_is_privilege_check_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_privilege_check_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_privilege_check_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_finish_broadcasting_data(&self, ) -> ResultOf_network_finish_broadcasting_data {
    unsafe {
        
        let success = sdk::natives::network_finish_broadcasting_data(
            
        );
        
        
        ResultOf_network_finish_broadcasting_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_transition_host(&self, gamerHandle_: i32) -> ResultOf_network_get_transition_host {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_get_transition_host(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_get_transition_host {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_is_transition_closed_friends(&self, ) -> ResultOf_network_is_transition_closed_friends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_closed_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_closed_friends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_is_cheater(&self, ) -> ResultOf_network_player_is_cheater {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_is_cheater(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_player_is_cheater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ghost_alpha(&self, alpha_: i32) -> ResultOf_set_ghost_alpha {
    unsafe {
        let mut alpha_ = alpha_;
        let success = sdk::natives::set_ghost_alpha(
            alpha_,
        );
        
        
        ResultOf_set_ghost_alpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_warning(&self, ) -> ResultOf_network_skip_radio_warning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_skip_radio_warning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_skip_radio_warning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_id(&self, index_: i32) -> ResultOf_get_commerce_item_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_id(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_commerce_item_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_scs_private_msg_priv(&self, ) -> ResultOf_network_have_scs_private_msg_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_scs_private_msg_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_scs_private_msg_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_cutscene_entities_networked(&self, ) -> ResultOf_are_cutscene_entities_networked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_cutscene_entities_networked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_cutscene_entities_networked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_invite_on_call_for_invite_menu(&self, p0_: i32) -> ResultOf_network_set_invite_on_call_for_invite_menu {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::network_set_invite_on_call_for_invite_menu(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_network_set_invite_on_call_for_invite_menu {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_ugc_get_get_by_category(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: i32) -> ResultOf_ugc_get_get_by_category {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = Default::default();
        let success = sdk::natives::ugc_get_get_by_category(
            &mut native_return,
&mut p4_,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p4_ = p4_;
        
        ResultOf_ugc_get_get_by_category {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_session_voice_leave(&self, ) -> ResultOf_network_session_voice_leave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_voice_leave(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_voice_leave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_social_club_account(&self, ) -> ResultOf_network_has_social_club_account {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_social_club_account(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_social_club_account {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_live_area_launch_with_content(&self, ) -> ResultOf_get_is_live_area_launch_with_content {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_live_area_launch_with_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_live_area_launch_with_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_transition(&self, ) -> ResultOf_network_is_in_transition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_release_all_cached_descriptions(&self, ) -> ResultOf_ugc_release_all_cached_descriptions {
    unsafe {
        
        let success = sdk::natives::ugc_release_all_cached_descriptions(
            
        );
        
        
        ResultOf_ugc_release_all_cached_descriptions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_can_receive_rs_invites(&self, p0_: bool) -> ResultOf_network_set_can_receive_rs_invites {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_can_receive_rs_invites(
            p0_,
        );
        
        
        ResultOf_network_set_can_receive_rs_invites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_by_category(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: i32,
p5_: bool) -> ResultOf_ugc_query_by_category {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_query_by_category(
            &mut native_return,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_query_by_category {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_entities(&self, ped_amt_: i32,
vehicle_amt_: i32,
object_amt_: i32,
pickup_amt_: i32) -> ResultOf_can_register_mission_entities {
    unsafe {
        let mut native_return = Default::default();
let mut ped_amt_ = ped_amt_;
let mut vehicle_amt_ = vehicle_amt_;
let mut object_amt_ = object_amt_;
let mut pickup_amt_ = pickup_amt_;
        let success = sdk::natives::can_register_mission_entities(
            &mut native_return,
ped_amt_,
vehicle_amt_,
object_amt_,
pickup_amt_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_entities {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool_modification_detection_registration_hash(&self, contextHash_: u32,
nameHash_: u32,
value_: bool) -> ResultOf_network_access_tunable_bool_modification_detection_registration_hash {
    unsafe {
        let mut native_return = Default::default();
let mut contextHash_ = contextHash_;
let mut nameHash_ = nameHash_;
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_bool_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
contextHash_,
nameHash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_bool_modification_detection_registration_hash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_set_ignore_spectator_chat_limits_same_team(&self, toggle_: bool) -> ResultOf_network_set_ignore_spectator_chat_limits_same_team {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_ignore_spectator_chat_limits_same_team(
            toggle_,
        );
        
        
        ResultOf_network_set_ignore_spectator_chat_limits_same_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_invite_process_in_player_switch(&self, p0_: bool) -> ResultOf_network_allow_invite_process_in_player_switch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_allow_invite_process_in_player_switch(
            p0_,
        );
        
        
        ResultOf_network_allow_invite_process_in_player_switch {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_host_from_handle(&self, gamerHandle_: i32) -> ResultOf_network_is_transition_host_from_handle {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_transition_host_from_handle(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_transition_host_from_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_show_chat_restriction_msc(&self, player_: u32) -> ResultOf_network_show_chat_restriction_msc {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_show_chat_restriction_msc(
            player_,
        );
        
        
        ResultOf_network_show_chat_restriction_msc {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_player_index_from_ped(&self, ped_: u32) -> ResultOf_network_get_player_index_from_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::network_get_player_index_from_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_index_from_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_respawn_result_flags(&self, p0_: i32) -> ResultOf_network_get_respawn_result_flags {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_respawn_result_flags(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_respawn_result_flags {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_mp_cutscene(&self, ) -> ResultOf_network_is_in_mp_cutscene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_mp_cutscene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_mp_cutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_queued_join_request(&self, ) -> ResultOf_network_clear_queued_join_request {
    unsafe {
        
        let success = sdk::natives::network_clear_queued_join_request(
            
        );
        
        
        ResultOf_network_clear_queued_join_request {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_global_multiplayer_clock(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOf_network_get_global_multiplayer_clock {
    unsafe {
        let mut hours_ = Default::default();
let mut minutes_ = Default::default();
let mut seconds_ = Default::default();
        let success = sdk::natives::network_get_global_multiplayer_clock(
            &mut hours_,
&mut minutes_,
&mut seconds_,
        );
        let hours_ = hours_;
let minutes_ = minutes_;
let seconds_ = seconds_;
        
        ResultOf_network_get_global_multiplayer_clock {
            success,
            ret: (),
            hours_,
minutes_,
seconds_
        }
    }
}

    fn native_network_clear_found_gamers(&self, ) -> ResultOf_network_clear_found_gamers {
    unsafe {
        
        let success = sdk::natives::network_clear_found_gamers(
            
        );
        
        
        ResultOf_network_clear_found_gamers {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_most_recently_created_content(&self, offset_: i32,
count_: i32,
contentTypeName_: Option<String>,
p3_: i32) -> ResultOf_ugc_query_most_recently_created_content {
    unsafe {
        let mut native_return = Default::default();
let mut offset_ = offset_;
let mut count_ = count_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut p3_ = p3_;
        let success = sdk::natives::ugc_query_most_recently_created_content(
            &mut native_return,
offset_,
count_,
contentTypeName_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_query_most_recently_created_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_damage_tracker_active_on_network_id(&self, netID_: i32) -> ResultOf_is_damage_tracker_active_on_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netID_ = netID_;
        let success = sdk::natives::is_damage_tracker_active_on_network_id(
            &mut native_return,
netID_,
        );
        let native_return = native_return;
        
        ResultOf_is_damage_tracker_active_on_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_adding_friend(&self, ) -> ResultOf_network_is_adding_friend {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_adding_friend(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_adding_friend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host(&self, p0_: i32,
maxPlayers_: i32,
p2_: bool) -> ResultOf_network_session_host {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut maxPlayers_ = maxPlayers_;
let mut p2_ = p2_;
        let success = sdk::natives::network_session_host(
            &mut native_return,
p0_,
maxPlayers_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_host {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_cat(&self, index_: i32,
index2_: i32) -> ResultOf_get_commerce_item_cat {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
let mut index2_ = index2_;
        let success = sdk::natives::get_commerce_item_cat(
            native_return.pin_mut(),
index_,
index2_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_commerce_item_cat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_team_restrictions(&self, team_: i32,
toggle_: bool) -> ResultOf_network_override_team_restrictions {
    unsafe {
        let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_team_restrictions(
            team_,
toggle_,
        );
        
        
        ResultOf_network_override_team_restrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_handle_valid(&self, gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_is_handle_valid {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_is_handle_valid(
            &mut native_return,
&mut gamerHandle_,
gamerHandleSize_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_handle_valid {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_is_title_update_required(&self, ) -> ResultOf_network_is_title_update_required {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_title_update_required(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_title_update_required {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_net_statistics_info(&self, p0_: i32) -> ResultOf_network_get_net_statistics_info {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::network_get_net_statistics_info(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_network_get_net_statistics_info {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_is_participant_active(&self, p0_: i32) -> ResultOf_network_is_participant_active {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_is_participant_active(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_participant_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_crew_limit_max_members_transition(&self, p0_: i32) -> ResultOf_network_session_set_crew_limit_max_members_transition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_crew_limit_max_members_transition(
            p0_,
        );
        
        
        ResultOf_network_session_set_crew_limit_max_members_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_user_name(&self, p0_: i32) -> ResultOf_ugc_get_content_user_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_user_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_content_user_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_override_spectator_mode(&self, toggle_: bool) -> ResultOf_network_set_override_spectator_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_override_spectator_mode(
            toggle_,
        );
        
        
        ResultOf_network_set_override_spectator_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_player_record(&self, p0_: i32) -> ResultOf_ugc_get_content_has_player_record {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_player_record(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_has_player_record {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_entity_concealed(&self, entity_: u32) -> ResultOf_network_is_entity_concealed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_is_entity_concealed(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_entity_concealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_all_sticky_bombs_from_entity(&self, entity_: u32,
ped_: u32) -> ResultOf_remove_all_sticky_bombs_from_entity {
    unsafe {
        let mut entity_ = entity_;
let mut ped_ = ped_;
        let success = sdk::natives::remove_all_sticky_bombs_from_entity(
            entity_,
ped_,
        );
        
        
        ResultOf_remove_all_sticky_bombs_from_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_fillout_pm_player_list_with_names(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_fillout_pm_player_list_with_names {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::fillout_pm_player_list_with_names(
            &mut native_return,
&mut p0_,
&mut p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_fillout_pm_player_list_with_names {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_is_gamer_talking(&self, gamerHandle_: i32) -> ResultOf_network_is_gamer_talking {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_gamer_talking(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_gamer_talking {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_has_made_invite_decision(&self, gamerHandle_: i32) -> ResultOf_network_has_made_invite_decision {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_has_made_invite_decision(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_has_made_invite_decision {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_do_transition_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_network_do_transition_quickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_network_do_transition_quickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_currently_selected_gamer_handle_from_invite_menu(&self, p0_: i32) -> ResultOf_network_set_currently_selected_gamer_handle_from_invite_menu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_set_currently_selected_gamer_handle_from_invite_menu(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_set_currently_selected_gamer_handle_from_invite_menu {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_get_commerce_item_texturename(&self, index_: i32) -> ResultOf_get_commerce_item_texturename {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_texturename(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_commerce_item_texturename {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_network_id_remotely_controlled(&self, netId_: i32) -> ResultOf_network_is_network_id_remotely_controlled {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_is_network_id_remotely_controlled(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_network_id_remotely_controlled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_reset_body_tracker(&self, ) -> ResultOf_network_reset_body_tracker {
    unsafe {
        
        let success = sdk::natives::network_reset_body_tracker(
            
        );
        
        
        ResultOf_network_reset_body_tracker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_all_transition_invite(&self, ) -> ResultOf_network_remove_all_transition_invite {
    unsafe {
        
        let success = sdk::natives::network_remove_all_transition_invite(
            
        );
        
        
        ResultOf_network_remove_all_transition_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_register_mission_vehicles(&self, amount_: i32) -> ResultOf_can_register_mission_vehicles {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_vehicles(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_invited_gamer_to_transition(&self, p0_: i32) -> ResultOf_network_has_invited_gamer_to_transition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_has_invited_gamer_to_transition(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_has_invited_gamer_to_transition {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_presence_invite_playlist_current(&self, p0_: i32) -> ResultOf_network_get_presence_invite_playlist_current {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_playlist_current(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_playlist_current {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_crewinfo_get_string_value(&self, animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_network_clan_crewinfo_get_string_value {
    unsafe {
        let mut native_return = Default::default();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::network_clan_crewinfo_get_string_value(
            &mut native_return,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_clan_crewinfo_get_string_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_all_commerce_item_images(&self, ) -> ResultOf_release_all_commerce_item_images {
    unsafe {
        
        let success = sdk::natives::release_all_commerce_item_images(
            
        );
        
        
        ResultOf_release_all_commerce_item_images {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_user_content_privileges(&self, p0_: i32) -> ResultOf_network_have_user_content_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_have_user_content_privileges(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_have_user_content_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_unregister_networked_entity(&self, entity_: u32) -> ResultOf_network_unregister_networked_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_unregister_networked_entity(
            entity_,
        );
        
        
        ResultOf_network_unregister_networked_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_transition_members(&self, data_: i32,
dataCount_: i32) -> ResultOf_network_get_transition_members {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
let mut dataCount_ = dataCount_;
        let success = sdk::natives::network_get_transition_members(
            &mut native_return,
&mut data_,
dataCount_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_network_get_transition_members {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_get_activity_player_num(&self, p0_: bool) -> ResultOf_network_get_activity_player_num {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_activity_player_num(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_activity_player_num {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_to_be_host_of_this_script(&self, ) -> ResultOf_network_request_to_be_host_of_this_script {
    unsafe {
        
        let success = sdk::natives::network_request_to_be_host_of_this_script(
            
        );
        
        
        ResultOf_network_request_to_be_host_of_this_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_ped_to_synchronised_scene(&self, ped_: u32,
netScene_: i32,
animDict_: Option<String>,
animnName_: Option<String>,
speed_: f32,
speedMultiplier_: f32,
duration_: i32,
flag_: i32,
playbackRate_: f32,
p9_: i32) -> ResultOf_network_add_ped_to_synchronised_scene {
    unsafe {
        let mut ped_ = ped_;
let mut netScene_ = netScene_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animnName_ = sdk_helpers::create_c_string_ptr(animnName_);
let mut speed_ = speed_;
let mut speedMultiplier_ = speedMultiplier_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut playbackRate_ = playbackRate_;
let mut p9_ = p9_;
        let success = sdk::natives::network_add_ped_to_synchronised_scene(
            ped_,
netScene_,
animDict_.as_ref().unwrap(),
animnName_.as_ref().unwrap(),
speed_,
speedMultiplier_,
duration_,
flag_,
playbackRate_,
p9_,
        );
        
        
        ResultOf_network_add_ped_to_synchronised_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_index_by_id(&self, p0_: i32) -> ResultOf_network_get_presence_invite_index_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_index_by_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_index_by_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_offline_invite_pending(&self, ) -> ResultOf_network_is_offline_invite_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_offline_invite_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_offline_invite_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_closed_crew(&self, ) -> ResultOf_network_session_is_closed_crew {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_closed_crew(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_closed_crew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_currently_selected_gamer_handle_from_invite_menu(&self, p0_: i32) -> ResultOf_network_get_currently_selected_gamer_handle_from_invite_menu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_get_currently_selected_gamer_handle_from_invite_menu(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_get_currently_selected_gamer_handle_from_invite_menu {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_np_unavailable_reason(&self, ) -> ResultOf_network_get_np_unavailable_reason {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_np_unavailable_reason(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_np_unavailable_reason {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_spectator(&self, toggle_: bool) -> ResultOf_network_set_activity_spectator {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_activity_spectator(
            toggle_,
        );
        
        
        ResultOf_network_set_activity_spectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_transition_invite(&self, p0_: i32) -> ResultOf_network_remove_transition_invite {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::network_remove_transition_invite(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_network_remove_transition_invite {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_clan_is_rockstar_clan(&self, clanDesc_: i32,
bufferSize_: i32) -> ResultOf_network_clan_is_rockstar_clan {
    unsafe {
        let mut native_return = Default::default();
let mut clanDesc_ = Default::default();
let mut bufferSize_ = bufferSize_;
        let success = sdk::natives::network_clan_is_rockstar_clan(
            &mut native_return,
&mut clanDesc_,
bufferSize_,
        );
        let native_return = native_return;
let clanDesc_ = clanDesc_;
        
        ResultOf_network_clan_is_rockstar_clan {
            success,
            ret: native_return,
            clanDesc_
        }
    }
}

    fn native_get_user_premium_access(&self, ) -> ResultOf_get_user_premium_access {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_user_premium_access(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_user_premium_access {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_count(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_rating_count {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_rating_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_local_player_visible_locally(&self, bIncludePlayersVehicle_: bool) -> ResultOf_set_local_player_visible_locally {
    unsafe {
        let mut bIncludePlayersVehicle_ = bIncludePlayersVehicle_;
        let success = sdk::natives::set_local_player_visible_locally(
            bIncludePlayersVehicle_,
        );
        
        
        ResultOf_set_local_player_visible_locally {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_total(&self, ) -> ResultOf_ugc_get_content_total {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_total(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_total {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_network_mission_vehicles(&self, amount_: i32) -> ResultOf_reserve_network_mission_vehicles {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_vehicles(
            amount_,
        );
        
        
        ResultOf_reserve_network_mission_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene_remain_hack(&self, p0_: i32,
p1_: i32) -> ResultOf_set_network_id_visible_in_cutscene_remain_hack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_network_id_visible_in_cutscene_remain_hack(
            p0_,
p1_,
        );
        
        
        ResultOf_set_network_id_visible_in_cutscene_remain_hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_social_networking_sharing_priv(&self, ) -> ResultOf_network_has_social_networking_sharing_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_social_networking_sharing_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_social_networking_sharing_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_follow_invite(&self, ) -> ResultOf_network_has_follow_invite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_follow_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_get_name(&self, player_: u32) -> ResultOf_network_player_get_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::network_player_get_name(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_player_get_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_player_colour_instead_of_team_colour(&self, toggle_: bool) -> ResultOf_use_player_colour_instead_of_team_colour {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_player_colour_instead_of_team_colour(
            toggle_,
        );
        
        
        ResultOf_use_player_colour_instead_of_team_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_showing_system_ui_or_recently_requested_upsell(&self, ) -> ResultOf_network_is_showing_system_ui_or_recently_requested_upsell {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_showing_system_ui_or_recently_requested_upsell(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_showing_system_ui_or_recently_requested_upsell {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_conneted_to_np_presence(&self, ) -> ResultOf_network_is_conneted_to_np_presence {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_conneted_to_np_presence(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_conneted_to_np_presence {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_online_privileges(&self, p0_: i32,
p1_: bool) -> ResultOf_network_check_online_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_check_online_privileges(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_check_online_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_invalid_object_model(&self, modelHash_: u32) -> ResultOf_network_remove_invalid_object_model {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::network_remove_invalid_object_model(
            modelHash_,
        );
        
        
        ResultOf_network_remove_invalid_object_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_did_modify_succeed(&self, ) -> ResultOf_ugc_did_modify_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_modify_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_did_modify_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_data_manager_handle(&self, p0_: i32) -> ResultOf_network_set_current_data_manager_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_set_current_data_manager_handle(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_set_current_data_manager_handle {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_reserve_local_network_mission_objects(&self, amount_: i32) -> ResultOf_reserve_local_network_mission_objects {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_objects(
            amount_,
        );
        
        
        ResultOf_reserve_local_network_mission_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_destroyer_of_network_id(&self, netId_: i32,
weaponHash_: u32) -> ResultOf_network_get_destroyer_of_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
let mut weaponHash_ = Default::default();
        let success = sdk::natives::network_get_destroyer_of_network_id(
            &mut native_return,
&mut weaponHash_,
netId_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_network_get_destroyer_of_network_id {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_get_network_time(&self, ) -> ResultOf_get_network_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_network_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_network_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_ready_for_events(&self, toggle_: bool) -> ResultOf_network_set_script_ready_for_events {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_script_ready_for_events(
            toggle_,
        );
        
        
        ResultOf_network_set_script_ready_for_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_create_synchronised_scene(&self, x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
rotationOrder_: i32,
useOcclusionPortal_: bool,
looped_: bool,
p9_: f32,
animTime_: f32,
p11_: f32) -> ResultOf_network_create_synchronised_scene {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut rotationOrder_ = rotationOrder_;
let mut useOcclusionPortal_ = useOcclusionPortal_;
let mut looped_ = looped_;
let mut p9_ = p9_;
let mut animTime_ = animTime_;
let mut p11_ = p11_;
        let success = sdk::natives::network_create_synchronised_scene(
            &mut native_return,
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
rotationOrder_,
useOcclusionPortal_,
looped_,
p9_,
animTime_,
p11_,
        );
        let native_return = native_return;
        
        ResultOf_network_create_synchronised_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_description_hash(&self, p0_: i32) -> ResultOf_ugc_get_content_description_hash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_description_hash(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_description_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_look_at_talkers(&self, p0_: bool) -> ResultOf_network_set_look_at_talkers {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_look_at_talkers(
            p0_,
        );
        
        
        ResultOf_network_set_look_at_talkers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_bone_id_of_fatal_hit(&self, ) -> ResultOf_network_get_bone_id_of_fatal_hit {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_bone_id_of_fatal_hit(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_bone_id_of_fatal_hit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_inactive_profile(&self, p0_: i32) -> ResultOf_network_is_inactive_profile {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_is_inactive_profile(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_is_inactive_profile {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_can_enter_multiplayer(&self, ) -> ResultOf_network_can_enter_multiplayer {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_enter_multiplayer(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_enter_multiplayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_ghost_collision(&self, entity_: u32) -> ResultOf_is_entity_in_ghost_collision {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_ghost_collision(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_in_ghost_collision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_invalid_object_model(&self, modelHash_: u32) -> ResultOf_network_add_invalid_object_model {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::network_add_invalid_object_model(
            modelHash_,
        );
        
        
        ResultOf_network_add_invalid_object_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_voice_respond_to_request(&self, p0_: bool,
p1_: i32) -> ResultOf_network_session_voice_respond_to_request {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_voice_respond_to_request(
            p0_,
p1_,
        );
        
        
        ResultOf_network_session_voice_respond_to_request {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_hi_res_photo(&self, p0_: i32) -> ResultOf_ugc_get_content_has_hi_res_photo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_hi_res_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_has_hi_res_photo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_content_data_from_params(&self, contentTypeName_: Option<String>,
contentId_: Option<String>,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_ugc_request_content_data_from_params {
    unsafe {
        let mut native_return = Default::default();
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::ugc_request_content_data_from_params(
            &mut native_return,
contentTypeName_.as_ref().unwrap(),
contentId_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_request_content_data_from_params {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_objects(&self, amount_: i32) -> ResultOf_can_register_mission_objects {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_objects(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_objects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_banned_priv(&self, ) -> ResultOf_network_have_ros_banned_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_banned_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_ros_banned_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_cloud_background_script_request_pending(&self, ) -> ResultOf_network_is_cloud_background_script_request_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cloud_background_script_request_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_cloud_background_script_request_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_get_by_content_id(&self, contentId_: Option<String>,
contentTypeName_: Option<String>) -> ResultOf_ugc_get_get_by_content_id {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = sdk_helpers::create_c_string_ptr(contentId_);
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_get_get_by_content_id(
            &mut native_return,
contentId_.as_ref().unwrap(),
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_get_by_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_entity_get_object_id(&self, entity_: u32) -> ResultOf_network_entity_get_object_id {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_entity_get_object_id(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_entity_get_object_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_owns_waypoint(&self, player_: u32) -> ResultOf_network_get_player_owns_waypoint {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_owns_waypoint(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_owns_waypoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_player_index(&self, ) -> ResultOf_network_get_host_player_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_host_player_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_host_player_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_should_show_strict_nat_warning(&self, ) -> ResultOf_network_should_show_strict_nat_warning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_should_show_strict_nat_warning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_should_show_strict_nat_warning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_assisted_kill_of_entity(&self, player_: u32,
entity_: u32,
p2_: i32) -> ResultOf_network_get_assisted_kill_of_entity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
let mut p2_ = Default::default();
        let success = sdk::natives::network_get_assisted_kill_of_entity(
            &mut native_return,
&mut p2_,
player_,
entity_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_network_get_assisted_kill_of_entity {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_set_network_enable_high_speed_edge_fall_detection(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_network_enable_high_speed_edge_fall_detection {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_enable_high_speed_edge_fall_detection(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_network_enable_high_speed_edge_fall_detection {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_host_of_this_script(&self, ) -> ResultOf_network_is_host_of_this_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_host_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_host_of_this_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_communication_privileges(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOf_network_check_communication_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_communication_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_check_communication_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_account_upgrade_ui(&self, ) -> ResultOf_network_show_account_upgrade_ui {
    unsafe {
        
        let success = sdk::natives::network_show_account_upgrade_ui(
            
        );
        
        
        ResultOf_network_show_account_upgrade_ui {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_talker_proximity(&self, ) -> ResultOf_network_get_talker_proximity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_talker_proximity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_talker_proximity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_valid_ros_credentials(&self, ) -> ResultOf_network_has_valid_ros_credentials {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_valid_ros_credentials(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_valid_ros_credentials {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_in_voice_session(&self, ) -> ResultOf_network_session_is_in_voice_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_in_voice_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_in_voice_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_profile_ui(&self, gamerHandle_: i32) -> ResultOf_network_show_profile_ui {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_show_profile_ui(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_show_profile_ui {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_queue_gamer_for_status(&self, p0_: i32) -> ResultOf_network_queue_gamer_for_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_queue_gamer_for_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_queue_gamer_for_status {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_does_tunable_exist(&self, tunableContext_: Option<String>,
tunableName_: Option<String>) -> ResultOf_network_does_tunable_exist {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = sdk_helpers::create_c_string_ptr(tunableContext_);
let mut tunableName_ = sdk_helpers::create_c_string_ptr(tunableName_);
        let success = sdk::natives::network_does_tunable_exist(
            &mut native_return,
tunableContext_.as_ref().unwrap(),
tunableName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_does_tunable_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_get_gamer_status(&self, ) -> ResultOf_network_clear_get_gamer_status {
    unsafe {
        
        let success = sdk::natives::network_clear_get_gamer_status(
            
        );
        
        
        ResultOf_network_clear_get_gamer_status {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_control_of_door(&self, doorID_: i32) -> ResultOf_network_request_control_of_door {
    unsafe {
        let mut native_return = Default::default();
let mut doorID_ = doorID_;
        let success = sdk::natives::network_request_control_of_door(
            &mut native_return,
doorID_,
        );
        let native_return = native_return;
        
        ResultOf_network_request_control_of_door {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_positive_count(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_rating_positive_count {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_positive_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_rating_positive_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_handle_online(&self, gamerHandle_: i32) -> ResultOf_network_is_friend_handle_online {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_friend_handle_online(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_friend_handle_online {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_am_i_blocked_by_player(&self, player_: u32) -> ResultOf_network_am_i_blocked_by_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_am_i_blocked_by_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_am_i_blocked_by_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_is_tournament(&self, p0_: i32) -> ResultOf_network_get_presence_invite_is_tournament {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_is_tournament(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_is_tournament {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_store_available_to_user(&self, ) -> ResultOf_is_store_available_to_user {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_store_available_to_user(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_store_available_to_user {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_launch_from_live_area(&self, ) -> ResultOf_get_is_launch_from_live_area {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_launch_from_live_area(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_launch_from_live_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_network_time_accurate(&self, ) -> ResultOf_get_network_time_accurate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_network_time_accurate(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_network_time_accurate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_trigger_damage_event_for_zero_damage(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_trigger_damage_event_for_zero_damage {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_trigger_damage_event_for_zero_damage(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_trigger_damage_event_for_zero_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_local_player_invincible(&self, ) -> ResultOf_network_is_local_player_invincible {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_local_player_invincible(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_local_player_invincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_content_to_load_type(&self, ) -> ResultOf_get_content_to_load_type {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_content_to_load_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_content_to_load_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_start(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_transition_start {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_transition_start(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_network_transition_start {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_group_max(&self, playerType_: i32,
playerCount_: i32) -> ResultOf_network_session_set_matchmaking_group_max {
    unsafe {
        let mut playerType_ = playerType_;
let mut playerCount_ = playerCount_;
        let success = sdk::natives::network_session_set_matchmaking_group_max(
            playerType_,
playerCount_,
        );
        
        
        ResultOf_network_session_set_matchmaking_group_max {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_texture_download(&self, p0_: i32) -> ResultOf_get_status_of_texture_download {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_texture_download(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_status_of_texture_download {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int(&self, tunableContext_: Option<String>,
tunableName_: Option<String>,
value_: i32) -> ResultOf_network_access_tunable_int {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = sdk_helpers::create_c_string_ptr(tunableContext_);
let mut tunableName_ = sdk_helpers::create_c_string_ptr(tunableName_);
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_int(
            &mut native_return,
&mut value_,
tunableContext_.as_ref().unwrap(),
tunableName_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_int {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_set_vehicle_driven_in_test_drive(&self, toggle_: bool) -> ResultOf_network_set_vehicle_driven_in_test_drive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_vehicle_driven_in_test_drive(
            toggle_,
        );
        
        
        ResultOf_network_set_vehicle_driven_in_test_drive {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_player_muted_by_me(&self, player_: u32) -> ResultOf_network_is_player_muted_by_me {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_muted_by_me(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_muted_by_me {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_created_by_local_player(&self, p0_: i32) -> ResultOf_ugc_get_content_created_by_local_player {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_created_by_local_player(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_created_by_local_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_refreshing_ros_credentials(&self, ) -> ResultOf_network_is_refreshing_ros_credentials {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_refreshing_ros_credentials(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_refreshing_ros_credentials {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_host(&self, ) -> ResultOf_network_is_host {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_host {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_chatting_in_platform_party(&self, gamerHandle_: i32) -> ResultOf_network_is_chatting_in_platform_party {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_chatting_in_platform_party(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_chatting_in_platform_party {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_add_friend(&self, gamerHandle_: i32,
message_: Option<String>) -> ResultOf_network_add_friend {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut message_ = sdk_helpers::create_c_string_ptr(message_);
        let success = sdk::natives::network_add_friend(
            &mut native_return,
&mut gamerHandle_,
message_.as_ref().unwrap(),
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_add_friend {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_set_spectator_to_non_spectator_text_chat(&self, toggle_: bool) -> ResultOf_network_set_spectator_to_non_spectator_text_chat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_spectator_to_non_spectator_text_chat(
            toggle_,
        );
        
        
        ResultOf_network_set_spectator_to_non_spectator_text_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_communicate_with_gamer(&self, gamerHandle_: i32) -> ResultOf_network_can_communicate_with_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_communicate_with_gamer(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_communicate_with_gamer {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_is_using_online_promotion(&self, ) -> ResultOf_network_is_using_online_promotion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_using_online_promotion(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_using_online_promotion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_participant_id(&self, ) -> ResultOf_participant_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::participant_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_participant_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_concealed(&self, player_: u32) -> ResultOf_network_is_player_concealed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_concealed(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_concealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_ros_privilege_special_edition_content(&self, ) -> ResultOf_network_has_ros_privilege_special_edition_content {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_ros_privilege_special_edition_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_ros_privilege_special_edition_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_cloud_background_scripts(&self, ) -> ResultOf_network_request_cloud_background_scripts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_request_cloud_background_scripts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_request_cloud_background_scripts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_entity_area(&self, areaHandle_: i32) -> ResultOf_network_remove_entity_area {
    unsafe {
        let mut native_return = Default::default();
let mut areaHandle_ = areaHandle_;
        let success = sdk::natives::network_remove_entity_area(
            &mut native_return,
areaHandle_,
        );
        let native_return = native_return;
        
        ResultOf_network_remove_entity_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_connected(&self, player_: u32) -> ResultOf_network_is_player_connected {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_connected(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_connected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_did_get_succeed(&self, ) -> ResultOf_ugc_did_get_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_get_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_did_get_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_minimum_rank_for_mission(&self, p0_: bool) -> ResultOf_network_set_minimum_rank_for_mission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_minimum_rank_for_mission(
            p0_,
        );
        
        
        ResultOf_network_set_minimum_rank_for_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_reset_next_close(&self, ) -> ResultOf_network_skip_radio_reset_next_close {
    unsafe {
        
        let success = sdk::natives::network_skip_radio_reset_next_close(
            
        );
        
        
        ResultOf_network_skip_radio_reset_next_close {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_getting_gamer_status(&self, ) -> ResultOf_network_is_getting_gamer_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_getting_gamer_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_getting_gamer_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_do_crew_matchmaking(&self, crewId_: i32,
p1_: i32,
p2_: i32,
maxPlayers_: i32) -> ResultOf_network_session_do_crew_matchmaking {
    unsafe {
        let mut native_return = Default::default();
let mut crewId_ = crewId_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_session_do_crew_matchmaking(
            &mut native_return,
crewId_,
p1_,
p2_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_do_crew_matchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_bail(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_bail {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_bail(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_bail {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_use_high_precision_rotation(&self, netId_: i32,
toggle_: bool) -> ResultOf_network_entity_use_high_precision_rotation {
    unsafe {
        let mut netId_ = netId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_entity_use_high_precision_rotation(
            netId_,
toggle_,
        );
        
        
        ResultOf_network_entity_use_high_precision_rotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_age_group(&self, ) -> ResultOf_network_get_age_group {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_age_group(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_age_group {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_remote_player_visible_in_cutscene(&self, player_: u32,
locallyVisible_: bool) -> ResultOf_set_remote_player_visible_in_cutscene {
    unsafe {
        let mut player_ = player_;
let mut locallyVisible_ = locallyVisible_;
        let success = sdk::natives::set_remote_player_visible_in_cutscene(
            player_,
locallyVisible_,
        );
        
        
        ResultOf_set_remote_player_visible_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_store_enabled(&self, toggle_: bool) -> ResultOf_set_store_enabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_store_enabled(
            toggle_,
        );
        
        
        ResultOf_set_store_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_service_event_arguments(&self, ) -> ResultOf_clear_service_event_arguments {
    unsafe {
        
        let success = sdk::natives::clear_service_event_arguments(
            
        );
        
        
        ResultOf_clear_service_event_arguments {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_access_tunable_float_hash(&self, tunableContext_: u32,
tunableName_: u32,
value_: f32) -> ResultOf_network_access_tunable_float_hash {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = tunableContext_;
let mut tunableName_ = tunableName_;
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_float_hash(
            &mut native_return,
&mut value_,
tunableContext_,
tunableName_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_float_hash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_transition_block_join_requests(&self, p0_: bool) -> ResultOf_network_transition_block_join_requests {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_block_join_requests(
            p0_,
        );
        
        
        ResultOf_network_transition_block_join_requests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_multiplayer_disabled(&self, ) -> ResultOf_network_is_multiplayer_disabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_multiplayer_disabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_multiplayer_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_ped_behind_before_warp(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool,
p5_: bool) -> ResultOf_network_leave_ped_behind_before_warp {
    unsafe {
        let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_leave_ped_behind_before_warp(
            player_,
x_,
y_,
z_,
p4_,
p5_,
        );
        
        
        ResultOf_network_leave_ped_behind_before_warp {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_most_recently_played_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_ugc_get_most_recently_played_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_most_recently_played_content(
            &mut native_return,
&mut p2_,
&mut p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_ugc_get_most_recently_played_content {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_network_override_send_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOf_network_override_send_restrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_send_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOf_network_override_send_restrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_player_bookmarked(&self, p0_: i32) -> ResultOf_ugc_get_content_has_player_bookmarked {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_player_bookmarked(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_has_player_bookmarked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_cached_player_head_blend_data(&self, ped_: u32,
player_: u32) -> ResultOf_network_apply_cached_player_head_blend_data {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut player_ = player_;
        let success = sdk::natives::network_apply_cached_player_head_blend_data(
            &mut native_return,
ped_,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_apply_cached_player_head_blend_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_obj_to_net(&self, object_: u32) -> ResultOf_obj_to_net {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::obj_to_net(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_obj_to_net {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_synchronised_scene(&self, netScene_: i32) -> ResultOf_network_start_synchronised_scene {
    unsafe {
        let mut netScene_ = netScene_;
        let success = sdk::natives::network_start_synchronised_scene(
            netScene_,
        );
        
        
        ResultOf_network_start_synchronised_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_cloud_available(&self, ) -> ResultOf_network_is_cloud_available {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cloud_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_cloud_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cloud_time_as_int(&self, ) -> ResultOf_get_cloud_time_as_int {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cloud_time_as_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cloud_time_as_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_clear(&self, ) -> ResultOf_network_get_primary_clan_data_clear {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_clear(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_primary_clan_data_clear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_player_started_transition(&self, player_: u32) -> ResultOf_network_has_player_started_transition {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_has_player_started_transition(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_player_started_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_query_my_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_ugc_query_my_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_query_my_content(
            &mut native_return,
&mut p2_,
p0_,
p1_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_ugc_query_my_content {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_network_session_voice_host(&self, ) -> ResultOf_network_session_voice_host {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_voice_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_voice_host {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_do_transition_quickmatch_with_group(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOf_network_do_transition_quickmatch_with_group {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = Default::default();
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::network_do_transition_quickmatch_with_group(
            &mut native_return,
&mut p4_,
p0_,
p1_,
p2_,
p3_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
let p4_ = p4_;
        
        ResultOf_network_do_transition_quickmatch_with_group {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_set_in_mp_cutscene(&self, p0_: bool,
p1_: bool) -> ResultOf_network_set_in_mp_cutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_in_mp_cutscene(
            p0_,
p1_,
        );
        
        
        ResultOf_network_set_in_mp_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_join_transition(&self, player_: u32) -> ResultOf_network_join_transition {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_join_transition(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_join_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_spectator_max(&self, maxSpectators_: i32) -> ResultOf_network_set_activity_spectator_max {
    unsafe {
        let mut maxSpectators_ = maxSpectators_;
        let success = sdk::natives::network_set_activity_spectator_max(
            maxSpectators_,
        );
        
        
        ResultOf_network_set_activity_spectator_max {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_script_active(&self, scriptName_: Option<String>,
instance_id_: i32,
p2_: bool,
position_hash_: i32) -> ResultOf_network_is_script_active {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut instance_id_ = instance_id_;
let mut p2_ = p2_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_is_script_active(
            &mut native_return,
scriptName_.as_ref().unwrap(),
instance_id_,
p2_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_script_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_am_i_muted_by_player(&self, player_: u32) -> ResultOf_network_am_i_muted_by_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_am_i_muted_by_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_am_i_muted_by_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_can_be_reassigned(&self, netId_: i32,
toggle_: bool) -> ResultOf_set_network_id_can_be_reassigned {
    unsafe {
        let mut netId_ = netId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_can_be_reassigned(
            netId_,
toggle_,
        );
        
        
        ResultOf_set_network_id_can_be_reassigned {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_to_game(&self, ) -> ResultOf_network_is_transition_to_game {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_to_game(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_to_game {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_proximity_affects_team(&self, toggle_: bool) -> ResultOf_network_set_proximity_affects_team {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_proximity_affects_team(
            toggle_,
        );
        
        
        ResultOf_network_set_proximity_affects_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_invite_gamers(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_network_invite_gamers {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = p3_;
        let success = sdk::natives::network_invite_gamers(
            &mut native_return,
&mut p0_,
&mut p2_,
p1_,
p3_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p2_ = p2_;
        
        ResultOf_network_invite_gamers {
            success,
            ret: native_return,
            p0_,
p2_
        }
    }
}

    fn native_network_get_found_gamer(&self, p0_: i32,
p1_: i32) -> ResultOf_network_get_found_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_get_found_gamer(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_get_found_gamer {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_disable_invincible_flashing(&self, player_: u32,
toggle_: bool) -> ResultOf_network_disable_invincible_flashing {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_disable_invincible_flashing(
            player_,
toggle_,
        );
        
        
        ResultOf_network_disable_invincible_flashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_session_started(&self, ) -> ResultOf_network_is_session_started {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_session_started {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_are_players_in_same_tutorial_session(&self, player_: u32,
index_: i32) -> ResultOf_network_are_players_in_same_tutorial_session {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut index_ = index_;
        let success = sdk::natives::network_are_players_in_same_tutorial_session(
            &mut native_return,
player_,
index_,
        );
        let native_return = native_return;
        
        ResultOf_network_are_players_in_same_tutorial_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_as_string(&self, time_: i32) -> ResultOf_get_time_as_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut time_ = time_;
        let success = sdk::natives::get_time_as_string(
            native_return.pin_mut(),
time_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_time_as_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_do_transition_to_new_freemode(&self, p0_: i32,
p1_: i32,
players_: i32,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOf_network_do_transition_to_new_freemode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut players_ = players_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_to_new_freemode(
            &mut native_return,
&mut p0_,
p1_,
players_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_do_transition_to_new_freemode {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_shutdown_and_load_most_recent_save(&self, ) -> ResultOf_shutdown_and_load_most_recent_save {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::shutdown_and_load_most_recent_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_shutdown_and_load_most_recent_save {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_start(&self, gamerHandle_: i32) -> ResultOf_network_gamertag_from_handle_start {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_gamertag_from_handle_start(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_gamertag_from_handle_start {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_get_crew_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: i32) -> ResultOf_ugc_get_crew_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = Default::default();
        let success = sdk::natives::ugc_get_crew_content(
            &mut native_return,
&mut p4_,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p4_ = p4_;
        
        ResultOf_ugc_get_crew_content {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_clan_join(&self, clanDesc_: i32) -> ResultOf_network_clan_join {
    unsafe {
        let mut native_return = Default::default();
let mut clanDesc_ = clanDesc_;
        let success = sdk::natives::network_clan_join(
            &mut native_return,
clanDesc_,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_join {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_is_creating(&self, ) -> ResultOf_ugc_is_creating {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_creating(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_is_creating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_end(&self, p0_: bool,
p1_: bool) -> ResultOf_network_session_end {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_end(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_end {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_join_group_activity(&self, ) -> ResultOf_network_join_group_activity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_group_activity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_join_group_activity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_suppress_invite(&self, toggle_: bool) -> ResultOf_network_suppress_invite {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_suppress_invite(
            toggle_,
        );
        
        
        ResultOf_network_suppress_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_do_transition_quickmatch_async(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_network_do_transition_quickmatch_async {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_quickmatch_async(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_network_do_transition_quickmatch_async {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_create_ticket_priv(&self, ) -> ResultOf_network_have_ros_create_ticket_priv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_create_ticket_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_have_ros_create_ticket_priv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_logged_in_to_psn(&self, ) -> ResultOf_network_is_logged_in_to_psn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_logged_in_to_psn(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_logged_in_to_psn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_member_id(&self, memberId_: Option<String>,
gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_handle_from_member_id {
    unsafe {
        let mut memberId_ = sdk_helpers::create_c_string_ptr(memberId_);
let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_handle_from_member_id(
            &mut gamerHandle_,
memberId_.as_ref().unwrap(),
gamerHandleSize_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_handle_from_member_id {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_get_network_id_from_entity(&self, entity_: u32) -> ResultOf_network_get_network_id_from_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_network_id_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_network_id_from_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_tuning_crc_hacker_check(&self, player_: u32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOf_trigger_tuning_crc_hacker_check {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::trigger_tuning_crc_hacker_check(
            &mut native_return,
player_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_trigger_tuning_crc_hacker_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_is_emblem_ready(&self, p0_: i32,
p1_: i32) -> ResultOf_network_clan_is_emblem_ready {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::network_clan_is_emblem_ready(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_network_clan_is_emblem_ready {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_can_text_chat_with_gamer(&self, gamerHandle_: i32) -> ResultOf_network_can_text_chat_with_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_text_chat_with_gamer(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_text_chat_with_gamer {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_is_network_id_owned_by_participant(&self, netId_: i32) -> ResultOf_is_network_id_owned_by_participant {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::is_network_id_owned_by_participant(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_is_network_id_owned_by_participant {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_found_gamers(&self, ) -> ResultOf_network_get_num_found_gamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_found_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_found_gamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_clear_modify_result(&self, ) -> ResultOf_ugc_clear_modify_result {
    unsafe {
        
        let success = sdk::natives::ugc_clear_modify_result(
            
        );
        
        
        ResultOf_ugc_clear_modify_result {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_force_cancel_invite(&self, ) -> ResultOf_network_session_force_cancel_invite {
    unsafe {
        
        let success = sdk::natives::network_session_force_cancel_invite(
            
        );
        
        
        ResultOf_network_session_force_cancel_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_vehicle_max_position_delta_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOf_set_network_vehicle_max_position_delta_multiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_network_vehicle_max_position_delta_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOf_set_network_vehicle_max_position_delta_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_difference(&self, timeA_: i32,
timeB_: i32) -> ResultOf_get_time_difference {
    unsafe {
        let mut native_return = Default::default();
let mut timeA_ = timeA_;
let mut timeB_ = timeB_;
        let success = sdk::natives::get_time_difference(
            &mut native_return,
timeA_,
timeB_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_difference {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_do_not_launch_from_join_as_migrated_host(&self, toggle_: bool) -> ResultOf_network_set_do_not_launch_from_join_as_migrated_host {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_do_not_launch_from_join_as_migrated_host(
            toggle_,
        );
        
        
        ResultOf_network_set_do_not_launch_from_join_as_migrated_host {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_commerce_item_image(&self, index_: i32) -> ResultOf_request_commerce_item_image {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::request_commerce_item_image(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_request_commerce_item_image {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_connected_players(&self, ) -> ResultOf_network_get_num_connected_players {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_connected_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_connected_players {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_ped_to_synchronised_scene_with_ik(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOf_network_add_ped_to_synchronised_scene_with_ik {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_add_ped_to_synchronised_scene_with_ik(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_network_add_ped_to_synchronised_scene_with_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_host_transition(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: bool,
p6_: bool,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOf_network_host_transition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_host_transition(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_network_host_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_control_of_network_id(&self, netId_: i32) -> ResultOf_network_request_control_of_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_request_control_of_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_request_control_of_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene(&self, netId_: i32,
p1_: bool,
p2_: bool) -> ResultOf_set_network_id_visible_in_cutscene {
    unsafe {
        let mut netId_ = netId_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_network_id_visible_in_cutscene(
            netId_,
p1_,
p2_,
        );
        
        
        ResultOf_set_network_id_visible_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_ros_privilege(&self, index_: i32) -> ResultOf_network_has_ros_privilege {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::network_has_ros_privilege(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_ros_privilege {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_max_num_participants(&self, ) -> ResultOf_network_get_max_num_participants {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_max_num_participants(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_max_num_participants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_custom_arena_ball_params(&self, netId_: i32) -> ResultOf_network_set_custom_arena_ball_params {
    unsafe {
        let mut netId_ = netId_;
        let success = sdk::natives::network_set_custom_arena_ball_params(
            netId_,
        );
        
        
        ResultOf_network_set_custom_arena_ball_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_max_num_network_pickups(&self, ) -> ResultOf_get_max_num_network_pickups {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_pickups(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_max_num_network_pickups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_block_join_requests(&self, toggle_: bool) -> ResultOf_network_session_block_join_requests {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_session_block_join_requests(
            toggle_,
        );
        
        
        ResultOf_network_session_block_join_requests {
            success,
            ret: (),
            
        }
    }
}

    fn native_facebook_did_post_succeed(&self, ) -> ResultOf_facebook_did_post_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_did_post_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_facebook_did_post_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_most_recently_created_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_ugc_get_most_recently_created_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_most_recently_created_content(
            &mut native_return,
&mut p2_,
&mut p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_ugc_get_most_recently_created_content {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_ugc_get_content_category(&self, p0_: i32) -> ResultOf_ugc_get_content_category {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_category(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_category {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_remote_player_as_ghost(&self, player_: u32,
p1_: bool) -> ResultOf_set_remote_player_as_ghost {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_remote_player_as_ghost(
            player_,
p1_,
        );
        
        
        ResultOf_set_remote_player_as_ghost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_coords_and_heading(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOf_network_override_coords_and_heading {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::network_override_coords_and_heading(
            entity_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOf_network_override_coords_and_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_always_exists_for_player(&self, netId_: i32,
player_: u32,
toggle_: bool) -> ResultOf_set_network_id_always_exists_for_player {
    unsafe {
        let mut netId_ = netId_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_always_exists_for_player(
            netId_,
player_,
toggle_,
        );
        
        
        ResultOf_set_network_id_always_exists_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_platform_subscription_check_pending(&self, ) -> ResultOf_network_is_platform_subscription_check_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_platform_subscription_check_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_platform_subscription_check_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_is_verified(&self, p0_: i32) -> ResultOf_ugc_get_content_is_verified {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_verified(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_is_verified {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_download_membership(&self, gamerHandle_: i32) -> ResultOf_network_clan_download_membership {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_clan_download_membership(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_clan_download_membership {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_get_predicted_velocity(&self, entity_: u32) -> ResultOf_network_get_predicted_velocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_predicted_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_network_get_predicted_velocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool(&self, tunableContext_: Option<String>,
tunableName_: Option<String>) -> ResultOf_network_access_tunable_bool {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = sdk_helpers::create_c_string_ptr(tunableContext_);
let mut tunableName_ = sdk_helpers::create_c_string_ptr(tunableName_);
        let success = sdk::natives::network_access_tunable_bool(
            &mut native_return,
tunableContext_.as_ref().unwrap(),
tunableName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_network_access_tunable_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_spawn_location_option(&self, mpSettingSpawn_: u32) -> ResultOf_network_set_current_spawn_location_option {
    unsafe {
        let mut mpSettingSpawn_ = mpSettingSpawn_;
        let success = sdk::natives::network_set_current_spawn_location_option(
            mpSettingSpawn_,
        );
        
        
        ResultOf_network_set_current_spawn_location_option {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_reserved_mission_objects(&self, p0_: bool,
p1_: i32) -> ResultOf_get_num_reserved_mission_objects {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_objects(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_reserved_mission_objects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_cutscene_entities(&self, toggle_: bool) -> ResultOf_set_network_cutscene_entities {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_cutscene_entities(
            toggle_,
        );
        
        
        ResultOf_set_network_cutscene_entities {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_get_membership_count(&self, p0_: i32) -> ResultOf_network_clan_get_membership_count {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_clan_get_membership_count(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_clan_get_membership_count {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_voice_connect_to_player(&self, gamerHandle_: i32) -> ResultOf_network_session_voice_connect_to_player {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_session_voice_connect_to_player(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_session_voice_connect_to_player {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_has_pending_invite(&self, ) -> ResultOf_network_has_pending_invite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_pending_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_pending_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_convert_posix_time(&self, posixTime_: i32,
timeStructure_: i32) -> ResultOf_convert_posix_time {
    unsafe {
        let mut posixTime_ = posixTime_;
let mut timeStructure_ = Default::default();
        let success = sdk::natives::convert_posix_time(
            &mut timeStructure_,
posixTime_,
        );
        let timeStructure_ = timeStructure_;
        
        ResultOf_convert_posix_time {
            success,
            ret: (),
            timeStructure_
        }
    }
}

    fn native_network_is_player_on_blocklist(&self, gamerHandle_: i32) -> ResultOf_network_is_player_on_blocklist {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_player_on_blocklist(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_player_on_blocklist {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_is_in_tutorial_session(&self, ) -> ResultOf_network_is_in_tutorial_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_tutorial_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_tutorial_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_mute_count_for_player(&self, p0_: u32,
p1_: f32,
p2_: f32) -> ResultOf_network_get_mute_count_for_player {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
let mut p2_ = Default::default();
        let success = sdk::natives::network_get_mute_count_for_player(
            &mut p1_,
&mut p2_,
p0_,
        );
        let p1_ = p1_;
let p2_ = p2_;
        
        ResultOf_network_get_mute_count_for_player {
            success,
            ret: (),
            p1_,
p2_
        }
    }
}

    fn native_ugc_get_content_is_using_sc_nickname(&self, p0_: i32) -> ResultOf_ugc_get_content_is_using_sc_nickname {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_using_sc_nickname(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_is_using_sc_nickname {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_dump_net_if_config(&self, ) -> ResultOf_network_dump_net_if_config {
    unsafe {
        
        let success = sdk::natives::network_dump_net_if_config(
            
        );
        
        
        ResultOf_network_dump_net_if_config {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_communication_privileges(&self, p0_: i32,
player_: u32) -> ResultOf_network_have_communication_privileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut player_ = player_;
        let success = sdk::natives::network_have_communication_privileges(
            &mut native_return,
p0_,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_have_communication_privileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_access_multiplayer(&self, loadingState_: i32) -> ResultOf_network_can_access_multiplayer {
    unsafe {
        let mut native_return = Default::default();
let mut loadingState_ = Default::default();
        let success = sdk::natives::network_can_access_multiplayer(
            &mut native_return,
&mut loadingState_,
        );
        let native_return = native_return;
let loadingState_ = loadingState_;
        
        ResultOf_network_can_access_multiplayer {
            success,
            ret: native_return,
            loadingState_
        }
    }
}

    fn native_network_override_transition_chat(&self, p0_: bool) -> ResultOf_network_override_transition_chat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_override_transition_chat(
            p0_,
        );
        
        
        ResultOf_network_override_transition_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_max_friends(&self, ) -> ResultOf_network_get_max_friends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_max_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_max_friends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_pending(&self, ) -> ResultOf_network_gamertag_from_handle_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_gamertag_from_handle_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_gamertag_from_handle_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_entity_been_registered_with_this_thread(&self, entity_: u32) -> ResultOf_network_has_entity_been_registered_with_this_thread {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_has_entity_been_registered_with_this_thread(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_entity_been_registered_with_this_thread {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_player_is_active(&self, gamerHandle_: i32) -> ResultOf_network_clan_player_is_active {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_clan_player_is_active(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_clan_player_is_active {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_retain_activity_group(&self, ) -> ResultOf_network_retain_activity_group {
    unsafe {
        
        let success = sdk::natives::network_retain_activity_group(
            
        );
        
        
        ResultOf_network_retain_activity_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_damage_tracker_active_on_player(&self, player_: u32) -> ResultOf_is_damage_tracker_active_on_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_damage_tracker_active_on_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_damage_tracker_active_on_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_automuted(&self, p0_: i32) -> ResultOf_network_set_script_automuted {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_set_script_automuted(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_set_script_automuted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_waiting_pop_clear_tutorial_session(&self, ) -> ResultOf_network_waiting_pop_clear_tutorial_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_waiting_pop_clear_tutorial_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_waiting_pop_clear_tutorial_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_any_download_membership_pending(&self, ) -> ResultOf_network_clan_any_download_membership_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_any_download_membership_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_any_download_membership_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_name(&self, index_: i32) -> ResultOf_get_commerce_item_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_name(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_commerce_item_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_change_slots(&self, slots_: i32,
p1_: bool) -> ResultOf_network_session_change_slots {
    unsafe {
        let mut slots_ = slots_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_change_slots(
            slots_,
p1_,
        );
        
        
        ResultOf_network_session_change_slots {
            success,
            ret: (),
            
        }
    }
}

    fn native_veh_to_net(&self, vehicle_: u32) -> ResultOf_veh_to_net {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::veh_to_net(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_veh_to_net {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_pending(&self, ) -> ResultOf_network_get_primary_clan_data_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_primary_clan_data_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_view_gamer_user_content(&self, gamerHandle_: i32) -> ResultOf_network_can_view_gamer_user_content {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_can_view_gamer_user_content(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_can_view_gamer_user_content {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_session_is_voice_session_active(&self, ) -> ResultOf_network_session_is_voice_session_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_voice_session_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_voice_session_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_commerce_data_fetch(&self, p0_: i32) -> ResultOf_trigger_commerce_data_fetch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::trigger_commerce_data_fetch(
            p0_,
        );
        
        
        ResultOf_trigger_commerce_data_fetch {
            success,
            ret: (),
            
        }
    }
}

    fn native_reserve_network_mission_peds(&self, amount_: i32) -> ResultOf_reserve_network_mission_peds {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_peds(
            amount_,
        );
        
        
        ResultOf_reserve_network_mission_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_control_of_entity(&self, entity_: u32) -> ResultOf_network_request_control_of_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_request_control_of_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_request_control_of_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_creators_by_user_id(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_creators_by_user_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::ugc_get_creators_by_user_id(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_ugc_get_creators_by_user_id {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_force_local_player_scar_sync(&self, ) -> ResultOf_network_force_local_player_scar_sync {
    unsafe {
        
        let success = sdk::natives::network_force_local_player_scar_sync(
            
        );
        
        
        ResultOf_network_force_local_player_scar_sync {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_get_by_content_ids(&self, data_: i32,
dataCount_: i32,
contentTypeName_: Option<String>) -> ResultOf_ugc_get_get_by_content_ids {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
let mut dataCount_ = dataCount_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_get_get_by_content_ids(
            &mut native_return,
&mut data_,
dataCount_,
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_ugc_get_get_by_content_ids {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_is_player_active(&self, player_: u32) -> ResultOf_network_is_player_active {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_active(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_player_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_leave(&self, p0_: i32) -> ResultOf_network_session_leave {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_session_leave(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_leave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host_friends_only(&self, p0_: i32,
maxPlayers_: i32) -> ResultOf_network_session_host_friends_only {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_session_host_friends_only(
            &mut native_return,
p0_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_host_friends_only {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_visible(&self, ) -> ResultOf_network_session_is_visible {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_visible(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_object_scope_distance(&self, object_: u32,
range_: f32) -> ResultOf_network_set_object_scope_distance {
    unsafe {
        let mut object_ = object_;
let mut range_ = range_;
        let success = sdk::natives::network_set_object_scope_distance(
            object_,
range_,
        );
        
        
        ResultOf_network_set_object_scope_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_clear_query_results(&self, ) -> ResultOf_ugc_clear_query_results {
    unsafe {
        
        let success = sdk::natives::ugc_clear_query_results(
            
        );
        
        
        ResultOf_ugc_clear_query_results {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_are_social_club_policies_current(&self, ) -> ResultOf_network_are_social_club_policies_current {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_are_social_club_policies_current(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_are_social_club_policies_current {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_voice_active(&self, toggle_: bool) -> ResultOf_network_set_voice_active {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_voice_active(
            toggle_,
        );
        
        
        ResultOf_network_set_voice_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_friend_index_online(&self, friendIndex_: i32) -> ResultOf_network_is_friend_index_online {
    unsafe {
        let mut native_return = Default::default();
let mut friendIndex_ = friendIndex_;
        let success = sdk::natives::network_is_friend_index_online(
            &mut native_return,
friendIndex_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_friend_index_online {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_path(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_path {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_path(
            native_return.pin_mut(),
p0_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_content_path {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_remote_memberships_are_in_cache(&self, p0_: i32) -> ResultOf_network_clan_remote_memberships_are_in_cache {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::network_clan_remote_memberships_are_in_cache(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_clan_remote_memberships_are_in_cache {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_conceal_player(&self, player_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_network_conceal_player {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::network_conceal_player(
            player_,
toggle_,
p2_,
        );
        
        
        ResultOf_network_conceal_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_hash_from_player_handle(&self, player_: u32) -> ResultOf_network_hash_from_player_handle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_hash_from_player_handle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_hash_from_player_handle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_peds(&self, amount_: i32) -> ResultOf_can_register_mission_peds {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_peds(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_peds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_cache_local_player_head_blend_data(&self, ) -> ResultOf_network_cache_local_player_head_blend_data {
    unsafe {
        
        let success = sdk::natives::network_cache_local_player_head_blend_data(
            
        );
        
        
        ResultOf_network_cache_local_player_head_blend_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_np_available(&self, ) -> ResultOf_network_is_np_available {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_np_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_np_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_displaying_invite_confirmation(&self, ) -> ResultOf_network_session_is_displaying_invite_confirmation {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_displaying_invite_confirmation(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_displaying_invite_confirmation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_ped(&self, netHandle_: i32) -> ResultOf_net_to_ped {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = netHandle_;
        let success = sdk::natives::net_to_ped(
            &mut native_return,
netHandle_,
        );
        let native_return = native_return;
        
        ResultOf_net_to_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_do_activity_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_network_session_do_activity_quickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_session_do_activity_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_do_activity_quickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_damage_tracker_on_player(&self, player_: u32,
toggle_: bool) -> ResultOf_activate_damage_tracker_on_player {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::activate_damage_tracker_on_player(
            player_,
toggle_,
        );
        
        
        ResultOf_activate_damage_tracker_on_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_name(&self, p0_: i32) -> ResultOf_ugc_get_content_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_content_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_ped_behind_before_cutscene(&self, player_: u32,
p1_: bool) -> ResultOf_network_leave_ped_behind_before_cutscene {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::network_leave_ped_behind_before_cutscene(
            player_,
p1_,
        );
        
        
        ResultOf_network_leave_ped_behind_before_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_net_to_ent(&self, netHandle_: i32) -> ResultOf_net_to_ent {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = netHandle_;
        let success = sdk::natives::net_to_ent(
            &mut native_return,
netHandle_,
        );
        let native_return = native_return;
        
        ResultOf_net_to_ent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_root_content_id(&self, p0_: i32) -> ResultOf_ugc_get_root_content_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_root_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_root_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_door_networked(&self, doorHash_: u32) -> ResultOf_network_is_door_networked {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::network_is_door_networked(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_door_networked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_new(&self, p0_: i32,
p1_: i32) -> ResultOf_network_get_primary_clan_data_new {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_new(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_network_get_primary_clan_data_new {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_is_push_to_talk_active(&self, ) -> ResultOf_network_is_push_to_talk_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_push_to_talk_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_push_to_talk_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_transition_invite_via_presence(&self, gamerHandle_: i32,
p1_: Option<String>,
dataCount_: i32,
p3_: i32) -> ResultOf_network_send_transition_invite_via_presence {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut dataCount_ = dataCount_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_transition_invite_via_presence(
            &mut native_return,
&mut gamerHandle_,
p1_.as_ref().unwrap(),
dataCount_,
p3_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_send_transition_invite_via_presence {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_ugc_nav(&self, p0_: i32,
p1_: i32) -> ResultOf_network_ugc_nav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_ugc_nav(
            p0_,
p1_,
        );
        
        
        ResultOf_network_ugc_nav {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_validate_join(&self, p0_: bool) -> ResultOf_network_session_validate_join {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_validate_join(
            p0_,
        );
        
        
        ResultOf_network_session_validate_join {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_ros_privilege_end_date(&self, privilege_: i32,
banType_: i32,
timeData_: i32) -> ResultOf_network_has_ros_privilege_end_date {
    unsafe {
        let mut native_return = Default::default();
let mut privilege_ = privilege_;
let mut banType_ = Default::default();
let mut timeData_ = Default::default();
        let success = sdk::natives::network_has_ros_privilege_end_date(
            &mut native_return,
&mut banType_,
&mut timeData_,
privilege_,
        );
        let native_return = native_return;
let banType_ = banType_;
let timeData_ = timeData_;
        
        ResultOf_network_has_ros_privilege_end_date {
            success,
            ret: native_return,
            banType_,
timeData_
        }
    }
}

    fn native_network_stop_synchronised_scene(&self, netScene_: i32) -> ResultOf_network_stop_synchronised_scene {
    unsafe {
        let mut netScene_ = netScene_;
        let success = sdk::natives::network_stop_synchronised_scene(
            netScene_,
        );
        
        
        ResultOf_network_stop_synchronised_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_property_id(&self, ) -> ResultOf_network_clear_property_id {
    unsafe {
        
        let success = sdk::natives::network_clear_property_id(
            
        );
        
        
        ResultOf_network_clear_property_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_has_crewinfo_metadata_been_received(&self, ) -> ResultOf_network_clan_has_crewinfo_metadata_been_received {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_has_crewinfo_metadata_been_received(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_clan_has_crewinfo_metadata_been_received {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_add_stage(&self, hash_: u32,
p1_: i32,
p2_: i32,
state_: i32,
p4_: i32) -> ResultOf_network_transition_add_stage {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut state_ = state_;
let mut p4_ = p4_;
        let success = sdk::natives::network_transition_add_stage(
            &mut native_return,
hash_,
p1_,
p2_,
state_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_network_transition_add_stage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_invite_via_presence(&self, gamerHandle_: i32,
p1_: Option<String>,
dataCount_: i32,
p3_: i32) -> ResultOf_network_send_invite_via_presence {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut dataCount_ = dataCount_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_invite_via_presence(
            &mut native_return,
&mut gamerHandle_,
p1_.as_ref().unwrap(),
dataCount_,
p3_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_send_invite_via_presence {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_has_confirmed_invite(&self, ) -> ResultOf_network_has_confirmed_invite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_confirmed_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_confirmed_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_destroyer_of_entity(&self, entity_: u32,
weaponHash_: u32) -> ResultOf_network_get_destroyer_of_entity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut weaponHash_ = Default::default();
        let success = sdk::natives::network_get_destroyer_of_entity(
            &mut native_return,
&mut weaponHash_,
entity_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_network_get_destroyer_of_entity {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_network_disable_leave_remote_ped_behind(&self, toggle_: bool) -> ResultOf_network_disable_leave_remote_ped_behind {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_disable_leave_remote_ped_behind(
            toggle_,
        );
        
        
        ResultOf_network_disable_leave_remote_ped_behind {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_create_content_id(&self, ) -> ResultOf_ugc_get_create_content_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::ugc_get_create_content_id(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_create_content_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_leave_postponed(&self, ) -> ResultOf_network_is_transition_leave_postponed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_leave_postponed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_leave_postponed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_delete_member_file(&self, p0_: Option<String>) -> ResultOf_cloud_delete_member_file {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::cloud_delete_member_file(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_cloud_delete_member_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_join_invite(&self, ) -> ResultOf_network_session_join_invite {
    unsafe {
        
        let success = sdk::natives::network_session_join_invite(
            
        );
        
        
        ResultOf_network_session_join_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_task_cutscene_inscope_multipler(&self, p0_: i32) -> ResultOf_network_set_task_cutscene_inscope_multipler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_task_cutscene_inscope_multipler(
            p0_,
        );
        
        
        ResultOf_network_set_task_cutscene_inscope_multipler {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_by_content_ids(&self, data_: i32,
count_: i32,
latestVersion_: bool,
contentTypeName_: Option<String>) -> ResultOf_ugc_query_by_content_ids {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
let mut count_ = count_;
let mut latestVersion_ = latestVersion_;
let mut contentTypeName_ = sdk_helpers::create_c_string_ptr(contentTypeName_);
        let success = sdk::natives::ugc_query_by_content_ids(
            &mut native_return,
&mut data_,
count_,
latestVersion_,
contentTypeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_ugc_query_by_content_ids {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_try_access_tunable_bool_hash(&self, tunableContext_: u32,
tunableName_: u32,
defaultValue_: bool) -> ResultOf_network_try_access_tunable_bool_hash {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = tunableContext_;
let mut tunableName_ = tunableName_;
let mut defaultValue_ = defaultValue_;
        let success = sdk::natives::network_try_access_tunable_bool_hash(
            &mut native_return,
tunableContext_,
tunableName_,
defaultValue_,
        );
        let native_return = native_return;
        
        ResultOf_network_try_access_tunable_bool_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host_single_player(&self, p0_: i32) -> ResultOf_network_session_host_single_player {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_host_single_player(
            p0_,
        );
        
        
        ResultOf_network_session_host_single_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_entity_is_networked(&self, entity_: u32) -> ResultOf_network_get_entity_is_networked {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_entity_is_networked(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_entity_is_networked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_is_checking_availability(&self, ) -> ResultOf_cloud_is_checking_availability {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::cloud_is_checking_availability(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_cloud_is_checking_availability {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_of_this_script(&self, ) -> ResultOf_network_get_host_of_this_script {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_host_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_host_of_this_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_objects(&self, ) -> ResultOf_get_max_num_network_objects {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_objects(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_max_num_network_objects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_member_id_from_gamer_handle(&self, gamerHandle_: i32) -> ResultOf_network_member_id_from_gamer_handle {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_member_id_from_gamer_handle(
            native_return.pin_mut(),
&mut gamerHandle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_member_id_from_gamer_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_was_query_force_cancelled(&self, ) -> ResultOf_ugc_was_query_force_cancelled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_was_query_force_cancelled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_was_query_force_cancelled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_action_follow_invite(&self, ) -> ResultOf_network_action_follow_invite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_action_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_action_follow_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_membership(&self, p0_: i32,
clanMembership_: i32,
p2_: i32) -> ResultOf_network_clan_get_membership {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut clanMembership_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::network_clan_get_membership(
            &mut native_return,
&mut p0_,
&mut clanMembership_,
p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
let clanMembership_ = clanMembership_;
        
        ResultOf_network_clan_get_membership {
            success,
            ret: native_return,
            p0_,
clanMembership_
        }
    }
}

    fn native_network_can_set_waypoint(&self, ) -> ResultOf_network_can_set_waypoint {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_set_waypoint(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_can_set_waypoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_force_local_use_of_synced_scene_camera(&self, netScene_: i32) -> ResultOf_network_force_local_use_of_synced_scene_camera {
    unsafe {
        let mut netScene_ = netScene_;
        let success = sdk::natives::network_force_local_use_of_synced_scene_camera(
            netScene_,
        );
        
        
        ResultOf_network_force_local_use_of_synced_scene_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_gamer_invited_to_transition(&self, gamerHandle_: i32) -> ResultOf_network_set_gamer_invited_to_transition {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_set_gamer_invited_to_transition(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_set_gamer_invited_to_transition {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_disable_voice_bandwidth_restriction(&self, player_: u32) -> ResultOf_network_disable_voice_bandwidth_restriction {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_disable_voice_bandwidth_restriction(
            player_,
        );
        
        
        ResultOf_network_disable_voice_bandwidth_restriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_reset_next_open(&self, ) -> ResultOf_network_skip_radio_reset_next_open {
    unsafe {
        
        let success = sdk::natives::network_skip_radio_reset_next_open(
            
        );
        
        
        ResultOf_network_skip_radio_reset_next_open {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_commerce_product_price(&self, index_: i32) -> ResultOf_get_commerce_product_price {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_product_price(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_commerce_product_price {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_session(&self, ) -> ResultOf_network_is_in_session {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_session {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_add_active_matchmaking_group(&self, groupId_: i32) -> ResultOf_network_session_add_active_matchmaking_group {
    unsafe {
        let mut groupId_ = groupId_;
        let success = sdk::natives::network_session_add_active_matchmaking_group(
            groupId_,
        );
        
        
        ResultOf_network_session_add_active_matchmaking_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_peds(&self, p0_: bool) -> ResultOf_get_num_created_mission_peds {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_peds(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_created_mission_peds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_time_less_than(&self, timeA_: i32,
timeB_: i32) -> ResultOf_is_time_less_than {
    unsafe {
        let mut native_return = Default::default();
let mut timeA_ = timeA_;
let mut timeB_ = timeB_;
        let success = sdk::natives::is_time_less_than(
            &mut native_return,
timeA_,
timeB_,
        );
        let native_return = native_return;
        
        ResultOf_is_time_less_than {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_door(&self, doorHash_: u32) -> ResultOf_network_has_control_of_door {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::network_has_control_of_door(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_network_has_control_of_door {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fillout_pm_player_list(&self, gamerHandle_: i32,
p1_: i32,
p2_: i32) -> ResultOf_fillout_pm_player_list {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::fillout_pm_player_list(
            &mut native_return,
&mut gamerHandle_,
p1_,
p2_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_fillout_pm_player_list {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_set_talker_proximity(&self, value_: f32) -> ResultOf_network_set_talker_proximity {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::network_set_talker_proximity(
            value_,
        );
        
        
        ResultOf_network_set_talker_proximity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_view_gamer_user_content_result(&self, gamerHandle_: i32) -> ResultOf_network_has_view_gamer_user_content_result {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_has_view_gamer_user_content_result(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_has_view_gamer_user_content_result {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_get_content_user_id(&self, p0_: i32) -> ResultOf_ugc_get_content_user_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_user_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_ugc_get_content_user_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_use_logarithmic_blending_this_frame(&self, entity_: u32) -> ResultOf_network_use_logarithmic_blending_this_frame {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_use_logarithmic_blending_this_frame(
            entity_,
        );
        
        
        ResultOf_network_use_logarithmic_blending_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_entity_from_network_id(&self, netId_: i32) -> ResultOf_network_get_entity_from_network_id {
    unsafe {
        let mut native_return = Default::default();
let mut netId_ = netId_;
        let success = sdk::natives::network_get_entity_from_network_id(
            &mut native_return,
netId_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_entity_from_network_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_from_gamer_handle(&self, gamerHandle_: i32) -> ResultOf_network_get_player_from_gamer_handle {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_get_player_from_gamer_handle(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_get_player_from_gamer_handle {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_is_gamer_muted_by_me(&self, gamerHandle_: i32) -> ResultOf_network_is_gamer_muted_by_me {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_gamer_muted_by_me(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_gamer_muted_by_me {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_get_primary_clan_data_start(&self, p0_: i32,
p1_: i32) -> ResultOf_network_get_primary_clan_data_start {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_get_primary_clan_data_start(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_get_primary_clan_data_start {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_is_private(&self, ) -> ResultOf_network_session_is_private {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_private(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_private {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_presence_invites(&self, ) -> ResultOf_network_get_num_presence_invites {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_presence_invites(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_presence_invites {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_reserved_mission_vehicles(&self, p0_: bool,
p1_: i32) -> ResultOf_get_num_reserved_mission_vehicles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_vehicles(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_reserved_mission_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_total_num_players(&self, ) -> ResultOf_network_get_total_num_players {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_total_num_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_total_num_players {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_synchronised_scene_camera(&self, netScene_: i32,
animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_network_add_synchronised_scene_camera {
    unsafe {
        let mut netScene_ = netScene_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::network_add_synchronised_scene_camera(
            netScene_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        
        
        ResultOf_network_add_synchronised_scene_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_updated_date(&self, p0_: i32,
p1_: i32) -> ResultOf_ugc_get_content_updated_date {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::ugc_get_content_updated_date(
            &mut p1_,
p0_,
        );
        let p1_ = p1_;
        
        ResultOf_ugc_get_content_updated_date {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_remain_in_game_chat(&self, p0_: bool) -> ResultOf_network_remain_in_game_chat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_remain_in_game_chat(
            p0_,
        );
        
        
        ResultOf_network_remain_in_game_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_block_join_queue_invites(&self, toggle_: bool) -> ResultOf_network_block_join_queue_invites {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_block_join_queue_invites(
            toggle_,
        );
        
        
        ResultOf_network_block_join_queue_invites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_deleted(&self, p0_: i32,
p1_: bool,
p2_: Option<String>) -> ResultOf_ugc_set_deleted {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::ugc_set_deleted(
            &mut native_return,
&mut p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_ugc_set_deleted {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_is_transition_visibility_locked(&self, ) -> ResultOf_network_is_transition_visibility_locked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_visibility_locked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_transition_visibility_locked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_end_tutorial_session(&self, ) -> ResultOf_network_end_tutorial_session {
    unsafe {
        
        let success = sdk::natives::network_end_tutorial_session(
            
        );
        
        
        ResultOf_network_end_tutorial_session {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_visible_in_cutscene(&self, p0_: bool,
p1_: bool) -> ResultOf_set_local_player_visible_in_cutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_local_player_visible_in_cutscene(
            p0_,
p1_,
        );
        
        
        ResultOf_set_local_player_visible_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_try_to_set_this_script_is_network_script(&self, p0_: i32,
p1_: bool,
p2_: i32) -> ResultOf_network_try_to_set_this_script_is_network_script {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_try_to_set_this_script_is_network_script(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_network_try_to_set_this_script_is_network_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_transition(&self, ) -> ResultOf_network_leave_transition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_leave_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_leave_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_awaiting_invite_response(&self, ) -> ResultOf_network_session_is_awaiting_invite_response {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_awaiting_invite_response(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_awaiting_invite_response {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_number_body_tracker_hits(&self, ) -> ResultOf_network_get_number_body_tracker_hits {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_number_body_tracker_hits(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_get_number_body_tracker_hits {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_playlist_length(&self, p0_: i32) -> ResultOf_network_get_presence_invite_playlist_length {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_playlist_length(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_playlist_length {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_average_latency(&self, player_: u32) -> ResultOf_network_get_average_latency {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_latency(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_average_latency {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_damage_tracker_on_network_id(&self, netID_: i32,
toggle_: bool) -> ResultOf_activate_damage_tracker_on_network_id {
    unsafe {
        let mut netID_ = netID_;
let mut toggle_ = toggle_;
        let success = sdk::natives::activate_damage_tracker_on_network_id(
            netID_,
toggle_,
        );
        
        
        ResultOf_activate_damage_tracker_on_network_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_handle_from_friend(&self, friendIndex_: i32,
gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_handle_from_friend {
    unsafe {
        let mut friendIndex_ = friendIndex_;
let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_handle_from_friend(
            &mut gamerHandle_,
friendIndex_,
gamerHandleSize_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_handle_from_friend {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_ugc_is_getting(&self, ) -> ResultOf_ugc_is_getting {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_getting(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_is_getting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_bookmarked_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: i32) -> ResultOf_ugc_get_bookmarked_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_bookmarked_content(
            &mut native_return,
&mut p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = p3_;
        
        ResultOf_ugc_get_bookmarked_content {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_set_team_only_chat(&self, toggle_: bool) -> ResultOf_network_set_team_only_chat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_team_only_chat(
            toggle_,
        );
        
        
        ResultOf_network_set_team_only_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_displaynames_from_handles_start(&self, p0_: i32,
p1_: i32) -> ResultOf_network_displaynames_from_handles_start {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::network_displaynames_from_handles_start(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_network_displaynames_from_handles_start {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_get_kick_vote(&self, player_: u32) -> ResultOf_network_session_get_kick_vote {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_session_get_kick_vote(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_get_kick_vote {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_register_high_frequency_player_broadcast_variables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_register_high_frequency_player_broadcast_variables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_register_high_frequency_player_broadcast_variables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_register_high_frequency_player_broadcast_variables {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_invert_ghosting(&self, p0_: bool) -> ResultOf_set_invert_ghosting {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_invert_ghosting(
            p0_,
        );
        
        
        ResultOf_set_invert_ghosting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_clock_time_overridden(&self, ) -> ResultOf_network_is_clock_time_overridden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_clock_time_overridden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_clock_time_overridden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sphere_visible_to_another_machine(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_is_sphere_visible_to_another_machine {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_sphere_visible_to_another_machine(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_is_sphere_visible_to_another_machine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_entity_can_blend(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_set_entity_can_blend {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_entity_can_blend(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_set_entity_can_blend {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_session_active(&self, ) -> ResultOf_network_is_session_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_session_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_obj(&self, netHandle_: i32) -> ResultOf_net_to_obj {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = netHandle_;
        let success = sdk::natives::net_to_obj(
            &mut native_return,
netHandle_,
        );
        let native_return = native_return;
        
        ResultOf_net_to_obj {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_clock_time_override(&self, ) -> ResultOf_network_clear_clock_time_override {
    unsafe {
        
        let success = sdk::natives::network_clear_clock_time_override(
            
        );
        
        
        ResultOf_network_clear_clock_time_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_script_active_by_hash(&self, scriptHash_: u32,
p1_: i32,
p2_: bool,
p3_: i32) -> ResultOf_network_is_script_active_by_hash {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_is_script_active_by_hash(
            &mut native_return,
scriptHash_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_network_is_script_active_by_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_account_id(&self, player_: u32) -> ResultOf_network_get_player_account_id {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_account_id(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_player_account_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_voice_proximity_override(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_network_apply_voice_proximity_override {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::network_apply_voice_proximity_override(
            x_,
y_,
z_,
        );
        
        
        ResultOf_network_apply_voice_proximity_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_sphere_visible_to_player(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOf_is_sphere_visible_to_player {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::is_sphere_visible_to_player(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_is_sphere_visible_to_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_create_character(&self, ) -> ResultOf_facebook_post_create_character {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_post_create_character(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_facebook_post_create_character {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_user_id(&self, userId_: Option<String>,
gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_handle_from_user_id {
    unsafe {
        let mut userId_ = sdk_helpers::create_c_string_ptr(userId_);
let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_handle_from_user_id(
            &mut gamerHandle_,
userId_.as_ref().unwrap(),
gamerHandleSize_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_handle_from_user_id {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_is_network_vehicle_running_respot_timer(&self, networkID_: i32) -> ResultOf_is_network_vehicle_running_respot_timer {
    unsafe {
        let mut native_return = Default::default();
let mut networkID_ = networkID_;
        let success = sdk::natives::is_network_vehicle_running_respot_timer(
            &mut native_return,
networkID_,
        );
        let native_return = native_return;
        
        ResultOf_is_network_vehicle_running_respot_timer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_finding_gamers(&self, ) -> ResultOf_network_is_finding_gamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_finding_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_finding_gamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_receive_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOf_network_override_receive_restrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_receive_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOf_network_override_receive_restrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_time_more_than(&self, timeA_: i32,
timeB_: i32) -> ResultOf_is_time_more_than {
    unsafe {
        let mut native_return = Default::default();
let mut timeA_ = timeA_;
let mut timeB_ = timeB_;
        let success = sdk::natives::is_time_more_than(
            &mut native_return,
timeA_,
timeB_,
        );
        let native_return = native_return;
        
        ResultOf_is_time_more_than {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_fade_out_entity(&self, entity_: u32,
normal_: bool,
slow_: bool) -> ResultOf_network_fade_out_entity {
    unsafe {
        let mut entity_ = entity_;
let mut normal_ = normal_;
let mut slow_ = slow_;
        let success = sdk::natives::network_fade_out_entity(
            entity_,
normal_,
slow_,
        );
        
        
        ResultOf_network_fade_out_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_resolve_privilege_user_content(&self, ) -> ResultOf_network_resolve_privilege_user_content {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_resolve_privilege_user_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_resolve_privilege_user_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_user_content_permissions_check(&self, netHandle_: i32) -> ResultOf_network_start_user_content_permissions_check {
    unsafe {
        let mut native_return = Default::default();
let mut netHandle_ = Default::default();
        let success = sdk::natives::network_start_user_content_permissions_check(
            &mut native_return,
&mut netHandle_,
        );
        let native_return = native_return;
let netHandle_ = netHandle_;
        
        ResultOf_network_start_user_content_permissions_check {
            success,
            ret: native_return,
            netHandle_
        }
    }
}

    fn native_network_am_i_muted_by_gamer(&self, gamerHandle_: i32) -> ResultOf_network_am_i_muted_by_gamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_am_i_muted_by_gamer(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_am_i_muted_by_gamer {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_get_presence_invite_id(&self, p0_: i32) -> ResultOf_network_get_presence_invite_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_presence_invite_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_get_host_aim_preference(&self, ) -> ResultOf_network_session_get_host_aim_preference {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_get_host_aim_preference(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_get_host_aim_preference {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_visible_in_cutscene(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_set_entity_visible_in_cutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_visible_in_cutscene(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_entity_visible_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_voice_channel(&self, ) -> ResultOf_network_clear_voice_channel {
    unsafe {
        
        let success = sdk::natives::network_clear_voice_channel(
            
        );
        
        
        ResultOf_network_clear_voice_channel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_exists_on_all_machines(&self, netId_: i32,
toggle_: bool) -> ResultOf_set_network_id_exists_on_all_machines {
    unsafe {
        let mut netId_ = netId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_exists_on_all_machines(
            netId_,
toggle_,
        );
        
        
        ResultOf_set_network_id_exists_on_all_machines {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_num(&self, ) -> ResultOf_ugc_get_content_num {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_num(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_content_num {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_friend_name(&self, friendIndex_: i32) -> ResultOf_network_get_friend_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut friendIndex_ = friendIndex_;
        let success = sdk::natives::network_get_friend_name(
            native_return.pin_mut(),
friendIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_network_get_friend_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_locally_invisible(&self, entity_: u32) -> ResultOf_set_entity_locally_invisible {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_locally_invisible(
            entity_,
        );
        
        
        ResultOf_set_entity_locally_invisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_register_mission_doors(&self, p0_: i32) -> ResultOf_can_register_mission_doors {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_register_mission_doors(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_can_register_mission_doors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refresh_player_list_stats(&self, p0_: i32) -> ResultOf_refresh_player_list_stats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::refresh_player_list_stats(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_refresh_player_list_stats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_random_int_ranged(&self, rangeStart_: i32,
rangeEnd_: i32) -> ResultOf_network_get_random_int_ranged {
    unsafe {
        let mut native_return = Default::default();
let mut rangeStart_ = rangeStart_;
let mut rangeEnd_ = rangeEnd_;
        let success = sdk::natives::network_get_random_int_ranged(
            &mut native_return,
rangeStart_,
rangeEnd_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_random_int_ranged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_reserved_mission_entities_in_area(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
out1_: i32,
out2_: i32,
out3_: i32) -> ResultOf_get_reserved_mission_entities_in_area {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut out1_ = Default::default();
let mut out2_ = Default::default();
let mut out3_ = Default::default();
        let success = sdk::natives::get_reserved_mission_entities_in_area(
            &mut out1_,
&mut out2_,
&mut out3_,
x_,
y_,
z_,
p3_,
        );
        let out1_ = out1_;
let out2_ = out2_;
let out3_ = out3_;
        
        ResultOf_get_reserved_mission_entities_in_area {
            success,
            ret: (),
            out1_,
out2_,
out3_
        }
    }
}

    fn native_network_does_tunable_exist_hash(&self, tunableContext_: u32,
tunableName_: u32) -> ResultOf_network_does_tunable_exist_hash {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = tunableContext_;
let mut tunableName_ = tunableName_;
        let success = sdk::natives::network_does_tunable_exist_hash(
            &mut native_return,
tunableContext_,
tunableName_,
        );
        let native_return = native_return;
        
        ResultOf_network_does_tunable_exist_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_find_gamers_in_crew(&self, crewId_: i32) -> ResultOf_network_find_gamers_in_crew {
    unsafe {
        let mut native_return = Default::default();
let mut crewId_ = crewId_;
        let success = sdk::natives::network_find_gamers_in_crew(
            &mut native_return,
crewId_,
        );
        let native_return = native_return;
        
        ResultOf_network_find_gamers_in_crew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_float(&self, tunableContext_: Option<String>,
tunableName_: Option<String>,
value_: f32) -> ResultOf_network_access_tunable_float {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = sdk_helpers::create_c_string_ptr(tunableContext_);
let mut tunableName_ = sdk_helpers::create_c_string_ptr(tunableName_);
let mut value_ = Default::default();
        let success = sdk::natives::network_access_tunable_float(
            &mut native_return,
&mut value_,
tunableContext_.as_ref().unwrap(),
tunableName_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_network_access_tunable_float {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_session_get_inviter(&self, gamerHandle_: i32) -> ResultOf_network_session_get_inviter {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_session_get_inviter(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_session_get_inviter {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_set_local_player_invisible_locally(&self, bIncludePlayersVehicle_: bool) -> ResultOf_set_local_player_invisible_locally {
    unsafe {
        let mut bIncludePlayersVehicle_ = bIncludePlayersVehicle_;
        let success = sdk::natives::set_local_player_invisible_locally(
            bIncludePlayersVehicle_,
        );
        
        
        ResultOf_set_local_player_invisible_locally {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_area_does_exist(&self, areaHandle_: i32) -> ResultOf_network_entity_area_does_exist {
    unsafe {
        let mut native_return = Default::default();
let mut areaHandle_ = areaHandle_;
        let success = sdk::natives::network_entity_area_does_exist(
            &mut native_return,
areaHandle_,
        );
        let native_return = native_return;
        
        ResultOf_network_entity_area_does_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_ped_scar_data(&self, ped_: u32,
p1_: i32) -> ResultOf_network_apply_ped_scar_data {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::network_apply_ped_scar_data(
            ped_,
p1_,
        );
        
        
        ResultOf_network_apply_ped_scar_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_enable_extra_vehicle_orientation_blend_checks(&self, netId_: i32,
toggle_: bool) -> ResultOf_network_enable_extra_vehicle_orientation_blend_checks {
    unsafe {
        let mut netId_ = netId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_enable_extra_vehicle_orientation_blend_checks(
            netId_,
toggle_,
        );
        
        
        ResultOf_network_enable_extra_vehicle_orientation_blend_checks {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_clock_time(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOf_network_override_clock_time {
    unsafe {
        let mut hours_ = hours_;
let mut minutes_ = minutes_;
let mut seconds_ = seconds_;
        let success = sdk::natives::network_override_clock_time(
            hours_,
minutes_,
seconds_,
        );
        
        
        ResultOf_network_override_clock_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_in_cutscene(&self, player_: u32) -> ResultOf_is_player_in_cutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_in_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_in_cutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_local_handle(&self, gamerHandle_: i32,
gamerHandleSize_: i32) -> ResultOf_network_get_local_handle {
    unsafe {
        let mut gamerHandle_ = Default::default();
let mut gamerHandleSize_ = gamerHandleSize_;
        let success = sdk::natives::network_get_local_handle(
            &mut gamerHandle_,
gamerHandleSize_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_get_local_handle {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_network_has_headset(&self, ) -> ResultOf_network_has_headset {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_headset(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_has_headset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_gamer_blocked_by_me(&self, gamerHandle_: i32) -> ResultOf_network_is_gamer_blocked_by_me {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_is_gamer_blocked_by_me(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_is_gamer_blocked_by_me {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_ugc_cancel_query(&self, ) -> ResultOf_ugc_cancel_query {
    unsafe {
        
        let success = sdk::natives::ugc_cancel_query(
            
        );
        
        
        ResultOf_ugc_cancel_query {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commerce_data_valid(&self, ) -> ResultOf_is_commerce_data_valid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_data_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_commerce_data_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool_hash(&self, tunableContext_: u32,
tunableName_: u32) -> ResultOf_network_access_tunable_bool_hash {
    unsafe {
        let mut native_return = Default::default();
let mut tunableContext_ = tunableContext_;
let mut tunableName_ = tunableName_;
        let success = sdk::natives::network_access_tunable_bool_hash(
            &mut native_return,
tunableContext_,
tunableName_,
        );
        let native_return = native_return;
        
        ResultOf_network_access_tunable_bool_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_resurrect_local_player(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p4_: bool,
changetime_: bool,
p6_: bool,
p7_: i32,
p8_: i32) -> ResultOf_network_resurrect_local_player {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p4_ = p4_;
let mut changetime_ = changetime_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::network_resurrect_local_player(
            x_,
y_,
z_,
heading_,
p4_,
changetime_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOf_network_resurrect_local_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_high_frequency_host_broadcast_variables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_register_high_frequency_host_broadcast_variables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_register_high_frequency_host_broadcast_variables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_register_high_frequency_host_broadcast_variables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_bail_transition(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_network_bail_transition {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_bail_transition(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_network_bail_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_np_pending(&self, ) -> ResultOf_network_is_np_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_np_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_np_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_transition_parameter_string(&self, p0_: i32,
string_: Option<String>,
p2_: bool) -> ResultOf_network_apply_transition_parameter_string {
    unsafe {
        let mut p0_ = p0_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut p2_ = p2_;
        let success = sdk::natives::network_apply_transition_parameter_string(
            p0_,
string_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOf_network_apply_transition_parameter_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_and_cancel_all_invites(&self, ) -> ResultOf_network_remove_and_cancel_all_invites {
    unsafe {
        
        let success = sdk::natives::network_remove_and_cancel_all_invites(
            
        );
        
        
        ResultOf_network_remove_and_cancel_all_invites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_has_description_request_finished(&self, p0_: i32) -> ResultOf_ugc_has_description_request_finished {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_has_description_request_finished(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_has_description_request_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_vehicle_respot_timer(&self, netId_: i32,
time_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_network_vehicle_respot_timer {
    unsafe {
        let mut netId_ = netId_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_network_vehicle_respot_timer(
            netId_,
time_,
p2_,
p3_,
        );
        
        
        ResultOf_set_network_vehicle_respot_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_bad_sport_player_left_detected(&self, gamerHandle_: i32,
event_: i32,
amountReceived_: i32) -> ResultOf_bad_sport_player_left_detected {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
let mut event_ = event_;
let mut amountReceived_ = amountReceived_;
        let success = sdk::natives::bad_sport_player_left_detected(
            &mut native_return,
&mut gamerHandle_,
event_,
amountReceived_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_bad_sport_player_left_detected {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_session_host_closed(&self, p0_: i32,
maxPlayers_: i32) -> ResultOf_network_session_host_closed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut maxPlayers_ = maxPlayers_;
        let success = sdk::natives::network_session_host_closed(
            &mut native_return,
p0_,
maxPlayers_,
        );
        let native_return = native_return;
        
        ResultOf_network_session_host_closed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_query_result(&self, ) -> ResultOf_ugc_get_query_result {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_query_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_query_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_player_get_desc(&self, clanDesc_: i32,
bufferSize_: i32,
gamerHandle_: i32) -> ResultOf_network_clan_player_get_desc {
    unsafe {
        let mut native_return = Default::default();
let mut clanDesc_ = Default::default();
let mut bufferSize_ = bufferSize_;
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_clan_player_get_desc(
            &mut native_return,
&mut clanDesc_,
&mut gamerHandle_,
bufferSize_,
        );
        let native_return = native_return;
let clanDesc_ = clanDesc_;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_clan_player_get_desc {
            success,
            ret: native_return,
            clanDesc_,
gamerHandle_
        }
    }
}

    fn native_network_change_transition_slots(&self, p0_: i32,
p1_: bool) -> ResultOf_network_change_transition_slots {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_change_transition_slots(
            p0_,
p1_,
        );
        
        
        ResultOf_network_change_transition_slots {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_is_voice_session_busy(&self, ) -> ResultOf_network_session_is_voice_session_busy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_voice_session_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_voice_session_busy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_creator_handle(&self, p0_: i32) -> ResultOf_network_set_transition_creator_handle {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::network_set_transition_creator_handle(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_network_set_transition_creator_handle {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_set_voice_channel(&self, channel_: i32) -> ResultOf_network_set_voice_channel {
    unsafe {
        let mut channel_ = channel_;
        let success = sdk::natives::network_set_voice_channel(
            channel_,
        );
        
        
        ResultOf_network_set_voice_channel {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_cable_connected(&self, ) -> ResultOf_network_is_cable_connected {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cable_connected(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_cable_connected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_presence_invite(&self, p0_: i32) -> ResultOf_network_remove_presence_invite {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_remove_presence_invite(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_remove_presence_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_voice_proximity_override(&self, ) -> ResultOf_network_clear_voice_proximity_override {
    unsafe {
        
        let success = sdk::natives::network_clear_voice_proximity_override(
            
        );
        
        
        ResultOf_network_clear_voice_proximity_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_and_cancel_all_transition_invites(&self, ) -> ResultOf_network_remove_and_cancel_all_transition_invites {
    unsafe {
        
        let success = sdk::natives::network_remove_and_cancel_all_transition_invites(
            
        );
        
        
        ResultOf_network_remove_and_cancel_all_transition_invites {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_patch_post_cutscene_hs4f_tun_ent(&self, ped_: u32) -> ResultOf_network_patch_post_cutscene_hs4f_tun_ent {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::network_patch_post_cutscene_hs4f_tun_ent(
            ped_,
        );
        
        
        ResultOf_network_patch_post_cutscene_hs4f_tun_ent {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cloud_time_as_string(&self, ) -> ResultOf_get_cloud_time_as_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_cloud_time_as_string(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_cloud_time_as_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_seed_random_number_generator(&self, seed_: i32) -> ResultOf_network_seed_random_number_generator {
    unsafe {
        let mut seed_ = seed_;
        let success = sdk::natives::network_seed_random_number_generator(
            seed_,
        );
        
        
        ResultOf_network_seed_random_number_generator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_entity_only_exists_for_participants(&self, entity_: u32,
toggle_: bool) -> ResultOf_network_set_entity_only_exists_for_participants {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_entity_only_exists_for_participants(
            entity_,
toggle_,
        );
        
        
        ResultOf_network_set_entity_only_exists_for_participants {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_matchmaking_mental_state(&self, p0_: i32) -> ResultOf_network_session_set_matchmaking_mental_state {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_matchmaking_mental_state(
            p0_,
        );
        
        
        ResultOf_network_session_set_matchmaking_mental_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_entity_to_synchronised_scene(&self, entity_: u32,
netScene_: i32,
animDict_: Option<String>,
animName_: Option<String>,
speed_: f32,
speedMulitiplier_: f32,
flag_: i32) -> ResultOf_network_add_entity_to_synchronised_scene {
    unsafe {
        let mut entity_ = entity_;
let mut netScene_ = netScene_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut speed_ = speed_;
let mut speedMulitiplier_ = speedMulitiplier_;
let mut flag_ = flag_;
        let success = sdk::natives::network_add_entity_to_synchronised_scene(
            entity_,
netScene_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
speed_,
speedMulitiplier_,
flag_,
        );
        
        
        ResultOf_network_add_entity_to_synchronised_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_file_crc_hacker_check(&self, player_: u32,
p1_: Option<String>) -> ResultOf_trigger_file_crc_hacker_check {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::trigger_file_crc_hacker_check(
            &mut native_return,
player_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_trigger_file_crc_hacker_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_commerce_items(&self, ) -> ResultOf_get_num_commerce_items {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_commerce_items(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_commerce_items {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamer_has_headset(&self, gamerHandle_: i32) -> ResultOf_network_gamer_has_headset {
    unsafe {
        let mut native_return = Default::default();
let mut gamerHandle_ = Default::default();
        let success = sdk::natives::network_gamer_has_headset(
            &mut native_return,
&mut gamerHandle_,
        );
        let native_return = native_return;
let gamerHandle_ = gamerHandle_;
        
        ResultOf_network_gamer_has_headset {
            success,
            ret: native_return,
            gamerHandle_
        }
    }
}

    fn native_network_session_is_solo(&self, ) -> ResultOf_network_session_is_solo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_solo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_solo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_session_busy(&self, ) -> ResultOf_network_is_session_busy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_session_busy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_ui_formatted_tag(&self, clanDesc_: i32,
bufferSize_: i32,
formattedTag_: Option<String>) -> ResultOf_network_clan_get_ui_formatted_tag {
    unsafe {
        let mut clanDesc_ = Default::default();
let mut bufferSize_ = bufferSize_;
let mut formattedTag_ = sdk_helpers::create_c_string_ptr(formattedTag_);
        let success = sdk::natives::network_clan_get_ui_formatted_tag(
            &mut clanDesc_,
formattedTag_.pin_mut(),
bufferSize_,
        );
        let clanDesc_ = clanDesc_;
let formattedTag_ = sdk_helpers::read_c_string_ptr(formattedTag_);
        
        ResultOf_network_clan_get_ui_formatted_tag {
            success,
            ret: (),
            clanDesc_,
formattedTag_
        }
    }
}

    fn native_network_set_no_spectator_chat(&self, toggle_: bool) -> ResultOf_network_set_no_spectator_chat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_no_spectator_chat(
            toggle_,
        );
        
        
        ResultOf_network_set_no_spectator_chat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_unique_crew_limit(&self, p0_: i32) -> ResultOf_network_session_set_unique_crew_limit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_limit(
            p0_,
        );
        
        
        ResultOf_network_session_set_unique_crew_limit {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_is_language_supported(&self, p0_: i32) -> ResultOf_ugc_is_language_supported {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_is_language_supported(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_ugc_is_language_supported {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_time_equal_to(&self, timeA_: i32,
timeB_: i32) -> ResultOf_is_time_equal_to {
    unsafe {
        let mut native_return = Default::default();
let mut timeA_ = timeA_;
let mut timeB_ = timeB_;
        let success = sdk::natives::is_time_equal_to(
            &mut native_return,
timeA_,
timeB_,
        );
        let native_return = native_return;
        
        ResultOf_is_time_equal_to {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_set_activity_island(&self, p0_: i32) -> ResultOf_network_transition_set_activity_island {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_activity_island(
            p0_,
        );
        
        
        ResultOf_network_transition_set_activity_island {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_find_matched_gamers(&self, attribute_: i32,
fallbackLimit_: f32,
lowerLimit_: f32,
upperLimit_: f32) -> ResultOf_network_find_matched_gamers {
    unsafe {
        let mut native_return = Default::default();
let mut attribute_ = attribute_;
let mut fallbackLimit_ = fallbackLimit_;
let mut lowerLimit_ = lowerLimit_;
let mut upperLimit_ = upperLimit_;
        let success = sdk::natives::network_find_matched_gamers(
            &mut native_return,
attribute_,
fallbackLimit_,
lowerLimit_,
upperLimit_,
        );
        let native_return = native_return;
        
        ResultOf_network_find_matched_gamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_friendly_fire_option(&self, toggle_: bool) -> ResultOf_network_set_friendly_fire_option {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_friendly_fire_option(
            toggle_,
        );
        
        
        ResultOf_network_set_friendly_fire_option {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_store_invite_through_restart(&self, ) -> ResultOf_network_store_invite_through_restart {
    unsafe {
        
        let success = sdk::natives::network_store_invite_through_restart(
            
        );
        
        
        ResultOf_network_store_invite_through_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_query_data_from_offline(&self, p0_: bool) -> ResultOf_ugc_set_query_data_from_offline {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::ugc_set_query_data_from_offline(
            p0_,
        );
        
        
        ResultOf_ugc_set_query_data_from_offline {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_did_find_gamers_succeed(&self, ) -> ResultOf_network_did_find_gamers_succeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_did_find_gamers_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_did_find_gamers_succeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_friend_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: i32) -> ResultOf_ugc_get_friend_content {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = Default::default();
        let success = sdk::natives::ugc_get_friend_content(
            &mut native_return,
&mut p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = p3_;
        
        ResultOf_ugc_get_friend_content {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_send_queued_join_request(&self, ) -> ResultOf_network_send_queued_join_request {
    unsafe {
        
        let success = sdk::natives::network_send_queued_join_request(
            
        );
        
        
        ResultOf_network_send_queued_join_request {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_kick_player(&self, player_: u32) -> ResultOf_network_session_kick_player {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_session_kick_player(
            player_,
        );
        
        
        ResultOf_network_session_kick_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_accept_presence_invite(&self, p0_: i32) -> ResultOf_network_accept_presence_invite {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_accept_presence_invite(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_network_accept_presence_invite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_visible_locally(&self, player_: u32,
bIncludePlayersVehicle_: bool) -> ResultOf_set_player_visible_locally {
    unsafe {
        let mut player_ = player_;
let mut bIncludePlayersVehicle_ = bIncludePlayersVehicle_;
        let success = sdk::natives::set_player_visible_locally(
            player_,
bIncludePlayersVehicle_,
        );
        
        
        ResultOf_set_player_visible_locally {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_hide_projectile_in_cutscene(&self, ) -> ResultOf_network_hide_projectile_in_cutscene {
    unsafe {
        
        let success = sdk::natives::network_hide_projectile_in_cutscene(
            
        );
        
        
        ResultOf_network_hide_projectile_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_last_viewed_shop_item(&self, p0_: u32,
p1_: i32,
p2_: u32) -> ResultOf_set_last_viewed_shop_item {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_last_viewed_shop_item(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_last_viewed_shop_item {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_access_tunable_modification_detection_clear(&self, ) -> ResultOf_network_access_tunable_modification_detection_clear {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_access_tunable_modification_detection_clear(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_access_tunable_modification_detection_clear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_find_largest_bunch_of_players(&self, p0_: i32,
p1_: i32) -> ResultOf_network_find_largest_bunch_of_players {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_find_largest_bunch_of_players(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_network_find_largest_bunch_of_players {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_transition_creator_handle(&self, ) -> ResultOf_network_clear_transition_creator_handle {
    unsafe {
        
        let success = sdk::natives::network_clear_transition_creator_handle(
            
        );
        
        
        ResultOf_network_clear_transition_creator_handle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_gang_to_join_tutorial_session(&self, teamId_: i32,
instanceId_: i32) -> ResultOf_network_allow_gang_to_join_tutorial_session {
    unsafe {
        let mut teamId_ = teamId_;
let mut instanceId_ = instanceId_;
        let success = sdk::natives::network_allow_gang_to_join_tutorial_session(
            teamId_,
instanceId_,
        );
        
        
        ResultOf_network_allow_gang_to_join_tutorial_session {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_cancel_respawn_search(&self, ) -> ResultOf_network_cancel_respawn_search {
    unsafe {
        
        let success = sdk::natives::network_cancel_respawn_search(
            
        );
        
        
        ResultOf_network_cancel_respawn_search {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_create_result(&self, ) -> ResultOf_ugc_get_create_result {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_create_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ugc_get_create_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_closed_friends(&self, ) -> ResultOf_network_session_is_closed_friends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_closed_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_session_is_closed_friends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_free_cam_mode(&self, toggle_: bool) -> ResultOf_network_set_in_free_cam_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_in_free_cam_mode(
            toggle_,
        );
        
        
        ResultOf_network_set_in_free_cam_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_online_version(&self, ) -> ResultOf_get_online_version {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_online_version(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_online_version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_succeeded(&self, ) -> ResultOf_network_gamertag_from_handle_succeeded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_gamertag_from_handle_succeeded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_gamertag_from_handle_succeeded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_set_using_offline_content(&self, p0_: bool) -> ResultOf_ugc_set_using_offline_content {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::ugc_set_using_offline_content(
            p0_,
        );
        
        
        ResultOf_ugc_set_using_offline_content {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_in_platform_party_chat(&self, ) -> ResultOf_network_is_in_platform_party_chat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_platform_party_chat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_is_in_platform_party_chat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_block_proxy_migration_between_tutorial_sessions(&self, p0_: i32) -> ResultOf_network_block_proxy_migration_between_tutorial_sessions {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_block_proxy_migration_between_tutorial_sessions(
            p0_,
        );
        
        
        ResultOf_network_block_proxy_migration_between_tutorial_sessions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_num_unacked_reliables(&self, player_: u32) -> ResultOf_network_get_num_unacked_reliables {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_num_unacked_reliables(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_network_get_num_unacked_reliables {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_join_previously_failed_transition(&self, ) -> ResultOf_network_join_previously_failed_transition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_previously_failed_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_join_previously_failed_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_object_auto_start_anim(&self, p0_: i32) -> ResultOf_play_object_auto_start_anim {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::play_object_auto_start_anim(
            p0_,
        );
        
        
        ResultOf_play_object_auto_start_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_entirely_inside_garage(&self, garageHash_: u32,
player_: u32,
p2_: f32,
p3_: i32) -> ResultOf_is_player_entirely_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut player_ = player_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_player_entirely_inside_garage(
            &mut native_return,
garageHash_,
player_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_entirely_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_a_portable_pickup(&self, object_: u32) -> ResultOf_is_object_a_portable_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_a_portable_pickup(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_a_portable_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_automatic_rate(&self, doorHash_: u32,
rate_: f32,
requestDoor_: bool,
forceUpdate_: bool) -> ResultOf_door_system_set_automatic_rate {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut rate_ = rate_;
let mut requestDoor_ = requestDoor_;
let mut forceUpdate_ = forceUpdate_;
        let success = sdk::natives::door_system_set_automatic_rate(
            doorHash_,
rate_,
requestDoor_,
forceUpdate_,
        );
        
        
        ResultOf_door_system_set_automatic_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_money_pickups(&self, x_: f32,
y_: f32,
z_: f32,
value_: i32,
amount_: i32,
model_: u32) -> ResultOf_create_money_pickups {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut value_ = value_;
let mut amount_ = amount_;
let mut model_ = model_;
        let success = sdk::natives::create_money_pickups(
            x_,
y_,
z_,
value_,
amount_,
model_,
        );
        
        
        ResultOf_create_money_pickups {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_glow_offset(&self, pickup_: i32,
p1_: f32) -> ResultOf_set_pickup_glow_offset {
    unsafe {
        let mut pickup_ = pickup_;
let mut p1_ = p1_;
        let success = sdk::natives::set_pickup_glow_offset(
            pickup_,
p1_,
        );
        
        
        ResultOf_set_pickup_glow_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_type_from_pickup_type(&self, pickupHash_: u32) -> ResultOf_get_weapon_type_from_pickup_type {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
        let success = sdk::natives::get_weapon_type_from_pickup_type(
            &mut native_return,
pickupHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_type_from_pickup_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_max_num_portable_pickups_carried_by_player(&self, modelHash_: u32,
number_: i32) -> ResultOf_set_max_num_portable_pickups_carried_by_player {
    unsafe {
        let mut modelHash_ = modelHash_;
let mut number_ = number_;
        let success = sdk::natives::set_max_num_portable_pickups_carried_by_player(
            modelHash_,
number_,
        );
        
        
        ResultOf_set_max_num_portable_pickups_carried_by_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pickup_weapon_object_valid(&self, object_: u32) -> ResultOf_is_pickup_weapon_object_valid {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_pickup_weapon_object_valid(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_pickup_weapon_object_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_non_networked_portable_pickup(&self, pickupHash_: u32,
x_: f32,
y_: f32,
z_: f32,
placeOnGround_: bool,
modelHash_: u32) -> ResultOf_create_non_networked_portable_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut placeOnGround_ = placeOnGround_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::create_non_networked_portable_pickup(
            &mut native_return,
pickupHash_,
x_,
y_,
z_,
placeOnGround_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_non_networked_portable_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_get_door_state(&self, doorHash_: u32) -> ResultOf_door_system_get_door_state {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::door_system_get_door_state(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_door_system_get_door_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_coord_and_heading_in_world_coords(&self, xPos_: f32,
yPos_: f32,
zPos_: f32,
heading_: f32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32) -> ResultOf_get_offset_from_coord_and_heading_in_world_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut heading_ = heading_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
        let success = sdk::natives::get_offset_from_coord_and_heading_in_world_coords(
            native_return.pin_mut(),
xPos_,
yPos_,
zPos_,
heading_,
xOffset_,
yOffset_,
zOffset_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_offset_from_coord_and_heading_in_world_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_coords_and_rotation_of_closest_object_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
outPosition_: Option<shared::Vector3>,
outRotation_: Option<shared::Vector3>,
rotationOrder_: i32) -> ResultOf_get_coords_and_rotation_of_closest_object_of_type {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut outRotation_ = sdk_helpers::create_vector3_ptr(outRotation_);
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::get_coords_and_rotation_of_closest_object_of_type(
            &mut native_return,
outPosition_.pin_mut(),
outRotation_.pin_mut(),
x_,
y_,
z_,
radius_,
modelHash_,
rotationOrder_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let outRotation_ = sdk_helpers::read_cpp_vector3(outRotation_);
        
        ResultOf_get_coords_and_rotation_of_closest_object_of_type {
            success,
            ret: native_return,
            outPosition_,
outRotation_
        }
    }
}

    fn native_is_player_partially_inside_garage(&self, garageHash_: u32,
player_: u32,
p2_: i32) -> ResultOf_is_player_partially_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut player_ = player_;
let mut p2_ = p2_;
        let success = sdk::natives::is_player_partially_inside_garage(
            &mut native_return,
garageHash_,
player_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_partially_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_objects_inside_garage(&self, garageHash_: u32,
vehicles_: bool,
peds_: bool,
objects_: bool,
isNetwork_: bool) -> ResultOf_clear_objects_inside_garage {
    unsafe {
        let mut garageHash_ = garageHash_;
let mut vehicles_ = vehicles_;
let mut peds_ = peds_;
let mut objects_ = objects_;
let mut isNetwork_ = isNetwork_;
        let success = sdk::natives::clear_objects_inside_garage(
            garageHash_,
vehicles_,
peds_,
objects_,
isNetwork_,
        );
        
        
        ResultOf_clear_objects_inside_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_impacts_apply_greater_force(&self, object_: u32,
p1_: bool) -> ResultOf_set_weapon_impacts_apply_greater_force {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_impacts_apply_greater_force(
            object_,
p1_,
        );
        
        
        ResultOf_set_weapon_impacts_apply_greater_force {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_is_object_articulated(&self, object_: u32,
toggle_: bool) -> ResultOf_set_is_object_articulated {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_object_articulated(
            object_,
toggle_,
        );
        
        
        ResultOf_set_is_object_articulated {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_players_for_ambient_pickup(&self, p0_: i32,
p1_: i32) -> ResultOf_block_players_for_ambient_pickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::block_players_for_ambient_pickup(
            p0_,
p1_,
        );
        
        
        ResultOf_block_players_for_ambient_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_coords(&self, pickup_: i32) -> ResultOf_get_pickup_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut pickup_ = pickup_;
        let success = sdk::natives::get_pickup_coords(
            native_return.pin_mut(),
pickup_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_pickup_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_has_object_been_completely_destroyed(&self, p0_: i32) -> ResultOf_get_has_object_been_completely_destroyed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_has_object_been_completely_destroyed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_has_object_been_completely_destroyed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_rayfire_map_object_anim_phase(&self, object_: u32) -> ResultOf_get_rayfire_map_object_anim_phase {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_rayfire_map_object_anim_phase(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_get_rayfire_map_object_anim_phase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_glow_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_object_glow_when_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_glow_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_object_glow_when_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_pickups_of_type(&self, pickupHash_: u32) -> ResultOf_remove_all_pickups_of_type {
    unsafe {
        let mut pickupHash_ = pickupHash_;
        let success = sdk::natives::remove_all_pickups_of_type(
            pickupHash_,
        );
        
        
        ResultOf_remove_all_pickups_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_in_angled_area(&self, xPos_: f32,
yPos_: f32,
zPos_: f32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
debug_: bool,
includeZ_: bool) -> ResultOf_is_point_in_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut xPos_ = xPos_;
let mut yPos_ = yPos_;
let mut zPos_ = zPos_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut debug_ = debug_;
let mut includeZ_ = includeZ_;
        let success = sdk::natives::is_point_in_angled_area(
            &mut native_return,
xPos_,
yPos_,
zPos_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
debug_,
includeZ_,
        );
        let native_return = native_return;
        
        ResultOf_is_point_in_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_portable_pickup(&self, pickupHash_: u32,
x_: f32,
y_: f32,
z_: f32,
placeOnGround_: bool,
modelHash_: u32) -> ResultOf_create_portable_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut placeOnGround_ = placeOnGround_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::create_portable_pickup(
            &mut native_return,
pickupHash_,
x_,
y_,
z_,
placeOnGround_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_portable_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_slide_object(&self, object_: u32,
toX_: f32,
toY_: f32,
toZ_: f32,
speedX_: f32,
speedY_: f32,
speedZ_: f32,
collision_: bool) -> ResultOf_slide_object {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut toX_ = toX_;
let mut toY_ = toY_;
let mut toZ_ = toZ_;
let mut speedX_ = speedX_;
let mut speedY_ = speedY_;
let mut speedZ_ = speedZ_;
let mut collision_ = collision_;
        let success = sdk::natives::slide_object(
            &mut native_return,
object_,
toX_,
toY_,
toZ_,
speedX_,
speedY_,
speedZ_,
collision_,
        );
        let native_return = native_return;
        
        ResultOf_slide_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_prop_tint_index(&self, p0_: i32,
p1_: i32) -> ResultOf_set_prop_tint_index {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_prop_tint_index(
            p0_,
p1_,
        );
        
        
        ResultOf_set_prop_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_generation_range_multiplier(&self, multiplier_: f32) -> ResultOf_set_pickup_generation_range_multiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_pickup_generation_range_multiplier(
            multiplier_,
        );
        
        
        ResultOf_set_pickup_generation_range_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_only_allow_ammo_collection_when_low(&self, p0_: bool) -> ResultOf_set_only_allow_ammo_collection_when_low {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_only_allow_ammo_collection_when_low(
            p0_,
        );
        
        
        ResultOf_set_only_allow_ammo_collection_when_low {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pickup(&self, pickup_: i32) -> ResultOf_remove_pickup {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::remove_pickup(
            pickup_,
        );
        
        
        ResultOf_remove_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_render_fake_pickup_glow(&self, x_: f32,
y_: f32,
z_: f32,
colorIndex_: i32) -> ResultOf_render_fake_pickup_glow {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut colorIndex_ = colorIndex_;
        let success = sdk::natives::render_fake_pickup_glow(
            x_,
y_,
z_,
colorIndex_,
        );
        
        
        ResultOf_render_fake_pickup_glow {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_object_entirely_inside_garage(&self, garageHash_: u32,
entity_: u32,
p2_: f32,
p3_: i32) -> ResultOf_is_object_entirely_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut entity_ = entity_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_object_entirely_inside_garage(
            &mut native_return,
garageHash_,
entity_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_entirely_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_pickup_rotate_face_up(&self, ) -> ResultOf_force_pickup_rotate_face_up {
    unsafe {
        
        let success = sdk::natives::force_pickup_rotate_face_up(
            
        );
        
        
        ResultOf_force_pickup_rotate_face_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_object_near_point(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: bool) -> ResultOf_is_any_object_near_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::is_any_object_near_point(
            &mut native_return,
x_,
y_,
z_,
range_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_object_near_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_arrow_marker(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_object_arrow_marker {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_arrow_marker(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_object_arrow_marker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_is_visible_in_mirrors(&self, object_: u32,
toggle_: bool) -> ResultOf_set_object_is_visible_in_mirrors {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_visible_in_mirrors(
            object_,
toggle_,
        );
        
        
        ResultOf_set_object_is_visible_in_mirrors {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_articulated_joint_at_max_angle(&self, p0_: i32,
p1_: i32) -> ResultOf_get_is_articulated_joint_at_max_angle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_articulated_joint_at_max_angle(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_articulated_joint_at_max_angle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_hidden_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_hidden_when_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_hidden_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_hidden_when_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_activate_object_physics_as_soon_as_it_is_unfrozen(&self, object_: u32,
toggle_: bool) -> ResultOf_set_activate_object_physics_as_soon_as_it_is_unfrozen {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_activate_object_physics_as_soon_as_it_is_unfrozen(
            object_,
toggle_,
        );
        
        
        ResultOf_set_activate_object_physics_as_soon_as_it_is_unfrozen {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_articulated_joint_at_min_angle(&self, object_: u32,
p1_: i32) -> ResultOf_get_is_articulated_joint_at_min_angle {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_articulated_joint_at_min_angle(
            &mut native_return,
object_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_articulated_joint_at_min_angle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_closest_object_of_type_been_completely_destroyed(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
p5_: bool) -> ResultOf_has_closest_object_of_type_been_completely_destroyed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::has_closest_object_of_type_been_completely_destroyed(
            &mut native_return,
x_,
y_,
z_,
radius_,
modelHash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_has_closest_object_of_type_been_completely_destroyed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_door_from_system(&self, doorHash_: u32,
p1_: i32) -> ResultOf_remove_door_from_system {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_door_from_system(
            doorHash_,
p1_,
        );
        
        
        ResultOf_remove_door_from_system {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_portable_pickup_persist(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_portable_pickup_persist {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_portable_pickup_persist(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_portable_pickup_persist {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_object_high_detail_model(&self, object_: u32) -> ResultOf_remove_object_high_detail_model {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::remove_object_high_detail_model(
            object_,
        );
        
        
        ResultOf_remove_object_high_detail_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_door_pending_state(&self, doorHash_: u32) -> ResultOf_door_system_get_door_pending_state {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::door_system_get_door_pending_state(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_door_system_get_door_pending_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_activate_physics_on_unfixed_pickup(&self, pickup_: i32,
toggle_: bool) -> ResultOf_force_activate_physics_on_unfixed_pickup {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::force_activate_physics_on_unfixed_pickup(
            pickup_,
toggle_,
        );
        
        
        ResultOf_force_activate_physics_on_unfixed_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_allow_low_lod_buoyancy(&self, object_: u32,
toggle_: bool) -> ResultOf_set_object_allow_low_lod_buoyancy {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_allow_low_lod_buoyancy(
            object_,
toggle_,
        );
        
        
        ResultOf_set_object_allow_low_lod_buoyancy {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_object(&self, pickup_: i32) -> ResultOf_get_pickup_object {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::get_pickup_object(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOf_get_pickup_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_object(&self, modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
isNetwork_: bool,
bScriptHostObj_: bool,
dynamic_: bool) -> ResultOf_create_object {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostObj_ = bScriptHostObj_;
let mut dynamic_ = dynamic_;
        let success = sdk::natives::create_object(
            &mut native_return,
modelHash_,
x_,
y_,
z_,
isNetwork_,
bScriptHostObj_,
dynamic_,
        );
        let native_return = native_return;
        
        ResultOf_create_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_rayfire_map_object_exist(&self, object_: u32) -> ResultOf_does_rayfire_map_object_exist {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::does_rayfire_map_object_exist(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_does_rayfire_map_object_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_object(&self, object_: u32) -> ResultOf_delete_object {
    unsafe {
        let mut object_ = Default::default();
        let success = sdk::natives::delete_object(
            &mut object_,
        );
        let object_ = object_;
        
        ResultOf_delete_object {
            success,
            ret: (),
            object_
        }
    }
}

    fn native_set_team_pickup_object(&self, object_: u32,
p1_: i32,
p2_: bool) -> ResultOf_set_team_pickup_object {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_team_pickup_object(
            object_,
p1_,
p2_,
        );
        
        
        ResultOf_set_team_pickup_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_find_existing_door(&self, x_: f32,
y_: f32,
z_: f32,
modelHash_: u32,
outDoorHash_: u32) -> ResultOf_door_system_find_existing_door {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut modelHash_ = modelHash_;
let mut outDoorHash_ = Default::default();
        let success = sdk::natives::door_system_find_existing_door(
            &mut native_return,
&mut outDoorHash_,
x_,
y_,
z_,
modelHash_,
        );
        let native_return = native_return;
let outDoorHash_ = outDoorHash_;
        
        ResultOf_door_system_find_existing_door {
            success,
            ret: native_return,
            outDoorHash_
        }
    }
}

    fn native_place_object_on_ground_properly(&self, object_: u32) -> ResultOf_place_object_on_ground_properly {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::place_object_on_ground_properly(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_place_object_on_ground_properly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_state_of_rayfire_map_object(&self, object_: u32,
state_: i32) -> ResultOf_set_state_of_rayfire_map_object {
    unsafe {
        let mut object_ = object_;
let mut state_ = state_;
        let success = sdk::natives::set_state_of_rayfire_map_object(
            object_,
state_,
        );
        
        
        ResultOf_set_state_of_rayfire_map_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_portable_pickup_last_accessible_position_setting(&self, object_: u32) -> ResultOf_force_portable_pickup_last_accessible_position_setting {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::force_portable_pickup_last_accessible_position_setting(
            object_,
        );
        
        
        ResultOf_force_portable_pickup_last_accessible_position_setting {
            success,
            ret: (),
            
        }
    }
}

    fn native_convert_old_pickup_type_to_new(&self, pickupHash_: u32) -> ResultOf_convert_old_pickup_type_to_new {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
        let success = sdk::natives::convert_old_pickup_type_to_new(
            &mut native_return,
pickupHash_,
        );
        let native_return = native_return;
        
        ResultOf_convert_old_pickup_type_to_new {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_prop_light_color(&self, object_: u32,
p1_: bool,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_prop_light_color {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_prop_light_color(
            &mut native_return,
object_,
p1_,
r_,
g_,
b_,
        );
        let native_return = native_return;
        
        ResultOf_set_prop_light_color {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_permitted_to_collect_pickups_of_type(&self, player_: u32,
pickupHash_: u32,
toggle_: bool) -> ResultOf_set_player_permitted_to_collect_pickups_of_type {
    unsafe {
        let mut player_ = player_;
let mut pickupHash_ = pickupHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_permitted_to_collect_pickups_of_type(
            player_,
pickupHash_,
toggle_,
        );
        
        
        ResultOf_set_player_permitted_to_collect_pickups_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_glow_in_same_team(&self, pickup_: i32) -> ResultOf_set_object_glow_in_same_team {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::set_object_glow_in_same_team(
            pickup_,
        );
        
        
        ResultOf_set_object_glow_in_same_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_projectiles_should_explode_on_contact(&self, entity_: u32,
p1_: i32) -> ResultOf_set_projectiles_should_explode_on_contact {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_projectiles_should_explode_on_contact(
            entity_,
p1_,
        );
        
        
        ResultOf_set_projectiles_should_explode_on_contact {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_portable_pickup_to_migrate_to_non_participants(&self, pickup_: i32,
toggle_: bool) -> ResultOf_allow_portable_pickup_to_migrate_to_non_participants {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_portable_pickup_to_migrate_to_non_participants(
            pickup_,
toggle_,
        );
        
        
        ResultOf_allow_portable_pickup_to_migrate_to_non_participants {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_open_ratio(&self, doorHash_: u32) -> ResultOf_door_system_get_open_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::door_system_get_open_ratio(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_door_system_get_open_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_tidying_up_in_garage(&self, id_: i32,
toggle_: bool) -> ResultOf_disable_tidying_up_in_garage {
    unsafe {
        let mut id_ = id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_tidying_up_in_garage(
            id_,
toggle_,
        );
        
        
        ResultOf_disable_tidying_up_in_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_safehouse_garages(&self, ) -> ResultOf_close_safehouse_garages {
    unsafe {
        
        let success = sdk::natives::close_safehouse_garages(
            
        );
        
        
        ResultOf_close_safehouse_garages {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_ambient_pickup(&self, pickupHash_: u32,
posX_: f32,
posY_: f32,
posZ_: f32,
flags_: i32,
value_: i32,
modelHash_: u32,
p7_: bool,
p8_: bool) -> ResultOf_create_ambient_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut flags_ = flags_;
let mut value_ = value_;
let mut modelHash_ = modelHash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_ambient_pickup(
            &mut native_return,
pickupHash_,
posX_,
posY_,
posZ_,
flags_,
value_,
modelHash_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_create_ambient_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_entity_entirely_inside_garage(&self, garageHash_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOf_is_any_entity_entirely_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::is_any_entity_entirely_inside_garage(
            &mut native_return,
garageHash_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_entity_entirely_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_door_state(&self, doorHash_: u32,
state_: i32,
requestDoor_: bool,
forceUpdate_: bool) -> ResultOf_door_system_set_door_state {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut state_ = state_;
let mut requestDoor_ = requestDoor_;
let mut forceUpdate_ = forceUpdate_;
        let success = sdk::natives::door_system_set_door_state(
            doorHash_,
state_,
requestDoor_,
forceUpdate_,
        );
        
        
        ResultOf_door_system_set_door_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_safe_pickup_coords(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: f32) -> ResultOf_get_safe_pickup_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::get_safe_pickup_coords(
            native_return.pin_mut(),
x_,
y_,
z_,
p3_,
p4_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_safe_pickup_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_door_to_system(&self, doorHash_: u32,
modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool,
scriptDoor_: bool,
isLocal_: bool) -> ResultOf_add_door_to_system {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut scriptDoor_ = scriptDoor_;
let mut isLocal_ = isLocal_;
        let success = sdk::natives::add_door_to_system(
            doorHash_,
modelHash_,
x_,
y_,
z_,
p5_,
scriptDoor_,
isLocal_,
        );
        
        
        ResultOf_add_door_to_system {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_all_barriers_for_race(&self, ) -> ResultOf_close_all_barriers_for_race {
    unsafe {
        
        let success = sdk::natives::close_all_barriers_for_race(
            
        );
        
        
        ResultOf_close_all_barriers_for_race {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_is_a_pressure_plate(&self, object_: u32,
toggle_: bool) -> ResultOf_set_object_is_a_pressure_plate {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_a_pressure_plate(
            object_,
toggle_,
        );
        
        
        ResultOf_set_object_is_a_pressure_plate {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_pickup_regenerate(&self, p0_: i32) -> ResultOf_force_pickup_regenerate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_pickup_regenerate(
            p0_,
        );
        
        
        ResultOf_force_pickup_regenerate {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_closest_object_of_type_been_broken(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
modelHash_: u32,
p5_: i32) -> ResultOf_has_closest_object_of_type_been_broken {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut modelHash_ = modelHash_;
let mut p5_ = p5_;
        let success = sdk::natives::has_closest_object_of_type_been_broken(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
modelHash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_has_closest_object_of_type_been_broken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_pickup_reward_type_suppression(&self, rewardType_: i32) -> ResultOf_clear_pickup_reward_type_suppression {
    unsafe {
        let mut rewardType_ = rewardType_;
        let success = sdk::natives::clear_pickup_reward_type_suppression(
            rewardType_,
        );
        
        
        ResultOf_clear_pickup_reward_type_suppression {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_force_vehicles_to_avoid(&self, object_: u32,
toggle_: bool) -> ResultOf_set_object_force_vehicles_to_avoid {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_force_vehicles_to_avoid(
            object_,
toggle_,
        );
        
        
        ResultOf_set_object_force_vehicles_to_avoid {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_regeneration_time(&self, pickup_: i32,
duration_: i32) -> ResultOf_set_pickup_regeneration_time {
    unsafe {
        let mut pickup_ = pickup_;
let mut duration_ = duration_;
        let success = sdk::natives::set_pickup_regeneration_time(
            pickup_,
duration_,
        );
        
        
        ResultOf_set_pickup_regeneration_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_collectable_in_vehicle(&self, pickup_: i32) -> ResultOf_set_pickup_object_collectable_in_vehicle {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::set_pickup_object_collectable_in_vehicle(
            pickup_,
        );
        
        
        ResultOf_set_pickup_object_collectable_in_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_can_collect_portable_pickups(&self, toggle_: bool) -> ResultOf_set_local_player_can_collect_portable_pickups {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_local_player_can_collect_portable_pickups(
            toggle_,
        );
        
        
        ResultOf_set_local_player_can_collect_portable_pickups {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pickup_been_collected(&self, pickup_: i32) -> ResultOf_has_pickup_been_collected {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::has_pickup_been_collected(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOf_has_pickup_been_collected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_custom_pickup_weapon_hash(&self, pickupHash_: u32,
pickup_: i32) -> ResultOf_set_custom_pickup_weapon_hash {
    unsafe {
        let mut pickupHash_ = pickupHash_;
let mut pickup_ = pickup_;
        let success = sdk::natives::set_custom_pickup_weapon_hash(
            pickupHash_,
pickup_,
        );
        
        
        ResultOf_set_custom_pickup_weapon_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pickup_arrow_marker_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_allow_pickup_arrow_marker_when_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_pickup_arrow_marker_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_allow_pickup_arrow_marker_when_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_transparent_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_transparent_when_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_transparent_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_transparent_when_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_entities_entirely_inside_garage(&self, garageHash_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOf_are_entities_entirely_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::are_entities_entirely_inside_garage(
            &mut native_return,
garageHash_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_are_entities_entirely_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_portable_pickup_when_detached(&self, pickupObject_: u32,
toggle_: bool) -> ResultOf_hide_portable_pickup_when_detached {
    unsafe {
        let mut pickupObject_ = pickupObject_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_portable_pickup_when_detached(
            pickupObject_,
toggle_,
        );
        
        
        ResultOf_hide_portable_pickup_when_detached {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_transparent_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_object_transparent_when_uncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_transparent_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_object_transparent_when_uncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_permitted_to_collect_pickups_with_model(&self, modelHash_: u32,
toggle_: bool) -> ResultOf_set_local_player_permitted_to_collect_pickups_with_model {
    unsafe {
        let mut modelHash_ = modelHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_local_player_permitted_to_collect_pickups_with_model(
            modelHash_,
toggle_,
        );
        
        
        ResultOf_set_local_player_permitted_to_collect_pickups_with_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_pickup_rotate(&self, pickupHash_: u32,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
flag_: i32,
amount_: i32,
p9_: i32,
p10_: bool,
modelHash_: u32) -> ResultOf_create_pickup_rotate {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut flag_ = flag_;
let mut amount_ = amount_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::create_pickup_rotate(
            &mut native_return,
pickupHash_,
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
flag_,
amount_,
p9_,
p10_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_pickup_rotate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_state_of_rayfire_map_object(&self, object_: u32) -> ResultOf_get_state_of_rayfire_map_object {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_state_of_rayfire_map_object(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_get_state_of_rayfire_map_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_targettable(&self, object_: u32,
targettable_: bool) -> ResultOf_set_object_targettable {
    unsafe {
        let mut object_ = object_;
let mut targettable_ = targettable_;
        let success = sdk::natives::set_object_targettable(
            object_,
targettable_,
        );
        
        
        ResultOf_set_object_targettable {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_object_been_broken(&self, object_: u32,
p1_: i32) -> ResultOf_has_object_been_broken {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::has_object_been_broken(
            &mut native_return,
object_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_has_object_been_broken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_visible(&self, object_: u32) -> ResultOf_is_object_visible {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_visible(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_near_point(&self, objectHash_: u32,
x_: f32,
y_: f32,
z_: f32,
range_: f32) -> ResultOf_is_object_near_point {
    unsafe {
        let mut native_return = Default::default();
let mut objectHash_ = objectHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
        let success = sdk::natives::is_object_near_point(
            &mut native_return,
objectHash_,
x_,
y_,
z_,
range_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_near_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_collisions_between_cars_and_car_parachute(&self, p0_: i32) -> ResultOf_set_disable_collisions_between_cars_and_car_parachute {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_disable_collisions_between_cars_and_car_parachute(
            p0_,
        );
        
        
        ResultOf_set_disable_collisions_between_cars_and_car_parachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_alpha_when_transparent(&self, p0_: i32) -> ResultOf_set_pickup_object_alpha_when_transparent {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pickup_object_alpha_when_transparent(
            p0_,
        );
        
        
        ResultOf_set_pickup_object_alpha_when_transparent {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_portable_pickup_to_ped(&self, pickupObject_: u32,
ped_: u32) -> ResultOf_attach_portable_pickup_to_ped {
    unsafe {
        let mut pickupObject_ = pickupObject_;
let mut ped_ = ped_;
        let success = sdk::natives::attach_portable_pickup_to_ped(
            pickupObject_,
ped_,
        );
        
        
        ResultOf_attach_portable_pickup_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_pickup_sound_for_pickup(&self, p0_: i32,
p1_: i32) -> ResultOf_suppress_pickup_sound_for_pickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::suppress_pickup_sound_for_pickup(
            p0_,
p1_,
        );
        
        
        ResultOf_suppress_pickup_sound_for_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_garage_empty(&self, garageHash_: u32,
p1_: bool,
p2_: i32) -> ResultOf_is_garage_empty {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::is_garage_empty(
            &mut native_return,
garageHash_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_is_garage_empty {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drive_articulated_joint(&self, object_: u32,
toggle_: bool,
p2_: i32) -> ResultOf_set_drive_articulated_joint {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_drive_articulated_joint(
            object_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_drive_articulated_joint {
            success,
            ret: (),
            
        }
    }
}

    fn native_prevent_collection_of_portable_pickup(&self, object_: u32,
p1_: bool,
p2_: bool) -> ResultOf_prevent_collection_of_portable_pickup {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::prevent_collection_of_portable_pickup(
            object_,
p1_,
p2_,
        );
        
        
        ResultOf_prevent_collection_of_portable_pickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_speed_boost_amount(&self, object_: u32,
p1_: i32) -> ResultOf_set_object_speed_boost_amount {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::set_object_speed_boost_amount(
            object_,
p1_,
        );
        
        
        ResultOf_set_object_speed_boost_amount {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_tint_index(&self, object_: u32,
textureVariation_: i32) -> ResultOf_set_object_tint_index {
    unsafe {
        let mut object_ = object_;
let mut textureVariation_ = textureVariation_;
        let success = sdk::natives::set_object_tint_index(
            object_,
textureVariation_,
        );
        
        
        ResultOf_set_object_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_object_no_offset(&self, modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
isNetwork_: bool,
bScriptHostObj_: bool,
dynamic_: bool) -> ResultOf_create_object_no_offset {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostObj_ = bScriptHostObj_;
let mut dynamic_ = dynamic_;
        let success = sdk::natives::create_object_no_offset(
            &mut native_return,
modelHash_,
x_,
y_,
z_,
isNetwork_,
bScriptHostObj_,
dynamic_,
        );
        let native_return = native_return;
        
        ResultOf_create_object_no_offset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_locked_unstreamed_in_door_of_type(&self, modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
xRotMult_: f32,
yRotMult_: f32,
zRotMult_: f32) -> ResultOf_set_locked_unstreamed_in_door_of_type {
    unsafe {
        let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = locked_;
let mut xRotMult_ = xRotMult_;
let mut yRotMult_ = yRotMult_;
let mut zRotMult_ = zRotMult_;
        let success = sdk::natives::set_locked_unstreamed_in_door_of_type(
            modelHash_,
x_,
y_,
z_,
locked_,
xRotMult_,
yRotMult_,
zRotMult_,
        );
        
        
        ResultOf_set_locked_unstreamed_in_door_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_automatic_distance(&self, doorHash_: u32,
distance_: f32,
requestDoor_: bool,
forceUpdate_: bool) -> ResultOf_door_system_set_automatic_distance {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut distance_ = distance_;
let mut requestDoor_ = requestDoor_;
let mut forceUpdate_ = forceUpdate_;
        let success = sdk::natives::door_system_set_automatic_distance(
            doorHash_,
distance_,
requestDoor_,
forceUpdate_,
        );
        
        
        ResultOf_door_system_set_automatic_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_non_networked_ambient_pickup(&self, pickupHash_: u32,
posX_: f32,
posY_: f32,
posZ_: f32,
flags_: i32,
value_: i32,
modelHash_: u32,
p7_: bool,
p8_: bool) -> ResultOf_create_non_networked_ambient_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut flags_ = flags_;
let mut value_ = value_;
let mut modelHash_ = modelHash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_non_networked_ambient_pickup(
            &mut native_return,
pickupHash_,
posX_,
posY_,
posZ_,
flags_,
value_,
modelHash_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_create_non_networked_ambient_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_glow_offset(&self, pickup_: i32,
p1_: f32,
p2_: bool) -> ResultOf_set_pickup_object_glow_offset {
    unsafe {
        let mut pickup_ = pickup_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_pickup_object_glow_offset(
            pickup_,
p1_,
p2_,
        );
        
        
        ResultOf_set_pickup_object_glow_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_pickup_reward_type_suppression(&self, ) -> ResultOf_clear_all_pickup_reward_type_suppression {
    unsafe {
        
        let success = sdk::natives::clear_all_pickup_reward_type_suppression(
            
        );
        
        
        ResultOf_clear_all_pickup_reward_type_suppression {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_door_open_for_races(&self, doorHash_: u32,
p1_: bool) -> ResultOf_door_system_set_door_open_for_races {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut p1_ = p1_;
        let success = sdk::natives::door_system_set_door_open_for_races(
            doorHash_,
p1_,
        );
        
        
        ResultOf_door_system_set_door_open_for_races {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pickup_by_none_participant(&self, pickup_: i32,
toggle_: bool) -> ResultOf_allow_pickup_by_none_participant {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_pickup_by_none_participant(
            pickup_,
toggle_,
        );
        
        
        ResultOf_allow_pickup_by_none_participant {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_damage_events_for_non_networked_objects(&self, value_: bool) -> ResultOf_allow_damage_events_for_non_networked_objects {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::allow_damage_events_for_non_networked_objects(
            value_,
        );
        
        
        ResultOf_allow_damage_events_for_non_networked_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_only_clean_up_object_when_out_of_range(&self, object_: u32) -> ResultOf_only_clean_up_object_when_out_of_range {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::only_clean_up_object_when_out_of_range(
            object_,
        );
        
        
        ResultOf_only_clean_up_object_when_out_of_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_prop_light_overriden(&self, object_: u32) -> ResultOf_is_prop_light_overriden {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_prop_light_overriden(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_prop_light_overriden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pickup_exist(&self, pickup_: i32) -> ResultOf_does_pickup_exist {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::does_pickup_exist(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOf_does_pickup_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_rotate_object(&self, object_: u32,
p1_: f32,
p2_: f32,
p3_: bool) -> ResultOf_rotate_object {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::rotate_object(
            &mut native_return,
object_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_rotate_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drive_articulated_joint_with_inflictor(&self, object_: u32,
toggle_: bool,
p2_: i32,
ped_: u32) -> ResultOf_set_drive_articulated_joint_with_inflictor {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
let mut ped_ = ped_;
        let success = sdk::natives::set_drive_articulated_joint_with_inflictor(
            object_,
toggle_,
p2_,
ped_,
        );
        
        
        ResultOf_set_drive_articulated_joint_with_inflictor {
            success,
            ret: (),
            
        }
    }
}

    fn native_track_object_visibility(&self, object_: u32) -> ResultOf_track_object_visibility {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::track_object_visibility(
            object_,
        );
        
        
        ResultOf_track_object_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_flag_render_small_shadow(&self, object_: u32,
toggle_: bool) -> ResultOf_set_entity_flag_render_small_shadow {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_flag_render_small_shadow(
            object_,
toggle_,
        );
        
        
        ResultOf_set_entity_flag_render_small_shadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_generation_range_multiplier(&self, ) -> ResultOf_get_pickup_generation_range_multiplier {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_pickup_generation_range_multiplier(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_pickup_generation_range_multiplier {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_rayfire_map_object(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
name_: Option<String>) -> ResultOf_get_rayfire_map_object {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_rayfire_map_object(
            &mut native_return,
x_,
y_,
z_,
radius_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_rayfire_map_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_is_object_ball(&self, object_: u32,
toggle_: bool) -> ResultOf_set_is_object_ball {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_object_ball(
            object_,
toggle_,
        );
        
        
        ResultOf_set_is_object_ball {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_open_ratio(&self, doorHash_: u32,
ajar_: f32,
requestDoor_: bool,
forceUpdate_: bool) -> ResultOf_door_system_set_open_ratio {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut ajar_ = ajar_;
let mut requestDoor_ = requestDoor_;
let mut forceUpdate_ = forceUpdate_;
        let success = sdk::natives::door_system_set_open_ratio(
            doorHash_,
ajar_,
requestDoor_,
forceUpdate_,
        );
        
        
        ResultOf_door_system_set_open_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_fragment_damage_health(&self, p0_: i32,
p1_: bool) -> ResultOf_get_object_fragment_damage_health {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_object_fragment_damage_health(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_object_fragment_damage_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_extended_pickup_probe_areas(&self, ) -> ResultOf_clear_extended_pickup_probe_areas {
    unsafe {
        
        let success = sdk::natives::clear_extended_pickup_probe_areas(
            
        );
        
        
        ResultOf_clear_extended_pickup_probe_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscenes_weapon_flashlight_on_this_frame(&self, object_: u32,
toggle_: bool) -> ResultOf_set_cutscenes_weapon_flashlight_on_this_frame {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cutscenes_weapon_flashlight_on_this_frame(
            object_,
toggle_,
        );
        
        
        ResultOf_set_cutscenes_weapon_flashlight_on_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_object_of_type_exist_at_coords(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
hash_: u32,
p5_: bool) -> ResultOf_does_object_of_type_exist_at_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut hash_ = hash_;
let mut p5_ = p5_;
        let success = sdk::natives::does_object_of_type_exist_at_coords(
            &mut native_return,
x_,
y_,
z_,
radius_,
hash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_does_object_of_type_exist_at_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_track_damage_events(&self, pickup_: i32,
toggle_: bool) -> ResultOf_set_pickup_track_damage_events {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_track_damage_events(
            pickup_,
toggle_,
        );
        
        
        ResultOf_set_pickup_track_damage_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_door_registered_with_system(&self, doorHash_: u32) -> ResultOf_is_door_registered_with_system {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::is_door_registered_with_system(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_door_registered_with_system {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_spring_removed(&self, doorHash_: u32,
removed_: bool,
requestDoor_: bool,
forceUpdate_: bool) -> ResultOf_door_system_set_spring_removed {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut removed_ = removed_;
let mut requestDoor_ = requestDoor_;
let mut forceUpdate_ = forceUpdate_;
        let success = sdk::natives::door_system_set_spring_removed(
            doorHash_,
removed_,
requestDoor_,
forceUpdate_,
        );
        
        
        ResultOf_door_system_set_spring_removed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_door_closed(&self, doorHash_: u32) -> ResultOf_is_door_closed {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::is_door_closed(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_door_closed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_is_special_golfball(&self, object_: u32,
toggle_: bool) -> ResultOf_set_object_is_special_golfball {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_special_golfball(
            object_,
toggle_,
        );
        
        
        ResultOf_set_object_is_special_golfball {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_all_barriers_for_race(&self, p0_: bool) -> ResultOf_open_all_barriers_for_race {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::open_all_barriers_for_race(
            p0_,
        );
        
        
        ResultOf_open_all_barriers_for_race {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_portable_pickup_from_ped(&self, pickupObject_: u32) -> ResultOf_detach_portable_pickup_from_ped {
    unsafe {
        let mut pickupObject_ = pickupObject_;
        let success = sdk::natives::detach_portable_pickup_from_ped(
            pickupObject_,
        );
        
        
        ResultOf_detach_portable_pickup_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_flag_suppress_shadow(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_entity_flag_suppress_shadow {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_flag_suppress_shadow(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_entity_flag_suppress_shadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_extended_pickup_probe_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_add_extended_pickup_probe_area {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::add_extended_pickup_probe_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_add_extended_pickup_probe_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_type_from_weapon_hash(&self, weaponHash_: u32) -> ResultOf_get_pickup_type_from_weapon_hash {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_pickup_type_from_weapon_hash(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_pickup_type_from_weapon_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_place_object_on_ground_or_object_properly(&self, object_: u32) -> ResultOf_place_object_on_ground_or_object_properly {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::place_object_on_ground_or_object_properly(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_place_object_on_ground_or_object_properly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_hold_open(&self, doorHash_: u32,
toggle_: bool) -> ResultOf_door_system_set_hold_open {
    unsafe {
        let mut doorHash_ = doorHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::door_system_set_hold_open(
            doorHash_,
toggle_,
        );
        
        
        ResultOf_door_system_set_hold_open {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_pickup_object_exist(&self, pickupObject_: u32) -> ResultOf_does_pickup_object_exist {
    unsafe {
        let mut native_return = Default::default();
let mut pickupObject_ = pickupObject_;
        let success = sdk::natives::does_pickup_object_exist(
            &mut native_return,
pickupObject_,
        );
        let native_return = native_return;
        
        ResultOf_does_pickup_object_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_garage(&self, garageHash_: u32,
isNetwork_: bool) -> ResultOf_clear_garage {
    unsafe {
        let mut garageHash_ = garageHash_;
let mut isNetwork_ = isNetwork_;
        let success = sdk::natives::clear_garage(
            garageHash_,
isNetwork_,
        );
        
        
        ResultOf_clear_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_ammo_for_weapon_pickup(&self, pickupHash_: u32) -> ResultOf_get_default_ammo_for_weapon_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
        let success = sdk::natives::get_default_ammo_for_weapon_pickup(
            &mut native_return,
pickupHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_default_ammo_for_weapon_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_speed_boost_duration(&self, object_: u32,
duration_: f32) -> ResultOf_set_object_speed_boost_duration {
    unsafe {
        let mut object_ = object_;
let mut duration_ = duration_;
        let success = sdk::natives::set_object_speed_boost_duration(
            object_,
duration_,
        );
        
        
        ResultOf_set_object_speed_boost_duration {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_is_physics_loaded(&self, p0_: i32) -> ResultOf_door_system_get_is_physics_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::door_system_get_is_physics_loaded(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_door_system_get_is_physics_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_damage_object_fragment_child(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_damage_object_fragment_child {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::damage_object_fragment_child(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_damage_object_fragment_child {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_object_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
isMission_: bool,
p6_: bool,
p7_: bool) -> ResultOf_get_closest_object_of_type {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut isMission_ = isMission_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::get_closest_object_of_type(
            &mut native_return,
x_,
y_,
z_,
radius_,
modelHash_,
isMission_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_get_closest_object_of_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_break_object_fragment_child(&self, p0_: u32,
p1_: i32,
p2_: bool) -> ResultOf_break_object_fragment_child {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::break_object_fragment_child(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_break_object_fragment_child {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_tint_index(&self, object_: u32) -> ResultOf_get_object_tint_index {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_object_tint_index(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_get_object_tint_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_get_automatic_distance(&self, doorHash_: u32) -> ResultOf_door_system_get_automatic_distance {
    unsafe {
        let mut native_return = Default::default();
let mut doorHash_ = doorHash_;
        let success = sdk::natives::door_system_get_automatic_distance(
            &mut native_return,
doorHash_,
        );
        let native_return = native_return;
        
        ResultOf_door_system_get_automatic_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_takes_damage_from_colliding_with_buildings(&self, p0_: i32,
p1_: bool) -> ResultOf_set_object_takes_damage_from_colliding_with_buildings {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_object_takes_damage_from_colliding_with_buildings(
            p0_,
p1_,
        );
        
        
        ResultOf_set_object_takes_damage_from_colliding_with_buildings {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_state_of_closest_door_of_type(&self, type_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
heading_: f32) -> ResultOf_get_state_of_closest_door_of_type {
    unsafe {
        let mut type_ = type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = Default::default();
let mut heading_ = Default::default();
        let success = sdk::natives::get_state_of_closest_door_of_type(
            &mut locked_,
&mut heading_,
type_,
x_,
y_,
z_,
        );
        let locked_ = locked_;
let heading_ = heading_;
        
        ResultOf_get_state_of_closest_door_of_type {
            success,
            ret: (),
            locked_,
heading_
        }
    }
}

    fn native_is_object_partially_inside_garage(&self, garageHash_: u32,
entity_: u32,
p2_: i32) -> ResultOf_is_object_partially_inside_garage {
    unsafe {
        let mut native_return = Default::default();
let mut garageHash_ = garageHash_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::is_object_partially_inside_garage(
            &mut native_return,
garageHash_,
entity_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_partially_inside_garage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tint_index_closest_building_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
textureVariation_: i32) -> ResultOf_set_tint_index_closest_building_of_type {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut textureVariation_ = textureVariation_;
        let success = sdk::natives::set_tint_index_closest_building_of_type(
            &mut native_return,
x_,
y_,
z_,
radius_,
modelHash_,
textureVariation_,
        );
        let native_return = native_return;
        
        ResultOf_set_tint_index_closest_building_of_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_saving_in_garage(&self, garageHash_: u32,
toggle_: bool) -> ResultOf_enable_saving_in_garage {
    unsafe {
        let mut garageHash_ = garageHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_saving_in_garage(
            garageHash_,
toggle_,
        );
        
        
        ResultOf_enable_saving_in_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_object_this_frame(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32) -> ResultOf_set_force_object_this_frame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::set_force_object_this_frame(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOf_set_force_object_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_physics_params(&self, object_: u32,
weight_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
gravity_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
buoyancy_: f32) -> ResultOf_set_object_physics_params {
    unsafe {
        let mut object_ = object_;
let mut weight_ = weight_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut gravity_ = gravity_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut buoyancy_ = buoyancy_;
        let success = sdk::natives::set_object_physics_params(
            object_,
weight_,
p2_,
p3_,
p4_,
p5_,
gravity_,
p7_,
p8_,
p9_,
p10_,
buoyancy_,
        );
        
        
        ResultOf_set_object_physics_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_state_of_closest_door_of_type(&self, type_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
heading_: f32,
p6_: bool) -> ResultOf_set_state_of_closest_door_of_type {
    unsafe {
        let mut type_ = type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = locked_;
let mut heading_ = heading_;
let mut p6_ = p6_;
        let success = sdk::natives::set_state_of_closest_door_of_type(
            type_,
x_,
y_,
z_,
locked_,
heading_,
p6_,
        );
        
        
        ResultOf_set_state_of_closest_door_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_pickup_reward_type(&self, rewardType_: i32,
suppress_: bool) -> ResultOf_suppress_pickup_reward_type {
    unsafe {
        let mut rewardType_ = rewardType_;
let mut suppress_ = suppress_;
        let success = sdk::natives::suppress_pickup_reward_type(
            rewardType_,
suppress_,
        );
        
        
        ResultOf_suppress_pickup_reward_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_fix_object_fragment(&self, object_: u32) -> ResultOf_fix_object_fragment {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::fix_object_fragment(
            object_,
        );
        
        
        ResultOf_fix_object_fragment {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_pickup_of_type_exist_in_area(&self, pickupHash_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_does_pickup_of_type_exist_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::does_pickup_of_type_exist_in_area(
            &mut native_return,
pickupHash_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_does_pickup_of_type_exist_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_pickup(&self, pickupHash_: u32,
posX_: f32,
posY_: f32,
posZ_: f32,
p4_: i32,
value_: i32,
p6_: bool,
modelHash_: u32) -> ResultOf_create_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickupHash_ = pickupHash_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut p4_ = p4_;
let mut value_ = value_;
let mut p6_ = p6_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::create_pickup(
            &mut native_return,
pickupHash_,
posX_,
posY_,
posZ_,
p4_,
value_,
p6_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_a_pickup(&self, object_: u32) -> ResultOf_is_object_a_pickup {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_a_pickup(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_is_object_a_pickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_all_players_to_collect_pickups_of_type(&self, pickupHash_: u32) -> ResultOf_allow_all_players_to_collect_pickups_of_type {
    unsafe {
        let mut pickupHash_ = pickupHash_;
        let success = sdk::natives::allow_all_players_to_collect_pickups_of_type(
            pickupHash_,
        );
        
        
        ResultOf_allow_all_players_to_collect_pickups_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_instructional_buttons_string(&self, control_: i32,
action_: i32,
allowXOSwap_: bool) -> ResultOf_get_control_instructional_buttons_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut control_ = control_;
let mut action_ = action_;
let mut allowXOSwap_ = allowXOSwap_;
        let success = sdk::natives::get_control_instructional_buttons_string(
            native_return.pin_mut(),
control_,
action_,
allowXOSwap_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_control_instructional_buttons_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_using_alternate_driveby(&self, ) -> ResultOf_get_is_using_alternate_driveby {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_alternate_driveby(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_using_alternate_driveby {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_disabled_control_normal(&self, control_: i32,
action_: i32) -> ResultOf_get_disabled_control_normal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_disabled_control_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_get_disabled_control_normal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_cursor(&self, control_: i32) -> ResultOf_is_using_cursor {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_cursor(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOf_is_using_cursor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_trigger_shake(&self, control_: i32,
leftDuration_: i32,
leftFrequency_: i32,
rightDuration_: i32,
rightFrequency_: i32) -> ResultOf_set_control_trigger_shake {
    unsafe {
        let mut control_ = control_;
let mut leftDuration_ = leftDuration_;
let mut leftFrequency_ = leftFrequency_;
let mut rightDuration_ = rightDuration_;
let mut rightFrequency_ = rightFrequency_;
        let success = sdk::natives::set_control_trigger_shake(
            control_,
leftDuration_,
leftFrequency_,
rightDuration_,
rightFrequency_,
        );
        
        
        ResultOf_set_control_trigger_shake {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_enabled(&self, control_: i32,
action_: i32) -> ResultOf_is_control_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_enabled(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_control_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_remote_play(&self, control_: i32) -> ResultOf_is_using_remote_play {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_remote_play(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOf_is_using_remote_play {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_using_alternate_handbrake(&self, ) -> ResultOf_get_is_using_alternate_handbrake {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_alternate_handbrake(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_using_alternate_handbrake {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_just_released(&self, control_: i32,
action_: i32) -> ResultOf_is_disabled_control_just_released {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_just_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_disabled_control_just_released {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_control_action(&self, control_: i32,
action_: i32,
enableRelatedActions_: bool) -> ResultOf_enable_control_action {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
let mut enableRelatedActions_ = enableRelatedActions_;
        let success = sdk::natives::enable_control_action(
            control_,
action_,
enableRelatedActions_,
        );
        
        
        ResultOf_enable_control_action {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_control_shake(&self, control_: i32) -> ResultOf_stop_control_shake {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::stop_control_shake(
            control_,
        );
        
        
        ResultOf_stop_control_shake {
            success,
            ret: (),
            
        }
    }
}

    fn native_init_pc_scripted_controls(&self, schemeName_: Option<String>) -> ResultOf_init_pc_scripted_controls {
    unsafe {
        let mut native_return = Default::default();
let mut schemeName_ = sdk_helpers::create_c_string_ptr(schemeName_);
        let success = sdk::natives::init_pc_scripted_controls(
            &mut native_return,
schemeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_init_pc_scripted_controls {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_switch_pc_scripted_controls(&self, schemeName_: Option<String>) -> ResultOf_switch_pc_scripted_controls {
    unsafe {
        let mut native_return = Default::default();
let mut schemeName_ = sdk_helpers::create_c_string_ptr(schemeName_);
        let success = sdk::natives::switch_pc_scripted_controls(
            &mut native_return,
schemeName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_switch_pc_scripted_controls {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_shake(&self, control_: i32,
duration_: i32,
frequency_: i32) -> ResultOf_set_control_shake {
    unsafe {
        let mut control_ = control_;
let mut duration_ = duration_;
let mut frequency_ = frequency_;
        let success = sdk::natives::set_control_shake(
            control_,
duration_,
frequency_,
        );
        
        
        ResultOf_set_control_shake {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_disabled_control_unbound_normal(&self, control_: i32,
action_: i32) -> ResultOf_get_disabled_control_unbound_normal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_disabled_control_unbound_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_get_disabled_control_unbound_normal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_control_just_released(&self, control_: i32,
action_: i32) -> ResultOf_is_control_just_released {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_just_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_control_just_released {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_control_just_pressed(&self, control_: i32,
action_: i32) -> ResultOf_is_control_just_pressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_just_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_control_just_pressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_local_player_gamepad_aim_state(&self, ) -> ResultOf_get_local_player_gamepad_aim_state {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_local_player_gamepad_aim_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_local_player_gamepad_aim_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_adjusted_mouse_coords(&self, toggle_: bool) -> ResultOf_set_use_adjusted_mouse_coords {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_adjusted_mouse_coords(
            toggle_,
        );
        
        
        ResultOf_set_use_adjusted_mouse_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_unbound_normal(&self, control_: i32,
action_: i32) -> ResultOf_get_control_unbound_normal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_unbound_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_get_control_unbound_normal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_all_control_actions(&self, control_: i32) -> ResultOf_disable_all_control_actions {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::disable_all_control_actions(
            control_,
        );
        
        
        ResultOf_disable_all_control_actions {
            success,
            ret: (),
            
        }
    }
}

    fn native_shutdown_pc_scripted_controls(&self, ) -> ResultOf_shutdown_pc_scripted_controls {
    unsafe {
        
        let success = sdk::natives::shutdown_pc_scripted_controls(
            
        );
        
        
        ResultOf_shutdown_pc_scripted_controls {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_released(&self, control_: i32,
action_: i32) -> ResultOf_is_control_released {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_control_released {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_controls_changed(&self, control_: i32) -> ResultOf_have_controls_changed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::have_controls_changed(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOf_have_controls_changed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_look_inverted(&self, ) -> ResultOf_is_look_inverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_look_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_look_inverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playerpad_shakes_when_controller_disabled(&self, toggle_: bool) -> ResultOf_set_playerpad_shakes_when_controller_disabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_playerpad_shakes_when_controller_disabled(
            toggle_,
        );
        
        
        ResultOf_set_playerpad_shakes_when_controller_disabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_alternative_script_controls_layout(&self, control_: i32) -> ResultOf_allow_alternative_script_controls_layout {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::allow_alternative_script_controls_layout(
            control_,
        );
        
        
        ResultOf_allow_alternative_script_controls_layout {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_group_instructional_buttons_string(&self, control_: i32,
controlGroup_: i32,
allowXOSwap_: bool) -> ResultOf_get_control_group_instructional_buttons_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut control_ = control_;
let mut controlGroup_ = controlGroup_;
let mut allowXOSwap_ = allowXOSwap_;
        let success = sdk::natives::get_control_group_instructional_buttons_string(
            native_return.pin_mut(),
control_,
controlGroup_,
allowXOSwap_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_control_group_instructional_buttons_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_light_effect_color(&self, control_: i32,
red_: i32,
green_: i32,
blue_: i32) -> ResultOf_set_control_light_effect_color {
    unsafe {
        let mut control_ = control_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
        let success = sdk::natives::set_control_light_effect_color(
            control_,
red_,
green_,
blue_,
        );
        
        
        ResultOf_set_control_light_effect_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_disabled_control_just_pressed(&self, control_: i32,
action_: i32) -> ResultOf_is_disabled_control_just_pressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_just_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_disabled_control_just_pressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_control_shake_suppressed_id(&self, control_: i32) -> ResultOf_clear_control_shake_suppressed_id {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::clear_control_shake_suppressed_id(
            control_,
        );
        
        
        ResultOf_clear_control_shake_suppressed_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_using_keyboard_and_mouse(&self, control_: i32) -> ResultOf_is_using_keyboard_and_mouse {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_keyboard_and_mouse(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOf_is_using_keyboard_and_mouse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_all_control_actions(&self, control_: i32) -> ResultOf_enable_all_control_actions {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::enable_all_control_actions(
            control_,
        );
        
        
        ResultOf_enable_all_control_actions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_local_player_aim_state(&self, ) -> ResultOf_get_local_player_aim_state {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_local_player_aim_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_local_player_aim_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_control_light_effect(&self, control_: i32) -> ResultOf_clear_control_light_effect {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::clear_control_light_effect(
            control_,
        );
        
        
        ResultOf_clear_control_light_effect {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_how_long_ago(&self, control_: i32) -> ResultOf_get_control_how_long_ago {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::get_control_how_long_ago(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOf_get_control_how_long_ago {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_control_value(&self, control_: i32,
action_: i32) -> ResultOf_get_control_value {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_value(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_get_control_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mouse_look_inverted(&self, ) -> ResultOf_is_mouse_look_inverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mouse_look_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_mouse_look_inverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_pressed(&self, control_: i32,
action_: i32) -> ResultOf_is_disabled_control_pressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_disabled_control_pressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_value_next_frame(&self, control_: i32,
action_: i32,
value_: f32) -> ResultOf_set_control_value_next_frame {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
let mut value_ = value_;
        let success = sdk::natives::set_control_value_next_frame(
            &mut native_return,
control_,
action_,
value_,
        );
        let native_return = native_return;
        
        ResultOf_set_control_value_next_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_control_normal(&self, control_: i32,
action_: i32) -> ResultOf_get_control_normal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_get_control_normal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_input_exclusive(&self, control_: i32,
action_: i32) -> ResultOf_set_input_exclusive {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::set_input_exclusive(
            control_,
action_,
        );
        
        
        ResultOf_set_input_exclusive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_control_shake_suppressed_id(&self, control_: i32,
uniqueId_: i32) -> ResultOf_set_control_shake_suppressed_id {
    unsafe {
        let mut control_ = control_;
let mut uniqueId_ = uniqueId_;
        let success = sdk::natives::set_control_shake_suppressed_id(
            control_,
uniqueId_,
        );
        
        
        ResultOf_set_control_shake_suppressed_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_pressed(&self, control_: i32,
action_: i32) -> ResultOf_is_control_pressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_control_pressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_released(&self, control_: i32,
action_: i32) -> ResultOf_is_disabled_control_released {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOf_is_disabled_control_released {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cursor_position(&self, x_: f32,
y_: f32) -> ResultOf_set_cursor_position {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_cursor_position(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOf_set_cursor_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_allow_movement_while_zoomed(&self, ) -> ResultOf_get_allow_movement_while_zoomed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_allow_movement_while_zoomed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_allow_movement_while_zoomed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_control_action(&self, control_: i32,
action_: i32,
disableRelatedActions_: bool) -> ResultOf_disable_control_action {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
let mut disableRelatedActions_ = disableRelatedActions_;
        let success = sdk::natives::disable_control_action(
            control_,
action_,
disableRelatedActions_,
        );
        
        
        ResultOf_disable_control_action {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_roads_back_to_original_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: i32) -> ResultOf_set_roads_back_to_original_in_angled_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
        let success = sdk::natives::set_roads_back_to_original_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
        );
        
        
        ResultOf_set_roads_back_to_original_in_angled_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_navmeshes_existing_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_get_num_navmeshes_existing_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::get_num_navmeshes_existing_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_navmeshes_existing_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_node_properties(&self, x_: f32,
y_: f32,
z_: f32,
density_: i32,
flags_: i32) -> ResultOf_get_vehicle_node_properties {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut density_ = Default::default();
let mut flags_ = Default::default();
        let success = sdk::natives::get_vehicle_node_properties(
            &mut native_return,
&mut density_,
&mut flags_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let density_ = density_;
let flags_ = flags_;
        
        ResultOf_get_vehicle_node_properties {
            success,
            ret: native_return,
            density_,
flags_
        }
    }
}

    fn native_request_path_nodes_in_area_this_frame(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_request_path_nodes_in_area_this_frame {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::request_path_nodes_in_area_this_frame(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_request_path_nodes_in_area_this_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_ped_range_multiplier_this_frame(&self, multiplier_: f32) -> ResultOf_set_ambient_ped_range_multiplier_this_frame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ambient_ped_range_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOf_set_ambient_ped_range_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_navmesh_blocking_object_exist(&self, p0_: i32) -> ResultOf_does_navmesh_blocking_object_exist {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_navmesh_blocking_object_exist(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_does_navmesh_blocking_object_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_navmesh_blocking_object(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: i32) -> ResultOf_update_navmesh_blocking_object {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::update_navmesh_blocking_object(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOf_update_navmesh_blocking_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_on_road(&self, x_: f32,
y_: f32,
z_: f32,
vehicle_: u32) -> ResultOf_is_point_on_road {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_point_on_road(
            &mut native_return,
x_,
y_,
z_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_point_on_road {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_road(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32,
p5_: Option<shared::Vector3>,
p6_: Option<shared::Vector3>,
p7_: i32,
p8_: i32,
p9_: f32,
p10_: bool) -> ResultOf_get_closest_road {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = sdk_helpers::create_vector3_ptr(p5_);
let mut p6_ = sdk_helpers::create_vector3_ptr(p6_);
let mut p7_ = Default::default();
let mut p8_ = Default::default();
let mut p9_ = Default::default();
let mut p10_ = p10_;
        let success = sdk::natives::get_closest_road(
            &mut native_return,
p5_.pin_mut(),
p6_.pin_mut(),
&mut p7_,
&mut p8_,
&mut p9_,
x_,
y_,
z_,
p3_,
p4_,
p10_,
        );
        let native_return = native_return;
let p5_ = sdk_helpers::read_cpp_vector3(p5_);
let p6_ = sdk_helpers::read_cpp_vector3(p6_);
let p7_ = p7_;
let p8_ = p8_;
let p9_ = p9_;
        
        ResultOf_get_closest_road {
            success,
            ret: native_return,
            p5_,
p6_,
p7_,
p8_,
p9_
        }
    }
}

    fn native_get_position_by_side_of_road(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
outPosition_: Option<shared::Vector3>) -> ResultOf_get_position_by_side_of_road {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
        let success = sdk::natives::get_position_by_side_of_road(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
p3_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_position_by_side_of_road {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_set_roads_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
unknown1_: bool,
unknown2_: bool,
unknown3_: bool) -> ResultOf_set_roads_in_angled_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
let mut unknown3_ = unknown3_;
        let success = sdk::natives::set_roads_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
unknown1_,
unknown2_,
unknown3_,
        );
        
        
        ResultOf_set_roads_in_angled_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_node_id_valid(&self, vehicleNodeId_: i32) -> ResultOf_is_vehicle_node_id_valid {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleNodeId_ = vehicleNodeId_;
        let success = sdk::natives::is_vehicle_node_id_valid(
            &mut native_return,
vehicleNodeId_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_node_id_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_roads_back_to_original(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOf_set_roads_back_to_original {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_roads_back_to_original(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_set_roads_back_to_original {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_no_gps_flag_until_first_normal_node(&self, toggle_: bool) -> ResultOf_set_ignore_no_gps_flag_until_first_normal_node {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_no_gps_flag_until_first_normal_node(
            toggle_,
        );
        
        
        ResultOf_set_ignore_no_gps_flag_until_first_normal_node {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_stream_prologue_nodes(&self, toggle_: bool) -> ResultOf_set_allow_stream_prologue_nodes {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_stream_prologue_nodes(
            toggle_,
        );
        
        
        ResultOf_set_allow_stream_prologue_nodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_id(&self, x_: f32,
y_: f32,
z_: f32,
nth_: i32,
nodeFlags_: i32,
p5_: f32,
p6_: f32) -> ResultOf_get_nth_closest_vehicle_node_id {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nth_ = nth_;
let mut nodeFlags_ = nodeFlags_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_nth_closest_vehicle_node_id(
            &mut native_return,
x_,
y_,
z_,
nth_,
nodeFlags_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_get_nth_closest_vehicle_node_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
outPosition_: Option<shared::Vector3>,
nodeFlags_: i32,
p5_: f32,
p6_: f32) -> ResultOf_get_closest_vehicle_node {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut nodeFlags_ = nodeFlags_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_closest_vehicle_node(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
nodeFlags_,
p5_,
p6_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_closest_vehicle_node {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_clear_gps_disabled_zone_at_index(&self, index_: i32) -> ResultOf_clear_gps_disabled_zone_at_index {
    unsafe {
        let mut index_ = index_;
        let success = sdk::natives::clear_gps_disabled_zone_at_index(
            index_,
        );
        
        
        ResultOf_clear_gps_disabled_zone_at_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_approx_height_for_point(&self, x_: f32,
y_: f32) -> ResultOf_get_approx_height_for_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_approx_height_for_point(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOf_get_approx_height_for_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_major_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
outPosition_: Option<shared::Vector3>,
unknown1_: f32,
unknown2_: f32) -> ResultOf_get_closest_major_vehicle_node {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::get_closest_major_vehicle_node(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
unknown1_,
unknown2_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_closest_major_vehicle_node {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_get_street_name_at_coord(&self, x_: f32,
y_: f32,
z_: f32,
streetName_: u32,
crossingRoad_: u32) -> ResultOf_get_street_name_at_coord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut streetName_ = Default::default();
let mut crossingRoad_ = Default::default();
        let success = sdk::natives::get_street_name_at_coord(
            &mut streetName_,
&mut crossingRoad_,
x_,
y_,
z_,
        );
        let streetName_ = streetName_;
let crossingRoad_ = crossingRoad_;
        
        ResultOf_get_street_name_at_coord {
            success,
            ret: (),
            streetName_,
crossingRoad_
        }
    }
}

    fn native_get_approx_floor_for_point(&self, x_: f32,
y_: f32) -> ResultOf_get_approx_floor_for_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_approx_floor_for_point(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOf_get_approx_floor_for_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_paths_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: i32) -> ResultOf_set_ped_paths_in_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::set_ped_paths_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
        );
        
        
        ResultOf_set_ped_paths_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_approx_floor_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_get_approx_floor_for_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_approx_floor_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_get_approx_floor_for_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_navmesh_required_region(&self, x_: f32,
y_: f32,
radius_: f32) -> ResultOf_add_navmesh_required_region {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut radius_ = radius_;
        let success = sdk::natives::add_navmesh_required_region(
            x_,
y_,
radius_,
        );
        
        
        ResultOf_add_navmesh_required_region {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_favour_direction(&self, x_: f32,
y_: f32,
z_: f32,
desiredX_: f32,
desiredY_: f32,
desiredZ_: f32,
nthClosest_: i32,
outPosition_: Option<shared::Vector3>,
outHeading_: f32,
nodeFlags_: i32,
p10_: f32,
p11_: f32) -> ResultOf_get_nth_closest_vehicle_node_favour_direction {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut desiredX_ = desiredX_;
let mut desiredY_ = desiredY_;
let mut desiredZ_ = desiredZ_;
let mut nthClosest_ = nthClosest_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut outHeading_ = Default::default();
let mut nodeFlags_ = nodeFlags_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::get_nth_closest_vehicle_node_favour_direction(
            &mut native_return,
outPosition_.pin_mut(),
&mut outHeading_,
x_,
y_,
z_,
desiredX_,
desiredY_,
desiredZ_,
nthClosest_,
nodeFlags_,
p10_,
p11_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let outHeading_ = outHeading_;
        
        ResultOf_get_nth_closest_vehicle_node_favour_direction {
            success,
            ret: native_return,
            outPosition_,
outHeading_
        }
    }
}

    fn native_remove_navmesh_blocking_object(&self, p0_: i32) -> ResultOf_remove_navmesh_blocking_object {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_navmesh_blocking_object(
            p0_,
        );
        
        
        ResultOf_remove_navmesh_blocking_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_navmesh_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
toggle_: bool) -> ResultOf_disable_navmesh_in_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_navmesh_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
toggle_,
        );
        
        
        ResultOf_disable_navmesh_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_node_is_switched_off(&self, nodeID_: i32) -> ResultOf_get_vehicle_node_is_switched_off {
    unsafe {
        let mut native_return = Default::default();
let mut nodeID_ = nodeID_;
        let success = sdk::natives::get_vehicle_node_is_switched_off(
            &mut native_return,
nodeID_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_node_is_switched_off {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_id_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
nthClosest_: i32,
outPosition_: Option<shared::Vector3>,
outHeading_: f32,
nodeFlags_: i32,
p7_: f32,
p8_: f32) -> ResultOf_get_nth_closest_vehicle_node_id_with_heading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nthClosest_ = nthClosest_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut outHeading_ = Default::default();
let mut nodeFlags_ = nodeFlags_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_nth_closest_vehicle_node_id_with_heading(
            &mut native_return,
outPosition_.pin_mut(),
&mut outHeading_,
x_,
y_,
z_,
nthClosest_,
nodeFlags_,
p7_,
p8_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let outHeading_ = outHeading_;
        
        ResultOf_get_nth_closest_vehicle_node_id_with_heading {
            success,
            ret: native_return,
            outPosition_,
outHeading_
        }
    }
}

    fn native_get_vehicle_node_position(&self, nodeId_: i32,
outPosition_: Option<shared::Vector3>) -> ResultOf_get_vehicle_node_position {
    unsafe {
        let mut nodeId_ = nodeId_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
        let success = sdk::natives::get_vehicle_node_position(
            outPosition_.pin_mut(),
nodeId_,
        );
        let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_vehicle_node_position {
            success,
            ret: (),
            outPosition_
        }
    }
}

    fn native_is_navmesh_required_region_in_use(&self, ) -> ResultOf_is_navmesh_required_region_in_use {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_navmesh_required_region_in_use(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_navmesh_required_region_in_use {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ignore_no_gps_flag(&self, toggle_: bool) -> ResultOf_set_ignore_no_gps_flag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_no_gps_flag(
            toggle_,
        );
        
        
        ResultOf_set_ignore_no_gps_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
nthClosest_: i32,
outPosition_: Option<shared::Vector3>,
outHeading_: f32,
outNumLanes_: i32,
nodeFlags_: i32,
unknown3_: f32,
unknown4_: f32) -> ResultOf_get_nth_closest_vehicle_node_with_heading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nthClosest_ = nthClosest_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut outHeading_ = Default::default();
let mut outNumLanes_ = Default::default();
let mut nodeFlags_ = nodeFlags_;
let mut unknown3_ = unknown3_;
let mut unknown4_ = unknown4_;
        let success = sdk::natives::get_nth_closest_vehicle_node_with_heading(
            &mut native_return,
outPosition_.pin_mut(),
&mut outHeading_,
&mut outNumLanes_,
x_,
y_,
z_,
nthClosest_,
nodeFlags_,
unknown3_,
unknown4_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let outHeading_ = outHeading_;
let outNumLanes_ = outNumLanes_;
        
        ResultOf_get_nth_closest_vehicle_node_with_heading {
            success,
            ret: native_return,
            outPosition_,
outHeading_,
outNumLanes_
        }
    }
}

    fn native_are_all_navmesh_regions_loaded(&self, ) -> ResultOf_are_all_navmesh_regions_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_all_navmesh_regions_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_are_all_navmesh_regions_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gps_blip_route_found(&self, ) -> ResultOf_get_gps_blip_route_found {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gps_blip_route_found(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_gps_blip_route_found {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_approx_height_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_get_approx_height_for_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_approx_height_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_get_approx_height_for_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_navmesh_required_regions(&self, ) -> ResultOf_remove_navmesh_required_regions {
    unsafe {
        
        let success = sdk::natives::remove_navmesh_required_regions(
            
        );
        
        
        ResultOf_remove_navmesh_required_regions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
outPosition_: Option<shared::Vector3>,
nodeId_: i32) -> ResultOf_get_random_vehicle_node {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut nodeId_ = Default::default();
        let success = sdk::natives::get_random_vehicle_node(
            &mut native_return,
outPosition_.pin_mut(),
&mut nodeId_,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let nodeId_ = nodeId_;
        
        ResultOf_get_random_vehicle_node {
            success,
            ret: native_return,
            outPosition_,
nodeId_
        }
    }
}

    fn native_get_road_boundary_using_heading(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
outPosition_: Option<shared::Vector3>) -> ResultOf_get_road_boundary_using_heading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
        let success = sdk::natives::get_road_boundary_using_heading(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
heading_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_road_boundary_using_heading {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_get_vehicle_node_is_gps_allowed(&self, nodeID_: i32) -> ResultOf_get_vehicle_node_is_gps_allowed {
    unsafe {
        let mut native_return = Default::default();
let mut nodeID_ = nodeID_;
        let success = sdk::natives::get_vehicle_node_is_gps_allowed(
            &mut native_return,
nodeID_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_node_is_gps_allowed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_adjust_ambient_ped_spawn_densities_this_frame(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_adjust_ambient_ped_spawn_densities_this_frame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::adjust_ambient_ped_spawn_densities_this_frame(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_adjust_ambient_ped_spawn_densities_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_calculate_travel_distance_between_points(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_calculate_travel_distance_between_points {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::calculate_travel_distance_between_points(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_calculate_travel_distance_between_points {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_safe_coord_for_ped(&self, x_: f32,
y_: f32,
z_: f32,
onGround_: bool,
outPosition_: Option<shared::Vector3>,
flags_: i32) -> ResultOf_get_safe_coord_for_ped {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut onGround_ = onGround_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut flags_ = flags_;
        let success = sdk::natives::get_safe_coord_for_ped(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
onGround_,
flags_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_safe_coord_for_ped {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_get_gps_blip_route_length(&self, ) -> ResultOf_get_gps_blip_route_length {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gps_blip_route_length(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_gps_blip_route_length {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_roads_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
nodeEnabled_: bool,
unknown2_: bool) -> ResultOf_set_roads_in_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut nodeEnabled_ = nodeEnabled_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::set_roads_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
nodeEnabled_,
unknown2_,
        );
        
        
        ResultOf_set_roads_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_all_path_nodes(&self, set_: bool) -> ResultOf_load_all_path_nodes {
    unsafe {
        let mut native_return = Default::default();
let mut set_ = set_;
        let success = sdk::natives::load_all_path_nodes(
            &mut native_return,
set_,
        );
        let native_return = native_return;
        
        ResultOf_load_all_path_nodes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_disabled_zone_at_index(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
index_: i32) -> ResultOf_set_gps_disabled_zone_at_index {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut index_ = index_;
        let success = sdk::natives::set_gps_disabled_zone_at_index(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
index_,
        );
        
        
        ResultOf_set_gps_disabled_zone_at_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_gps_disabled_zone_index(&self, ) -> ResultOf_get_next_gps_disabled_zone_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_next_gps_disabled_zone_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_next_gps_disabled_zone_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_disabled_zone(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z3_: f32) -> ResultOf_set_gps_disabled_zone {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z3_ = z3_;
        let success = sdk::natives::set_gps_disabled_zone(
            x1_,
y1_,
z1_,
x2_,
y2_,
z3_,
        );
        
        
        ResultOf_set_gps_disabled_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_paths_back_to_original(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOf_set_ped_paths_back_to_original {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_paths_back_to_original(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOf_set_ped_paths_back_to_original {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
nthClosest_: i32,
outPosition_: Option<shared::Vector3>,
nodeFlags_: i32,
unknown1_: f32,
unknown2_: f32) -> ResultOf_get_nth_closest_vehicle_node {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nthClosest_ = nthClosest_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut nodeFlags_ = nodeFlags_;
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::get_nth_closest_vehicle_node(
            &mut native_return,
outPosition_.pin_mut(),
x_,
y_,
z_,
nthClosest_,
nodeFlags_,
unknown1_,
unknown2_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
        
        ResultOf_get_nth_closest_vehicle_node {
            success,
            ret: native_return,
            outPosition_
        }
    }
}

    fn native_get_pos_along_gps_type_route(&self, result_: Option<shared::Vector3>,
p1_: bool,
p2_: f32,
p3_: i32) -> ResultOf_get_pos_along_gps_type_route {
    unsafe {
        let mut native_return = Default::default();
let mut result_ = sdk_helpers::create_vector3_ptr(result_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::get_pos_along_gps_type_route(
            &mut native_return,
result_.pin_mut(),
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let result_ = sdk_helpers::read_cpp_vector3(result_);
        
        ResultOf_get_pos_along_gps_type_route {
            success,
            ret: native_return,
            result_
        }
    }
}

    fn native_set_allow_stream_heist_island_nodes(&self, type_: i32) -> ResultOf_set_allow_stream_heist_island_nodes {
    unsafe {
        let mut type_ = type_;
        let success = sdk::natives::set_allow_stream_heist_island_nodes(
            type_,
        );
        
        
        ResultOf_set_allow_stream_heist_island_nodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_nodes_loaded_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOf_are_nodes_loaded_for_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::are_nodes_loaded_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOf_are_nodes_loaded_for_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_navmesh_loaded_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_is_navmesh_loaded_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_navmesh_loaded_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_navmesh_loaded_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_generate_directions_to_coord(&self, x_: f32,
y_: f32,
z_: f32,
p3_: bool,
direction_: i32,
p5_: f32,
distToNxJunction_: f32) -> ResultOf_generate_directions_to_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut direction_ = Default::default();
let mut p5_ = Default::default();
let mut distToNxJunction_ = Default::default();
        let success = sdk::natives::generate_directions_to_coord(
            &mut native_return,
&mut direction_,
&mut p5_,
&mut distToNxJunction_,
x_,
y_,
z_,
p3_,
        );
        let native_return = native_return;
let direction_ = direction_;
let p5_ = p5_;
let distToNxJunction_ = distToNxJunction_;
        
        ResultOf_generate_directions_to_coord {
            success,
            ret: native_return,
            direction_,
p5_,
distToNxJunction_
        }
    }
}

    fn native_add_navmesh_blocking_object(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: bool,
p8_: i32) -> ResultOf_add_navmesh_blocking_object {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::add_navmesh_blocking_object(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_add_navmesh_blocking_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle_node_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
outPosition_: Option<shared::Vector3>,
outHeading_: f32,
nodeType_: i32,
p6_: f32,
p7_: f32) -> ResultOf_get_closest_vehicle_node_with_heading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut outPosition_ = sdk_helpers::create_vector3_ptr(outPosition_);
let mut outHeading_ = Default::default();
let mut nodeType_ = nodeType_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::get_closest_vehicle_node_with_heading(
            &mut native_return,
outPosition_.pin_mut(),
&mut outHeading_,
x_,
y_,
z_,
nodeType_,
p6_,
p7_,
        );
        let native_return = native_return;
let outPosition_ = sdk_helpers::read_cpp_vector3(outPosition_);
let outHeading_ = outHeading_;
        
        ResultOf_get_closest_vehicle_node_with_heading {
            success,
            ret: native_return,
            outPosition_,
outHeading_
        }
    }
}

    fn native_reset_facial_idle_anim(&self, ped_: u32) -> ResultOf_reset_facial_idle_anim {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_facial_idle_anim(
            ped_,
        );
        
        
        ResultOf_reset_facial_idle_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_using_action_mode(&self, ped_: u32) -> ResultOf_is_ped_using_action_mode {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_using_action_mode(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_using_action_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_makeup_tint_color(&self, makeupColorIndex_: i32,
outR_: i32,
outG_: i32,
outB_: i32) -> ResultOf_get_ped_makeup_tint_color {
    unsafe {
        let mut makeupColorIndex_ = makeupColorIndex_;
let mut outR_ = Default::default();
let mut outG_ = Default::default();
let mut outB_ = Default::default();
        let success = sdk::natives::get_ped_makeup_tint_color(
            &mut outR_,
&mut outG_,
&mut outB_,
makeupColorIndex_,
        );
        let outR_ = outR_;
let outG_ = outG_;
let outB_ = outB_;
        
        ResultOf_get_ped_makeup_tint_color {
            success,
            ret: (),
            outR_,
outG_,
outB_
        }
    }
}

    fn native_set_ped_min_move_blend_ratio(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_min_move_blend_ratio {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_min_move_blend_ratio(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_min_move_blend_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ragdoll_force_fall(&self, ped_: u32) -> ResultOf_set_ped_ragdoll_force_fall {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_ragdoll_force_fall(
            ped_,
        );
        
        
        ResultOf_set_ped_ragdoll_force_fall {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_foot(&self, ped_: u32) -> ResultOf_is_ped_on_foot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_foot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_on_foot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_as_enemy(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_as_enemy {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_as_enemy(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_as_enemy {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ducking(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_ducking {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ducking(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_ducking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_can_ped_be_grabbed_by_script(&self, ped_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: i32) -> ResultOf_get_can_ped_be_grabbed_by_script {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_can_ped_be_grabbed_by_script(
            &mut native_return,
ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_get_can_ped_be_grabbed_by_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_texture_variation(&self, ped_: u32,
componentId_: i32) -> ResultOf_get_ped_texture_variation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
        let success = sdk::natives::get_ped_texture_variation(
            &mut native_return,
ped_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_texture_variation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_lipstick_tint_for_barber(&self, colorID_: i32) -> ResultOf_is_ped_lipstick_tint_for_barber {
    unsafe {
        let mut native_return = Default::default();
let mut colorID_ = colorID_;
        let success = sdk::natives::is_ped_lipstick_tint_for_barber(
            &mut native_return,
colorID_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_lipstick_tint_for_barber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_target_ped_in_perception_area(&self, ped_: u32,
targetPed_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32) -> ResultOf_is_target_ped_in_perception_area {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut targetPed_ = targetPed_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::is_target_ped_in_perception_area(
            &mut native_return,
ped_,
targetPed_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_is_target_ped_in_perception_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_allow_lockon_to_ped_if_friendly(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_allow_lockon_to_ped_if_friendly {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_lockon_to_ped_if_friendly(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_allow_lockon_to_ped_if_friendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_target_loss_response(&self, ped_: u32,
responseType_: i32) -> ResultOf_set_ped_target_loss_response {
    unsafe {
        let mut ped_ = ped_;
let mut responseType_ = responseType_;
        let success = sdk::natives::set_ped_target_loss_response(
            ped_,
responseType_,
        );
        
        
        ResultOf_set_ped_target_loss_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_ped_near_point(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_any_ped_near_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_ped_near_point(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_ped_near_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_move_rate_override(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_move_rate_override {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_move_rate_override(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_move_rate_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_prop(&self, ped_: u32,
propId_: i32,
p2_: i32) -> ResultOf_clear_ped_prop {
    unsafe {
        let mut ped_ = ped_;
let mut propId_ = propId_;
let mut p2_ = p2_;
        let success = sdk::natives::clear_ped_prop(
            ped_,
propId_,
p2_,
        );
        
        
        ResultOf_clear_ped_prop {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_blush_facepaint_tint_for_barber(&self, colorId_: i32) -> ResultOf_is_ped_blush_facepaint_tint_for_barber {
    unsafe {
        let mut native_return = Default::default();
let mut colorId_ = colorId_;
        let success = sdk::natives::is_ped_blush_facepaint_tint_for_barber(
            &mut native_return,
colorId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_blush_facepaint_tint_for_barber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_motion_blur(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_motion_blur {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_motion_blur(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_motion_blur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_move_rate_in_water_override(&self, ped_: u32,
p1_: f32) -> ResultOf_set_ped_move_rate_in_water_override {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_move_rate_in_water_override(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_move_rate_in_water_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_police_vehicle(&self, ped_: u32) -> ResultOf_is_ped_in_any_police_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_police_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_police_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_group_member_passenger_index(&self, ped_: u32,
index_: i32) -> ResultOf_set_ped_group_member_passenger_index {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_ped_group_member_passenger_index(
            ped_,
index_,
        );
        
        
        ResultOf_set_ped_group_member_passenger_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_decorations(&self, ped_: u32) -> ResultOf_clear_ped_decorations {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_decorations(
            ped_,
        );
        
        
        ResultOf_clear_ped_decorations {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_ambient_base_anims(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_play_ambient_base_anims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_ambient_base_anims(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_play_ambient_base_anims {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_treated_as_friendly(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_set_ped_treated_as_friendly {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_treated_as_friendly(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_ped_treated_as_friendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_create_random_cops(&self, toggle_: bool) -> ResultOf_set_create_random_cops {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops(
            toggle_,
        );
        
        
        ResultOf_set_create_random_cops {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enveff_cpv_add(&self, ped_: u32,
p1_: f32) -> ResultOf_set_ped_enveff_cpv_add {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_enveff_cpv_add(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_enveff_cpv_add {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_inform_respected_friends(&self, ped_: u32,
radius_: f32,
maxFriends_: i32) -> ResultOf_set_ped_to_inform_respected_friends {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut maxFriends_ = maxFriends_;
        let success = sdk::natives::set_ped_to_inform_respected_friends(
            ped_,
radius_,
maxFriends_,
        );
        
        
        ResultOf_set_ped_to_inform_respected_friends {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_vaulting(&self, ped_: u32) -> ResultOf_is_ped_vaulting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_vaulting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_vaulting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_skeleton_updated(&self, ped_: u32) -> ResultOf_was_ped_skeleton_updated {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_skeleton_updated(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_was_ped_skeleton_updated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ragdoll_bounds_update(&self, p0_: i32,
p1_: i32) -> ResultOf_request_ragdoll_bounds_update {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ragdoll_bounds_update(
            p0_,
p1_,
        );
        
        
        ResultOf_request_ragdoll_bounds_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_a_player(&self, ped_: u32) -> ResultOf_is_ped_a_player {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_a_player(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_a_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_parachute_pack_variation(&self, ped_: u32) -> ResultOf_clear_ped_parachute_pack_variation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_parachute_pack_variation(
            ped_,
        );
        
        
        ResultOf_clear_ped_parachute_pack_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_ragdoll(&self, ped_: u32) -> ResultOf_can_ped_ragdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::can_ped_ragdoll(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_can_ped_ragdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_force_footstep_update(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_force_footstep_update {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_footstep_update(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_force_footstep_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_blend_from_parents(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: f32,
p4_: f32) -> ResultOf_set_ped_blend_from_parents {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_blend_from_parents(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_ped_blend_from_parents {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_action_mode_asset(&self, asset_: Option<String>) -> ResultOf_remove_action_mode_asset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::remove_action_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_action_mode_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_taking_off_helmet(&self, ped_: u32) -> ResultOf_is_ped_taking_off_helmet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_taking_off_helmet(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_taking_off_helmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_emissive_scale(&self, ped_: u32) -> ResultOf_get_ped_emissive_scale {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_emissive_scale(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_emissive_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clone_ped_to_target_alt(&self, ped_: u32,
targetPed_: u32,
p2_: bool) -> ResultOf_clone_ped_to_target_alt {
    unsafe {
        let mut ped_ = ped_;
let mut targetPed_ = targetPed_;
let mut p2_ = p2_;
        let success = sdk::natives::clone_ped_to_target_alt(
            ped_,
targetPed_,
p2_,
        );
        
        
        ResultOf_clone_ped_to_target_alt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_peds_to_be_returned_by_next_command(&self, value_: bool) -> ResultOf_set_scenario_peds_to_be_returned_by_next_command {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_scenario_peds_to_be_returned_by_next_command(
            value_,
        );
        
        
        ResultOf_set_scenario_peds_to_be_returned_by_next_command {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steers_around_objects(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_steers_around_objects {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_objects(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_steers_around_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_ped_to_open_parachute(&self, ped_: u32) -> ResultOf_force_ped_to_open_parachute {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_ped_to_open_parachute(
            ped_,
        );
        
        
        ResultOf_force_ped_to_open_parachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cop_ped_in_area_3d(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_is_cop_ped_in_area_3d {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_cop_ped_in_area_3d(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_cop_ped_in_area_3d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_cause_of_death(&self, ped_: u32) -> ResultOf_get_ped_cause_of_death {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_cause_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_cause_of_death {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_bone_coords(&self, ped_: u32,
boneId_: i32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32) -> ResultOf_get_ped_bone_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut boneId_ = boneId_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
        let success = sdk::natives::get_ped_bone_coords(
            native_return.pin_mut(),
ped_,
boneId_,
offsetX_,
offsetY_,
offsetZ_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_ped_bone_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_melee_target_for_ped(&self, ped_: u32) -> ResultOf_get_melee_target_for_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_melee_target_for_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_melee_target_for_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_config_flag(&self, ped_: u32,
flagId_: i32,
value_: bool) -> ResultOf_set_ped_config_flag {
    unsafe {
        let mut ped_ = ped_;
let mut flagId_ = flagId_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_config_flag(
            ped_,
flagId_,
value_,
        );
        
        
        ResultOf_set_ped_config_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ladder_climb_input_state(&self, ped_: u32,
p1_: i32) -> ResultOf_set_ladder_climb_input_state {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ladder_climb_input_state(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ladder_climb_input_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ai_weapon_damage_modifier(&self, value_: f32) -> ResultOf_set_ai_weapon_damage_modifier {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_ai_weapon_damage_modifier(
            value_,
        );
        
        
        ResultOf_set_ai_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_scenario_blocking_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool) -> ResultOf_add_scenario_blocking_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::add_scenario_blocking_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_add_scenario_blocking_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_using_scenario(&self, ped_: u32,
scenario_: Option<String>) -> ResultOf_is_ped_using_scenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut scenario_ = sdk_helpers::create_c_string_ptr(scenario_);
        let success = sdk::natives::is_ped_using_scenario(
            &mut native_return,
ped_,
scenario_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_ped_using_scenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_hanging_on_to_vehicle(&self, ped_: u32) -> ResultOf_is_ped_hanging_on_to_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_hanging_on_to_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_hanging_on_to_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_smash_glass(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOf_set_ped_can_smash_glass {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_smash_glass(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOf_set_ped_can_smash_glass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_formation_spacing(&self, groupId_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_group_formation_spacing {
    unsafe {
        let mut groupId_ = groupId_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_group_formation_spacing(
            groupId_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_group_formation_spacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fm_male_shop_ped_apparel_item_index(&self, p0_: i32) -> ResultOf_get_fm_male_shop_ped_apparel_item_index {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_fm_male_shop_ped_apparel_item_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_fm_male_shop_ped_apparel_item_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_time_of_death(&self, ped_: u32) -> ResultOf_get_ped_time_of_death {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_time_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_time_of_death {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_steers_around_dead_bodies(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_steers_around_dead_bodies {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_dead_bodies(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_steers_around_dead_bodies {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_strafe_clipset(&self, ped_: u32) -> ResultOf_reset_ped_strafe_clipset {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_strafe_clipset(
            ped_,
        );
        
        
        ResultOf_reset_ped_strafe_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_ragdoll_bone_index(&self, ped_: u32,
bone_: i32) -> ResultOf_get_ped_ragdoll_bone_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut bone_ = bone_;
        let success = sdk::natives::get_ped_ragdoll_bone_index(
            &mut native_return,
ped_,
bone_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_ragdoll_bone_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_ai_and_animation_update(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOf_force_ped_ai_and_animation_update {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::force_ped_ai_and_animation_update(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOf_force_ped_ai_and_animation_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_in_vehicle_context(&self, ped_: u32) -> ResultOf_reset_ped_in_vehicle_context {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_in_vehicle_context(
            ped_,
        );
        
        
        ResultOf_reset_ped_in_vehicle_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_nearby_peds(&self, ped_: u32,
sizeAndPeds_: i32,
ignore_: i32) -> ResultOf_get_ped_nearby_peds {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut sizeAndPeds_ = Default::default();
let mut ignore_ = ignore_;
        let success = sdk::natives::get_ped_nearby_peds(
            &mut native_return,
&mut sizeAndPeds_,
ped_,
ignore_,
        );
        let native_return = native_return;
let sizeAndPeds_ = sizeAndPeds_;
        
        ResultOf_get_ped_nearby_peds {
            success,
            ret: native_return,
            sizeAndPeds_
        }
    }
}

    fn native_is_ped_reloading(&self, ped_: u32) -> ResultOf_is_ped_reloading {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_reloading(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_reloading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_ped_scenario_panicexittoflee(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_trigger_ped_scenario_panicexittoflee {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::trigger_ped_scenario_panicexittoflee(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_trigger_ped_scenario_panicexittoflee {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_running(&self, sceneId_: i32) -> ResultOf_is_synchronized_scene_running {
    unsafe {
        let mut native_return = Default::default();
let mut sceneId_ = sceneId_;
        let success = sdk::natives::is_synchronized_scene_running(
            &mut native_return,
sceneId_,
        );
        let native_return = native_return;
        
        ResultOf_is_synchronized_scene_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_weapon_movement_clipset(&self, ped_: u32,
clipSet_: Option<String>) -> ResultOf_set_ped_weapon_movement_clipset {
    unsafe {
        let mut ped_ = ped_;
let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
        let success = sdk::natives::set_ped_weapon_movement_clipset(
            ped_,
clipSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_weapon_movement_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_component_variation(&self, ped_: u32,
componentId_: i32,
drawableId_: i32,
textureId_: i32,
paletteId_: i32) -> ResultOf_set_ped_component_variation {
    unsafe {
        let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
let mut paletteId_ = paletteId_;
        let success = sdk::natives::set_ped_component_variation(
            ped_,
componentId_,
drawableId_,
textureId_,
paletteId_,
        );
        
        
        ResultOf_set_ped_component_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ragdoll_blocking_flags(&self, ped_: u32,
blockingFlag_: i32) -> ResultOf_set_ragdoll_blocking_flags {
    unsafe {
        let mut ped_ = ped_;
let mut blockingFlag_ = blockingFlag_;
        let success = sdk::natives::set_ragdoll_blocking_flags(
            ped_,
blockingFlag_,
        );
        
        
        ResultOf_set_ragdoll_blocking_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_opening_door(&self, ped_: u32) -> ResultOf_is_ped_opening_door {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_opening_door(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_opening_door {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_prop_index(&self, ped_: u32,
propIndex_: i32,
p2_: bool) -> ResultOf_set_ped_helmet_prop_index {
    unsafe {
        let mut ped_ = ped_;
let mut propIndex_ = propIndex_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_helmet_prop_index(
            ped_,
propIndex_,
p2_,
        );
        
        
        ResultOf_set_ped_helmet_prop_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_synchronized_scene_to_entity(&self, sceneID_: i32,
entity_: u32,
boneIndex_: i32) -> ResultOf_attach_synchronized_scene_to_entity {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut entity_ = entity_;
let mut boneIndex_ = boneIndex_;
        let success = sdk::natives::attach_synchronized_scene_to_entity(
            sceneID_,
entity_,
boneIndex_,
        );
        
        
        ResultOf_attach_synchronized_scene_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_corpse_ragdoll_friction(&self, ped_: u32,
p1_: f32) -> ResultOf_set_corpse_ragdoll_friction {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_corpse_ragdoll_friction(
            ped_,
p1_,
        );
        
        
        ResultOf_set_corpse_ragdoll_friction {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_head_blend_data(&self, ped_: u32,
headBlendData_: i32) -> ResultOf_get_ped_head_blend_data {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut headBlendData_ = Default::default();
        let success = sdk::natives::get_ped_head_blend_data(
            &mut native_return,
&mut headBlendData_,
ped_,
        );
        let native_return = native_return;
let headBlendData_ = headBlendData_;
        
        ResultOf_get_ped_head_blend_data {
            success,
            ret: native_return,
            headBlendData_
        }
    }
}

    fn native_get_number_of_ped_drawable_variations(&self, ped_: u32,
componentId_: i32) -> ResultOf_get_number_of_ped_drawable_variations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
        let success = sdk::natives::get_number_of_ped_drawable_variations(
            &mut native_return,
ped_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_ped_drawable_variations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_sweat(&self, ped_: u32,
sweat_: f32) -> ResultOf_set_ped_sweat {
    unsafe {
        let mut ped_ = ped_;
let mut sweat_ = sweat_;
        let success = sdk::natives::set_ped_sweat(
            ped_,
sweat_,
        );
        
        
        ResultOf_set_ped_sweat {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_get_search_result(&self, randomInt_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_spawnpoints_get_search_result {
    unsafe {
        let mut randomInt_ = randomInt_;
let mut x_ = Default::default();
let mut y_ = Default::default();
let mut z_ = Default::default();
        let success = sdk::natives::spawnpoints_get_search_result(
            &mut x_,
&mut y_,
&mut z_,
randomInt_,
        );
        let x_ = x_;
let y_ = y_;
let z_ = z_;
        
        ResultOf_spawnpoints_get_search_result {
            success,
            ret: (),
            x_,
y_,
z_
        }
    }
}

    fn native_set_scenario_peds_spawn_in_sphere_area(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: i32) -> ResultOf_set_scenario_peds_spawn_in_sphere_area {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::set_scenario_peds_spawn_in_sphere_area(
            x_,
y_,
z_,
range_,
p4_,
        );
        
        
        ResultOf_set_scenario_peds_spawn_in_sphere_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steer_bias(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_steer_bias {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_steer_bias(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_steer_bias {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_action_mode_asset(&self, asset_: Option<String>) -> ResultOf_request_action_mode_asset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::request_action_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_action_mode_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_heli(&self, ped_: u32) -> ResultOf_is_ped_in_any_heli {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_heli(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_heli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_strafe_clipset(&self, ped_: u32,
clipSet_: Option<String>) -> ResultOf_set_ped_strafe_clipset {
    unsafe {
        let mut ped_ = ped_;
let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
        let success = sdk::natives::set_ped_strafe_clipset(
            ped_,
clipSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_strafe_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_stealth_mode_asset(&self, asset_: Option<String>) -> ResultOf_request_stealth_mode_asset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::request_stealth_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_stealth_mode_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_dies_in_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_dies_in_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_group_leader(&self, ped_: u32,
groupId_: i32) -> ResultOf_set_ped_as_group_leader {
    unsafe {
        let mut ped_ = ped_;
let mut groupId_ = groupId_;
        let success = sdk::natives::set_ped_as_group_leader(
            ped_,
groupId_,
        );
        
        
        ResultOf_set_ped_as_group_leader {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running_mobile_phone_task(&self, ped_: u32) -> ResultOf_is_ped_running_mobile_phone_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_mobile_phone_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_running_mobile_phone_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_preload_prop_data(&self, ped_: u32,
componentId_: i32,
drawableId_: i32,
TextureId_: i32) -> ResultOf_set_ped_preload_prop_data {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut TextureId_ = TextureId_;
        let success = sdk::natives::set_ped_preload_prop_data(
            &mut native_return,
ped_,
componentId_,
drawableId_,
TextureId_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_preload_prop_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ao_blob_rendering(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_ao_blob_rendering {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ao_blob_rendering(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_ao_blob_rendering {
            success,
            ret: (),
            
        }
    }
}

    fn native_mark_ped_decorations_as_cloned_from_local_player(&self, ped_: u32,
p1_: bool) -> ResultOf_mark_ped_decorations_as_cloned_from_local_player {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::mark_ped_decorations_as_cloned_from_local_player(
            ped_,
p1_,
        );
        
        
        ResultOf_mark_ped_decorations_as_cloned_from_local_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_vehicle_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOf_request_ped_vehicle_visibility_tracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_vehicle_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOf_request_ped_vehicle_visibility_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_ped_head(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_explode_ped_head {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::explode_ped_head(
            ped_,
weaponHash_,
        );
        
        
        ResultOf_explode_ped_head {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_min_angle(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_visual_field_min_angle {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_visual_field_min_angle(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_visual_field_min_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_start_search(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
interiorFlags_: i32,
scale_: f32,
duration_: i32) -> ResultOf_spawnpoints_start_search {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut interiorFlags_ = interiorFlags_;
let mut scale_ = scale_;
let mut duration_ = duration_;
        let success = sdk::natives::spawnpoints_start_search(
            p0_,
p1_,
p2_,
p3_,
p4_,
interiorFlags_,
scale_,
duration_,
        );
        
        
        ResultOf_spawnpoints_start_search {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_shuffle_to_or_from_extra_seat(&self, ped_: u32,
p1_: i32) -> ResultOf_can_ped_shuffle_to_or_from_extra_seat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = Default::default();
        let success = sdk::natives::can_ped_shuffle_to_or_from_extra_seat(
            &mut native_return,
&mut p1_,
ped_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_can_ped_shuffle_to_or_from_extra_seat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_clear_ped_non_creation_area(&self, ) -> ResultOf_clear_ped_non_creation_area {
    unsafe {
        
        let success = sdk::natives::clear_ped_non_creation_area(
            
        );
        
        
        ResultOf_clear_ped_non_creation_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_boat(&self, ped_: u32) -> ResultOf_is_ped_in_any_boat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_boat(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_boat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_teleport_to_group_leader(&self, pedHandle_: u32,
groupHandle_: i32,
toggle_: bool) -> ResultOf_set_ped_can_teleport_to_group_leader {
    unsafe {
        let mut pedHandle_ = pedHandle_;
let mut groupHandle_ = groupHandle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_teleport_to_group_leader(
            pedHandle_,
groupHandle_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_teleport_to_group_leader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cop_perception_overrides(&self, seeingRange_: f32,
seeingRangePeripheral_: f32,
hearingRange_: f32,
visualFieldMinAzimuthAngle_: f32,
visualFieldMaxAzimuthAngle_: f32,
fieldOfGazeMaxAngle_: f32,
p6_: f32) -> ResultOf_set_cop_perception_overrides {
    unsafe {
        let mut seeingRange_ = seeingRange_;
let mut seeingRangePeripheral_ = seeingRangePeripheral_;
let mut hearingRange_ = hearingRange_;
let mut visualFieldMinAzimuthAngle_ = visualFieldMinAzimuthAngle_;
let mut visualFieldMaxAzimuthAngle_ = visualFieldMaxAzimuthAngle_;
let mut fieldOfGazeMaxAngle_ = fieldOfGazeMaxAngle_;
let mut p6_ = p6_;
        let success = sdk::natives::set_cop_perception_overrides(
            seeingRange_,
seeingRangePeripheral_,
hearingRange_,
visualFieldMinAzimuthAngle_,
visualFieldMaxAzimuthAngle_,
fieldOfGazeMaxAngle_,
p6_,
        );
        
        
        ResultOf_set_cop_perception_overrides {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_target(&self, ped_: u32,
target_: u32) -> ResultOf_register_target {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::register_target(
            ped_,
target_,
        );
        
        
        ResultOf_register_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_treat_as_ambient_ped_for_driver_lockon(&self, ped_: u32,
p1_: bool) -> ResultOf_set_treat_as_ambient_ped_for_driver_lockon {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_treat_as_ambient_ped_for_driver_lockon(
            ped_,
p1_,
        );
        
        
        ResultOf_set_treat_as_ambient_ped_for_driver_lockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scenario_blocking_area(&self, p0_: i32,
p1_: bool) -> ResultOf_remove_scenario_blocking_area {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_scenario_blocking_area(
            p0_,
p1_,
        );
        
        
        ResultOf_remove_scenario_blocking_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_target_from_combat_ped(&self, ped_: u32,
p1_: i32) -> ResultOf_get_ped_target_from_combat_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_ped_target_from_combat_ped(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_target_from_combat_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_by_zone(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: Option<String>) -> ResultOf_apply_ped_blood_by_zone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
        let success = sdk::natives::apply_ped_blood_by_zone(
            ped_,
p1_,
p2_,
p3_,
p4_.as_ref().unwrap(),
        );
        
        
        ResultOf_apply_ped_blood_by_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_dead_or_dying(&self, ped_: u32,
p1_: bool) -> ResultOf_is_ped_dead_or_dying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_dead_or_dying(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_dead_or_dying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_to_load_cover(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_to_load_cover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_to_load_cover(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_to_load_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_parachute_tint_index(&self, ped_: u32,
tintIndex_: i32) -> ResultOf_set_ped_parachute_tint_index {
    unsafe {
        let mut ped_ = ped_;
let mut tintIndex_ = tintIndex_;
        let success = sdk::natives::set_ped_parachute_tint_index(
            ped_,
tintIndex_,
        );
        
        
        ResultOf_set_ped_parachute_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_count_peds_in_combat_with_target_within_radius(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_count_peds_in_combat_with_target_within_radius {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::count_peds_in_combat_with_target_within_radius(
            &mut native_return,
ped_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_count_peds_in_combat_with_target_within_radius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_is_ignored_by_auto_open_doors(&self, ped_: u32,
p1_: bool) -> ResultOf_set_ped_is_ignored_by_auto_open_doors {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_is_ignored_by_auto_open_doors(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_is_ignored_by_auto_open_doors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_hearing_range(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_hearing_range {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_hearing_range(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_hearing_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_shooting(&self, ped_: u32) -> ResultOf_is_ped_shooting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_shooting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_shooting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_capsule(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_capsule {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_capsule(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_capsule {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_ped_damaged_by_weapon(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_time_ped_damaged_by_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_time_ped_damaged_by_weapon(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_ped_damaged_by_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_scuba_gear_variation(&self, ped_: u32) -> ResultOf_set_ped_scuba_gear_variation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_scuba_gear_variation(
            ped_,
        );
        
        
        ResultOf_set_ped_scuba_gear_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_switching_weapon(&self, Ped_: u32) -> ResultOf_is_ped_switching_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut Ped_ = Ped_;
        let success = sdk::natives::is_ped_switching_weapon(
            &mut native_return,
Ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_switching_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_accuracy(&self, ped_: u32) -> ResultOf_get_ped_accuracy {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_accuracy(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_accuracy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_synchronized_scene_hold_last_frame(&self, sceneID_: i32,
toggle_: bool) -> ResultOf_set_synchronized_scene_hold_last_frame {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_synchronized_scene_hold_last_frame(
            sceneID_,
toggle_,
        );
        
        
        ResultOf_set_synchronized_scene_hold_last_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_ped_damage_decal(&self, ped_: u32,
damageZone_: i32,
xOffset_: f32,
yOffset_: f32,
heading_: f32,
scale_: f32,
alpha_: f32,
unkVariation_: i32,
fadeIn_: bool,
decalName_: Option<String>) -> ResultOf_apply_ped_damage_decal {
    unsafe {
        let mut ped_ = ped_;
let mut damageZone_ = damageZone_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut heading_ = heading_;
let mut scale_ = scale_;
let mut alpha_ = alpha_;
let mut unkVariation_ = unkVariation_;
let mut fadeIn_ = fadeIn_;
let mut decalName_ = sdk_helpers::create_c_string_ptr(decalName_);
        let success = sdk::natives::apply_ped_damage_decal(
            ped_,
damageZone_,
xOffset_,
yOffset_,
heading_,
scale_,
alpha_,
unkVariation_,
fadeIn_,
decalName_.as_ref().unwrap(),
        );
        
        
        ResultOf_apply_ped_damage_decal {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_aiming_from_cover(&self, ped_: u32) -> ResultOf_is_ped_aiming_from_cover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_aiming_from_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_aiming_from_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_preload_variation_data(&self, ped_: u32,
slot_: i32,
drawableId_: i32,
textureId_: i32) -> ResultOf_set_ped_preload_variation_data {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut slot_ = slot_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
        let success = sdk::natives::set_ped_preload_variation_data(
            &mut native_return,
ped_,
slot_,
drawableId_,
textureId_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_preload_variation_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ped_visible_damage(&self, ped_: u32) -> ResultOf_reset_ped_visible_damage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_visible_damage(
            ped_,
        );
        
        
        ResultOf_reset_ped_visible_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_center_angle(&self, ped_: u32,
angle_: f32) -> ResultOf_set_ped_visual_field_center_angle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_center_angle(
            ped_,
angle_,
        );
        
        
        ResultOf_set_ped_visual_field_center_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_vehicles_override(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_allow_vehicles_override {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_vehicles_override(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_allow_vehicles_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_defensive_area_position(&self, ped_: u32,
p1_: bool) -> ResultOf_get_ped_defensive_area_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_ped_defensive_area_position(
            native_return.pin_mut(),
ped_,
p1_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_ped_defensive_area_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_range(&self, ped_: u32,
combatRange_: i32) -> ResultOf_set_ped_combat_range {
    unsafe {
        let mut ped_ = ped_;
let mut combatRange_ = combatRange_;
        let success = sdk::natives::set_ped_combat_range(
            ped_,
combatRange_,
        );
        
        
        ResultOf_set_ped_combat_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_is_search_active(&self, ) -> ResultOf_spawnpoints_is_search_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_spawnpoints_is_search_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_never_leaves_group(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_never_leaves_group {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_never_leaves_group(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_never_leaves_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_lipstick_tint_for_creator(&self, colorId_: i32) -> ResultOf_is_ped_lipstick_tint_for_creator {
    unsafe {
        let mut native_return = Default::default();
let mut colorId_ = colorId_;
        let success = sdk::natives::is_ped_lipstick_tint_for_creator(
            &mut native_return,
colorId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_lipstick_tint_for_creator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_ped(&self, p0_: bool) -> ResultOf_can_create_random_ped {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_create_random_ped(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_can_create_random_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_will_only_attack_wanted_player(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_will_only_attack_wanted_player {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_will_only_attack_wanted_player(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_will_only_attack_wanted_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_bone_index(&self, ped_: u32,
boneId_: i32) -> ResultOf_get_ped_bone_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut boneId_ = boneId_;
        let success = sdk::natives::get_ped_bone_index(
            &mut native_return,
ped_,
boneId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_bone_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_money(&self, ped_: u32) -> ResultOf_get_ped_money {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_money(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_money {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_visor_prop_indices(&self, ped_: u32,
p1_: bool,
p2_: i32,
p3_: i32) -> ResultOf_set_ped_helmet_visor_prop_indices {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_helmet_visor_prop_indices(
            ped_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_ped_helmet_visor_prop_indices {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_separation_range(&self, groupHandle_: i32,
separationRange_: f32) -> ResultOf_set_group_separation_range {
    unsafe {
        let mut groupHandle_ = groupHandle_;
let mut separationRange_ = separationRange_;
        let success = sdk::natives::set_group_separation_range(
            groupHandle_,
separationRange_,
        );
        
        
        ResultOf_set_group_separation_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_landing(&self, p0_: i32) -> ResultOf_is_ped_landing {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_landing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_landing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_defensive_area_direction(&self, ped_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: bool) -> ResultOf_set_ped_defensive_area_direction {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_defensive_area_direction(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_ped_defensive_area_direction {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_evasive_diving(&self, ped_: u32,
evadingEntity_: u32) -> ResultOf_is_ped_evasive_diving {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut evadingEntity_ = Default::default();
        let success = sdk::natives::is_ped_evasive_diving(
            &mut native_return,
&mut evadingEntity_,
ped_,
        );
        let native_return = native_return;
let evadingEntity_ = evadingEntity_;
        
        ResultOf_is_ped_evasive_diving {
            success,
            ret: native_return,
            evadingEntity_
        }
    }
}

    fn native_create_nm_message(&self, startImmediately_: bool,
messageId_: i32) -> ResultOf_create_nm_message {
    unsafe {
        let mut startImmediately_ = startImmediately_;
let mut messageId_ = messageId_;
        let success = sdk::natives::create_nm_message(
            startImmediately_,
messageId_,
        );
        
        
        ResultOf_create_nm_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_ignore_scenario_exit_collision_checks(&self, ped_: u32,
p1_: bool) -> ResultOf_set_ped_should_ignore_scenario_exit_collision_checks {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_ignore_scenario_exit_collision_checks(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_should_ignore_scenario_exit_collision_checks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_relationship_group_default_hash(&self, ped_: u32) -> ResultOf_get_ped_relationship_group_default_hash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_relationship_group_default_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_relationship_group_default_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targeted_without_los(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_targeted_without_los {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targeted_without_los(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_targeted_without_los {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_move_blend_ratio(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_max_move_blend_ratio {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_move_blend_ratio(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_max_move_blend_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jumping_out_of_vehicle(&self, ped_: u32) -> ResultOf_is_ped_jumping_out_of_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jumping_out_of_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_jumping_out_of_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_max_time_in_water(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_max_time_in_water {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_time_in_water(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_max_time_in_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_create_random_cops_on_scenarios(&self, toggle_: bool) -> ResultOf_set_create_random_cops_on_scenarios {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops_on_scenarios(
            toggle_,
        );
        
        
        ResultOf_set_create_random_cops_on_scenarios {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_pedheadshot(&self, ped_: u32) -> ResultOf_register_pedheadshot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_register_pedheadshot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_wetness_height(&self, ped_: u32,
height_: f32) -> ResultOf_set_ped_wetness_height {
    unsafe {
        let mut ped_ = ped_;
let mut height_ = height_;
        let success = sdk::natives::set_ped_wetness_height(
            ped_,
height_,
        );
        
        
        ResultOf_set_ped_wetness_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_trying_to_enter_a_locked_vehicle(&self, ped_: u32) -> ResultOf_is_ped_trying_to_enter_a_locked_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_trying_to_enter_a_locked_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_trying_to_enter_a_locked_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_helmet_stored_hat_prop_index(&self, ped_: u32) -> ResultOf_get_ped_helmet_stored_hat_prop_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_helmet_stored_hat_prop_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_helmet_stored_hat_prop_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_doing_a_beast_jump(&self, p0_: i32) -> ResultOf_is_ped_doing_a_beast_jump {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_doing_a_beast_jump(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_doing_a_beast_jump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_knock_ped_off_vehicle(&self, ped_: u32) -> ResultOf_knock_ped_off_vehicle {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::knock_ped_off_vehicle(
            ped_,
        );
        
        
        ResultOf_knock_ped_off_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_default_component_variation(&self, ped_: u32) -> ResultOf_set_ped_default_component_variation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_default_component_variation(
            ped_,
        );
        
        
        ResultOf_set_ped_default_component_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_mount(&self, ped_: u32) -> ResultOf_is_ped_on_mount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_mount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_on_mount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_finalize_head_blend(&self, ped_: u32) -> ResultOf_finalize_head_blend {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::finalize_head_blend(
            ped_,
        );
        
        
        ResultOf_finalize_head_blend {
            success,
            ret: (),
            
        }
    }
}

    fn native_ped_has_sexiness_flag_set(&self, ped_: u32,
sexinessFlag_: i32) -> ResultOf_ped_has_sexiness_flag_set {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut sexinessFlag_ = sexinessFlag_;
        let success = sdk::natives::ped_has_sexiness_flag_set(
            &mut native_return,
ped_,
sexinessFlag_,
        );
        let native_return = native_return;
        
        ResultOf_ped_has_sexiness_flag_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_damage_pack(&self, ped_: u32,
damagePack_: Option<String>,
damage_: f32,
mult_: f32) -> ResultOf_apply_ped_damage_pack {
    unsafe {
        let mut ped_ = ped_;
let mut damagePack_ = sdk_helpers::create_c_string_ptr(damagePack_);
let mut damage_ = damage_;
let mut mult_ = mult_;
        let success = sdk::natives::apply_ped_damage_pack(
            ped_,
damagePack_.as_ref().unwrap(),
damage_,
mult_,
        );
        
        
        ResultOf_apply_ped_damage_pack {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ai_melee_weapon_damage_modifier(&self, ) -> ResultOf_reset_ai_melee_weapon_damage_modifier {
    unsafe {
        
        let success = sdk::natives::reset_ai_melee_weapon_damage_modifier(
            
        );
        
        
        ResultOf_reset_ai_melee_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steers_around_peds(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_steers_around_peds {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_peds(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_steers_around_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_max_health(&self, ped_: u32) -> ResultOf_get_ped_max_health {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_max_health(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_max_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_instantly_fill_ped_population(&self, ) -> ResultOf_instantly_fill_ped_population {
    unsafe {
        
        let success = sdk::natives::instantly_fill_ped_population(
            
        );
        
        
        ResultOf_instantly_fill_ped_population {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_ragdoll(&self, ped_: u32) -> ResultOf_is_ped_ragdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ragdoll(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_ragdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_hair_tint_color(&self, hairColorIndex_: i32,
outR_: i32,
outG_: i32,
outB_: i32) -> ResultOf_get_ped_hair_tint_color {
    unsafe {
        let mut hairColorIndex_ = hairColorIndex_;
let mut outR_ = Default::default();
let mut outG_ = Default::default();
let mut outB_ = Default::default();
        let success = sdk::natives::get_ped_hair_tint_color(
            &mut outR_,
&mut outG_,
&mut outB_,
hairColorIndex_,
        );
        let outR_ = outR_;
let outG_ = outG_;
let outB_ = outB_;
        
        ResultOf_get_ped_hair_tint_color {
            success,
            ret: (),
            outR_,
outG_,
outB_
        }
    }
}

    fn native_is_ped_in_combat(&self, ped_: u32,
target_: u32) -> ResultOf_is_ped_in_combat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::is_ped_in_combat(
            &mut native_return,
ped_,
target_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_combat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_head_overlay(&self, ped_: u32,
overlayID_: i32,
index_: i32,
opacity_: f32) -> ResultOf_set_ped_head_overlay {
    unsafe {
        let mut ped_ = ped_;
let mut overlayID_ = overlayID_;
let mut index_ = index_;
let mut opacity_ = opacity_;
        let success = sdk::natives::set_ped_head_overlay(
            ped_,
overlayID_,
index_,
opacity_,
        );
        
        
        ResultOf_set_ped_head_overlay {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_head_overlay_tint(&self, ped_: u32,
overlayID_: i32,
colorType_: i32,
colorID_: i32,
secondColorID_: i32) -> ResultOf_set_ped_head_overlay_tint {
    unsafe {
        let mut ped_ = ped_;
let mut overlayID_ = overlayID_;
let mut colorType_ = colorType_;
let mut colorID_ = colorID_;
let mut secondColorID_ = secondColorID_;
        let success = sdk::natives::set_ped_head_overlay_tint(
            ped_,
overlayID_,
colorType_,
colorID_,
secondColorID_,
        );
        
        
        ResultOf_set_ped_head_overlay_tint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_minor_reactions_as_mission_ped(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_allow_minor_reactions_as_mission_ped {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_minor_reactions_as_mission_ped(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_allow_minor_reactions_as_mission_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jacking(&self, ped_: u32) -> ResultOf_is_ped_jacking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jacking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_jacking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_drive_by_clipset_override(&self, ped_: u32) -> ResultOf_clear_ped_drive_by_clipset_override {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_drive_by_clipset_override(
            ped_,
        );
        
        
        ResultOf_clear_ped_drive_by_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_initial_offset_rotation(&self, animDict_: Option<String>,
animName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
p8_: f32,
p9_: i32) -> ResultOf_get_anim_initial_offset_rotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::get_anim_initial_offset_rotation(
            native_return.pin_mut(),
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
p8_,
p9_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_anim_initial_offset_rotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_tracked(&self, ped_: u32) -> ResultOf_is_ped_tracked {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_tracked(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_tracked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_hair_tint(&self, ped_: u32,
colorID_: i32,
highlightColorID_: i32) -> ResultOf_set_ped_hair_tint {
    unsafe {
        let mut ped_ = ped_;
let mut colorID_ = colorID_;
let mut highlightColorID_ = highlightColorID_;
        let success = sdk::natives::set_ped_hair_tint(
            ped_,
colorID_,
highlightColorID_,
        );
        
        
        ResultOf_set_ped_hair_tint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_combat_movement(&self, ped_: u32,
combatMovement_: i32) -> ResultOf_set_ped_combat_movement {
    unsafe {
        let mut ped_ = ped_;
let mut combatMovement_ = combatMovement_;
        let success = sdk::natives::set_ped_combat_movement(
            ped_,
combatMovement_,
        );
        
        
        ResultOf_set_ped_combat_movement {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_melee_combat(&self, ped_: u32) -> ResultOf_is_ped_in_melee_combat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_melee_combat(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_melee_combat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_emissive_scale(&self, ped_: u32,
intensity_: f32) -> ResultOf_set_ped_emissive_scale {
    unsafe {
        let mut ped_ = ped_;
let mut intensity_ = intensity_;
        let success = sdk::natives::set_ped_emissive_scale(
            ped_,
intensity_,
        );
        
        
        ResultOf_set_ped_emissive_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_area_attached_to_ped(&self, ped_: u32,
attachPed_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: bool,
p10_: bool) -> ResultOf_set_ped_defensive_area_attached_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut attachPed_ = attachPed_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::set_ped_defensive_area_attached_to_ped(
            ped_,
attachPed_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_set_ped_defensive_area_attached_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_bounds_orientation(&self, ped_: u32,
p1_: f32,
p2_: f32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_ped_bounds_orientation {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_ped_bounds_orientation(
            ped_,
p1_,
p2_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_ped_bounds_orientation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_being_stunned(&self, ped_: u32,
p1_: i32) -> ResultOf_is_ped_being_stunned {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_being_stunned(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_being_stunned {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scripted_conversion_coord_this_frame(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_scripted_conversion_coord_this_frame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_scripted_conversion_coord_this_frame(
            x_,
y_,
z_,
        );
        
        
        ResultOf_set_scripted_conversion_coord_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_head_blend_eye_color(&self, ped_: u32,
index_: i32) -> ResultOf_set_head_blend_eye_color {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_head_blend_eye_color(
            ped_,
index_,
        );
        
        
        ResultOf_set_head_blend_eye_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tracked_ped_pixelcount(&self, ped_: u32) -> ResultOf_get_tracked_ped_pixelcount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tracked_ped_pixelcount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_tracked_ped_pixelcount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_as_group_member(&self, groupID_: i32,
memberNumber_: i32) -> ResultOf_get_ped_as_group_member {
    unsafe {
        let mut native_return = Default::default();
let mut groupID_ = groupID_;
let mut memberNumber_ = memberNumber_;
        let success = sdk::natives::get_ped_as_group_member(
            &mut native_return,
groupID_,
memberNumber_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_as_group_member {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_knock_ped_off_vehicle(&self, ped_: u32) -> ResultOf_can_knock_ped_off_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::can_knock_ped_off_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_can_knock_ped_off_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_damage_decal_by_zone(&self, ped_: u32,
p1_: i32,
p2_: Option<String>) -> ResultOf_clear_ped_damage_decal_by_zone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::clear_ped_damage_decal_by_zone(
            ped_,
p1_,
p2_.as_ref().unwrap(),
        );
        
        
        ResultOf_clear_ped_damage_decal_by_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_highly_perceptive(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_highly_perceptive {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_highly_perceptive(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_highly_perceptive {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_combat_float(&self, ped_: u32,
p1_: i32) -> ResultOf_get_combat_float {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_combat_float(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_combat_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_in_vehicle_context(&self, ped_: u32,
context_: u32) -> ResultOf_set_ped_in_vehicle_context {
    unsafe {
        let mut ped_ = ped_;
let mut context_ = context_;
        let success = sdk::natives::set_ped_in_vehicle_context(
            ped_,
context_,
        );
        
        
        ResultOf_set_ped_in_vehicle_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_stopped(&self, ped_: u32) -> ResultOf_is_ped_stopped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_stopped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_stopped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_climbing(&self, ped_: u32) -> ResultOf_is_ped_climbing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_climbing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_climbing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_count_peds_in_combat_with_target(&self, ped_: u32) -> ResultOf_count_peds_in_combat_with_target {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::count_peds_in_combat_with_target(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_count_peds_in_combat_with_target {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_jack_target(&self, ped_: u32) -> ResultOf_get_jack_target {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_jack_target(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_jack_target {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_ped_helmet(&self, ped_: u32,
cannotRemove_: bool,
helmetFlag_: i32,
textureIndex_: i32) -> ResultOf_give_ped_helmet {
    unsafe {
        let mut ped_ = ped_;
let mut cannotRemove_ = cannotRemove_;
let mut helmetFlag_ = helmetFlag_;
let mut textureIndex_ = textureIndex_;
        let success = sdk::natives::give_ped_helmet(
            ped_,
cannotRemove_,
helmetFlag_,
textureIndex_,
        );
        
        
        ResultOf_give_ped_helmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_diving(&self, ped_: u32) -> ResultOf_is_ped_diving {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_diving(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_diving {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet(&self, ped_: u32,
canWearHelmet_: bool) -> ResultOf_set_ped_helmet {
    unsafe {
        let mut ped_ = ped_;
let mut canWearHelmet_ = canWearHelmet_;
        let success = sdk::natives::set_ped_helmet(
            ped_,
canWearHelmet_,
        );
        
        
        ResultOf_set_ped_helmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_relationship_group_affects_wanted_level(&self, group_: u32,
p1_: bool) -> ResultOf_set_relationship_group_affects_wanted_level {
    unsafe {
        let mut group_ = group_;
let mut p1_ = p1_;
        let success = sdk::natives::set_relationship_group_affects_wanted_level(
            group_,
p1_,
        );
        
        
        ResultOf_set_relationship_group_affects_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_ped_decoration_from_hashes_in_corona(&self, ped_: u32,
collection_: u32,
overlay_: u32) -> ResultOf_add_ped_decoration_from_hashes_in_corona {
    unsafe {
        let mut ped_ = ped_;
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::add_ped_decoration_from_hashes_in_corona(
            ped_,
collection_,
overlay_,
        );
        
        
        ResultOf_add_ped_decoration_from_hashes_in_corona {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_facial_clipset(&self, ped_: u32,
animDict_: Option<String>) -> ResultOf_set_facial_clipset {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::set_facial_clipset(
            ped_,
animDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_facial_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_in_water(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_dies_in_water {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_water(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_dies_in_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32) -> ResultOf_clear_ped_blood_damage_by_zone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_ped_blood_damage_by_zone(
            ped_,
p1_,
        );
        
        
        ResultOf_clear_ped_blood_damage_by_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_increased_avoidance_radius(&self, ped_: u32) -> ResultOf_set_ped_increased_avoidance_radius {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_increased_avoidance_radius(
            ped_,
        );
        
        
        ResultOf_set_ped_increased_avoidance_radius {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_blocks_pathing_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_blocks_pathing_when_dead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_blocks_pathing_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_blocks_pathing_when_dead {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_using_any_scenario(&self, ped_: u32) -> ResultOf_is_ped_using_any_scenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_using_any_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_using_any_scenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_group(&self, ped_: u32) -> ResultOf_is_ped_in_group {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_group(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_group {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scripted_anim_seat_offset(&self, ped_: u32,
p1_: f32) -> ResultOf_set_scripted_anim_seat_offset {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_scripted_anim_seat_offset(
            ped_,
p1_,
        );
        
        
        ResultOf_set_scripted_anim_seat_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_hurt(&self, ped_: u32) -> ResultOf_is_ped_hurt {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_hurt(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_hurt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_ambient_ped_aggressive_cleanup_this_frame(&self, ) -> ResultOf_suppress_ambient_ped_aggressive_cleanup_this_frame {
    unsafe {
        
        let success = sdk::natives::suppress_ambient_ped_aggressive_cleanup_this_frame(
            
        );
        
        
        ResultOf_suppress_ambient_ped_aggressive_cleanup_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ped_preload_variation_data(&self, ped_: u32) -> ResultOf_release_ped_preload_variation_data {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::release_ped_preload_variation_data(
            ped_,
        );
        
        
        ResultOf_release_ped_preload_variation_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_ignore_scenario_nav_checks(&self, p0_: i32,
p1_: bool) -> ResultOf_set_ped_should_ignore_scenario_nav_checks {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_ignore_scenario_nav_checks(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_should_ignore_scenario_nav_checks {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_armour_to_ped(&self, ped_: u32,
amount_: i32) -> ResultOf_add_armour_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::add_armour_to_ped(
            ped_,
amount_,
        );
        
        
        ResultOf_add_armour_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_when_injured(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_dies_when_injured {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_when_injured(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_dies_when_injured {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_as_group_leader(&self, groupID_: i32) -> ResultOf_get_ped_as_group_leader {
    unsafe {
        let mut native_return = Default::default();
let mut groupID_ = groupID_;
        let success = sdk::natives::get_ped_as_group_leader(
            &mut native_return,
groupID_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_as_group_leader {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_headtracking_ped(&self, ped1_: u32,
ped2_: u32) -> ResultOf_is_ped_headtracking_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::is_ped_headtracking_ped(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_headtracking_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_pedheadshot_img_upload(&self, id_: i32) -> ResultOf_release_pedheadshot_img_upload {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::release_pedheadshot_img_upload(
            id_,
        );
        
        
        ResultOf_release_pedheadshot_img_upload {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_relationship_between_groups(&self, relationship_: i32,
group1_: u32,
group2_: u32) -> ResultOf_clear_relationship_between_groups {
    unsafe {
        let mut relationship_ = relationship_;
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::clear_relationship_between_groups(
            relationship_,
group1_,
group2_,
        );
        
        
        ResultOf_clear_relationship_between_groups {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_create_random_cops(&self, ) -> ResultOf_can_create_random_cops {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_cops(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_create_random_cops {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_blend_num_heads(&self, type_: i32) -> ResultOf_get_ped_head_blend_num_heads {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
        let success = sdk::natives::get_ped_head_blend_num_heads(
            &mut native_return,
type_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_head_blend_num_heads {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ped_decoration_from_hashes(&self, ped_: u32,
collection_: u32,
overlay_: u32) -> ResultOf_add_ped_decoration_from_hashes {
    unsafe {
        let mut ped_ = ped_;
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::add_ped_decoration_from_hashes(
            ped_,
collection_,
overlay_,
        );
        
        
        ResultOf_add_ped_decoration_from_hashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_prop_drawable_variations(&self, ped_: u32,
propId_: i32) -> ResultOf_get_number_of_ped_prop_drawable_variations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut propId_ = propId_;
        let success = sdk::natives::get_number_of_ped_prop_drawable_variations(
            &mut native_return,
ped_,
propId_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_ped_prop_drawable_variations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_plane(&self, ped_: u32) -> ResultOf_is_ped_in_any_plane {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_plane(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_plane {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_ped_heatscale_override(&self, ped_: u32) -> ResultOf_disable_ped_heatscale_override {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_ped_heatscale_override(
            ped_,
        );
        
        
        ResultOf_disable_ped_heatscale_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_blush_tint_for_barber(&self, colorID_: i32) -> ResultOf_is_ped_blush_tint_for_barber {
    unsafe {
        let mut native_return = Default::default();
let mut colorID_ = colorID_;
        let success = sdk::natives::is_ped_blush_tint_for_barber(
            &mut native_return,
colorID_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_blush_tint_for_barber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_ped_is_using(&self, ped_: u32) -> ResultOf_get_vehicle_ped_is_using {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_using(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_ped_is_using {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_cover(&self, ped_: u32,
exceptUseWeapon_: bool) -> ResultOf_is_ped_in_cover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut exceptUseWeapon_ = exceptUseWeapon_;
        let success = sdk::natives::is_ped_in_cover(
            &mut native_return,
ped_,
exceptUseWeapon_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_shoot_rate(&self, ped_: u32,
shootRate_: i32) -> ResultOf_set_ped_shoot_rate {
    unsafe {
        let mut ped_ = ped_;
let mut shootRate_ = shootRate_;
        let success = sdk::natives::set_ped_shoot_rate(
            ped_,
shootRate_,
        );
        
        
        ResultOf_set_ped_shoot_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_ped_knocked_out(&self, ped_: u32) -> ResultOf_was_ped_knocked_out {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_knocked_out(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_was_ped_knocked_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_looped(&self, sceneID_: i32) -> ResultOf_is_synchronized_scene_looped {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::is_synchronized_scene_looped(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_is_synchronized_scene_looped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_responding_to_event(&self, ped_: u32,
event_: i32) -> ResultOf_is_ped_responding_to_event {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut event_ = event_;
        let success = sdk::natives::is_ped_responding_to_event(
            &mut native_return,
ped_,
event_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_responding_to_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32,
p2_: bool) -> ResultOf_hide_ped_blood_damage_by_zone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hide_ped_blood_damage_by_zone(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOf_hide_ped_blood_damage_by_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_synchronized_scene_at_map_object(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
object_: u32) -> ResultOf_create_synchronized_scene_at_map_object {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut object_ = object_;
        let success = sdk::natives::create_synchronized_scene_at_map_object(
            &mut native_return,
x_,
y_,
z_,
radius_,
object_,
        );
        let native_return = native_return;
        
        ResultOf_create_synchronized_scene_at_map_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_ambient_anims(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_play_ambient_anims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_ambient_anims(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_play_ambient_anims {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_cover_point_for_ped(&self, ped_: u32) -> ResultOf_clear_cover_point_for_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_cover_point_for_ped(
            ped_,
        );
        
        
        ResultOf_clear_cover_point_for_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_targeted_when_injured(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_targeted_when_injured {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targeted_when_injured(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_targeted_when_injured {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_group_formation_default_spacing(&self, groupHandle_: i32) -> ResultOf_reset_group_formation_default_spacing {
    unsafe {
        let mut groupHandle_ = groupHandle_;
        let success = sdk::natives::reset_group_formation_default_spacing(
            groupHandle_,
        );
        
        
        ResultOf_reset_group_formation_default_spacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_targetted(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_targetted {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_targetted {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_head_blend_finished(&self, ped_: u32) -> ResultOf_has_ped_head_blend_finished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_head_blend_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_head_blend_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_dies_in_water(&self, ped_: u32) -> ResultOf_get_ped_dies_in_water {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_dies_in_water(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_dies_in_water {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_env_dirt(&self, ped_: u32) -> ResultOf_clear_ped_env_dirt {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_env_dirt(
            ped_,
        );
        
        
        ResultOf_clear_ped_env_dirt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ai_melee_weapon_damage_modifier(&self, modifier_: f32) -> ResultOf_set_ai_melee_weapon_damage_modifier {
    unsafe {
        let mut modifier_ = modifier_;
        let success = sdk::natives::set_ai_melee_weapon_damage_modifier(
            modifier_,
        );
        
        
        ResultOf_set_ai_melee_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_torso_vehicle_ik(&self, ped_: u32,
p1_: bool) -> ResultOf_set_ped_can_torso_vehicle_ik {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_torso_vehicle_ik(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_can_torso_vehicle_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_preload_variation_data_finished(&self, ped_: u32) -> ResultOf_has_ped_preload_variation_data_finished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_preload_variation_data_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_preload_variation_data_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clone_ped_alt(&self, ped_: u32,
isNetwork_: bool,
bScriptHostPed_: bool,
copyHeadBlendFlag_: bool,
p4_: bool) -> ResultOf_clone_ped_alt {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostPed_ = bScriptHostPed_;
let mut copyHeadBlendFlag_ = copyHeadBlendFlag_;
let mut p4_ = p4_;
        let success = sdk::natives::clone_ped_alt(
            &mut native_return,
ped_,
isNetwork_,
bScriptHostPed_,
copyHeadBlendFlag_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_clone_ped_alt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targetted_by_player(&self, ped_: u32,
player_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_targetted_by_player {
    unsafe {
        let mut ped_ = ped_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted_by_player(
            ped_,
player_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_targetted_by_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_vehicle(&self, ped_: u32) -> ResultOf_is_ped_on_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_on_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_drawable_variation(&self, ped_: u32,
componentId_: i32) -> ResultOf_get_ped_drawable_variation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
        let success = sdk::natives::get_ped_drawable_variation(
            &mut native_return,
ped_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_drawable_variation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_hostile_ped_near_point(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_any_hostile_ped_near_point {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_hostile_ped_near_point(
            &mut native_return,
ped_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_hostile_ped_near_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_stored_hat_prop(&self, ped_: u32) -> ResultOf_clear_ped_stored_hat_prop {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_stored_hat_prop(
            ped_,
        );
        
        
        ResultOf_clear_ped_stored_hat_prop {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_head_blend_first_index(&self, type_: i32) -> ResultOf_get_ped_head_blend_first_index {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
        let success = sdk::natives::get_ped_head_blend_first_index(
            &mut native_return,
type_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_head_blend_first_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_damage_to_ped(&self, ped_: u32,
damageAmount_: i32,
p2_: bool,
p3_: i32) -> ResultOf_apply_damage_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut damageAmount_ = damageAmount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::apply_damage_to_ped(
            ped_,
damageAmount_,
p2_,
p3_,
        );
        
        
        ResultOf_apply_damage_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_high_cover(&self, ped_: u32) -> ResultOf_is_ped_in_high_cover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_high_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_high_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_ped_is_following(&self, ped_: u32) -> ResultOf_get_player_ped_is_following {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_player_ped_is_following(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_ped_is_following {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_synchronized_scene_origin(&self, sceneID_: i32,
x_: f32,
y_: f32,
z_: f32,
roll_: f32,
pitch_: f32,
yaw_: f32,
p7_: bool) -> ResultOf_set_synchronized_scene_origin {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
let mut p7_ = p7_;
        let success = sdk::natives::set_synchronized_scene_origin(
            sceneID_,
x_,
y_,
z_,
roll_,
pitch_,
yaw_,
p7_,
        );
        
        
        ResultOf_set_synchronized_scene_origin {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_peds_drop_money(&self, p0_: bool) -> ResultOf_set_ambient_peds_drop_money {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ambient_peds_drop_money(
            p0_,
        );
        
        
        ResultOf_set_ambient_peds_drop_money {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_evasive_dive(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_evasive_dive {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_evasive_dive(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_evasive_dive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_time_underwater(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_max_time_underwater {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_time_underwater(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_max_time_underwater {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_arm_ik(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_arm_ik {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_arm_ik(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_arm_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_alternate_walk_anim(&self, ped_: u32,
animDict_: Option<String>,
animName_: Option<String>,
p3_: f32,
p4_: bool) -> ResultOf_set_ped_alternate_walk_anim {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_alternate_walk_anim(
            ped_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
p3_,
p4_,
        );
        
        
        ResultOf_set_ped_alternate_walk_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_see_hated_ped(&self, ped1_: u32,
ped2_: u32) -> ResultOf_can_ped_see_hated_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::can_ped_see_hated_ped(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOf_can_ped_see_hated_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_synchronized_scene(&self, sceneID_: i32) -> ResultOf_detach_synchronized_scene {
    unsafe {
        let mut sceneID_ = sceneID_;
        let success = sdk::natives::detach_synchronized_scene(
            sceneID_,
        );
        
        
        ResultOf_detach_synchronized_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_male(&self, ped_: u32) -> ResultOf_is_ped_male {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_male(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_male {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_taxi(&self, ped_: u32) -> ResultOf_is_ped_in_any_taxi {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_taxi(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_taxi {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scripted_scenario_ped_using_conditional_anim(&self, ped_: u32,
animDict_: Option<String>,
anim_: Option<String>) -> ResultOf_is_scripted_scenario_ped_using_conditional_anim {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut anim_ = sdk_helpers::create_c_string_ptr(anim_);
        let success = sdk::natives::is_scripted_scenario_ped_using_conditional_anim(
            &mut native_return,
ped_,
animDict_.as_ref().unwrap(),
anim_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_scripted_scenario_ped_using_conditional_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_seat_ped_is_trying_to_enter(&self, ped_: u32) -> ResultOf_get_seat_ped_is_trying_to_enter {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_seat_ped_is_trying_to_enter(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_seat_ped_is_trying_to_enter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_train(&self, ped_: u32) -> ResultOf_is_ped_in_any_train {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_train(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_train {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_knock_off_ped_prop(&self, ped_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: bool) -> ResultOf_knock_off_ped_prop {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::knock_off_ped_prop(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_knock_off_ped_prop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_max_angle(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_visual_field_max_angle {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_visual_field_max_angle(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_visual_field_max_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pedheadshot_ready(&self, id_: i32) -> ResultOf_is_pedheadshot_ready {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pedheadshot_ready(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_pedheadshot_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_flee_attributes(&self, ped_: u32,
attributeFlags_: i32,
enable_: bool) -> ResultOf_set_ped_flee_attributes {
    unsafe {
        let mut ped_ = ped_;
let mut attributeFlags_ = attributeFlags_;
let mut enable_ = enable_;
        let success = sdk::natives::set_ped_flee_attributes(
            ped_,
attributeFlags_,
enable_,
        );
        
        
        ResultOf_set_ped_flee_attributes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_high_fall_death(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_disable_high_fall_death {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_high_fall_death(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_disable_high_fall_death {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_micro_morph(&self, ped_: u32,
index_: i32,
scale_: f32) -> ResultOf_set_ped_micro_morph {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
let mut scale_ = scale_;
        let success = sdk::natives::set_ped_micro_morph(
            ped_,
index_,
scale_,
        );
        
        
        ResultOf_set_ped_micro_morph {
            success,
            ret: (),
            
        }
    }
}

    fn native_resurrect_ped(&self, ped_: u32) -> ResultOf_resurrect_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::resurrect_ped(
            ped_,
        );
        
        
        ResultOf_resurrect_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_decorations_state(&self, ped_: u32) -> ResultOf_get_ped_decorations_state {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_decorations_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_decorations_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_ped_head_blend_data(&self, ped_: u32,
shapeMix_: f32,
skinMix_: f32,
thirdMix_: f32) -> ResultOf_update_ped_head_blend_data {
    unsafe {
        let mut ped_ = ped_;
let mut shapeMix_ = shapeMix_;
let mut skinMix_ = skinMix_;
let mut thirdMix_ = thirdMix_;
        let success = sdk::natives::update_ped_head_blend_data(
            ped_,
shapeMix_,
skinMix_,
thirdMix_,
        );
        
        
        ResultOf_update_ped_head_blend_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_facial_idle_anim_override(&self, ped_: u32) -> ResultOf_clear_facial_idle_anim_override {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_facial_idle_anim_override(
            ped_,
        );
        
        
        ResultOf_clear_facial_idle_anim_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_ped_injured_on_ground_behaviour(&self, ped_: u32) -> ResultOf_disable_ped_injured_on_ground_behaviour {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_ped_injured_on_ground_behaviour(
            ped_,
        );
        
        
        ResultOf_disable_ped_injured_on_ground_behaviour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_phase(&self, sceneID_: i32,
phase_: f32) -> ResultOf_set_synchronized_scene_phase {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut phase_ = phase_;
        let success = sdk::natives::set_synchronized_scene_phase(
            sceneID_,
phase_,
        );
        
        
        ResultOf_set_synchronized_scene_phase {
            success,
            ret: (),
            
        }
    }
}

    fn native_have_all_streaming_requests_completed(&self, ped_: u32) -> ResultOf_have_all_streaming_requests_completed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::have_all_streaming_requests_completed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_have_all_streaming_requests_completed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_leg_ik(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_leg_ik {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_leg_ik(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_leg_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_defensive_area(&self, ped_: u32,
toggle_: bool) -> ResultOf_remove_ped_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::remove_ped_defensive_area(
            ped_,
toggle_,
        );
        
        
        ResultOf_remove_ped_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_use_small_bbox_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOf_request_ped_use_small_bbox_visibility_tracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_use_small_bbox_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOf_request_ped_use_small_bbox_visibility_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_head_blend_eye_color(&self, ped_: u32) -> ResultOf_get_head_blend_eye_color {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_head_blend_eye_color(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_head_blend_eye_color {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_movement_mode_override(&self, ped_: u32,
name_: Option<String>) -> ResultOf_set_movement_mode_override {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_movement_mode_override(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_movement_mode_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_preload_prop_data_finished(&self, ped_: u32) -> ResultOf_has_ped_preload_prop_data_finished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_preload_prop_data_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_preload_prop_data_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_pin_frames(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_cloth_pin_frames {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_pin_frames(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_cloth_pin_frames {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_max_elevation_angle(&self, ped_: u32,
angle_: f32) -> ResultOf_set_ped_visual_field_max_elevation_angle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_max_elevation_angle(
            ped_,
angle_,
        );
        
        
        ResultOf_set_ped_visual_field_max_elevation_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_model(&self, ped_: u32,
modelHash_: u32) -> ResultOf_is_ped_in_model {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::is_ped_in_model(
            &mut native_return,
ped_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_parachute_state(&self, ped_: u32) -> ResultOf_get_ped_parachute_state {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_parachute_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_parachute_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_visual_field_min_elevation_angle(&self, ped_: u32,
angle_: f32) -> ResultOf_set_ped_visual_field_min_elevation_angle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_min_elevation_angle(
            ped_,
angle_,
        );
        
        
        ResultOf_set_ped_visual_field_min_elevation_angle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_ped_density_multiplier_this_frame(&self, p0_: f32,
p1_: f32) -> ResultOf_set_scenario_ped_density_multiplier_this_frame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_scenario_ped_density_multiplier_this_frame(
            p0_,
p1_,
        );
        
        
        ResultOf_set_scenario_ped_density_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_knocked_off_vehicle(&self, ped_: u32,
state_: i32) -> ResultOf_set_ped_can_be_knocked_off_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut state_ = state_;
        let success = sdk::natives::set_ped_can_be_knocked_off_vehicle(
            ped_,
state_,
        );
        
        
        ResultOf_set_ped_can_be_knocked_off_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_accuracy(&self, ped_: u32,
accuracy_: i32) -> ResultOf_set_ped_accuracy {
    unsafe {
        let mut ped_ = ped_;
let mut accuracy_ = accuracy_;
        let success = sdk::natives::set_ped_accuracy(
            ped_,
accuracy_,
        );
        
        
        ResultOf_set_ped_accuracy {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_stealth_movement(&self, ped_: u32) -> ResultOf_get_ped_stealth_movement {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_stealth_movement(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_stealth_movement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_group_exist(&self, groupId_: i32) -> ResultOf_does_group_exist {
    unsafe {
        let mut native_return = Default::default();
let mut groupId_ = groupId_;
        let success = sdk::natives::does_group_exist(
            &mut native_return,
groupId_,
        );
        let native_return = native_return;
        
        ResultOf_does_group_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ped_visibility_tracking(&self, ped_: u32) -> ResultOf_request_ped_visibility_tracking {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::request_ped_visibility_tracking(
            ped_,
        );
        
        
        ResultOf_request_ped_visibility_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_relationship_group_hash(&self, ped_: u32) -> ResultOf_get_ped_relationship_group_hash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_relationship_group_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_relationship_group_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_parachute_free_fall(&self, ped_: u32) -> ResultOf_is_ped_in_parachute_free_fall {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_parachute_free_fall(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_parachute_free_fall {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_ped_inside_vehicle(&self, vehicle_: u32,
pedType_: i32,
modelHash_: u32,
seat_: i32,
isNetwork_: bool,
bScriptHostPed_: bool) -> ResultOf_create_ped_inside_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut pedType_ = pedType_;
let mut modelHash_ = modelHash_;
let mut seat_ = seat_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostPed_ = bScriptHostPed_;
        let success = sdk::natives::create_ped_inside_vehicle(
            &mut native_return,
vehicle_,
pedType_,
modelHash_,
seat_,
isNetwork_,
bScriptHostPed_,
        );
        let native_return = native_return;
        
        ResultOf_create_ped_inside_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_shooting_in_area(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p7_: bool,
p8_: bool) -> ResultOf_is_ped_shooting_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::is_ped_shooting_in_area(
            &mut native_return,
ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_shooting_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_config_flag(&self, ped_: u32,
flagId_: i32,
p2_: bool) -> ResultOf_get_ped_config_flag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut flagId_ = flagId_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_config_flag(
            &mut native_return,
ped_,
flagId_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_config_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_killed_by_takedown(&self, ped_: u32) -> ResultOf_was_ped_killed_by_takedown {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_killed_by_takedown(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_was_ped_killed_by_takedown {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_hold_last_frame(&self, sceneID_: i32) -> ResultOf_is_synchronized_scene_hold_last_frame {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::is_synchronized_scene_hold_last_frame(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_is_synchronized_scene_hold_last_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_generates_dead_body_events(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_generates_dead_body_events {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_generates_dead_body_events(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_generates_dead_body_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_fall_upper_body_clipset_override(&self, ped_: u32) -> ResultOf_clear_ped_fall_upper_body_clipset_override {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_fall_upper_body_clipset_override(
            ped_,
        );
        
        
        ResultOf_clear_ped_fall_upper_body_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_headtracking_entity(&self, ped_: u32,
entity_: u32) -> ResultOf_is_ped_headtracking_entity {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut entity_ = entity_;
        let success = sdk::natives::is_ped_headtracking_entity(
            &mut native_return,
ped_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_headtracking_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_ped_is_trying_to_enter(&self, ped_: u32) -> ResultOf_get_vehicle_ped_is_trying_to_enter {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_trying_to_enter(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_ped_is_trying_to_enter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: i32) -> ResultOf_apply_ped_blood_damage_by_zone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::apply_ped_blood_damage_by_zone(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_apply_ped_blood_damage_by_zone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_shader_ready(&self, ped_: u32) -> ResultOf_is_ped_shader_ready {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_shader_ready(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_shader_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_in_car_idles(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_play_in_car_idles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_in_car_idles(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_play_in_car_idles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sitting_in_any_vehicle(&self, ped_: u32) -> ResultOf_is_ped_sitting_in_any_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sitting_in_any_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_sitting_in_any_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_package_index(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_cloth_package_index {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_package_index(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_cloth_package_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_phone_palette_idx(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_phone_palette_idx {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_phone_palette_idx(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_phone_palette_idx {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_ped_blood(&self, ped_: u32,
boneIndex_: i32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
woundType_: Option<String>) -> ResultOf_apply_ped_blood {
    unsafe {
        let mut ped_ = ped_;
let mut boneIndex_ = boneIndex_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut woundType_ = sdk_helpers::create_c_string_ptr(woundType_);
        let success = sdk::natives::apply_ped_blood(
            ped_,
boneIndex_,
xRot_,
yRot_,
zRot_,
woundType_.as_ref().unwrap(),
        );
        
        
        ResultOf_apply_ped_blood {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_preferred_cover_set(&self, ped_: u32,
itemSet_: i32) -> ResultOf_set_ped_preferred_cover_set {
    unsafe {
        let mut ped_ = ped_;
let mut itemSet_ = itemSet_;
        let success = sdk::natives::set_ped_preferred_cover_set(
            ped_,
itemSet_,
        );
        
        
        ResultOf_set_ped_preferred_cover_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_cover_facing_left(&self, ped_: u32) -> ResultOf_is_ped_in_cover_facing_left {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_cover_facing_left(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_cover_facing_left {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_injured(&self, ped_: u32) -> ResultOf_is_ped_injured {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_injured(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_injured {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_received_event(&self, ped_: u32,
eventId_: i32) -> ResultOf_has_ped_received_event {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut eventId_ = eventId_;
        let success = sdk::natives::has_ped_received_event(
            &mut native_return,
ped_,
eventId_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_received_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_being_stealth_killed(&self, ped_: u32) -> ResultOf_is_ped_being_stealth_killed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_stealth_killed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_being_stealth_killed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_coords_no_gang(&self, ped_: u32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_ped_coords_no_gang {
    unsafe {
        let mut ped_ = ped_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_ped_coords_no_gang(
            ped_,
posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_ped_coords_no_gang {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_ped_at_coord(&self, x_: f32,
y_: f32,
z_: f32,
xRadius_: f32,
yRadius_: f32,
zRadius_: f32,
pedType_: i32) -> ResultOf_get_random_ped_at_coord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRadius_ = xRadius_;
let mut yRadius_ = yRadius_;
let mut zRadius_ = zRadius_;
let mut pedType_ = pedType_;
        let success = sdk::natives::get_random_ped_at_coord(
            &mut native_return,
x_,
y_,
z_,
xRadius_,
yRadius_,
zRadius_,
pedType_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_ped_at_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_pedheadshot_img_upload_failed(&self, ) -> ResultOf_has_pedheadshot_img_upload_failed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_pedheadshot_img_upload_failed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_pedheadshot_img_upload_failed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_law_ped_accuracy_modifier(&self, multiplier_: f32) -> ResultOf_set_ambient_law_ped_accuracy_modifier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ambient_law_ped_accuracy_modifier(
            multiplier_,
        );
        
        
        ResultOf_set_ambient_law_ped_accuracy_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mp_light_enabled(&self, ped_: u32) -> ResultOf_get_mp_light_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_mp_light_enabled(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_mp_light_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_alternate_walk_anim(&self, ped_: u32,
p1_: f32) -> ResultOf_clear_ped_alternate_walk_anim {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_ped_alternate_walk_anim(
            ped_,
p1_,
        );
        
        
        ResultOf_clear_ped_alternate_walk_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stealth_movement(&self, ped_: u32,
p1_: bool,
action_: Option<String>) -> ResultOf_set_ped_stealth_movement {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut action_ = sdk_helpers::create_c_string_ptr(action_);
        let success = sdk::natives::set_ped_stealth_movement(
            ped_,
p1_,
action_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_stealth_movement {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_prop_index(&self, ped_: u32,
componentId_: i32,
p2_: i32) -> ResultOf_get_ped_prop_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_prop_index(
            &mut native_return,
ped_,
componentId_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_prop_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_scenario_blocking_area_exists(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_does_scenario_blocking_area_exists {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::does_scenario_blocking_area_exists(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_does_scenario_blocking_area_exists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_create_random_cops_not_on_scenarios(&self, toggle_: bool) -> ResultOf_set_create_random_cops_not_on_scenarios {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops_not_on_scenarios(
            toggle_,
        );
        
        
        ResultOf_set_create_random_cops_not_on_scenarios {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_parachute_landing_type(&self, ped_: u32) -> ResultOf_get_ped_parachute_landing_type {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_parachute_landing_type(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_parachute_landing_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_synchronized_scene(&self, x_: f32,
y_: f32,
z_: f32,
roll_: f32,
pitch_: f32,
yaw_: f32,
p6_: i32) -> ResultOf_create_synchronized_scene {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
let mut p6_ = p6_;
        let success = sdk::natives::create_synchronized_scene(
            &mut native_return,
x_,
y_,
z_,
roll_,
pitch_,
yaw_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_create_synchronized_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_parachute_bag_object(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOf_create_parachute_bag_object {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::create_parachute_bag_object(
            &mut native_return,
ped_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_create_parachute_bag_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_revive_injured_ped(&self, ped_: u32) -> ResultOf_revive_injured_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::revive_injured_ped(
            ped_,
        );
        
        
        ResultOf_revive_injured_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_group_size(&self, groupID_: i32,
p1_: i32,
sizeInMembers_: i32) -> ResultOf_get_group_size {
    unsafe {
        let mut groupID_ = groupID_;
let mut p1_ = Default::default();
let mut sizeInMembers_ = Default::default();
        let success = sdk::natives::get_group_size(
            &mut p1_,
&mut sizeInMembers_,
groupID_,
        );
        let p1_ = p1_;
let sizeInMembers_ = sizeInMembers_;
        
        ResultOf_get_group_size {
            success,
            ret: (),
            p1_,
sizeInMembers_
        }
    }
}

    fn native_remove_group(&self, groupId_: i32) -> ResultOf_remove_group {
    unsafe {
        let mut groupId_ = groupId_;
        let success = sdk::natives::remove_group(
            groupId_,
        );
        
        
        ResultOf_remove_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_last_damage_bone(&self, ped_: u32) -> ResultOf_clear_ped_last_damage_bone {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_last_damage_bone(
            ped_,
        );
        
        
        ResultOf_clear_ped_last_damage_bone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_texture_variations(&self, ped_: u32,
componentId_: i32,
drawableId_: i32) -> ResultOf_get_number_of_ped_texture_variations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
        let success = sdk::natives::get_number_of_ped_texture_variations(
            &mut native_return,
ped_,
componentId_,
drawableId_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_ped_texture_variations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_blood_damage(&self, ped_: u32) -> ResultOf_clear_ped_blood_damage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_blood_damage(
            ped_,
        );
        
        
        ResultOf_clear_ped_blood_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_group(&self, unused_: i32) -> ResultOf_create_group {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::create_group(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOf_create_group {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_alternate_movement_anim(&self, ped_: u32,
stance_: i32,
animDictionary_: Option<String>,
animationName_: Option<String>,
p4_: f32,
p5_: bool) -> ResultOf_set_ped_alternate_movement_anim {
    unsafe {
        let mut ped_ = ped_;
let mut stance_ = stance_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animationName_ = sdk_helpers::create_c_string_ptr(animationName_);
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_ped_alternate_movement_anim(
            ped_,
stance_,
animDictionary_.as_ref().unwrap(),
animationName_.as_ref().unwrap(),
p4_,
p5_,
        );
        
        
        ResultOf_set_ped_alternate_movement_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_flying_vehicle(&self, ped_: u32) -> ResultOf_is_ped_in_flying_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_flying_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_flying_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_tracked_ped_visible(&self, ped_: u32) -> ResultOf_is_tracked_ped_visible {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_tracked_ped_visible(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_tracked_ped_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_stealth_mode_asset(&self, asset_: Option<String>) -> ResultOf_remove_stealth_mode_asset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::remove_stealth_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_stealth_mode_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_hated_targets_around_ped(&self, ped_: u32,
radius_: f32) -> ResultOf_register_hated_targets_around_ped {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
        let success = sdk::natives::register_hated_targets_around_ped(
            ped_,
radius_,
        );
        
        
        ResultOf_register_hated_targets_around_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_prop_index(&self, ped_: u32,
componentId_: i32,
drawableId_: i32,
TextureId_: i32,
attach_: bool,
p5_: i32) -> ResultOf_set_ped_prop_index {
    unsafe {
        let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut TextureId_ = TextureId_;
let mut attach_ = attach_;
let mut p5_ = p5_;
        let success = sdk::natives::set_ped_prop_index(
            ped_,
componentId_,
drawableId_,
TextureId_,
attach_,
p5_,
        );
        
        
        ResultOf_set_ped_prop_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_source_of_death(&self, ped_: u32) -> ResultOf_get_ped_source_of_death {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_source_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_source_of_death {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_head_blend_data(&self, ped_: u32,
shapeFirstID_: i32,
shapeSecondID_: i32,
shapeThirdID_: i32,
skinFirstID_: i32,
skinSecondID_: i32,
skinThirdID_: i32,
shapeMix_: f32,
skinMix_: f32,
thirdMix_: f32,
isParent_: bool) -> ResultOf_set_ped_head_blend_data {
    unsafe {
        let mut ped_ = ped_;
let mut shapeFirstID_ = shapeFirstID_;
let mut shapeSecondID_ = shapeSecondID_;
let mut shapeThirdID_ = shapeThirdID_;
let mut skinFirstID_ = skinFirstID_;
let mut skinSecondID_ = skinSecondID_;
let mut skinThirdID_ = skinThirdID_;
let mut shapeMix_ = shapeMix_;
let mut skinMix_ = skinMix_;
let mut thirdMix_ = thirdMix_;
let mut isParent_ = isParent_;
        let success = sdk::natives::set_ped_head_blend_data(
            ped_,
shapeFirstID_,
shapeSecondID_,
shapeThirdID_,
skinFirstID_,
skinSecondID_,
skinThirdID_,
shapeMix_,
skinMix_,
thirdMix_,
isParent_,
        );
        
        
        ResultOf_set_ped_head_blend_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_any_bike(&self, ped_: u32) -> ResultOf_is_ped_on_any_bike {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_any_bike(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_on_any_bike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_armour(&self, ped_: u32) -> ResultOf_get_ped_armour {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_armour(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_armour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_plays_head_on_horn_anim_when_dies_in_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_plays_head_on_horn_anim_when_dies_in_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_vehicle_forced_seat_usage(&self, ped_: u32,
vehicle_: u32,
seatIndex_: i32,
flags_: i32,
p4_: i32) -> ResultOf_set_ped_vehicle_forced_seat_usage {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
let mut flags_ = flags_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_vehicle_forced_seat_usage(
            ped_,
vehicle_,
seatIndex_,
flags_,
p4_,
        );
        
        
        ResultOf_set_ped_vehicle_forced_seat_usage {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_pedheadshot_transparent(&self, ped_: u32) -> ResultOf_register_pedheadshot_transparent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot_transparent(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_register_pedheadshot_transparent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOf_set_ped_density_multiplier_this_frame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ped_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOf_set_ped_density_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_ped(&self, ped_: u32) -> ResultOf_delete_ped {
    unsafe {
        let mut ped_ = Default::default();
        let success = sdk::natives::delete_ped(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOf_delete_ped {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_set_ped_shoots_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
toggle_: bool) -> ResultOf_set_ped_shoots_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_shoots_at_coord(
            ped_,
x_,
y_,
z_,
toggle_,
        );
        
        
        ResultOf_set_ped_shoots_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_unregister_pedheadshot(&self, id_: i32) -> ResultOf_unregister_pedheadshot {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::unregister_pedheadshot(
            id_,
        );
        
        
        ResultOf_unregister_pedheadshot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_keep_task(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_keep_task {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_keep_task(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_keep_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enable_weapon_blocking(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_enable_weapon_blocking {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_enable_weapon_blocking(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_enable_weapon_blocking {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_weapon_movement_clipset(&self, ped_: u32) -> ResultOf_reset_ped_weapon_movement_clipset {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_weapon_movement_clipset(
            ped_,
        );
        
        
        ResultOf_reset_ped_weapon_movement_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_name_debug(&self, ped_: u32,
name_: Option<String>) -> ResultOf_set_ped_name_debug {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_ped_name_debug(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_name_debug {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(&self, p0_: bool) -> ResultOf_set_blocking_of_non_temporary_events_for_ambient_peds_this_frame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(
            p0_,
        );
        
        
        ResultOf_set_blocking_of_non_temporary_events_for_ambient_peds_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_vehicle(&self, ped_: u32,
atGetIn_: bool) -> ResultOf_is_ped_in_any_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut atGetIn_ = atGetIn_;
        let success = sdk::natives::is_ped_in_any_vehicle(
            &mut native_return,
ped_,
atGetIn_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_being_jacked(&self, ped_: u32) -> ResultOf_is_ped_being_jacked {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_jacked(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_being_jacked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_toggle_scenario_ped_cower_in_place(&self, ped_: u32,
toggle_: bool) -> ResultOf_toggle_scenario_ped_cower_in_place {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_scenario_ped_cower_in_place(
            ped_,
toggle_,
        );
        
        
        ResultOf_toggle_scenario_ped_cower_in_place {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_ped_is_in(&self, ped_: u32,
includeEntering_: bool) -> ResultOf_get_vehicle_ped_is_in {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut includeEntering_ = includeEntering_;
        let success = sdk::natives::get_vehicle_ped_is_in(
            &mut native_return,
ped_,
includeEntering_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_ped_is_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_firing_pattern(&self, ped_: u32,
patternHash_: u32) -> ResultOf_set_ped_firing_pattern {
    unsafe {
        let mut ped_ = ped_;
let mut patternHash_ = patternHash_;
        let success = sdk::natives::set_ped_firing_pattern(
            ped_,
patternHash_,
        );
        
        
        ResultOf_set_ped_firing_pattern {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_coords_keep_vehicle(&self, ped_: u32,
posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_set_ped_coords_keep_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::set_ped_coords_keep_vehicle(
            ped_,
posX_,
posY_,
posZ_,
        );
        
        
        ResultOf_set_ped_coords_keep_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_peds_jacker(&self, ped_: u32) -> ResultOf_get_peds_jacker {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_peds_jacker(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_peds_jacker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_random_ped_as_driver(&self, vehicle_: u32,
returnHandle_: bool) -> ResultOf_create_random_ped_as_driver {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut returnHandle_ = returnHandle_;
        let success = sdk::natives::create_random_ped_as_driver(
            &mut native_return,
vehicle_,
returnHandle_,
        );
        let native_return = native_return;
        
        ResultOf_create_random_ped_as_driver {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_group_member(&self, ped_: u32,
groupId_: i32) -> ResultOf_is_ped_group_member {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut groupId_ = groupId_;
        let success = sdk::natives::is_ped_group_member(
            &mut native_return,
ped_,
groupId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_group_member {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_enveff_scale(&self, ped_: u32) -> ResultOf_get_ped_enveff_scale {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_enveff_scale(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_enveff_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_shuffle_to_or_from_turret_seat(&self, ped_: u32,
p1_: i32) -> ResultOf_can_ped_shuffle_to_or_from_turret_seat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = Default::default();
        let success = sdk::natives::can_ped_shuffle_to_or_from_turret_seat(
            &mut native_return,
&mut p1_,
ped_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_can_ped_shuffle_to_or_from_turret_seat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_clear_ped_wetness(&self, ped_: u32) -> ResultOf_clear_ped_wetness {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_wetness(
            ped_,
        );
        
        
        ResultOf_clear_ped_wetness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_peripheral_range(&self, ped_: u32,
range_: f32) -> ResultOf_set_ped_visual_field_peripheral_range {
    unsafe {
        let mut ped_ = ped_;
let mut range_ = range_;
        let success = sdk::natives::set_ped_visual_field_peripheral_range(
            ped_,
range_,
        );
        
        
        ResultOf_set_ped_visual_field_peripheral_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_sphere_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p5_: bool,
p6_: bool) -> ResultOf_set_ped_sphere_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_sphere_defensive_area(
            ped_,
x_,
y_,
z_,
radius_,
p5_,
p6_,
        );
        
        
        ResultOf_set_ped_sphere_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_helmet_stored_hat_tex_index(&self, ped_: u32) -> ResultOf_get_ped_helmet_stored_hat_tex_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_helmet_stored_hat_tex_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_helmet_stored_hat_tex_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_motion_in_cover_clipset_override(&self, ped_: u32,
p1_: Option<String>) -> ResultOf_set_ped_motion_in_cover_clipset_override {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_ped_motion_in_cover_clipset_override(
            ped_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_motion_in_cover_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_swimming(&self, ped_: u32) -> ResultOf_is_ped_swimming {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_swimming(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_swimming {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_mp_outfit_data_from_metadata(&self, p0_: i32,
p1_: i32) -> ResultOf_get_mp_outfit_data_from_metadata {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::get_mp_outfit_data_from_metadata(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_get_mp_outfit_data_from_metadata {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_get_relationship_between_groups(&self, group1_: u32,
group2_: u32) -> ResultOf_get_relationship_between_groups {
    unsafe {
        let mut native_return = Default::default();
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::get_relationship_between_groups(
            &mut native_return,
group1_,
group2_,
        );
        let native_return = native_return;
        
        ResultOf_get_relationship_between_groups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_move_anims_blend_out(&self, ped_: u32) -> ResultOf_set_ped_move_anims_blend_out {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_move_anims_blend_out(
            ped_,
        );
        
        
        ResultOf_set_ped_move_anims_blend_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_group_member(&self, ped_: u32,
groupId_: i32) -> ResultOf_set_ped_as_group_member {
    unsafe {
        let mut ped_ = ped_;
let mut groupId_ = groupId_;
        let success = sdk::natives::set_ped_as_group_member(
            ped_,
groupId_,
        );
        
        
        ResultOf_set_ped_as_group_member {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_going_into_cover(&self, ped_: u32) -> ResultOf_is_ped_going_into_cover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_going_into_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_going_into_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_attributes(&self, ped_: u32,
attributeId_: i32,
enabled_: bool) -> ResultOf_set_ped_combat_attributes {
    unsafe {
        let mut ped_ = ped_;
let mut attributeId_ = attributeId_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_ped_combat_attributes(
            ped_,
attributeId_,
enabled_,
        );
        
        
        ResultOf_set_ped_combat_attributes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blocking_of_non_temporary_events(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_blocking_of_non_temporary_events {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blocking_of_non_temporary_events(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_blocking_of_non_temporary_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_ragdoll_timer(&self, ped_: u32) -> ResultOf_reset_ped_ragdoll_timer {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_ragdoll_timer(
            ped_,
        );
        
        
        ResultOf_reset_ped_ragdoll_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_decoration_zone_from_hashes(&self, collection_: u32,
overlay_: u32) -> ResultOf_get_ped_decoration_zone_from_hashes {
    unsafe {
        let mut native_return = Default::default();
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::get_ped_decoration_zone_from_hashes(
            &mut native_return,
collection_,
overlay_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_decoration_zone_from_hashes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gravity(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_gravity {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_gravity(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_gravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pedheadshot_valid(&self, id_: i32) -> ResultOf_is_pedheadshot_valid {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pedheadshot_valid(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_is_pedheadshot_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_ped_shooting_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: bool) -> ResultOf_is_any_ped_shooting_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::is_any_ped_shooting_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_ped_shooting_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_head_blend_palette_color(&self, ped_: u32) -> ResultOf_disable_head_blend_palette_color {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_head_blend_palette_color(
            ped_,
        );
        
        
        ResultOf_disable_head_blend_palette_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_play_normal_scenario_exit(&self, ped_: u32) -> ResultOf_set_ped_should_play_normal_scenario_exit {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_should_play_normal_scenario_exit(
            ped_,
        );
        
        
        ResultOf_set_ped_should_play_normal_scenario_exit {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_vehicle(&self, ped_: u32,
vehicle_: u32,
atGetIn_: bool) -> ResultOf_is_ped_in_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut atGetIn_ = atGetIn_;
        let success = sdk::natives::is_ped_in_vehicle(
            &mut native_return,
ped_,
vehicle_,
atGetIn_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_phone_to_ped_ear(&self, ped_: u32) -> ResultOf_is_mobile_phone_to_ped_ear {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_mobile_phone_to_ped_ear(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_mobile_phone_to_ped_ear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_no_time_delay_before_shot(&self, p0_: i32) -> ResultOf_set_ped_no_time_delay_before_shot {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ped_no_time_delay_before_shot(
            p0_,
        );
        
        
        ResultOf_set_ped_no_time_delay_before_shot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_cower_hash(&self, ped_: u32,
p1_: Option<String>) -> ResultOf_set_ped_cower_hash {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_ped_cower_hash(
            ped_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_cower_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_is_search_complete(&self, ) -> ResultOf_spawnpoints_is_search_complete {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_complete(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_spawnpoints_is_search_complete {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_overlay(&self, ped_: u32,
overlayID_: i32) -> ResultOf_get_ped_head_overlay {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut overlayID_ = overlayID_;
        let success = sdk::natives::get_ped_head_overlay(
            &mut native_return,
ped_,
overlayID_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_head_overlay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_get_num_search_results(&self, ) -> ResultOf_spawnpoints_get_num_search_results {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_get_num_search_results(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_spawnpoints_get_num_search_results {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_prone(&self, p0_: i32,
p1_: bool) -> ResultOf_set_ped_cloth_prone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_prone(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_cloth_prone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_prop_texture_variations(&self, ped_: u32,
propId_: i32,
drawableId_: i32) -> ResultOf_get_number_of_ped_prop_texture_variations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut propId_ = propId_;
let mut drawableId_ = drawableId_;
        let success = sdk::natives::get_number_of_ped_prop_texture_variations(
            &mut native_return,
ped_,
propId_,
drawableId_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_ped_prop_texture_variations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_driver_aggressiveness(&self, driver_: u32,
aggressiveness_: f32) -> ResultOf_set_driver_aggressiveness {
    unsafe {
        let mut driver_ = driver_;
let mut aggressiveness_ = aggressiveness_;
        let success = sdk::natives::set_driver_aggressiveness(
            driver_,
aggressiveness_,
        );
        
        
        ResultOf_set_driver_aggressiveness {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_helmet(&self, ped_: u32,
instantly_: bool) -> ResultOf_remove_ped_helmet {
    unsafe {
        let mut ped_ = ped_;
let mut instantly_ = instantly_;
        let success = sdk::natives::remove_ped_helmet(
            ped_,
instantly_,
        );
        
        
        ResultOf_remove_ped_helmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sitting_in_vehicle(&self, ped_: u32,
vehicle_: u32) -> ResultOf_is_ped_sitting_in_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_ped_sitting_in_vehicle(
            &mut native_return,
ped_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_sitting_in_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_is_avoided_by_others(&self, p0_: i32,
p1_: bool) -> ResultOf_set_ped_is_avoided_by_others {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_is_avoided_by_others(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_is_avoided_by_others {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_money(&self, ped_: u32,
amount_: i32) -> ResultOf_set_ped_money {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::set_ped_money(
            ped_,
amount_,
        );
        
        
        ResultOf_set_ped_money {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_desired_heading(&self, ped_: u32,
heading_: f32) -> ResultOf_set_ped_desired_heading {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
        let success = sdk::natives::set_ped_desired_heading(
            ped_,
heading_,
        );
        
        
        ResultOf_set_ped_desired_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_movement_clipset(&self, ped_: u32,
p1_: f32) -> ResultOf_reset_ped_movement_clipset {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::reset_ped_movement_clipset(
            ped_,
p1_,
        );
        
        
        ResultOf_reset_ped_movement_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_secondary_tint_for_barber(&self, colorID_: i32) -> ResultOf_get_default_secondary_tint_for_barber {
    unsafe {
        let mut native_return = Default::default();
let mut colorID_ = colorID_;
        let success = sdk::natives::get_default_secondary_tint_for_barber(
            &mut native_return,
colorID_,
        );
        let native_return = native_return;
        
        ResultOf_get_default_secondary_tint_for_barber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_pinned_down(&self, ped_: u32,
pinned_: bool,
i_: i32) -> ResultOf_set_ped_pinned_down {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut pinned_ = pinned_;
let mut i_ = i_;
        let success = sdk::natives::set_ped_pinned_down(
            &mut native_return,
ped_,
pinned_,
i_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_pinned_down {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_wetness(&self, ped_: u32,
wetLevel_: f32) -> ResultOf_set_ped_wetness {
    unsafe {
        let mut ped_ = ped_;
let mut wetLevel_ = wetLevel_;
        let success = sdk::natives::set_ped_wetness(
            ped_,
wetLevel_,
        );
        
        
        ResultOf_set_ped_wetness {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_elegantly(&self, ped_: u32) -> ResultOf_remove_ped_elegantly {
    unsafe {
        let mut ped_ = Default::default();
        let success = sdk::natives::remove_ped_elegantly(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOf_remove_ped_elegantly {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_tell_group_peds_in_area_to_attack(&self, ped_: u32,
p1_: i32,
p2_: f32,
hash_: u32,
p4_: i32,
p5_: i32) -> ResultOf_tell_group_peds_in_area_to_attack {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut hash_ = hash_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::tell_group_peds_in_area_to_attack(
            ped_,
p1_,
p2_,
hash_,
p4_,
p5_,
        );
        
        
        ResultOf_tell_group_peds_in_area_to_attack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_relationship_group_default_hash(&self, ped_: u32,
hash_: u32) -> ResultOf_set_ped_relationship_group_default_hash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ped_relationship_group_default_hash(
            ped_,
hash_,
        );
        
        
        ResultOf_set_ped_relationship_group_default_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_ragdoll(&self, ped_: u32,
time1_: i32,
time2_: i32,
ragdollType_: i32,
p4_: bool,
p5_: bool,
p6_: bool) -> ResultOf_set_ped_to_ragdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut time1_ = time1_;
let mut time2_ = time2_;
let mut ragdollType_ = ragdollType_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_to_ragdoll(
            &mut native_return,
ped_,
time1_,
time2_,
ragdollType_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_to_ragdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_movement_clipset(&self, ped_: u32,
clipSet_: Option<String>,
transitionSpeed_: f32) -> ResultOf_set_ped_movement_clipset {
    unsafe {
        let mut ped_ = ped_;
let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
let mut transitionSpeed_ = transitionSpeed_;
        let success = sdk::natives::set_ped_movement_clipset(
            ped_,
clipSet_.as_ref().unwrap(),
transitionSpeed_,
        );
        
        
        ResultOf_set_ped_movement_clipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_reset_flag(&self, ped_: u32,
flagId_: i32) -> ResultOf_get_ped_reset_flag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut flagId_ = flagId_;
        let success = sdk::natives::get_ped_reset_flag(
            &mut native_return,
ped_,
flagId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_reset_flag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_upper_body_damage_only(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_upper_body_damage_only {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_upper_body_damage_only(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_upper_body_damage_only {
            success,
            ret: (),
            
        }
    }
}

    fn native_drop_ambient_prop(&self, ped_: u32) -> ResultOf_drop_ambient_prop {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::drop_ambient_prop(
            ped_,
        );
        
        
        ResultOf_drop_ambient_prop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_ragdoll(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_ragdoll {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_ragdoll(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_ragdoll {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_ped_nm_message(&self, ped_: u32) -> ResultOf_give_ped_nm_message {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::give_ped_nm_message(
            ped_,
        );
        
        
        ResultOf_give_ped_nm_message {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_driver_ability(&self, driver_: u32,
ability_: f32) -> ResultOf_set_driver_ability {
    unsafe {
        let mut driver_ = driver_;
let mut ability_ = ability_;
        let success = sdk::natives::set_driver_ability(
            driver_,
ability_,
        );
        
        
        ResultOf_set_driver_ability {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_knocked_off_bike(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_can_be_knocked_off_bike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_be_knocked_off_bike(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_can_be_knocked_off_bike {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_start_search_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
interiorFlags_: i32,
scale_: f32,
duration_: i32) -> ResultOf_spawnpoints_start_search_in_angled_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut interiorFlags_ = interiorFlags_;
let mut scale_ = scale_;
let mut duration_ = duration_;
        let success = sdk::natives::spawnpoints_start_search_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
interiorFlags_,
scale_,
duration_,
        );
        
        
        ResultOf_spawnpoints_start_search_in_angled_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_doing_driveby(&self, ped_: u32) -> ResultOf_is_ped_doing_driveby {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_doing_driveby(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_doing_driveby {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_health_pending_last_damage_event_override_flag(&self, toggle_: bool) -> ResultOf_set_ped_health_pending_last_damage_event_override_flag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_health_pending_last_damage_event_override_flag(
            toggle_,
        );
        
        
        ResultOf_set_ped_health_pending_last_damage_event_override_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_attack_friendly(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_set_can_attack_friendly {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_can_attack_friendly(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_can_attack_friendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_any_ped_model_being_suppressed(&self, ) -> ResultOf_stop_any_ped_model_being_suppressed {
    unsafe {
        
        let success = sdk::natives::stop_any_ped_model_being_suppressed(
            
        );
        
        
        ResultOf_stop_any_ped_model_being_suppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_random_ped(&self, posX_: f32,
posY_: f32,
posZ_: f32) -> ResultOf_create_random_ped {
    unsafe {
        let mut native_return = Default::default();
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
        let success = sdk::natives::create_random_ped(
            &mut native_return,
posX_,
posY_,
posZ_,
        );
        let native_return = native_return;
        
        ResultOf_create_random_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_scuba_gear_variation(&self, ped_: u32) -> ResultOf_clear_ped_scuba_gear_variation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_scuba_gear_variation(
            ped_,
        );
        
        
        ResultOf_clear_ped_scuba_gear_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_wetness_enabled_this_frame(&self, ped_: u32) -> ResultOf_set_ped_wetness_enabled_this_frame {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_wetness_enabled_this_frame(
            ped_,
        );
        
        
        ResultOf_set_ped_wetness_enabled_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_relationship_group(&self, groupHash_: u32) -> ResultOf_remove_relationship_group {
    unsafe {
        let mut groupHash_ = groupHash_;
        let success = sdk::natives::remove_relationship_group(
            groupHash_,
        );
        
        
        ResultOf_remove_relationship_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_rate(&self, sceneID_: i32,
rate_: f32) -> ResultOf_set_synchronized_scene_rate {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut rate_ = rate_;
        let success = sdk::natives::set_synchronized_scene_rate(
            sceneID_,
rate_,
        );
        
        
        ResultOf_set_synchronized_scene_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_get_search_result_flags(&self, p0_: i32,
p1_: i32) -> ResultOf_spawnpoints_get_search_result_flags {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::spawnpoints_get_search_result_flags(
            &mut p1_,
p0_,
        );
        let p1_ = p1_;
        
        ResultOf_spawnpoints_get_search_result_flags {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_is_ped_sheltered(&self, ped_: u32) -> ResultOf_is_ped_sheltered {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sheltered(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_sheltered {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_driver(&self, ) -> ResultOf_can_create_random_driver {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_driver(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_create_random_driver {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_helmet_visor_up(&self, ped_: u32) -> ResultOf_is_ped_helmet_visor_up {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_helmet_visor_up(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_helmet_visor_up {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_human(&self, ped_: u32) -> ResultOf_is_ped_human {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_human(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_human {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_defensive_area_active(&self, ped_: u32,
p1_: bool) -> ResultOf_is_ped_defensive_area_active {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_defensive_area_active(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_defensive_area_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_pos_from_fired_event(&self, ped_: u32,
eventType_: i32,
outData_: i32) -> ResultOf_get_pos_from_fired_event {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut eventType_ = eventType_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_pos_from_fired_event(
            &mut native_return,
&mut outData_,
ped_,
eventType_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_pos_from_fired_event {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_register_pedheadshot_hires(&self, ped_: u32) -> ResultOf_register_pedheadshot_hires {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot_hires(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_register_pedheadshot_hires {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_gesture_anims(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_play_gesture_anims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_gesture_anims(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_play_gesture_anims {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_cop(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_as_cop {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_as_cop(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_as_cop {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_getting_into_a_vehicle(&self, ped_: u32) -> ResultOf_is_ped_getting_into_a_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_getting_into_a_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_getting_into_a_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ped_last_vehicle(&self, ped_: u32) -> ResultOf_reset_ped_last_vehicle {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_last_vehicle(
            ped_,
        );
        
        
        ResultOf_reset_ped_last_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_fleeing(&self, ped_: u32) -> ResultOf_is_ped_fleeing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_fleeing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_fleeing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_get_out_upside_down_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_get_out_upside_down_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_get_out_upside_down_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_get_out_upside_down_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_initial_offset_position(&self, animDict_: Option<String>,
animName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
xRot_: f32,
yRot_: f32,
zRot_: f32,
p8_: f32,
p9_: i32) -> ResultOf_get_anim_initial_offset_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut xRot_ = xRot_;
let mut yRot_ = yRot_;
let mut zRot_ = zRot_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::get_anim_initial_offset_position(
            native_return.pin_mut(),
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
x_,
y_,
z_,
xRot_,
yRot_,
zRot_,
p8_,
p9_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_anim_initial_offset_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targetted_by_team(&self, ped_: u32,
team_: i32,
toggle_: bool) -> ResultOf_set_ped_can_be_targetted_by_team {
    unsafe {
        let mut ped_ = ped_;
let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted_by_team(
            ped_,
team_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_targetted_by_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_relationship_between_groups(&self, relationship_: i32,
group1_: u32,
group2_: u32) -> ResultOf_set_relationship_between_groups {
    unsafe {
        let mut relationship_ = relationship_;
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::set_relationship_between_groups(
            relationship_,
group1_,
group2_,
        );
        
        
        ResultOf_set_relationship_between_groups {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enveff_scale(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_enveff_scale {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_enveff_scale(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_enveff_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_swimming_under_water(&self, ped_: u32) -> ResultOf_is_ped_swimming_under_water {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_swimming_under_water(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_swimming_under_water {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_flag(&self, ped_: u32,
helmetFlag_: i32) -> ResultOf_set_ped_helmet_flag {
    unsafe {
        let mut ped_ = ped_;
let mut helmetFlag_ = helmetFlag_;
        let success = sdk::natives::set_ped_helmet_flag(
            ped_,
helmetFlag_,
        );
        
        
        ResultOf_set_ped_helmet_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_head_ik(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_head_ik {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_head_ik(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_head_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_weapon_firing_when_dropped(&self, ped_: u32) -> ResultOf_stop_ped_weapon_firing_when_dropped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_ped_weapon_firing_when_dropped(
            ped_,
        );
        
        
        ResultOf_stop_ped_weapon_firing_when_dropped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_dragged_out(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_dragged_out {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_dragged_out(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_dragged_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_reset_flag(&self, ped_: u32,
flagId_: i32,
doReset_: bool) -> ResultOf_set_ped_reset_flag {
    unsafe {
        let mut ped_ = ped_;
let mut flagId_ = flagId_;
let mut doReset_ = doReset_;
        let success = sdk::natives::set_ped_reset_flag(
            ped_,
flagId_,
doReset_,
        );
        
        
        ResultOf_set_ped_reset_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_heatscale_override(&self, ped_: u32,
heatScale_: f32) -> ResultOf_set_ped_heatscale_override {
    unsafe {
        let mut ped_ = ped_;
let mut heatScale_ = heatScale_;
        let success = sdk::natives::set_ped_heatscale_override(
            ped_,
heatScale_,
        );
        
        
        ResultOf_set_ped_heatscale_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_idle_animation_on_ped(&self, ped_: u32) -> ResultOf_trigger_idle_animation_on_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::trigger_idle_animation_on_ped(
            ped_,
        );
        
        
        ResultOf_trigger_idle_animation_on_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_gesturing(&self, p0_: i32) -> ResultOf_is_ped_gesturing {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_gesturing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_gesturing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ik_target(&self, ped_: u32,
ikIndex_: i32,
entityLookAt_: u32,
boneLookAt_: i32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
p7_: i32,
blendInDuration_: i32,
blendOutDuration_: i32) -> ResultOf_set_ik_target {
    unsafe {
        let mut ped_ = ped_;
let mut ikIndex_ = ikIndex_;
let mut entityLookAt_ = entityLookAt_;
let mut boneLookAt_ = boneLookAt_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut p7_ = p7_;
let mut blendInDuration_ = blendInDuration_;
let mut blendOutDuration_ = blendOutDuration_;
        let success = sdk::natives::set_ik_target(
            ped_,
ikIndex_,
entityLookAt_,
boneLookAt_,
offsetX_,
offsetY_,
offsetZ_,
p7_,
blendInDuration_,
blendOutDuration_,
        );
        
        
        ResultOf_set_ik_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_ped(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
outPed_: u32,
p7_: bool,
p8_: bool,
pedType_: i32) -> ResultOf_get_closest_ped {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut outPed_ = Default::default();
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut pedType_ = pedType_;
        let success = sdk::natives::get_closest_ped(
            &mut native_return,
&mut outPed_,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p7_,
p8_,
pedType_,
        );
        let native_return = native_return;
let outPed_ = outPed_;
        
        ResultOf_get_closest_ped {
            success,
            ret: native_return,
            outPed_
        }
    }
}

    fn native_set_ped_leg_ik_mode(&self, ped_: u32,
mode_: i32) -> ResultOf_set_ped_leg_ik_mode {
    unsafe {
        let mut ped_ = ped_;
let mut mode_ = mode_;
        let success = sdk::natives::set_ped_leg_ik_mode(
            ped_,
mode_,
        );
        
        
        ResultOf_set_ped_leg_ik_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_random_props(&self, ped_: u32) -> ResultOf_set_ped_random_props {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_random_props(
            ped_,
        );
        
        
        ResultOf_set_ped_random_props {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_peek_in_cover(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_peek_in_cover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_peek_in_cover(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_peek_in_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_enable_bound_ankles(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_enable_bound_ankles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_bound_ankles(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_enable_bound_ankles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tint_index_for_last_gen_hair_texture(&self, modelHash_: u32,
drawableId_: i32,
textureId_: i32) -> ResultOf_get_tint_index_for_last_gen_hair_texture {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
        let success = sdk::natives::get_tint_index_for_last_gen_hair_texture(
            &mut native_return,
modelHash_,
drawableId_,
textureId_,
        );
        let native_return = native_return;
        
        ResultOf_get_tint_index_for_last_gen_hair_texture {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_planting_bomb(&self, ped_: u32) -> ResultOf_is_ped_planting_bomb {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_planting_bomb(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_planting_bomb {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_ability(&self, ped_: u32,
abilityLevel_: i32) -> ResultOf_set_ped_combat_ability {
    unsafe {
        let mut ped_ = ped_;
let mut abilityLevel_ = abilityLevel_;
        let success = sdk::natives::set_ped_combat_ability(
            ped_,
abilityLevel_,
        );
        
        
        ResultOf_set_ped_combat_ability {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_motion_in_cover_clipset_override(&self, ped_: u32) -> ResultOf_clear_ped_motion_in_cover_clipset_override {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_motion_in_cover_clipset_override(
            ped_,
        );
        
        
        ResultOf_clear_ped_motion_in_cover_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_shot_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_be_shot_in_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_shot_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_be_shot_in_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_angled_defensive_area(&self, ped_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: bool,
p9_: bool) -> ResultOf_set_ped_angled_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::set_ped_angled_defensive_area(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_set_ped_angled_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_relationship_group_hash(&self, ped_: u32,
hash_: u32) -> ResultOf_set_ped_relationship_group_hash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ped_relationship_group_hash(
            ped_,
hash_,
        );
        
        
        ResultOf_set_ped_relationship_group_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_random_component_variation(&self, ped_: u32,
p1_: i32) -> ResultOf_set_ped_random_component_variation {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_random_component_variation(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_random_component_variation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_model(&self, ped_: u32,
modelHash_: u32) -> ResultOf_is_ped_model {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::is_ped_model(
            &mut native_return,
ped_,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_cower_in_cover(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_cower_in_cover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_cower_in_cover(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_cower_in_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_step_type(&self, ped_: u32,
p1_: bool,
type_: i32,
p3_: i32) -> ResultOf_set_force_step_type {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut type_ = type_;
let mut p3_ = p3_;
        let success = sdk::natives::set_force_step_type(
            ped_,
p1_,
type_,
p3_,
        );
        
        
        ResultOf_set_force_step_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_relationship_group_exist(&self, groupHash_: u32) -> ResultOf_does_relationship_group_exist {
    unsafe {
        let mut native_return = Default::default();
let mut groupHash_ = groupHash_;
        let success = sdk::natives::does_relationship_group_exist(
            &mut native_return,
groupHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_relationship_group_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_head_blend_palette_color(&self, ped_: u32,
r_: i32,
g_: i32,
b_: i32,
id_: i32) -> ResultOf_set_head_blend_palette_color {
    unsafe {
        let mut ped_ = ped_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut id_ = id_;
        let success = sdk::natives::set_head_blend_palette_color(
            ped_,
r_,
g_,
b_,
id_,
        );
        
        
        ResultOf_set_head_blend_palette_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_restricted_vehicle_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOf_request_ped_restricted_vehicle_visibility_tracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_restricted_vehicle_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOf_request_ped_restricted_vehicle_visibility_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_primary_lookat(&self, ped_: u32,
lookAt_: u32) -> ResultOf_set_ped_primary_lookat {
    unsafe {
        let mut ped_ = ped_;
let mut lookAt_ = lookAt_;
        let success = sdk::natives::set_ped_primary_lookat(
            ped_,
lookAt_,
        );
        
        
        ResultOf_set_ped_primary_lookat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_dead_ped_pickup_coords(&self, ped_: u32,
p1_: f32,
p2_: f32) -> ResultOf_get_dead_ped_pickup_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_dead_ped_pickup_coords(
            native_return.pin_mut(),
ped_,
p1_,
p2_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_dead_ped_pickup_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_ped_props(&self, ped_: u32,
p1_: i32) -> ResultOf_clear_all_ped_props {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_all_ped_props(
            ped_,
p1_,
        );
        
        
        ResultOf_clear_all_ped_props {
            success,
            ret: (),
            
        }
    }
}

    fn native_take_ownership_of_synchronized_scene(&self, scene_: i32) -> ResultOf_take_ownership_of_synchronized_scene {
    unsafe {
        let mut scene_ = scene_;
        let success = sdk::natives::take_ownership_of_synchronized_scene(
            scene_,
        );
        
        
        ResultOf_take_ownership_of_synchronized_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_formation(&self, groupId_: i32,
formationType_: i32) -> ResultOf_set_group_formation {
    unsafe {
        let mut groupId_ = groupId_;
let mut formationType_ = formationType_;
        let success = sdk::natives::set_group_formation(
            groupId_,
formationType_,
        );
        
        
        ResultOf_set_group_formation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_armour(&self, ped_: u32,
amount_: i32) -> ResultOf_set_ped_armour {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::set_ped_armour(
            ped_,
amount_,
        );
        
        
        ResultOf_set_ped_armour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_probe_for_scenario_exits_in_one_frame(&self, p0_: i32,
p1_: bool) -> ResultOf_set_ped_should_probe_for_scenario_exits_in_one_frame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_probe_for_scenario_exits_in_one_frame(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_should_probe_for_scenario_exits_in_one_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jumping(&self, ped_: u32) -> ResultOf_is_ped_jumping {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jumping(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_jumping {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_overlay_num(&self, overlayID_: i32) -> ResultOf_get_ped_head_overlay_num {
    unsafe {
        let mut native_return = Default::default();
let mut overlayID_ = overlayID_;
        let success = sdk::natives::get_ped_head_overlay_num(
            &mut native_return,
overlayID_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_head_overlay_num {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_nearby_vehicles(&self, ped_: u32,
sizeAndVehs_: i32) -> ResultOf_get_ped_nearby_vehicles {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut sizeAndVehs_ = Default::default();
        let success = sdk::natives::get_ped_nearby_vehicles(
            &mut native_return,
&mut sizeAndVehs_,
ped_,
        );
        let native_return = native_return;
let sizeAndVehs_ = sizeAndVehs_;
        
        ResultOf_get_ped_nearby_vehicles {
            success,
            ret: native_return,
            sizeAndVehs_
        }
    }
}

    fn native_is_ped_ducking(&self, ped_: u32) -> ResultOf_is_ped_ducking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ducking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_ducking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_running_melee_task(&self, ped_: u32) -> ResultOf_is_ped_running_melee_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_melee_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_running_melee_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_ped_makeup_tints(&self, ) -> ResultOf_get_num_ped_makeup_tints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_ped_makeup_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_ped_makeup_tints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_ped_enveff_scale(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_enable_ped_enveff_scale {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_ped_enveff_scale(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_enable_ped_enveff_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_zero_mass_in_collisions(&self, ped_: u32) -> ResultOf_force_zero_mass_in_collisions {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_zero_mass_in_collisions(
            ped_,
        );
        
        
        ResultOf_force_zero_mass_in_collisions {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scenario_blocking_areas(&self, ) -> ResultOf_remove_scenario_blocking_areas {
    unsafe {
        
        let success = sdk::natives::remove_scenario_blocking_areas(
            
        );
        
        
        ResultOf_remove_scenario_blocking_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_ped(&self, pedType_: i32,
modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
isNetwork_: bool,
bScriptHostPed_: bool) -> ResultOf_create_ped {
    unsafe {
        let mut native_return = Default::default();
let mut pedType_ = pedType_;
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostPed_ = bScriptHostPed_;
        let success = sdk::natives::create_ped(
            &mut native_return,
pedType_,
modelHash_,
x_,
y_,
z_,
heading_,
isNetwork_,
bScriptHostPed_,
        );
        let native_return = native_return;
        
        ResultOf_create_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_enveff_color_modulator(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_ped_enveff_color_modulator {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_enveff_color_modulator(
            ped_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_ped_enveff_color_modulator {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_prone(&self, ped_: u32) -> ResultOf_is_ped_prone {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_prone(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_prone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_facing_ped(&self, ped_: u32,
otherPed_: u32,
angle_: f32) -> ResultOf_is_ped_facing_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut otherPed_ = otherPed_;
let mut angle_ = angle_;
        let success = sdk::natives::is_ped_facing_ped(
            &mut native_return,
ped_,
otherPed_,
angle_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_facing_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_dies_in_sinking_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_dies_in_sinking_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_sinking_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_dies_in_sinking_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_last_damage_bone(&self, ped_: u32,
outBone_: i32) -> ResultOf_get_ped_last_damage_bone {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut outBone_ = Default::default();
        let success = sdk::natives::get_ped_last_damage_bone(
            &mut native_return,
&mut outBone_,
ped_,
        );
        let native_return = native_return;
let outBone_ = outBone_;
        
        ResultOf_get_ped_last_damage_bone {
            success,
            ret: native_return,
            outBone_
        }
    }
}

    fn native_set_ped_using_action_mode(&self, ped_: u32,
p1_: bool,
p2_: i32,
action_: Option<String>) -> ResultOf_set_ped_using_action_mode {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut action_ = sdk_helpers::create_c_string_ptr(action_);
        let success = sdk::natives::set_ped_using_action_mode(
            ped_,
p1_,
p2_,
action_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_using_action_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_ragdoll_with_fall(&self, ped_: u32,
time_: i32,
p2_: i32,
ragdollType_: i32,
x_: f32,
y_: f32,
z_: f32,
velocity_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32,
p13_: f32) -> ResultOf_set_ped_to_ragdoll_with_fall {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut ragdollType_ = ragdollType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut velocity_ = velocity_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::set_ped_to_ragdoll_with_fall(
            &mut native_return,
ped_,
time_,
p2_,
ragdollType_,
x_,
y_,
z_,
velocity_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_to_ragdoll_with_fall {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_synchronized_scene_rate(&self, sceneID_: i32) -> ResultOf_get_synchronized_scene_rate {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::get_synchronized_scene_rate(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_get_synchronized_scene_rate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_fatally_injured(&self, ped_: u32) -> ResultOf_is_ped_fatally_injured {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_fatally_injured(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_fatally_injured {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ragdoll_blocking_flags(&self, ped_: u32,
blockingFlag_: i32) -> ResultOf_clear_ragdoll_blocking_flags {
    unsafe {
        let mut ped_ = ped_;
let mut blockingFlag_ = blockingFlag_;
        let success = sdk::natives::clear_ragdoll_blocking_flags(
            ped_,
blockingFlag_,
        );
        
        
        ResultOf_clear_ragdoll_blocking_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pop_control_sphere_this_frame(&self, x_: f32,
y_: f32,
z_: f32,
min_: f32,
max_: f32) -> ResultOf_set_pop_control_sphere_this_frame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut min_ = min_;
let mut max_ = max_;
        let success = sdk::natives::set_pop_control_sphere_this_frame(
            x_,
y_,
z_,
min_,
max_,
        );
        
        
        ResultOf_set_pop_control_sphere_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_alternate_movement_anim(&self, ped_: u32,
stance_: i32,
p2_: f32) -> ResultOf_clear_ped_alternate_movement_anim {
    unsafe {
        let mut ped_ = ped_;
let mut stance_ = stance_;
let mut p2_ = p2_;
        let success = sdk::natives::clear_ped_alternate_movement_anim(
            ped_,
stance_,
p2_,
        );
        
        
        ResultOf_clear_ped_alternate_movement_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_looped(&self, sceneID_: i32,
toggle_: bool) -> ResultOf_set_synchronized_scene_looped {
    unsafe {
        let mut sceneID_ = sceneID_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_synchronized_scene_looped(
            sceneID_,
toggle_,
        );
        
        
        ResultOf_set_synchronized_scene_looped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allowed_to_duck(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_allowed_to_duck {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allowed_to_duck(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_allowed_to_duck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pedheadshot_txd_string(&self, id_: i32) -> ResultOf_get_pedheadshot_txd_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut id_ = id_;
        let success = sdk::natives::get_pedheadshot_txd_string(
            native_return.pin_mut(),
id_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_pedheadshot_txd_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_alertness(&self, ped_: u32,
value_: i32) -> ResultOf_set_ped_alertness {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_alertness(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_alertness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_lod_multiplier(&self, ped_: u32,
multiplier_: f32) -> ResultOf_set_ped_lod_multiplier {
    unsafe {
        let mut ped_ = ped_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ped_lod_multiplier(
            ped_,
multiplier_,
        );
        
        
        ResultOf_set_ped_lod_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_performing_melee_action(&self, ped_: u32) -> ResultOf_is_ped_performing_melee_action {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_melee_action(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_performing_melee_action {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gesture_group(&self, ped_: u32,
animGroupGesture_: Option<String>) -> ResultOf_set_ped_gesture_group {
    unsafe {
        let mut ped_ = ped_;
let mut animGroupGesture_ = sdk_helpers::create_c_string_ptr(animGroupGesture_);
        let success = sdk::natives::set_ped_gesture_group(
            ped_,
animGroupGesture_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_gesture_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_combat_movement(&self, ped_: u32) -> ResultOf_get_ped_combat_movement {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_combat_movement(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_combat_movement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_driver_racing_modifier(&self, driver_: u32,
modifier_: f32) -> ResultOf_set_driver_racing_modifier {
    unsafe {
        let mut driver_ = driver_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_driver_racing_modifier(
            driver_,
modifier_,
        );
        
        
        ResultOf_set_driver_racing_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_enable_handcuffs(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_enable_handcuffs {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_handcuffs(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_enable_handcuffs {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_ragdoll_from_player_impact(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_ragdoll_from_player_impact {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_ragdoll_from_player_impact(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_ragdoll_from_player_impact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ped_map_collision(&self, ped_: u32) -> ResultOf_set_disable_ped_map_collision {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_disable_ped_map_collision(
            ped_,
        );
        
        
        ResultOf_set_disable_ped_map_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_conversation_ped_dead(&self, ped_: u32) -> ResultOf_is_conversation_ped_dead {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_conversation_ped_dead(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_conversation_ped_dead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_extracted_displacement(&self, ped_: u32,
worldSpace_: bool) -> ResultOf_get_ped_extracted_displacement {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut worldSpace_ = worldSpace_;
        let success = sdk::natives::get_ped_extracted_displacement(
            native_return.pin_mut(),
ped_,
worldSpace_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_ped_extracted_displacement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_hair_tint_for_barber(&self, colorID_: i32) -> ResultOf_is_ped_hair_tint_for_barber {
    unsafe {
        let mut native_return = Default::default();
let mut colorID_ = colorID_;
        let success = sdk::natives::is_ped_hair_tint_for_barber(
            &mut native_return,
colorID_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_hair_tint_for_barber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_prop_texture_index(&self, ped_: u32,
componentId_: i32) -> ResultOf_get_ped_prop_texture_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
        let success = sdk::natives::get_ped_prop_texture_index(
            &mut native_return,
ped_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_prop_texture_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_model_is_suppressed(&self, modelHash_: u32,
toggle_: bool) -> ResultOf_set_ped_model_is_suppressed {
    unsafe {
        let mut modelHash_ = modelHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_model_is_suppressed(
            modelHash_,
toggle_,
        );
        
        
        ResultOf_set_ped_model_is_suppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_facial_anim(&self, ped_: u32,
animName_: Option<String>,
animDict_: Option<String>) -> ResultOf_play_facial_anim {
    unsafe {
        let mut ped_ = ped_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::play_facial_anim(
            ped_,
animName_.as_ref().unwrap(),
animDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_facial_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_decorations_leave_scars(&self, ped_: u32) -> ResultOf_clear_ped_decorations_leave_scars {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_decorations_leave_scars(
            ped_,
        );
        
        
        ResultOf_clear_ped_decorations_leave_scars {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running_ragdoll_task(&self, ped_: u32) -> ResultOf_is_ped_running_ragdoll_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_ragdoll_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_running_ragdoll_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_palette_variation(&self, ped_: u32,
componentId_: i32) -> ResultOf_get_ped_palette_variation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
        let success = sdk::natives::get_ped_palette_variation(
            &mut native_return,
ped_,
componentId_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_palette_variation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_ped_from_generating_dead_body_events_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOf_block_ped_from_generating_dead_body_events_when_dead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::block_ped_from_generating_dead_body_events_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOf_block_ped_from_generating_dead_body_events_when_dead {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_sphere_attached_to_vehicle(&self, ped_: u32,
target_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
radius_: f32,
p6_: bool) -> ResultOf_set_ped_defensive_sphere_attached_to_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut radius_ = radius_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_defensive_sphere_attached_to_vehicle(
            ped_,
target_,
xOffset_,
yOffset_,
zOffset_,
radius_,
p6_,
        );
        
        
        ResultOf_set_ped_defensive_sphere_attached_to_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_synchronized_scene_phase(&self, sceneID_: i32) -> ResultOf_get_synchronized_scene_phase {
    unsafe {
        let mut native_return = Default::default();
let mut sceneID_ = sceneID_;
        let success = sdk::natives::get_synchronized_scene_phase(
            &mut native_return,
sceneID_,
        );
        let native_return = native_return;
        
        ResultOf_get_synchronized_scene_phase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_action_mode_asset_loaded(&self, asset_: Option<String>) -> ResultOf_has_action_mode_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::has_action_mode_asset_loaded(
            &mut native_return,
asset_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_action_mode_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_ped_hair_tints(&self, ) -> ResultOf_get_num_ped_hair_tints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_ped_hair_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_ped_hair_tints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_ped_vehicle_forced_seat_usage(&self, ped_: u32) -> ResultOf_clear_all_ped_vehicle_forced_seat_usage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_all_ped_vehicle_forced_seat_usage(
            ped_,
        );
        
        
        ResultOf_clear_all_ped_vehicle_forced_seat_usage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mount(&self, ped_: u32) -> ResultOf_get_mount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_mount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_mount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_component_variation_valid(&self, ped_: u32,
componentId_: i32,
drawableId_: i32,
textureId_: i32) -> ResultOf_is_ped_component_variation_valid {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut componentId_ = componentId_;
let mut drawableId_ = drawableId_;
let mut textureId_ = textureId_;
        let success = sdk::natives::is_ped_component_variation_valid(
            &mut native_return,
ped_,
componentId_,
drawableId_,
textureId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_component_variation_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_lose_props_on_damage(&self, ped_: u32,
toggle_: bool,
p2_: i32) -> ResultOf_set_ped_can_lose_props_on_damage {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_lose_props_on_damage(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_ped_can_lose_props_on_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_reserve_parachute_tint_index(&self, ped_: u32,
p1_: i32) -> ResultOf_set_ped_reserve_parachute_tint_index {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_reserve_parachute_tint_index(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_reserve_parachute_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pedheadshot_img_upload_succeeded(&self, ) -> ResultOf_has_pedheadshot_img_upload_succeeded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_pedheadshot_img_upload_succeeded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_pedheadshot_img_upload_succeeded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_enable_crew_emblem(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_enable_crew_emblem {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_enable_crew_emblem(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_enable_crew_emblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_clone_ped_to_target(&self, ped_: u32,
targetPed_: u32) -> ResultOf_clone_ped_to_target {
    unsafe {
        let mut ped_ = ped_;
let mut targetPed_ = targetPed_;
        let success = sdk::natives::clone_ped_to_target(
            ped_,
targetPed_,
        );
        
        
        ResultOf_clone_ped_to_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_stealth_mode_asset_loaded(&self, asset_: Option<String>) -> ResultOf_has_stealth_mode_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::has_stealth_mode_asset_loaded(
            &mut native_return,
asset_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_stealth_mode_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ai_weapon_damage_modifier(&self, ) -> ResultOf_reset_ai_weapon_damage_modifier {
    unsafe {
        
        let success = sdk::natives::reset_ai_weapon_damage_modifier(
            
        );
        
        
        ResultOf_reset_ai_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_secondary_tint_for_creator(&self, colorId_: i32) -> ResultOf_get_default_secondary_tint_for_creator {
    unsafe {
        let mut native_return = Default::default();
let mut colorId_ = colorId_;
        let success = sdk::natives::get_default_secondary_tint_for_creator(
            &mut native_return,
colorId_,
        );
        let native_return = native_return;
        
        ResultOf_get_default_secondary_tint_for_creator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_bike_rider(&self, ) -> ResultOf_can_create_random_bike_rider {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_bike_rider(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_can_create_random_bike_rider {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_in_combat_see_target(&self, ped_: u32,
target_: u32) -> ResultOf_can_ped_in_combat_see_target {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::can_ped_in_combat_see_target(
            &mut native_return,
ped_,
target_,
        );
        let native_return = native_return;
        
        ResultOf_can_ped_in_combat_see_target {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_parachute_tint_index(&self, ped_: u32,
outTintIndex_: i32) -> ResultOf_get_ped_parachute_tint_index {
    unsafe {
        let mut ped_ = ped_;
let mut outTintIndex_ = Default::default();
        let success = sdk::natives::get_ped_parachute_tint_index(
            &mut outTintIndex_,
ped_,
        );
        let outTintIndex_ = outTintIndex_;
        
        ResultOf_get_ped_parachute_tint_index {
            success,
            ret: (),
            outTintIndex_
        }
    }
}

    fn native_set_ped_steers_around_vehicles(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_steers_around_vehicles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_vehicles(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_steers_around_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_relationship_between_peds(&self, ped1_: u32,
ped2_: u32) -> ResultOf_get_relationship_between_peds {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::get_relationship_between_peds(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOf_get_relationship_between_peds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pedheadshot_img_upload_available(&self, ) -> ResultOf_is_pedheadshot_img_upload_available {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pedheadshot_img_upload_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_pedheadshot_img_upload_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_performing_a_counter_attack(&self, ped_: u32) -> ResultOf_is_ped_performing_a_counter_attack {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_a_counter_attack(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_performing_a_counter_attack {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_suffers_critical_hits(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_suffers_critical_hits {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_suffers_critical_hits(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_suffers_critical_hits {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_use_auto_conversation_lookat(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_use_auto_conversation_lookat {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_use_auto_conversation_lookat(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_use_auto_conversation_lookat {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_injured_on_ground_behaviour(&self, ped_: u32,
p1_: f32) -> ResultOf_set_ped_injured_on_ground_behaviour {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_injured_on_ground_behaviour(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_injured_on_ground_behaviour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_specific_vehicle(&self, ped_: u32,
vehicle_: u32) -> ResultOf_is_ped_on_specific_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_ped_on_specific_vehicle(
            &mut native_return,
ped_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_on_specific_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_should_play_directed_normal_scenario_exit(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_ped_should_play_directed_normal_scenario_exit {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_should_play_directed_normal_scenario_exit(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_should_play_directed_normal_scenario_exit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_drive_by_clipset_override(&self, ped_: u32,
clipset_: Option<String>) -> ResultOf_set_ped_drive_by_clipset_override {
    unsafe {
        let mut ped_ = ped_;
let mut clipset_ = sdk_helpers::create_c_string_ptr(clipset_);
        let success = sdk::natives::set_ped_drive_by_clipset_override(
            ped_,
clipset_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_ped_drive_by_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_instant_leg_ik_setup(&self, ped_: u32) -> ResultOf_force_instant_leg_ik_setup {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_instant_leg_ik_setup(
            ped_,
        );
        
        
        ResultOf_force_instant_leg_ik_setup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_hair_tint_for_creator(&self, colorId_: i32) -> ResultOf_is_ped_hair_tint_for_creator {
    unsafe {
        let mut native_return = Default::default();
let mut colorId_ = colorId_;
        let success = sdk::natives::is_ped_hair_tint_for_creator(
            &mut native_return,
colorId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_hair_tint_for_creator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ped_from_group(&self, ped_: u32) -> ResultOf_remove_ped_from_group {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_ped_from_group(
            ped_,
        );
        
        
        ResultOf_remove_ped_from_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_switch_weapon(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_switch_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_switch_weapon(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_switch_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stay_in_vehicle_when_jacked(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_stay_in_vehicle_when_jacked {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_stay_in_vehicle_when_jacked(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_stay_in_vehicle_when_jacked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_non_creation_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_set_ped_non_creation_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::set_ped_non_creation_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        
        
        ResultOf_set_ped_non_creation_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_mp_light(&self, ped_: u32,
toggle_: bool) -> ResultOf_enable_mp_light {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_mp_light(
            ped_,
toggle_,
        );
        
        
        ResultOf_enable_mp_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_instantly_in_water(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_dies_instantly_in_water {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_instantly_in_water(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_dies_instantly_in_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_play_flee_scenario_exit(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_ped_should_play_flee_scenario_exit {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_should_play_flee_scenario_exit(
            &mut native_return,
ped_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_should_play_flee_scenario_exit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_specific(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32,
p7_: f32,
p8_: Option<String>) -> ResultOf_apply_ped_blood_specific {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
        let success = sdk::natives::apply_ped_blood_specific(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_.as_ref().unwrap(),
        );
        
        
        ResultOf_apply_ped_blood_specific {
            success,
            ret: (),
            
        }
    }
}

    fn native_clone_ped(&self, ped_: u32,
isNetwork_: bool,
bScriptHostPed_: bool,
copyHeadBlendFlag_: bool) -> ResultOf_clone_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostPed_ = bScriptHostPed_;
let mut copyHeadBlendFlag_ = copyHeadBlendFlag_;
        let success = sdk::natives::clone_ped(
            &mut native_return,
ped_,
isNetwork_,
bScriptHostPed_,
copyHeadBlendFlag_,
        );
        let native_return = native_return;
        
        ResultOf_clone_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_visual_field_center_angle(&self, ped_: u32) -> ResultOf_get_ped_visual_field_center_angle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_visual_field_center_angle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_visual_field_center_angle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_fm_female_shop_ped_apparel_item_index(&self, p0_: i32) -> ResultOf_get_fm_female_shop_ped_apparel_item_index {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_fm_female_shop_ped_apparel_item_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_fm_female_shop_ped_apparel_item_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ragdoll_on_collision(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_ragdoll_on_collision {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ragdoll_on_collision(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_ragdoll_on_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_pedheadshot_img_upload(&self, id_: i32) -> ResultOf_request_pedheadshot_img_upload {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::request_pedheadshot_img_upload(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_request_pedheadshot_img_upload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_id_range(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_id_range {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_id_range(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_id_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_helmet_texture_index(&self, ped_: u32,
textureIndex_: i32) -> ResultOf_set_ped_helmet_texture_index {
    unsafe {
        let mut ped_ = ped_;
let mut textureIndex_ = textureIndex_;
        let success = sdk::natives::set_ped_helmet_texture_index(
            ped_,
textureIndex_,
        );
        
        
        ResultOf_set_ped_helmet_texture_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_group_index(&self, ped_: u32) -> ResultOf_get_ped_group_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_group_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_group_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_should_play_immediate_scenario_exit(&self, ped_: u32) -> ResultOf_set_ped_should_play_immediate_scenario_exit {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_should_play_immediate_scenario_exit(
            ped_,
        );
        
        
        ResultOf_set_ped_should_play_immediate_scenario_exit {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_current_head_prop_a_helmet(&self, p0_: i32) -> ResultOf_is_current_head_prop_a_helmet {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_current_head_prop_a_helmet(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_current_head_prop_a_helmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_motion_state(&self, ped_: u32,
motionStateHash_: u32,
p2_: bool,
p3_: i32,
p4_: bool) -> ResultOf_force_ped_motion_state {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut motionStateHash_ = motionStateHash_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::force_ped_motion_state(
            &mut native_return,
ped_,
motionStateHash_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_force_ped_motion_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_seeing_range(&self, ped_: u32,
value_: f32) -> ResultOf_set_ped_seeing_range {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_seeing_range(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_seeing_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_torso_ik(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_can_torso_ik {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_torso_ik(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_can_torso_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_hurt_combat_for_all_mission_peds(&self, toggle_: bool) -> ResultOf_set_ped_allow_hurt_combat_for_all_mission_peds {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_hurt_combat_for_all_mission_peds(
            toggle_,
        );
        
        
        ResultOf_set_ped_allow_hurt_combat_for_all_mission_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_wearing_helmet(&self, ped_: u32) -> ResultOf_is_ped_wearing_helmet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_wearing_helmet(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_wearing_helmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_relationship_group(&self, name_: Option<String>,
groupHash_: u32) -> ResultOf_add_relationship_group {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut groupHash_ = Default::default();
        let success = sdk::natives::add_relationship_group(
            &mut native_return,
&mut groupHash_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let groupHash_ = groupHash_;
        
        ResultOf_add_relationship_group {
            success,
            ret: native_return,
            groupHash_
        }
    }
}

    fn native_is_ped_blush_tint_for_creator(&self, colorId_: i32) -> ResultOf_is_ped_blush_tint_for_creator {
    unsafe {
        let mut native_return = Default::default();
let mut colorId_ = colorId_;
        let success = sdk::natives::is_ped_blush_tint_for_creator(
            &mut native_return,
colorId_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_blush_tint_for_creator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_is_search_failed(&self, ) -> ResultOf_spawnpoints_is_search_failed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_failed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_spawnpoints_is_search_failed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_torso_react_ik(&self, ped_: u32,
p1_: bool) -> ResultOf_set_ped_can_torso_react_ik {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_torso_react_ik(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_can_torso_react_ik {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_health(&self, ped_: u32,
value_: i32) -> ResultOf_set_ped_max_health {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_health(
            ped_,
value_,
        );
        
        
        ResultOf_set_ped_max_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_current_move_blend_ratio(&self, ped_: u32,
speedX_: f32,
speedY_: f32) -> ResultOf_get_ped_current_move_blend_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut speedX_ = Default::default();
let mut speedY_ = Default::default();
        let success = sdk::natives::get_ped_current_move_blend_ratio(
            &mut native_return,
&mut speedX_,
&mut speedY_,
ped_,
        );
        let native_return = native_return;
let speedX_ = speedX_;
let speedY_ = speedY_;
        
        ResultOf_get_ped_current_move_blend_ratio {
            success,
            ret: native_return,
            speedX_,
speedY_
        }
    }
}

    fn native_get_ped_alertness(&self, ped_: u32) -> ResultOf_get_ped_alertness {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_alertness(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_alertness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_into_vehicle(&self, ped_: u32,
vehicle_: u32,
seatIndex_: i32) -> ResultOf_set_ped_into_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::set_ped_into_vehicle(
            ped_,
vehicle_,
seatIndex_,
        );
        
        
        ResultOf_set_ped_into_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ped_preload_prop_data(&self, ped_: u32) -> ResultOf_release_ped_preload_prop_data {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::release_ped_preload_prop_data(
            ped_,
        );
        
        
        ResultOf_release_ped_preload_prop_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_viseme_anims(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_set_ped_can_play_viseme_anims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_play_viseme_anims(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_ped_can_play_viseme_anims {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_ped_is_entering(&self, ped_: u32) -> ResultOf_get_vehicle_ped_is_entering {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_entering(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_ped_is_entering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_killed_by_stealth(&self, ped_: u32) -> ResultOf_was_ped_killed_by_stealth {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_killed_by_stealth(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_was_ped_killed_by_stealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_scuba(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_enable_scuba {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_scuba(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_enable_scuba {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_function_do_not_use(&self, ped_: u32,
p1_: bool) -> ResultOf_special_function_do_not_use {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::special_function_do_not_use(
            ped_,
p1_,
        );
        
        
        ResultOf_special_function_do_not_use {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_sphere_attached_to_ped(&self, ped_: u32,
target_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
radius_: f32,
p6_: bool) -> ResultOf_set_ped_defensive_sphere_attached_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut radius_ = radius_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_defensive_sphere_attached_to_ped(
            ped_,
target_,
xOffset_,
yOffset_,
zOffset_,
radius_,
p6_,
        );
        
        
        ResultOf_set_ped_defensive_sphere_attached_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_combat_range(&self, ped_: u32) -> ResultOf_get_ped_combat_range {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_combat_range(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_combat_range {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_min_ground_time_for_stungun(&self, ped_: u32,
ms_: i32) -> ResultOf_set_ped_min_ground_time_for_stungun {
    unsafe {
        let mut ped_ = ped_;
let mut ms_ = ms_;
        let success = sdk::natives::set_ped_min_ground_time_for_stungun(
            ped_,
ms_,
        );
        
        
        ResultOf_set_ped_min_ground_time_for_stungun {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_stunt_jump_camera(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_allow_stunt_jump_camera {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_stunt_jump_camera(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_allow_stunt_jump_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_falling(&self, ped_: u32) -> ResultOf_is_ped_falling {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_falling(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_falling {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_sub(&self, ped_: u32) -> ResultOf_is_ped_in_any_sub {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_sub(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_any_sub {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_heading_towards_position(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: f32) -> ResultOf_is_ped_heading_towards_position {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::is_ped_heading_towards_position(
            &mut native_return,
ped_,
x_,
y_,
z_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_heading_towards_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_camera_heading_for_desired_direction_lock_on_test(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_use_camera_heading_for_desired_direction_lock_on_test {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_camera_heading_for_desired_direction_lock_on_test(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_use_camera_heading_for_desired_direction_lock_on_test {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_performing_stealth_kill(&self, ped_: u32) -> ResultOf_is_ped_performing_stealth_kill {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_stealth_kill(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_performing_stealth_kill {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ped_preferred_cover_set(&self, ped_: u32) -> ResultOf_remove_ped_preferred_cover_set {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_ped_preferred_cover_set(
            ped_,
        );
        
        
        ResultOf_remove_ped_preferred_cover_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_panic_exit_scenario(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_ped_panic_exit_scenario {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_panic_exit_scenario(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_panic_exit_scenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_ped_scuba_gear_variation(&self, p0_: i32) -> ResultOf_is_using_ped_scuba_gear_variation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_using_ped_scuba_gear_variation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_using_ped_scuba_gear_variation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_cancel_search(&self, ) -> ResultOf_spawnpoints_cancel_search {
    unsafe {
        
        let success = sdk::natives::spawnpoints_cancel_search(
            
        );
        
        
        ResultOf_spawnpoints_cancel_search {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_type(&self, ped_: u32) -> ResultOf_get_ped_type {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_type(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_all_heading_values_to_align(&self, ped_: u32) -> ResultOf_force_all_heading_values_to_align {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_all_heading_values_to_align(
            ped_,
        );
        
        
        ResultOf_force_all_heading_values_to_align {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_combat_float(&self, ped_: u32,
combatType_: i32,
p2_: f32) -> ResultOf_set_combat_float {
    unsafe {
        let mut ped_ = ped_;
let mut combatType_ = combatType_;
let mut p2_ = p2_;
        let success = sdk::natives::set_combat_float(
            ped_,
combatType_,
p2_,
        );
        
        
        ResultOf_set_combat_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_health_snacks_carried_by_all_new_peds(&self, p0_: f32,
p1_: i32) -> ResultOf_set_health_snacks_carried_by_all_new_peds {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_health_snacks_carried_by_all_new_peds(
            p0_,
p1_,
        );
        
        
        ResultOf_set_health_snacks_carried_by_all_new_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_facial_idle_anim_override(&self, ped_: u32,
animName_: Option<String>,
animDict_: Option<String>) -> ResultOf_set_facial_idle_anim_override {
    unsafe {
        let mut ped_ = ped_;
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::set_facial_idle_anim_override(
            ped_,
animName_.as_ref().unwrap(),
animDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_facial_idle_anim_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_frag_damage(&self, object_: u32,
toggle_: bool) -> ResultOf_set_disable_frag_damage {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_frag_damage(
            object_,
toggle_,
        );
        
        
        ResultOf_set_disable_frag_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_entity_a_frag(&self, object_: u32) -> ResultOf_get_is_entity_a_frag {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_is_entity_a_frag(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_entity_a_frag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_rope_winding(&self, ropeId_: i32) -> ResultOf_start_rope_winding {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::start_rope_winding(
            ropeId_,
        );
        
        
        ResultOf_start_rope_winding {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_kinematic_physics(&self, entity_: u32,
toggle_: bool) -> ResultOf_set_use_kinematic_physics {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_kinematic_physics(
            entity_,
toggle_,
        );
        
        
        ResultOf_set_use_kinematic_physics {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rope_last_vertex_coord(&self, ropeId_: i32) -> ResultOf_get_rope_last_vertex_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ropeId_ = ropeId_;
        let success = sdk::natives::get_rope_last_vertex_coord(
            native_return.pin_mut(),
ropeId_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_rope_last_vertex_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_own_rope(&self, ropeId_: i32) -> ResultOf_does_script_own_rope {
    unsafe {
        let mut native_return = Default::default();
let mut ropeId_ = ropeId_;
        let success = sdk::natives::does_script_own_rope(
            &mut native_return,
ropeId_,
        );
        let native_return = native_return;
        
        ResultOf_does_script_own_rope {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pin_rope_vertex(&self, ropeId_: i32,
vertex_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_pin_rope_vertex {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut vertex_ = vertex_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::pin_rope_vertex(
            ropeId_,
vertex_,
x_,
y_,
z_,
        );
        
        
        ResultOf_pin_rope_vertex {
            success,
            ret: (),
            
        }
    }
}

    fn native_break_entity_glass(&self, entity_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: i32,
p10_: bool) -> ResultOf_break_entity_glass {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::break_entity_glass(
            entity_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_break_entity_glass {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rope_vertex_count(&self, ropeId_: i32) -> ResultOf_get_rope_vertex_count {
    unsafe {
        let mut native_return = Default::default();
let mut ropeId_ = ropeId_;
        let success = sdk::natives::get_rope_vertex_count(
            &mut native_return,
ropeId_,
        );
        let native_return = native_return;
        
        ResultOf_get_rope_vertex_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_rope_set_smooth_reelin(&self, ropeId_: i32,
p1_: bool) -> ResultOf_rope_set_smooth_reelin {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_smooth_reelin(
            ropeId_,
p1_,
        );
        
        
        ResultOf_rope_set_smooth_reelin {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entities_to_rope(&self, ropeId_: i32,
ent1_: u32,
ent2_: u32,
ent1_x_: f32,
ent1_y_: f32,
ent1_z_: f32,
ent2_x_: f32,
ent2_y_: f32,
ent2_z_: f32,
length_: f32,
p10_: bool,
p11_: bool,
p12_: i32,
p13_: i32) -> ResultOf_attach_entities_to_rope {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut ent1_ = ent1_;
let mut ent2_ = ent2_;
let mut ent1_x_ = ent1_x_;
let mut ent1_y_ = ent1_y_;
let mut ent1_z_ = ent1_z_;
let mut ent2_x_ = ent2_x_;
let mut ent2_y_ = ent2_y_;
let mut ent2_z_ = ent2_z_;
let mut length_ = length_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = Default::default();
let mut p13_ = Default::default();
        let success = sdk::natives::attach_entities_to_rope(
            &mut p12_,
&mut p13_,
ropeId_,
ent1_,
ent2_,
ent1_x_,
ent1_y_,
ent1_z_,
ent2_x_,
ent2_y_,
ent2_z_,
length_,
p10_,
p11_,
        );
        let p12_ = p12_;
let p13_ = p13_;
        
        ResultOf_attach_entities_to_rope {
            success,
            ret: (),
            p12_,
p13_
        }
    }
}

    fn native_attach_rope_to_entity(&self, ropeId_: i32,
entity_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool) -> ResultOf_attach_rope_to_entity {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_rope_to_entity(
            ropeId_,
entity_,
x_,
y_,
z_,
p5_,
        );
        
        
        ResultOf_attach_rope_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_unpin_rope_vertex(&self, ropeId_: i32,
vertex_: i32) -> ResultOf_unpin_rope_vertex {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut vertex_ = vertex_;
        let success = sdk::natives::unpin_rope_vertex(
            ropeId_,
vertex_,
        );
        
        
        ResultOf_unpin_rope_vertex {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_rope(&self, ropeId_: i32) -> ResultOf_delete_rope {
    unsafe {
        let mut ropeId_ = Default::default();
        let success = sdk::natives::delete_rope(
            &mut ropeId_,
        );
        let ropeId_ = ropeId_;
        
        ResultOf_delete_rope {
            success,
            ret: (),
            ropeId_
        }
    }
}

    fn native_rope_convert_to_simple(&self, ropeId_: i32) -> ResultOf_rope_convert_to_simple {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::rope_convert_to_simple(
            ropeId_,
        );
        
        
        ResultOf_rope_convert_to_simple {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_rope_unwinding_front(&self, ropeId_: i32) -> ResultOf_start_rope_unwinding_front {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::start_rope_unwinding_front(
            ropeId_,
        );
        
        
        ResultOf_start_rope_unwinding_front {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_breaking(&self, object_: u32,
toggle_: bool) -> ResultOf_set_disable_breaking {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_breaking(
            object_,
toggle_,
        );
        
        
        ResultOf_set_disable_breaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_unload_textures(&self, ) -> ResultOf_rope_unload_textures {
    unsafe {
        
        let success = sdk::natives::rope_unload_textures(
            
        );
        
        
        ResultOf_rope_unload_textures {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_physics(&self, entity_: u32) -> ResultOf_activate_physics {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::activate_physics(
            entity_,
        );
        
        
        ResultOf_activate_physics {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_get_distance_between_ends(&self, ropeId_: i32) -> ResultOf_rope_get_distance_between_ends {
    unsafe {
        let mut native_return = Default::default();
let mut ropeId_ = ropeId_;
        let success = sdk::natives::rope_get_distance_between_ends(
            &mut native_return,
ropeId_,
        );
        let native_return = native_return;
        
        ResultOf_rope_get_distance_between_ends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cgoffset(&self, entity_: u32) -> ResultOf_get_cgoffset {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_cgoffset(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_cgoffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_rope_attached_at_both_ends(&self, ropeId_: i32) -> ResultOf_is_rope_attached_at_both_ends {
    unsafe {
        let mut native_return = Default::default();
let mut ropeId_ = Default::default();
        let success = sdk::natives::is_rope_attached_at_both_ends(
            &mut native_return,
&mut ropeId_,
        );
        let native_return = native_return;
let ropeId_ = ropeId_;
        
        ResultOf_is_rope_attached_at_both_ends {
            success,
            ret: native_return,
            ropeId_
        }
    }
}

    fn native_rope_load_textures(&self, ) -> ResultOf_rope_load_textures {
    unsafe {
        
        let success = sdk::natives::rope_load_textures(
            
        );
        
        
        ResultOf_rope_load_textures {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_stunt_mode(&self, p0_: bool) -> ResultOf_set_in_stunt_mode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_in_stunt_mode(
            p0_,
        );
        
        
        ResultOf_set_in_stunt_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_draw_enabled(&self, ropeId_: i32,
p1_: bool) -> ResultOf_rope_draw_enabled {
    unsafe {
        let mut ropeId_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::rope_draw_enabled(
            &mut ropeId_,
p1_,
        );
        let ropeId_ = ropeId_;
        
        ResultOf_rope_draw_enabled {
            success,
            ret: (),
            ropeId_
        }
    }
}

    fn native_delete_child_rope(&self, ropeId_: i32) -> ResultOf_delete_child_rope {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::delete_child_rope(
            ropeId_,
        );
        
        
        ResultOf_delete_child_rope {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_arena_mode(&self, toggle_: bool) -> ResultOf_set_in_arena_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_in_arena_mode(
            toggle_,
        );
        
        
        ResultOf_set_in_arena_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_change_script_owner(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_rope_change_script_owner {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::rope_change_script_owner(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_rope_change_script_owner {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_refframevelocity_colliderorder(&self, ropeId_: i32,
p1_: i32) -> ResultOf_rope_set_refframevelocity_colliderorder {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_refframevelocity_colliderorder(
            ropeId_,
p1_,
        );
        
        
        ResultOf_rope_set_refframevelocity_colliderorder {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_attach_virtual_bound_geom(&self, ropeId_: i32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32,
p13_: f32) -> ResultOf_rope_attach_virtual_bound_geom {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::rope_attach_virtual_bound_geom(
            ropeId_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        
        
        ResultOf_rope_attach_virtual_bound_geom {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_rope_from_entity(&self, ropeId_: i32,
entity_: u32) -> ResultOf_detach_rope_from_entity {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut entity_ = entity_;
        let success = sdk::natives::detach_rope_from_entity(
            ropeId_,
entity_,
        );
        
        
        ResultOf_detach_rope_from_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cg_at_boundcenter(&self, entity_: u32) -> ResultOf_set_cg_at_boundcenter {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_cg_at_boundcenter(
            entity_,
        );
        
        
        ResultOf_set_cg_at_boundcenter {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_reset_length(&self, ropeId_: i32,
length_: f32) -> ResultOf_rope_reset_length {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut length_ = length_;
        let success = sdk::natives::rope_reset_length(
            ropeId_,
length_,
        );
        
        
        ResultOf_rope_reset_length {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_update_pinverts(&self, ropeId_: i32) -> ResultOf_rope_set_update_pinverts {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::rope_set_update_pinverts(
            ropeId_,
        );
        
        
        ResultOf_rope_set_update_pinverts {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_rope_winding(&self, ropeId_: i32) -> ResultOf_stop_rope_winding {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::stop_rope_winding(
            ropeId_,
        );
        
        
        ResultOf_stop_rope_winding {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_rope_data(&self, ropeId_: i32,
rope_preset_: Option<String>) -> ResultOf_load_rope_data {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut rope_preset_ = sdk_helpers::create_c_string_ptr(rope_preset_);
        let success = sdk::natives::load_rope_data(
            ropeId_,
rope_preset_.as_ref().unwrap(),
        );
        
        
        ResultOf_load_rope_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_disable_breaking(&self, object_: u32) -> ResultOf_reset_disable_breaking {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::reset_disable_breaking(
            object_,
        );
        
        
        ResultOf_reset_disable_breaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_force_length(&self, ropeId_: i32,
length_: f32) -> ResultOf_rope_force_length {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut length_ = length_;
        let success = sdk::natives::rope_force_length(
            ropeId_,
length_,
        );
        
        
        ResultOf_rope_force_length {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cgoffset(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_cgoffset {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_cgoffset(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_cgoffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_update_order(&self, ropeId_: i32,
p1_: i32) -> ResultOf_rope_set_update_order {
    unsafe {
        let mut ropeId_ = ropeId_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_update_order(
            ropeId_,
p1_,
        );
        
        
        ResultOf_rope_set_update_order {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_impulse_to_cloth(&self, posX_: f32,
posY_: f32,
posZ_: f32,
vecX_: f32,
vecY_: f32,
vecZ_: f32,
impulse_: f32) -> ResultOf_apply_impulse_to_cloth {
    unsafe {
        let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut vecX_ = vecX_;
let mut vecY_ = vecY_;
let mut vecZ_ = vecZ_;
let mut impulse_ = impulse_;
        let success = sdk::natives::apply_impulse_to_cloth(
            posX_,
posY_,
posZ_,
vecX_,
vecY_,
vecZ_,
impulse_,
        );
        
        
        ResultOf_apply_impulse_to_cloth {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_rope(&self, x_: f32,
y_: f32,
z_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
length_: f32,
ropeType_: i32,
maxLength_: f32,
minLength_: f32,
windingSpeed_: f32,
p11_: bool,
p12_: bool,
rigid_: bool,
p14_: f32,
breakWhenShot_: bool,
unkPtr_: i32) -> ResultOf_add_rope {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut length_ = length_;
let mut ropeType_ = ropeType_;
let mut maxLength_ = maxLength_;
let mut minLength_ = minLength_;
let mut windingSpeed_ = windingSpeed_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut rigid_ = rigid_;
let mut p14_ = p14_;
let mut breakWhenShot_ = breakWhenShot_;
let mut unkPtr_ = Default::default();
        let success = sdk::natives::add_rope(
            &mut native_return,
&mut unkPtr_,
x_,
y_,
z_,
rotX_,
rotY_,
rotZ_,
length_,
ropeType_,
maxLength_,
minLength_,
windingSpeed_,
p11_,
p12_,
rigid_,
p14_,
breakWhenShot_,
        );
        let native_return = native_return;
let unkPtr_ = unkPtr_;
        
        ResultOf_add_rope {
            success,
            ret: native_return,
            unkPtr_
        }
    }
}

    fn native_get_rope_vertex_coord(&self, ropeId_: i32,
vertex_: i32) -> ResultOf_get_rope_vertex_coord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ropeId_ = ropeId_;
let mut vertex_ = vertex_;
        let success = sdk::natives::get_rope_vertex_coord(
            native_return.pin_mut(),
ropeId_,
vertex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_rope_vertex_coord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_damping(&self, entity_: u32,
vertex_: i32,
value_: f32) -> ResultOf_set_damping {
    unsafe {
        let mut entity_ = entity_;
let mut vertex_ = vertex_;
let mut value_ = value_;
        let success = sdk::natives::set_damping(
            entity_,
vertex_,
value_,
        );
        
        
        ResultOf_set_damping {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_draw_shadow_enabled(&self, ropeId_: i32,
toggle_: bool) -> ResultOf_rope_draw_shadow_enabled {
    unsafe {
        let mut ropeId_ = Default::default();
let mut toggle_ = toggle_;
        let success = sdk::natives::rope_draw_shadow_enabled(
            &mut ropeId_,
toggle_,
        );
        let ropeId_ = ropeId_;
        
        ResultOf_rope_draw_shadow_enabled {
            success,
            ret: (),
            ropeId_
        }
    }
}

    fn native_rope_are_textures_loaded(&self, ) -> ResultOf_rope_are_textures_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::rope_are_textures_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_rope_are_textures_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_rope_exist(&self, ropeId_: i32) -> ResultOf_does_rope_exist {
    unsafe {
        let mut native_return = Default::default();
let mut ropeId_ = Default::default();
        let success = sdk::natives::does_rope_exist(
            &mut native_return,
&mut ropeId_,
        );
        let native_return = native_return;
let ropeId_ = ropeId_;
        
        ResultOf_does_rope_exist {
            success,
            ret: native_return,
            ropeId_
        }
    }
}

    fn native_stop_rope_unwinding_front(&self, ropeId_: i32) -> ResultOf_stop_rope_unwinding_front {
    unsafe {
        let mut ropeId_ = ropeId_;
        let success = sdk::natives::stop_rope_unwinding_front(
            ropeId_,
        );
        
        
        ResultOf_stop_rope_unwinding_front {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_law_response_delay_override(&self, ) -> ResultOf_reset_law_response_delay_override {
    unsafe {
        
        let success = sdk::natives::reset_law_response_delay_override(
            
        );
        
        
        ResultOf_reset_law_response_delay_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_model(&self, player_: u32,
model_: u32) -> ResultOf_set_player_model {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_model(
            player_,
model_,
        );
        
        
        ResultOf_set_player_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_multiplier(&self, multiplier_: f32) -> ResultOf_set_wanted_level_multiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_wanted_level_multiplier(
            multiplier_,
        );
        
        
        ResultOf_set_wanted_level_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_team(&self, player_: u32,
team_: i32) -> ResultOf_set_player_team {
    unsafe {
        let mut player_ = player_;
let mut team_ = team_;
        let success = sdk::natives::set_player_team(
            player_,
team_,
        );
        
        
        ResultOf_set_player_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_teleport_active(&self, ) -> ResultOf_is_player_teleport_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_teleport_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_player_teleport_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_change_player_ped(&self, player_: u32,
ped_: u32,
p2_: bool,
resetDamage_: bool) -> ResultOf_change_player_ped {
    unsafe {
        let mut player_ = player_;
let mut ped_ = ped_;
let mut p2_ = p2_;
let mut resetDamage_ = resetDamage_;
        let success = sdk::natives::change_player_ped(
            player_,
ped_,
p2_,
resetDamage_,
        );
        
        
        ResultOf_change_player_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_random_peds_flee(&self, player_: u32,
toggle_: bool) -> ResultOf_set_all_random_peds_flee {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_random_peds_flee(
            player_,
toggle_,
        );
        
        
        ResultOf_set_all_random_peds_flee {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_meter_full(&self, player_: u32,
p1_: i32) -> ResultOf_is_special_ability_meter_full {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_meter_full(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_special_ability_meter_full {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_reserve_parachute_model_override(&self, player_: u32,
model_: u32) -> ResultOf_set_player_reserve_parachute_model_override {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_reserve_parachute_model_override(
            player_,
model_,
        );
        
        
        ResultOf_set_player_reserve_parachute_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_radius(&self, player_: u32) -> ResultOf_get_wanted_level_radius {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_wanted_level_radius(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_wanted_level_radius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_player_stars_greyed_out(&self, player_: u32) -> ResultOf_are_player_stars_greyed_out {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::are_player_stars_greyed_out(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_are_player_stars_greyed_out {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_wanted_centre_position(&self, player_: u32) -> ResultOf_get_player_wanted_centre_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::get_player_wanted_centre_position(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_player_wanted_centre_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_group(&self, player_: u32) -> ResultOf_get_player_group {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_group(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_group {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_player_parachute_variation_override(&self, player_: u32) -> ResultOf_clear_player_parachute_variation_override {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_variation_override(
            player_,
        );
        
        
        ResultOf_clear_player_parachute_variation_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_forced_aim(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_forced_aim {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_forced_aim(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_forced_aim {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_parachute_pack_model_override(&self, player_: u32) -> ResultOf_clear_player_parachute_pack_model_override {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_pack_model_override(
            player_,
        );
        
        
        ResultOf_clear_player_parachute_pack_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_phone_palette_idx(&self, player_: u32,
flags_: i32) -> ResultOf_set_player_phone_palette_idx {
    unsafe {
        let mut player_ = player_;
let mut flags_ = flags_;
        let success = sdk::natives::set_player_phone_palette_idx(
            player_,
flags_,
        );
        
        
        ResultOf_set_player_phone_palette_idx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_target_entity(&self, player_: u32,
entity_: u32) -> ResultOf_get_player_target_entity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = Default::default();
        let success = sdk::natives::get_player_target_entity(
            &mut native_return,
&mut entity_,
player_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOf_get_player_target_entity {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_set_player_cloth_lock_counter(&self, value_: i32) -> ResultOf_set_player_cloth_lock_counter {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_player_cloth_lock_counter(
            value_,
        );
        
        
        ResultOf_set_player_cloth_lock_counter {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate_mp(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_deactivate_mp {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate_mp(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_deactivate_mp {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_special_ability(&self, player_: u32,
toggle_: bool,
p2_: i32) -> ResultOf_enable_special_ability {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::enable_special_ability(
            player_,
toggle_,
p2_,
        );
        
        
        ResultOf_enable_special_ability {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_sprint_time_remaining(&self, player_: u32) -> ResultOf_get_player_sprint_time_remaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_sprint_time_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_sprint_time_remaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_player_input_gait(&self, player_: u32) -> ResultOf_reset_player_input_gait {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_input_gait(
            player_,
        );
        
        
        ResultOf_reset_player_input_gait {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_achievement_progress(&self, achievementId_: i32) -> ResultOf_get_achievement_progress {
    unsafe {
        let mut native_return = Default::default();
let mut achievementId_ = achievementId_;
        let success = sdk::natives::get_achievement_progress(
            &mut native_return,
achievementId_,
        );
        let native_return = native_return;
        
        ResultOf_get_achievement_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_deplete_meter(&self, player_: u32,
p1_: bool,
p2_: i32) -> ResultOf_special_ability_deplete_meter {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_deplete_meter(
            player_,
p1_,
p2_,
        );
        
        
        ResultOf_special_ability_deplete_meter {
            success,
            ret: (),
            
        }
    }
}

    fn native_player_detach_virtual_bound(&self, ) -> ResultOf_player_detach_virtual_bound {
    unsafe {
        
        let success = sdk::natives::player_detach_virtual_bound(
            
        );
        
        
        ResultOf_player_detach_virtual_bound {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_may_not_enter_any_vehicle(&self, player_: u32) -> ResultOf_set_player_may_not_enter_any_vehicle {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_player_may_not_enter_any_vehicle(
            player_,
        );
        
        
        ResultOf_set_player_may_not_enter_any_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_players_in_team(&self, team_: i32) -> ResultOf_get_number_of_players_in_team {
    unsafe {
        let mut native_return = Default::default();
let mut team_ = team_;
        let success = sdk::natives::get_number_of_players_in_team(
            &mut native_return,
team_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_players_in_team {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_damaged_at_least_one_ped(&self, player_: u32) -> ResultOf_has_player_damaged_at_least_one_ped {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_damaged_at_least_one_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_has_player_damaged_at_least_one_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_vehicle_weapon_to_non_homing(&self, p0_: i32) -> ResultOf_set_player_vehicle_weapon_to_non_homing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_vehicle_weapon_to_non_homing(
            p0_,
        );
        
        
        ResultOf_set_player_vehicle_weapon_to_non_homing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_apply_waypoint_of_player(&self, player_: u32,
hudColor_: i32) -> ResultOf_set_apply_waypoint_of_player {
    unsafe {
        let mut player_ = player_;
let mut hudColor_ = hudColor_;
        let success = sdk::natives::set_apply_waypoint_of_player(
            player_,
hudColor_,
        );
        
        
        ResultOf_set_apply_waypoint_of_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_wanted_level_greater(&self, player_: u32,
wantedLevel_: i32) -> ResultOf_is_player_wanted_level_greater {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut wantedLevel_ = wantedLevel_;
        let success = sdk::natives::is_player_wanted_level_greater(
            &mut native_return,
player_,
wantedLevel_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_wanted_level_greater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_invincible(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_invincible {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_invincible(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_invincible {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_reserve_parachute_model_override(&self, player_: u32) -> ResultOf_clear_player_reserve_parachute_model_override {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_reserve_parachute_model_override(
            player_,
        );
        
        
        ResultOf_clear_player_reserve_parachute_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_player_is_free_aiming_at(&self, player_: u32,
entity_: u32) -> ResultOf_get_entity_player_is_free_aiming_at {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = Default::default();
        let success = sdk::natives::get_entity_player_is_free_aiming_at(
            &mut native_return,
&mut entity_,
player_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOf_get_entity_player_is_free_aiming_at {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_set_player_lockon_range_override(&self, player_: u32,
range_: f32) -> ResultOf_set_player_lockon_range_override {
    unsafe {
        let mut player_ = player_;
let mut range_ = range_;
        let success = sdk::natives::set_player_lockon_range_override(
            player_,
range_,
        );
        
        
        ResultOf_set_player_lockon_range_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_player_arrest_state(&self, player_: u32) -> ResultOf_reset_player_arrest_state {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_arrest_state(
            player_,
        );
        
        
        ResultOf_reset_player_arrest_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_weapon_defense_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_weapon_defense_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_free_aiming(&self, player_: u32) -> ResultOf_is_player_free_aiming {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_free_aiming(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_free_aiming {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_small(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_special_ability_charge_small {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_small(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_special_ability_charge_small {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ambient_melee_move(&self, player_: u32,
toggle_: bool) -> ResultOf_set_disable_ambient_melee_move {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_ambient_melee_move(
            player_,
toggle_,
        );
        
        
        ResultOf_set_disable_ambient_melee_move {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_current_stealth_noise(&self, player_: u32) -> ResultOf_get_player_current_stealth_noise {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_current_stealth_noise(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_current_stealth_noise {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_evasion_hud_if_disabling_hidden_evasion_this_frame(&self, player_: u32,
p1_: i32) -> ResultOf_allow_evasion_hud_if_disabling_hidden_evasion_this_frame {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::allow_evasion_hud_if_disabling_hidden_evasion_this_frame(
            player_,
p1_,
        );
        
        
        ResultOf_allow_evasion_hud_if_disabling_hidden_evasion_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_spectated_vehicle_radio_override(&self, p0_: bool) -> ResultOf_set_player_spectated_vehicle_radio_override {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_spectated_vehicle_radio_override(
            p0_,
        );
        
        
        ResultOf_set_player_spectated_vehicle_radio_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_takedown_defense_modifier(&self, player_: u32,
p1_: f32) -> ResultOf_set_player_weapon_takedown_defense_modifier {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_weapon_takedown_defense_modifier(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_weapon_takedown_defense_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_police_ignore_player(&self, player_: u32,
toggle_: bool) -> ResultOf_set_police_ignore_player {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_ignore_player(
            player_,
toggle_,
        );
        
        
        ResultOf_set_police_ignore_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_wanted_level_no_drop(&self, player_: u32,
wantedLevel_: i32,
p2_: bool) -> ResultOf_set_player_wanted_level_no_drop {
    unsafe {
        let mut player_ = player_;
let mut wantedLevel_ = wantedLevel_;
let mut p2_ = p2_;
        let success = sdk::natives::set_player_wanted_level_no_drop(
            player_,
wantedLevel_,
p2_,
        );
        
        
        ResultOf_set_player_wanted_level_no_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_witnesses_calling_police_this_frame(&self, player_: u32) -> ResultOf_suppress_witnesses_calling_police_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::suppress_witnesses_calling_police_this_frame(
            player_,
        );
        
        
        ResultOf_suppress_witnesses_calling_police_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_team(&self, player_: u32) -> ResultOf_get_player_team {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_team(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_team {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_reset(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_reset {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_reset(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_reset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_reserve_parachute_model_override(&self, player_: u32) -> ResultOf_get_player_reserve_parachute_model_override {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_reserve_parachute_model_override(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_reserve_parachute_model_override {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_being_arrested(&self, player_: u32,
atArresting_: bool) -> ResultOf_is_player_being_arrested {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut atArresting_ = atArresting_;
        let success = sdk::natives::is_player_being_arrested(
            &mut native_return,
player_,
atArresting_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_being_arrested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_battle_aware(&self, player_: u32) -> ResultOf_is_player_battle_aware {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_battle_aware(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_battle_aware {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_level(&self, player_: u32,
wantedLevel_: i32,
disableNoMission_: bool) -> ResultOf_set_player_wanted_level {
    unsafe {
        let mut player_ = player_;
let mut wantedLevel_ = wantedLevel_;
let mut disableNoMission_ = disableNoMission_;
        let success = sdk::natives::set_player_wanted_level(
            player_,
wantedLevel_,
disableNoMission_,
        );
        
        
        ResultOf_set_player_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_free_aiming_at_entity(&self, player_: u32,
entity_: u32) -> ResultOf_is_player_free_aiming_at_entity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::is_player_free_aiming_at_entity(
            &mut native_return,
player_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_free_aiming_at_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_player_ragdoll_control(&self, player_: u32,
toggle_: bool) -> ResultOf_give_player_ragdoll_control {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::give_player_ragdoll_control(
            player_,
toggle_,
        );
        
        
        ResultOf_give_player_ragdoll_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_fill_meter(&self, player_: u32,
p1_: bool,
p2_: i32) -> ResultOf_special_ability_fill_meter {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_fill_meter(
            player_,
p1_,
p2_,
        );
        
        
        ResultOf_special_ability_fill_meter {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_active(&self, player_: u32,
p1_: i32) -> ResultOf_is_special_ability_active {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_active(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_special_ability_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_sprint_stamina_remaining(&self, player_: u32) -> ResultOf_get_player_sprint_stamina_remaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_sprint_stamina_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_sprint_stamina_remaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_players(&self, ) -> ResultOf_get_number_of_players {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_players {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_int_to_playerindex(&self, value_: i32) -> ResultOf_int_to_playerindex {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::int_to_playerindex(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_int_to_playerindex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_dead(&self, player_: u32) -> ResultOf_is_player_dead {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_dead(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_dead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_police_radar_blips(&self, toggle_: bool) -> ResultOf_set_police_radar_blips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_radar_blips(
            toggle_,
        );
        
        
        ResultOf_set_police_radar_blips {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_ped(&self, player_: u32) -> ResultOf_get_player_ped {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_wanted_level(&self, ) -> ResultOf_get_max_wanted_level {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_wanted_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_max_wanted_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_losing_wanted_level_if_hidden_this_frame(&self, player_: u32) -> ResultOf_suppress_losing_wanted_level_if_hidden_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::suppress_losing_wanted_level_if_hidden_this_frame(
            player_,
        );
        
        
        ResultOf_suppress_losing_wanted_level_if_hidden_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_random_peds_flee_this_frame(&self, player_: u32) -> ResultOf_set_all_random_peds_flee_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_all_random_peds_flee_this_frame(
            player_,
        );
        
        
        ResultOf_set_all_random_peds_flee_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_simulate_player_input_gait(&self, player_: u32,
amount_: f32,
gaitType_: i32,
speed_: f32,
p4_: bool,
p5_: bool) -> ResultOf_simulate_player_input_gait {
    unsafe {
        let mut player_ = player_;
let mut amount_ = amount_;
let mut gaitType_ = gaitType_;
let mut speed_ = speed_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::simulate_player_input_gait(
            player_,
amount_,
gaitType_,
speed_,
p4_,
p5_,
        );
        
        
        ResultOf_simulate_player_input_gait {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_hidden_escape_time(&self, player_: u32,
wantedLevel_: i32,
lossTime_: i32) -> ResultOf_set_wanted_level_hidden_escape_time {
    unsafe {
        let mut player_ = player_;
let mut wantedLevel_ = wantedLevel_;
let mut lossTime_ = lossTime_;
        let success = sdk::natives::set_wanted_level_hidden_escape_time(
            player_,
wantedLevel_,
lossTime_,
        );
        
        
        ResultOf_set_wanted_level_hidden_escape_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_control_on(&self, player_: u32) -> ResultOf_is_player_control_on {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_control_on(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_control_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_melee_weapon_damage_modifier(&self, player_: u32,
modifier_: f32,
p2_: bool) -> ResultOf_set_player_melee_weapon_damage_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
let mut p2_ = p2_;
        let success = sdk::natives::set_player_melee_weapon_damage_modifier(
            player_,
modifier_,
p2_,
        );
        
        
        ResultOf_set_player_melee_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_has_damaged_at_least_one_non_animal_ped(&self, player_: u32) -> ResultOf_clear_player_has_damaged_at_least_one_non_animal_ped {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_has_damaged_at_least_one_non_animal_ped(
            player_,
        );
        
        
        ResultOf_clear_player_has_damaged_at_least_one_non_animal_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_vehicle_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_vehicle_defense_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_vehicle_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_vehicle_defense_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cleanup_for_all_threads_with_this_name(&self, name_: Option<String>,
cleanupFlags_: i32) -> ResultOf_force_cleanup_for_all_threads_with_this_name {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut cleanupFlags_ = cleanupFlags_;
        let success = sdk::natives::force_cleanup_for_all_threads_with_this_name(
            name_.as_ref().unwrap(),
cleanupFlags_,
        );
        
        
        ResultOf_force_cleanup_for_all_threads_with_this_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_stealth_perception_modifier(&self, player_: u32,
value_: f32) -> ResultOf_set_player_stealth_perception_modifier {
    unsafe {
        let mut player_ = player_;
let mut value_ = value_;
        let success = sdk::natives::set_player_stealth_perception_modifier(
            player_,
value_,
        );
        
        
        ResultOf_set_player_stealth_perception_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_riding_train(&self, player_: u32) -> ResultOf_is_player_riding_train {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_riding_train(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_riding_train {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_player_id(&self, ) -> ResultOf_player_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::player_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_player_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_extend_world_boundary_for_player(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_extend_world_boundary_for_player {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::extend_world_boundary_for_player(
            x_,
y_,
z_,
        );
        
        
        ResultOf_extend_world_boundary_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_last_arrest(&self, ) -> ResultOf_get_time_since_last_arrest {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_time_since_last_arrest(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_last_arrest {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_ped_script_index(&self, player_: u32) -> ResultOf_get_player_ped_script_index {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_ped_script_index(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_ped_script_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_centre_position(&self, player_: u32,
position_: Option<shared::Vector3>,
p2_: bool,
p3_: bool) -> ResultOf_set_player_wanted_centre_position {
    unsafe {
        let mut player_ = player_;
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_player_wanted_centre_position(
            position_.pin_mut(),
player_,
p2_,
p3_,
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOf_set_player_wanted_centre_position {
            success,
            ret: (),
            position_
        }
    }
}

    fn native_disable_camera_view_mode_cycle(&self, player_: u32) -> ResultOf_disable_camera_view_mode_cycle {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_camera_view_mode_cycle(
            player_,
        );
        
        
        ResultOf_disable_camera_view_mode_cycle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_damage_player(&self, player1_: u32,
player2_: u32,
toggle_: bool) -> ResultOf_set_player_can_damage_player {
    unsafe {
        let mut player1_ = player1_;
let mut player2_ = player2_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_damage_player(
            player1_,
player2_,
toggle_,
        );
        
        
        ResultOf_set_player_can_damage_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_fake_wanted_level(&self, player_: u32) -> ResultOf_get_player_fake_wanted_level {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_fake_wanted_level(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_fake_wanted_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_target_level(&self, targetLevel_: i32) -> ResultOf_set_player_target_level {
    unsafe {
        let mut targetLevel_ = targetLevel_;
        let success = sdk::natives::set_player_target_level(
            targetLevel_,
        );
        
        
        ResultOf_set_player_target_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_low_priority_shocking_events(&self, player_: u32,
toggle_: bool) -> ResultOf_set_ignore_low_priority_shocking_events {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_low_priority_shocking_events(
            player_,
toggle_,
        );
        
        
        ResultOf_set_ignore_low_priority_shocking_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_lockon(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_lockon {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_lockon(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_lockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_hit_vehicle(&self, player_: u32) -> ResultOf_get_time_since_player_hit_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_hit_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_player_hit_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_system_ui_being_displayed(&self, ) -> ResultOf_is_system_ui_being_displayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_system_ui_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_system_ui_being_displayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_health_recharge_multiplier(&self, player_: u32,
regenRate_: f32) -> ResultOf_set_player_health_recharge_multiplier {
    unsafe {
        let mut player_ = player_;
let mut regenRate_ = regenRate_;
        let success = sdk::natives::set_player_health_recharge_multiplier(
            player_,
regenRate_,
        );
        
        
        ResultOf_set_player_health_recharge_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_bluetooth_state(&self, player_: u32,
state_: bool) -> ResultOf_set_player_bluetooth_state {
    unsafe {
        let mut player_ = player_;
let mut state_ = state_;
        let success = sdk::natives::set_player_bluetooth_state(
            player_,
state_,
        );
        
        
        ResultOf_set_player_bluetooth_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_has_reserve_parachute(&self, player_: u32) -> ResultOf_get_player_has_reserve_parachute {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_has_reserve_parachute(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_has_reserve_parachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_player_firing(&self, player_: u32,
toggle_: bool) -> ResultOf_disable_player_firing {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_player_firing(
            player_,
toggle_,
        );
        
        
        ResultOf_disable_player_firing {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_playing(&self, player_: u32) -> ResultOf_is_player_playing {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_playing(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_playing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_player_driving_on_highway(&self, player_: u32) -> ResultOf_get_is_player_driving_on_highway {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_is_player_driving_on_highway(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_player_driving_on_highway {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_bluetooth_enable(&self, player_: u32) -> ResultOf_is_player_bluetooth_enable {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_bluetooth_enable(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_bluetooth_enable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_remote_player_in_non_cloned_vehicle(&self, player_: u32) -> ResultOf_is_remote_player_in_non_cloned_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_remote_player_in_non_cloned_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_remote_player_in_non_cloned_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_lock(&self, playerModel_: u32,
p1_: i32) -> ResultOf_special_ability_lock {
    unsafe {
        let mut playerModel_ = playerModel_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_lock(
            playerModel_,
p1_,
        );
        
        
        ResultOf_special_ability_lock {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_invincible_but_has_reactions(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_invincible_but_has_reactions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_invincible_but_has_reactions(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_invincible_but_has_reactions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_name(&self, player_: u32) -> ResultOf_get_player_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::get_player_name(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_player_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_run_sprint_multiplier_for_player(&self, player_: u32,
multiplier_: f32) -> ResultOf_set_run_sprint_multiplier_for_player {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_run_sprint_multiplier_for_player(
            player_,
multiplier_,
        );
        
        
        ResultOf_set_run_sprint_multiplier_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_vehicle_weapon_toggled_to_non_homing(&self, p0_: i32) -> ResultOf_is_player_vehicle_weapon_toggled_to_non_homing {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_player_vehicle_weapon_toggled_to_non_homing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_vehicle_weapon_toggled_to_non_homing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_can_do_drive_by(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_can_do_drive_by {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_do_drive_by(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_can_do_drive_by {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_pack_tint_index(&self, player_: u32,
tintIndex_: i32) -> ResultOf_get_player_parachute_pack_tint_index {
    unsafe {
        let mut player_ = player_;
let mut tintIndex_ = Default::default();
        let success = sdk::natives::get_player_parachute_pack_tint_index(
            &mut tintIndex_,
player_,
        );
        let tintIndex_ = tintIndex_;
        
        ResultOf_get_player_parachute_pack_tint_index {
            success,
            ret: (),
            tintIndex_
        }
    }
}

    fn native_set_script_fire_position(&self, coordX_: f32,
coordY_: f32,
coordZ_: f32) -> ResultOf_set_script_fire_position {
    unsafe {
        let mut coordX_ = coordX_;
let mut coordY_ = coordY_;
let mut coordZ_ = coordZ_;
        let success = sdk::natives::set_script_fire_position(
            coordX_,
coordY_,
coordZ_,
        );
        
        
        ResultOf_set_script_fire_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_script_fire_position(&self, ) -> ResultOf_remove_script_fire_position {
    unsafe {
        
        let success = sdk::natives::remove_script_fire_position(
            
        );
        
        
        ResultOf_remove_script_fire_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_logging_in_np(&self, ) -> ResultOf_is_player_logging_in_np {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_logging_in_np(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_player_logging_in_np {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_cloth_pin_frames(&self, player_: u32,
p1_: i32) -> ResultOf_set_player_cloth_pin_frames {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_cloth_pin_frames(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_cloth_pin_frames {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_tint_index(&self, player_: u32,
tintIndex_: i32) -> ResultOf_get_player_parachute_tint_index {
    unsafe {
        let mut player_ = player_;
let mut tintIndex_ = Default::default();
        let success = sdk::natives::get_player_parachute_tint_index(
            &mut tintIndex_,
player_,
        );
        let tintIndex_ = tintIndex_;
        
        ResultOf_get_player_parachute_tint_index {
            success,
            ret: (),
            tintIndex_
        }
    }
}

    fn native_set_player_forced_zoom(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_forced_zoom {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_forced_zoom(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_forced_zoom {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_force_skip_aim_intro(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_force_skip_aim_intro {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_force_skip_aim_intro(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_force_skip_aim_intro {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_max_armour(&self, player_: u32,
value_: i32) -> ResultOf_set_player_max_armour {
    unsafe {
        let mut player_ = player_;
let mut value_ = value_;
        let success = sdk::natives::set_player_max_armour(
            player_,
value_,
        );
        
        
        ResultOf_set_player_max_armour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_targetting_anything(&self, player_: u32) -> ResultOf_is_player_targetting_anything {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_targetting_anything(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_targetting_anything {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_targetting_entity(&self, player_: u32,
entity_: u32) -> ResultOf_is_player_targetting_entity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::is_player_targetting_entity(
            &mut native_return,
player_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_targetting_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_previous_variation_data(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_set_player_previous_variation_data {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_player_previous_variation_data(
            player_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_set_player_previous_variation_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_are_camera_controls_disabled(&self, ) -> ResultOf_get_are_camera_controls_disabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_are_camera_controls_disabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_are_camera_controls_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_has_reserve_parachute(&self, player_: u32) -> ResultOf_set_player_has_reserve_parachute {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_player_has_reserve_parachute(
            player_,
        );
        
        
        ResultOf_set_player_has_reserve_parachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_wanted_and_has_been_seen_by_cops(&self, player_: u32) -> ResultOf_is_wanted_and_has_been_seen_by_cops {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_wanted_and_has_been_seen_by_cops(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_wanted_and_has_been_seen_by_cops {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_may_only_enter_this_vehicle(&self, player_: u32,
vehicle_: u32) -> ResultOf_set_player_may_only_enter_this_vehicle {
    unsafe {
        let mut player_ = player_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_player_may_only_enter_this_vehicle(
            player_,
vehicle_,
        );
        
        
        ResultOf_set_player_may_only_enter_this_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_smoke_trail_color(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_player_parachute_smoke_trail_color {
    unsafe {
        let mut player_ = player_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_player_parachute_smoke_trail_color(
            player_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_player_parachute_smoke_trail_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_activate(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_activate {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_activate(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_activate {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_wanted_level_hidden_escape_time(&self, player_: u32) -> ResultOf_reset_wanted_level_hidden_escape_time {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_wanted_level_hidden_escape_time(
            player_,
        );
        
        
        ResultOf_reset_wanted_level_hidden_escape_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_flush_route(&self, ) -> ResultOf_assisted_movement_flush_route {
    unsafe {
        
        let success = sdk::natives::assisted_movement_flush_route(
            
        );
        
        
        ResultOf_assisted_movement_flush_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_achievement_been_passed(&self, achievementId_: i32) -> ResultOf_has_achievement_been_passed {
    unsafe {
        let mut native_return = Default::default();
let mut achievementId_ = achievementId_;
        let success = sdk::natives::has_achievement_been_passed(
            &mut native_return,
achievementId_,
        );
        let native_return = native_return;
        
        ResultOf_has_achievement_been_passed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_player_parachute_model_override(&self, player_: u32) -> ResultOf_clear_player_parachute_model_override {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_model_override(
            player_,
        );
        
        
        ResultOf_clear_player_parachute_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_script_control_on(&self, player_: u32) -> ResultOf_is_player_script_control_on {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_script_control_on(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_script_control_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_health_recharge_max_percent(&self, player_: u32) -> ResultOf_get_player_health_recharge_max_percent {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_health_recharge_max_percent(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_health_recharge_max_percent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_control(&self, player_: u32,
bHasControl_: bool,
flags_: i32) -> ResultOf_set_player_control {
    unsafe {
        let mut player_ = player_;
let mut bHasControl_ = bHasControl_;
let mut flags_ = flags_;
        let success = sdk::natives::set_player_control(
            player_,
bHasControl_,
flags_,
        );
        
        
        ResultOf_set_player_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_max_explosive_damage(&self, player_: u32,
p1_: f32) -> ResultOf_set_player_max_explosive_damage {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_max_explosive_damage(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_max_explosive_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_everyone_ignore_player(&self, player_: u32,
toggle_: bool) -> ResultOf_set_everyone_ignore_player {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_everyone_ignore_player(
            player_,
toggle_,
        );
        
        
        ResultOf_set_everyone_ignore_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_ready_for_cutscene(&self, player_: u32) -> ResultOf_is_player_ready_for_cutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_ready_for_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_ready_for_cutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_player_targetable_entity(&self, player_: u32,
entity_: u32) -> ResultOf_add_player_targetable_entity {
    unsafe {
        let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::add_player_targetable_entity(
            player_,
entity_,
        );
        
        
        ResultOf_add_player_targetable_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_max_armour(&self, player_: u32) -> ResultOf_get_player_max_armour {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_max_armour(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_max_armour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_parachute_pack_tint_index(&self, player_: u32,
tintIndex_: i32) -> ResultOf_set_player_parachute_pack_tint_index {
    unsafe {
        let mut player_ = player_;
let mut tintIndex_ = tintIndex_;
        let success = sdk::natives::set_player_parachute_pack_tint_index(
            player_,
tintIndex_,
        );
        
        
        ResultOf_set_player_parachute_pack_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_system_signin_ui(&self, p0_: bool) -> ResultOf_display_system_signin_ui {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::display_system_signin_ui(
            p0_,
        );
        
        
        ResultOf_display_system_signin_ui {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_climbing(&self, player_: u32) -> ResultOf_is_player_climbing {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_climbing(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_climbing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_parachute_model_override(&self, player_: u32,
model_: u32) -> ResultOf_set_player_parachute_model_override {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_parachute_model_override(
            player_,
model_,
        );
        
        
        ResultOf_set_player_parachute_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cause_of_most_recent_force_cleanup(&self, ) -> ResultOf_get_cause_of_most_recent_force_cleanup {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cause_of_most_recent_force_cleanup(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_cause_of_most_recent_force_cleanup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_crime_this_frame(&self, player_: u32,
crimeType_: i32) -> ResultOf_suppress_crime_this_frame {
    unsafe {
        let mut player_ = player_;
let mut crimeType_ = crimeType_;
        let success = sdk::natives::suppress_crime_this_frame(
            player_,
crimeType_,
        );
        
        
        ResultOf_suppress_crime_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_difficulty(&self, player_: u32,
difficulty_: f32) -> ResultOf_set_wanted_level_difficulty {
    unsafe {
        let mut player_ = player_;
let mut difficulty_ = difficulty_;
        let success = sdk::natives::set_wanted_level_difficulty(
            player_,
difficulty_,
        );
        
        
        ResultOf_set_wanted_level_difficulty {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate_fast(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_deactivate_fast {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate_fast(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_deactivate_fast {
            success,
            ret: (),
            
        }
    }
}

    fn native_int_to_participantindex(&self, value_: i32) -> ResultOf_int_to_participantindex {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::int_to_participantindex(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_int_to_participantindex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_increase_player_jump_suppression_range(&self, player_: u32) -> ResultOf_increase_player_jump_suppression_range {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::increase_player_jump_suppression_range(
            player_,
        );
        
        
        ResultOf_increase_player_jump_suppression_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_player_targetable_entity(&self, player_: u32,
entity_: u32) -> ResultOf_remove_player_targetable_entity {
    unsafe {
        let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::remove_player_targetable_entity(
            player_,
entity_,
        );
        
        
        ResultOf_remove_player_targetable_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_auto_give_parachute_when_enter_plane(&self, player_: u32,
toggle_: bool) -> ResultOf_set_auto_give_parachute_when_enter_plane {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_auto_give_parachute_when_enter_plane(
            player_,
toggle_,
        );
        
        
        ResultOf_set_auto_give_parachute_when_enter_plane {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_cloth_package_index(&self, index_: i32) -> ResultOf_set_player_cloth_package_index {
    unsafe {
        let mut index_ = index_;
        let success = sdk::natives::set_player_cloth_package_index(
            index_,
        );
        
        
        ResultOf_set_player_cloth_package_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_sprint(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_sprint {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_sprint(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_sprint {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_normalized(&self, player_: u32,
normalizedValue_: f32,
p2_: bool,
p3_: i32) -> ResultOf_special_ability_charge_normalized {
    unsafe {
        let mut player_ = player_;
let mut normalizedValue_ = normalizedValue_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_normalized(
            player_,
normalizedValue_,
p2_,
p3_,
        );
        
        
        ResultOf_special_ability_charge_normalized {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_underwater_breath_percent_remaining(&self, player_: u32,
time_: f32) -> ResultOf_set_player_underwater_breath_percent_remaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut time_ = time_;
        let success = sdk::natives::set_player_underwater_breath_percent_remaining(
            &mut native_return,
player_,
time_,
        );
        let native_return = native_return;
        
        ResultOf_set_player_underwater_breath_percent_remaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_underwater_time_remaining(&self, player_: u32) -> ResultOf_get_player_underwater_time_remaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_underwater_time_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_underwater_time_remaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_restore_player_stamina(&self, player_: u32,
p1_: f32) -> ResultOf_restore_player_stamina {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::restore_player_stamina(
            player_,
p1_,
        );
        
        
        ResultOf_restore_player_stamina {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_tint_index(&self, player_: u32,
tintIndex_: i32) -> ResultOf_set_player_parachute_tint_index {
    unsafe {
        let mut player_ = player_;
let mut tintIndex_ = tintIndex_;
        let success = sdk::natives::set_player_parachute_tint_index(
            player_,
tintIndex_,
        );
        
        
        ResultOf_set_player_parachute_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_special_ability_multiplier(&self, multiplier_: f32) -> ResultOf_set_special_ability_multiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_special_ability_multiplier(
            multiplier_,
        );
        
        
        ResultOf_set_special_ability_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_vehicle_damage_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_vehicle_damage_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_vehicle_damage_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_vehicle_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_index(&self, ) -> ResultOf_get_player_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_player_stamina(&self, player_: u32) -> ResultOf_reset_player_stamina {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_stamina(
            player_,
        );
        
        
        ResultOf_reset_player_stamina {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_time_to_escape(&self, ) -> ResultOf_get_wanted_level_time_to_escape {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_wanted_level_time_to_escape(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_wanted_level_time_to_escape {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_swim_multiplier_for_player(&self, player_: u32,
multiplier_: f32) -> ResultOf_set_swim_multiplier_for_player {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_swim_multiplier_for_player(
            player_,
multiplier_,
        );
        
        
        ResultOf_set_swim_multiplier_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_max_wanted_level(&self, maxWantedLevel_: i32) -> ResultOf_set_max_wanted_level {
    unsafe {
        let mut maxWantedLevel_ = maxWantedLevel_;
        let success = sdk::natives::set_max_wanted_level(
            maxWantedLevel_,
        );
        
        
        ResultOf_set_max_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_player_teleport(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p5_: bool,
findCollisionLand_: bool,
p7_: bool) -> ResultOf_start_player_teleport {
    unsafe {
        let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p5_ = p5_;
let mut findCollisionLand_ = findCollisionLand_;
let mut p7_ = p7_;
        let success = sdk::natives::start_player_teleport(
            player_,
x_,
y_,
z_,
heading_,
p5_,
findCollisionLand_,
p7_,
        );
        
        
        ResultOf_start_player_teleport {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_start_hidden_evasion(&self, player_: u32) -> ResultOf_force_start_hidden_evasion {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::force_start_hidden_evasion(
            player_,
        );
        
        
        ResultOf_force_start_hidden_evasion {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_melee_weapon_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_melee_weapon_defense_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_melee_weapon_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_melee_weapon_defense_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_close_route(&self, ) -> ResultOf_assisted_movement_close_route {
    unsafe {
        
        let success = sdk::natives::assisted_movement_close_route(
            
        );
        
        
        ResultOf_assisted_movement_close_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_reserve_parachute_tint_index(&self, player_: u32,
index_: i32) -> ResultOf_set_player_reserve_parachute_tint_index {
    unsafe {
        let mut player_ = player_;
let mut index_ = index_;
        let success = sdk::natives::set_player_reserve_parachute_tint_index(
            player_,
index_,
        );
        
        
        ResultOf_set_player_reserve_parachute_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_player_flashing_stars_about_to_drop(&self, player_: u32) -> ResultOf_are_player_flashing_stars_about_to_drop {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::are_player_flashing_stars_about_to_drop(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_are_player_flashing_stars_about_to_drop {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_targeting_mode(&self, targetMode_: i32) -> ResultOf_set_player_targeting_mode {
    unsafe {
        let mut targetMode_ = targetMode_;
        let success = sdk::natives::set_player_targeting_mode(
            targetMode_,
        );
        
        
        ResultOf_set_player_targeting_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_enabled(&self, player_: u32,
p1_: i32) -> ResultOf_is_special_ability_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_enabled(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_special_ability_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_ability_mp(&self, player_: u32,
p1_: i32,
p2_: i32) -> ResultOf_set_special_ability_mp {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_special_ability_mp(
            player_,
p1_,
p2_,
        );
        
        
        ResultOf_set_special_ability_mp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_sneaking_noise_multiplier(&self, player_: u32,
multiplier_: f32) -> ResultOf_set_player_sneaking_noise_multiplier {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_player_sneaking_noise_multiplier(
            player_,
multiplier_,
        );
        
        
        ResultOf_set_player_sneaking_noise_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_wanted_level(&self, player_: u32) -> ResultOf_clear_player_wanted_level {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_wanted_level(
            player_,
        );
        
        
        ResultOf_clear_player_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_law_response_delay_override(&self, p0_: f32) -> ResultOf_set_law_response_delay_override {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_law_response_delay_override(
            p0_,
        );
        
        
        ResultOf_set_law_response_delay_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_players_last_vehicle(&self, ) -> ResultOf_get_players_last_vehicle {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_players_last_vehicle(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_players_last_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_invincible(&self, player_: u32) -> ResultOf_get_player_invincible {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_invincible(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_invincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_absolute(&self, player_: u32,
p1_: i32,
p2_: bool,
p3_: i32) -> ResultOf_special_ability_charge_absolute {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_absolute(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_special_ability_charge_absolute {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_throw_grenade_while_using_gun(&self, ) -> ResultOf_disable_player_throw_grenade_while_using_gun {
    unsafe {
        
        let success = sdk::natives::disable_player_throw_grenade_while_using_gun(
            
        );
        
        
        ResultOf_disable_player_throw_grenade_while_using_gun {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_using_fps_third_person_cover(&self, ) -> ResultOf_get_is_using_fps_third_person_cover {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_fps_third_person_cover(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_using_fps_third_person_cover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_wanted_level_difficulty(&self, player_: u32) -> ResultOf_reset_wanted_level_difficulty {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_wanted_level_difficulty(
            player_,
        );
        
        
        ResultOf_reset_wanted_level_difficulty {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_received_battle_event_recently(&self, player_: u32,
p1_: i32,
p2_: bool) -> ResultOf_get_player_received_battle_event_recently {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_player_received_battle_event_recently(
            &mut native_return,
player_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_received_battle_event_recently {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_cleanup(&self, cleanupFlags_: i32) -> ResultOf_force_cleanup {
    unsafe {
        let mut cleanupFlags_ = cleanupFlags_;
        let success = sdk::natives::force_cleanup(
            cleanupFlags_,
        );
        
        
        ResultOf_force_cleanup {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_wanted_position_this_frame(&self, player_: u32) -> ResultOf_update_wanted_position_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::update_wanted_position_this_frame(
            player_,
        );
        
        
        ResultOf_update_wanted_position_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_health_recharge(&self, player_: u32) -> ResultOf_disable_player_health_recharge {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_player_health_recharge(
            player_,
        );
        
        
        ResultOf_disable_player_health_recharge {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_minigun_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_weapon_minigun_defense_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_minigun_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_weapon_minigun_defense_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_achievement_to_player(&self, achievementId_: i32) -> ResultOf_give_achievement_to_player {
    unsafe {
        let mut native_return = Default::default();
let mut achievementId_ = achievementId_;
        let success = sdk::natives::give_achievement_to_player(
            &mut native_return,
achievementId_,
        );
        let native_return = native_return;
        
        ResultOf_give_achievement_to_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_firing_amnesty(&self, duration_: i32) -> ResultOf_start_firing_amnesty {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::start_firing_amnesty(
            duration_,
        );
        
        
        ResultOf_start_firing_amnesty {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_vehicle_rewards(&self, player_: u32) -> ResultOf_disable_player_vehicle_rewards {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_player_vehicle_rewards(
            player_,
        );
        
        
        ResultOf_disable_player_vehicle_rewards {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_model_override(&self, player_: u32) -> ResultOf_get_player_parachute_model_override {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_parachute_model_override(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_parachute_model_override {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_achievement_progress(&self, achievementId_: i32,
progress_: i32) -> ResultOf_set_achievement_progress {
    unsafe {
        let mut native_return = Default::default();
let mut achievementId_ = achievementId_;
let mut progress_ = progress_;
        let success = sdk::natives::set_achievement_progress(
            &mut native_return,
achievementId_,
progress_,
        );
        let native_return = native_return;
        
        ResultOf_set_achievement_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_neutral_random_peds_flee_this_frame(&self, player_: u32) -> ResultOf_set_all_neutral_random_peds_flee_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_all_neutral_random_peds_flee_this_frame(
            player_,
        );
        
        
        ResultOf_set_all_neutral_random_peds_flee_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_health_recharge_max_percent(&self, player_: u32,
limit_: f32) -> ResultOf_set_player_health_recharge_max_percent {
    unsafe {
        let mut player_ = player_;
let mut limit_ = limit_;
        let success = sdk::natives::set_player_health_recharge_max_percent(
            player_,
limit_,
        );
        
        
        ResultOf_set_player_health_recharge_max_percent {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_player_teleport(&self, ) -> ResultOf_stop_player_teleport {
    unsafe {
        
        let success = sdk::natives::stop_player_teleport(
            
        );
        
        
        ResultOf_stop_player_teleport {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_simulate_aiming(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_simulate_aiming {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_simulate_aiming(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_simulate_aiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_unlocked(&self, playerModel_: u32) -> ResultOf_is_special_ability_unlocked {
    unsafe {
        let mut native_return = Default::default();
let mut playerModel_ = playerModel_;
        let success = sdk::natives::is_special_ability_unlocked(
            &mut native_return,
playerModel_,
        );
        let native_return = native_return;
        
        ResultOf_is_special_ability_unlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_since_last_death(&self, ) -> ResultOf_get_time_since_last_death {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_time_since_last_death(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_last_death {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_force_cleanup_occurred(&self, cleanupFlags_: i32) -> ResultOf_has_force_cleanup_occurred {
    unsafe {
        let mut native_return = Default::default();
let mut cleanupFlags_ = cleanupFlags_;
        let success = sdk::natives::has_force_cleanup_occurred(
            &mut native_return,
cleanupFlags_,
        );
        let native_return = native_return;
        
        ResultOf_has_force_cleanup_occurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_on_mission_failed(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_charge_on_mission_failed {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_charge_on_mission_failed(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_charge_on_mission_failed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_air_drag_multiplier_for_players_vehicle(&self, player_: u32,
multiplier_: f32) -> ResultOf_set_air_drag_multiplier_for_players_vehicle {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_air_drag_multiplier_for_players_vehicle(
            player_,
multiplier_,
        );
        
        
        ResultOf_set_air_drag_multiplier_for_players_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_collect_dropped_money(&self, player_: u32,
p1_: bool) -> ResultOf_set_player_can_collect_dropped_money {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_can_collect_dropped_money(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_can_collect_dropped_money {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_using_hood_camera(&self, ) -> ResultOf_get_is_using_hood_camera {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_hood_camera(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_is_using_hood_camera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_weapon_damage_modifier(&self, player_: u32,
modifier_: f32) -> ResultOf_set_player_weapon_damage_modifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_damage_modifier(
            player_,
modifier_,
        );
        
        
        ResultOf_set_player_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_auto_give_scuba_gear_when_exit_vehicle(&self, player_: u32,
toggle_: bool) -> ResultOf_set_auto_give_scuba_gear_when_exit_vehicle {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_auto_give_scuba_gear_when_exit_vehicle(
            player_,
toggle_,
        );
        
        
        ResultOf_set_auto_give_scuba_gear_when_exit_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_use_cover(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_can_use_cover {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_use_cover(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_can_use_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_drove_on_pavement(&self, player_: u32) -> ResultOf_get_time_since_player_drove_on_pavement {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_drove_on_pavement(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_player_drove_on_pavement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_left_the_world(&self, player_: u32) -> ResultOf_has_player_left_the_world {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_left_the_world(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_has_player_left_the_world {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_reserve_parachute_tint_index(&self, player_: u32,
index_: i32) -> ResultOf_get_player_reserve_parachute_tint_index {
    unsafe {
        let mut player_ = player_;
let mut index_ = Default::default();
        let success = sdk::natives::get_player_reserve_parachute_tint_index(
            &mut index_,
player_,
        );
        let index_ = index_;
        
        ResultOf_get_player_reserve_parachute_tint_index {
            success,
            ret: (),
            index_
        }
    }
}

    fn native_set_player_can_be_hassled_by_gangs(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_can_be_hassled_by_gangs {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_be_hassled_by_gangs(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_can_be_hassled_by_gangs {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate(&self, player_: u32,
p1_: i32) -> ResultOf_special_ability_deactivate {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate(
            player_,
p1_,
        );
        
        
        ResultOf_special_ability_deactivate {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_player_been_spotted_in_stolen_vehicle(&self, player_: u32) -> ResultOf_has_player_been_spotted_in_stolen_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_been_spotted_in_stolen_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_has_player_been_spotted_in_stolen_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_player_ped_id(&self, ) -> ResultOf_player_ped_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::player_ped_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_player_ped_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_explosive_damage_modifier(&self, player_: u32,
p1_: i32) -> ResultOf_set_player_explosive_damage_modifier {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_explosive_damage_modifier(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_explosive_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_variation_override(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: bool) -> ResultOf_set_player_parachute_variation_override {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_player_parachute_variation_override(
            player_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_player_parachute_variation_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_world_boundary_for_player(&self, ) -> ResultOf_reset_world_boundary_for_player {
    unsafe {
        
        let success = sdk::natives::reset_world_boundary_for_player(
            
        );
        
        
        ResultOf_reset_world_boundary_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dispatch_cops_for_player(&self, player_: u32,
toggle_: bool) -> ResultOf_set_dispatch_cops_for_player {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dispatch_cops_for_player(
            player_,
toggle_,
        );
        
        
        ResultOf_set_dispatch_cops_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_drove_against_traffic(&self, player_: u32) -> ResultOf_get_time_since_player_drove_against_traffic {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_drove_against_traffic(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_player_drove_against_traffic {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_noise_multiplier(&self, player_: u32,
multiplier_: f32) -> ResultOf_set_player_noise_multiplier {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_player_noise_multiplier(
            player_,
multiplier_,
        );
        
        
        ResultOf_set_player_noise_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_report_police_spotted_player(&self, player_: u32) -> ResultOf_report_police_spotted_player {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::report_police_spotted_player(
            player_,
        );
        
        
        ResultOf_report_police_spotted_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_pack_model_override(&self, player_: u32,
model_: u32) -> ResultOf_set_player_parachute_pack_model_override {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_parachute_pack_model_override(
            player_,
model_,
        );
        
        
        ResultOf_set_player_parachute_pack_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_debug_invincible(&self, player_: u32) -> ResultOf_get_player_debug_invincible {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_debug_invincible(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_debug_invincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_free_for_ambient_task(&self, player_: u32) -> ResultOf_is_player_free_for_ambient_task {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_free_for_ambient_task(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_free_for_ambient_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_mopping_area_free_in_front_of_player(&self, player_: u32,
p1_: f32) -> ResultOf_get_is_mopping_area_free_in_front_of_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_mopping_area_free_in_front_of_player(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_mopping_area_free_in_front_of_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_neutral_random_peds_flee(&self, player_: u32,
toggle_: bool) -> ResultOf_set_all_neutral_random_peds_flee {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_neutral_random_peds_flee(
            player_,
toggle_,
        );
        
        
        ResultOf_set_all_neutral_random_peds_flee {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_player_start_mission(&self, player_: u32) -> ResultOf_can_player_start_mission {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::can_player_start_mission(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_can_player_start_mission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_level_now(&self, player_: u32,
p1_: bool) -> ResultOf_set_player_wanted_level_now {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_wanted_level_now(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_wanted_level_now {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_player_teleport(&self, player_: u32) -> ResultOf_update_player_teleport {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::update_player_teleport(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_update_player_teleport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_wanted_level(&self, player_: u32) -> ResultOf_get_player_wanted_level {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_wanted_level(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_player_wanted_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_since_player_hit_ped(&self, player_: u32) -> ResultOf_get_time_since_player_hit_ped {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_hit_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_since_player_hit_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_damaged_at_least_one_non_animal_ped(&self, player_: u32) -> ResultOf_has_player_damaged_at_least_one_non_animal_ped {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_damaged_at_least_one_non_animal_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_has_player_damaged_at_least_one_non_animal_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_rgb_colour(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_player_rgb_colour {
    unsafe {
        let mut player_ = player_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_player_rgb_colour(
            &mut r_,
&mut g_,
&mut b_,
player_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_player_rgb_colour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_report_crime(&self, player_: u32,
crimeType_: i32,
wantedLvlThresh_: i32) -> ResultOf_report_crime {
    unsafe {
        let mut player_ = player_;
let mut crimeType_ = crimeType_;
let mut wantedLvlThresh_ = wantedLvlThresh_;
        let success = sdk::natives::report_crime(
            player_,
crimeType_,
wantedLvlThresh_,
        );
        
        
        ResultOf_report_crime {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_continuous(&self, player_: u32,
p1_: u32,
p2_: i32) -> ResultOf_special_ability_charge_continuous {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_charge_continuous(
            player_,
p1_,
p2_,
        );
        
        
        ResultOf_special_ability_charge_continuous {
            success,
            ret: (),
            
        }
    }
}

    fn native_player_attach_virtual_bound(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32) -> ResultOf_player_attach_virtual_bound {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::player_attach_virtual_bound(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_player_attach_virtual_bound {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_homing_disabled_for_all_vehicle_weapons(&self, p0_: i32,
p1_: i32) -> ResultOf_set_player_homing_disabled_for_all_vehicle_weapons {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_homing_disabled_for_all_vehicle_weapons(
            p0_,
p1_,
        );
        
        
        ResultOf_set_player_homing_disabled_for_all_vehicle_weapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_id_to_int(&self, ) -> ResultOf_network_player_id_to_int {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_id_to_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_player_id_to_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_parachute_smoke_trail_color(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_player_parachute_smoke_trail_color {
    unsafe {
        let mut player_ = player_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_player_parachute_smoke_trail_color(
            &mut r_,
&mut g_,
&mut b_,
player_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_player_parachute_smoke_trail_color {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_player_fall_distance_to_trigger_ragdoll_override(&self, player_: u32,
p1_: f32) -> ResultOf_set_player_fall_distance_to_trigger_ragdoll_override {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_fall_distance_to_trigger_ragdoll_override(
            player_,
p1_,
        );
        
        
        ResultOf_set_player_fall_distance_to_trigger_ragdoll_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_has_damaged_at_least_one_ped(&self, player_: u32) -> ResultOf_clear_player_has_damaged_at_least_one_ped {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_has_damaged_at_least_one_ped(
            player_,
        );
        
        
        ResultOf_clear_player_has_damaged_at_least_one_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_player_driving_wreckless(&self, player_: u32,
p1_: i32) -> ResultOf_get_is_player_driving_wreckless {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_player_driving_wreckless(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_player_driving_wreckless {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_medium(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_special_ability_charge_medium {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_medium(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_special_ability_charge_medium {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_unlock(&self, playerModel_: u32,
p1_: i32) -> ResultOf_special_ability_unlock {
    unsafe {
        let mut playerModel_ = playerModel_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_unlock(
            playerModel_,
p1_,
        );
        
        
        ResultOf_special_ability_unlock {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_online(&self, ) -> ResultOf_is_player_online {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_online(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_player_online {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_hear_player(&self, player_: u32,
ped_: u32) -> ResultOf_can_ped_hear_player {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut ped_ = ped_;
        let success = sdk::natives::can_ped_hear_player(
            &mut native_return,
player_,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_can_ped_hear_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_player_helmet(&self, player_: u32,
p2_: bool) -> ResultOf_remove_player_helmet {
    unsafe {
        let mut player_ = player_;
let mut p2_ = p2_;
        let success = sdk::natives::remove_player_helmet(
            player_,
p2_,
        );
        
        
        ResultOf_remove_player_helmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_leave_parachute_smoke_trail(&self, player_: u32,
enabled_: bool) -> ResultOf_set_player_can_leave_parachute_smoke_trail {
    unsafe {
        let mut player_ = player_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_player_can_leave_parachute_smoke_trail(
            player_,
enabled_,
        );
        
        
        ResultOf_set_player_can_leave_parachute_smoke_trail {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_large(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOf_special_ability_charge_large {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_large(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_special_ability_charge_large {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cleanup_for_thread_with_this_id(&self, id_: i32,
cleanupFlags_: i32) -> ResultOf_force_cleanup_for_thread_with_this_id {
    unsafe {
        let mut id_ = id_;
let mut cleanupFlags_ = cleanupFlags_;
        let success = sdk::natives::force_cleanup_for_thread_with_this_id(
            id_,
cleanupFlags_,
        );
        
        
        ResultOf_force_cleanup_for_thread_with_this_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_pressing_horn(&self, player_: u32) -> ResultOf_is_player_pressing_horn {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_pressing_horn(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOf_is_player_pressing_horn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_law_peds_can_attack_non_wanted_player_this_frame(&self, player_: u32) -> ResultOf_set_law_peds_can_attack_non_wanted_player_this_frame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_law_peds_can_attack_non_wanted_player_this_frame(
            player_,
        );
        
        
        ResultOf_set_law_peds_can_attack_non_wanted_player_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_threshold(&self, wantedLevel_: i32) -> ResultOf_get_wanted_level_threshold {
    unsafe {
        let mut native_return = Default::default();
let mut wantedLevel_ = wantedLevel_;
        let success = sdk::natives::get_wanted_level_threshold(
            &mut native_return,
wantedLevel_,
        );
        let native_return = native_return;
        
        ResultOf_get_wanted_level_threshold {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_leave_ped_behind(&self, player_: u32,
toggle_: bool) -> ResultOf_set_player_leave_ped_behind {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_leave_ped_behind(
            player_,
toggle_,
        );
        
        
        ResultOf_set_player_leave_ped_behind {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_special_ability_from_stat(&self, player_: u32,
p1_: i32) -> ResultOf_update_special_ability_from_stat {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::update_special_ability_from_stat(
            player_,
p1_,
        );
        
        
        ResultOf_update_special_ability_from_stat {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_replay_recording(&self, ) -> ResultOf_stop_replay_recording {
    unsafe {
        
        let success = sdk::natives::stop_replay_recording(
            
        );
        
        
        ResultOf_stop_replay_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_cancel_event(&self, ) -> ResultOf_replay_cancel_event {
    unsafe {
        
        let success = sdk::natives::replay_cancel_event(
            
        );
        
        
        ResultOf_replay_cancel_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_recording(&self, ) -> ResultOf_is_replay_recording {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_recording(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_replay_recording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_check_for_event_this_frame(&self, missionNameLabel_: Option<String>,
p1_: i32) -> ResultOf_replay_check_for_event_this_frame {
    unsafe {
        let mut missionNameLabel_ = sdk_helpers::create_c_string_ptr(missionNameLabel_);
let mut p1_ = p1_;
        let success = sdk::natives::replay_check_for_event_this_frame(
            missionNameLabel_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_replay_check_for_event_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_record_back_for_time(&self, p0_: f32,
p1_: f32,
p2_: i32) -> ResultOf_replay_record_back_for_time {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::replay_record_back_for_time(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_replay_record_back_for_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_record_space_available(&self, p0_: bool) -> ResultOf_is_replay_record_space_available {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_replay_record_space_available(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_is_replay_record_space_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_replay_available(&self, ) -> ResultOf_is_replay_available {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_replay_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_start_event(&self, p0_: i32) -> ResultOf_replay_start_event {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::replay_start_event(
            p0_,
        );
        
        
        ResultOf_replay_start_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_save_replay_recording(&self, ) -> ResultOf_save_replay_recording {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::save_replay_recording(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_save_replay_recording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_record_greatest_moment(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_record_greatest_moment {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::record_greatest_moment(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_record_greatest_moment {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_stop_event(&self, ) -> ResultOf_replay_stop_event {
    unsafe {
        
        let success = sdk::natives::replay_stop_event(
            
        );
        
        
        ResultOf_replay_stop_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_replay_recording(&self, ) -> ResultOf_cancel_replay_recording {
    unsafe {
        
        let success = sdk::natives::cancel_replay_recording(
            
        );
        
        
        ResultOf_cancel_replay_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_disable_camera_movement_this_frame(&self, ) -> ResultOf_replay_disable_camera_movement_this_frame {
    unsafe {
        
        let success = sdk::natives::replay_disable_camera_movement_this_frame(
            
        );
        
        
        ResultOf_replay_disable_camera_movement_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_replay_recording(&self, mode_: i32) -> ResultOf_start_replay_recording {
    unsafe {
        let mut mode_ = mode_;
        let success = sdk::natives::start_replay_recording(
            mode_,
        );
        
        
        ResultOf_start_replay_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_initialized(&self, ) -> ResultOf_is_replay_initialized {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_initialized(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_replay_initialized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_prevent_recording_this_frame(&self, ) -> ResultOf_replay_prevent_recording_this_frame {
    unsafe {
        
        let success = sdk::natives::replay_prevent_recording_this_frame(
            
        );
        
        
        ResultOf_replay_prevent_recording_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_reset_event_info(&self, ) -> ResultOf_replay_reset_event_info {
    unsafe {
        
        let success = sdk::natives::replay_reset_event_info(
            
        );
        
        
        ResultOf_replay_reset_event_info {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_control_shutdown(&self, ) -> ResultOf_replay_control_shutdown {
    unsafe {
        
        let success = sdk::natives::replay_control_shutdown(
            
        );
        
        
        ResultOf_replay_control_shutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_rockstar_editor(&self, p0_: i32) -> ResultOf_activate_rockstar_editor {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::activate_rockstar_editor(
            p0_,
        );
        
        
        ResultOf_activate_rockstar_editor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scripts_have_cleaned_up_for_replay_system(&self, ) -> ResultOf_set_scripts_have_cleaned_up_for_replay_system {
    unsafe {
        
        let success = sdk::natives::set_scripts_have_cleaned_up_for_replay_system(
            
        );
        
        
        ResultOf_set_scripts_have_cleaned_up_for_replay_system {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_effect_for_replay_editor(&self, p0_: Option<String>,
p1_: bool) -> ResultOf_register_effect_for_replay_editor {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::register_effect_for_replay_editor(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOf_register_effect_for_replay_editor {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_system_has_requested_a_script_cleanup(&self, ) -> ResultOf_replay_system_has_requested_a_script_cleanup {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::replay_system_has_requested_a_script_cleanup(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_replay_system_has_requested_a_script_cleanup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_replay_system_paused_for_save(&self, p0_: bool) -> ResultOf_set_replay_system_paused_for_save {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_replay_system_paused_for_save(
            p0_,
        );
        
        
        ResultOf_set_replay_system_paused_for_save {
            success,
            ret: (),
            
        }
    }
}

    fn native_savemigration_mp_get_status(&self, ) -> ResultOf_savemigration_mp_get_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_mp_get_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_num_accounts(&self, ) -> ResultOf_savemigration_mp_num_accounts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_num_accounts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_mp_num_accounts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_is_mp_enabled(&self, ) -> ResultOf_savemigration_is_mp_enabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_is_mp_enabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_is_mp_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_request_accounts(&self, ) -> ResultOf_savemigration_mp_request_accounts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_request_accounts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_mp_request_accounts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_get_accounts_status(&self, ) -> ResultOf_savemigration_mp_get_accounts_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_get_accounts_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_mp_get_accounts_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_request_status(&self, ) -> ResultOf_savemigration_mp_request_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_request_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_savemigration_mp_request_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_get_account(&self, p0_: i32,
p1_: i32) -> ResultOf_savemigration_mp_get_account {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::savemigration_mp_get_account(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_savemigration_mp_get_account {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_get_name_of_script_with_this_id(&self, threadId_: i32) -> ResultOf_get_name_of_script_with_this_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut threadId_ = threadId_;
        let success = sdk::natives::get_name_of_script_with_this_id(
            native_return.pin_mut(),
threadId_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_name_of_script_with_this_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_loading_screen(&self, ) -> ResultOf_shutdown_loading_screen {
    unsafe {
        
        let success = sdk::natives::shutdown_loading_screen(
            
        );
        
        
        ResultOf_shutdown_loading_screen {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_does_launch_param_exist(&self, scriptIndex_: i32,
p1_: Option<String>) -> ResultOf_bg_does_launch_param_exist {
    unsafe {
        let mut native_return = Default::default();
let mut scriptIndex_ = scriptIndex_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::bg_does_launch_param_exist(
            &mut native_return,
scriptIndex_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_bg_does_launch_param_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_end_context_hash(&self, contextHash_: u32) -> ResultOf_bg_end_context_hash {
    unsafe {
        let mut contextHash_ = contextHash_;
        let success = sdk::natives::bg_end_context_hash(
            contextHash_,
        );
        
        
        ResultOf_bg_end_context_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_this_thread(&self, ) -> ResultOf_terminate_this_thread {
    unsafe {
        
        let success = sdk::natives::terminate_this_thread(
            
        );
        
        
        ResultOf_terminate_this_thread {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_no_loading_screen(&self, ) -> ResultOf_get_no_loading_screen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_no_loading_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_no_loading_screen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_get_launch_param_value(&self, scriptIndex_: i32,
p1_: Option<String>) -> ResultOf_bg_get_launch_param_value {
    unsafe {
        let mut native_return = Default::default();
let mut scriptIndex_ = scriptIndex_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::bg_get_launch_param_value(
            &mut native_return,
scriptIndex_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_bg_get_launch_param_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_event_data(&self, eventGroup_: i32,
eventIndex_: i32,
eventData_: i32,
eventDataSize_: i32) -> ResultOf_get_event_data {
    unsafe {
        let mut native_return = Default::default();
let mut eventGroup_ = eventGroup_;
let mut eventIndex_ = eventIndex_;
let mut eventData_ = Default::default();
let mut eventDataSize_ = eventDataSize_;
        let success = sdk::natives::get_event_data(
            &mut native_return,
&mut eventData_,
eventGroup_,
eventIndex_,
eventDataSize_,
        );
        let native_return = native_return;
let eventData_ = eventData_;
        
        ResultOf_get_event_data {
            success,
            ret: native_return,
            eventData_
        }
    }
}

    fn native_get_number_of_threads_running_the_script_with_this_hash(&self, scriptHash_: u32) -> ResultOf_get_number_of_threads_running_the_script_with_this_hash {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::get_number_of_threads_running_the_script_with_this_hash(
            &mut native_return,
scriptHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_threads_running_the_script_with_this_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_thread_iterator_get_next_thread_id(&self, ) -> ResultOf_script_thread_iterator_get_next_thread_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::script_thread_iterator_get_next_thread_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_script_thread_iterator_get_next_thread_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_this_script_name(&self, ) -> ResultOf_get_this_script_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_this_script_name(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_this_script_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_thread_active(&self, threadId_: i32) -> ResultOf_is_thread_active {
    unsafe {
        let mut native_return = Default::default();
let mut threadId_ = threadId_;
        let success = sdk::natives::is_thread_active(
            &mut native_return,
threadId_,
        );
        let native_return = native_return;
        
        ResultOf_is_thread_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_no_loading_screen(&self, toggle_: bool) -> ResultOf_set_no_loading_screen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_no_loading_screen(
            toggle_,
        );
        
        
        ResultOf_set_no_loading_screen {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_script_event(&self, eventGroup_: i32,
eventData_: i32,
eventDataSize_: i32,
playerBits_: i32) -> ResultOf_trigger_script_event {
    unsafe {
        let mut eventGroup_ = eventGroup_;
let mut eventData_ = Default::default();
let mut eventDataSize_ = eventDataSize_;
let mut playerBits_ = playerBits_;
        let success = sdk::natives::trigger_script_event(
            &mut eventData_,
eventGroup_,
eventDataSize_,
playerBits_,
        );
        let eventData_ = eventData_;
        
        ResultOf_trigger_script_event {
            success,
            ret: (),
            eventData_
        }
    }
}

    fn native_has_script_with_name_hash_loaded(&self, scriptHash_: u32) -> ResultOf_has_script_with_name_hash_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::has_script_with_name_hash_loaded(
            &mut native_return,
scriptHash_,
        );
        let native_return = native_return;
        
        ResultOf_has_script_with_name_hash_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_events(&self, eventGroup_: i32) -> ResultOf_get_number_of_events {
    unsafe {
        let mut native_return = Default::default();
let mut eventGroup_ = eventGroup_;
        let success = sdk::natives::get_number_of_events(
            &mut native_return,
eventGroup_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_events {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_script(&self, scriptName_: Option<String>) -> ResultOf_request_script {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::request_script(
            scriptName_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_script {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_start_context_hash(&self, contextHash_: u32) -> ResultOf_bg_start_context_hash {
    unsafe {
        let mut contextHash_ = contextHash_;
        let success = sdk::natives::bg_start_context_hash(
            contextHash_,
        );
        
        
        ResultOf_bg_start_context_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_set_exitflag_response(&self, ) -> ResultOf_bg_set_exitflag_response {
    unsafe {
        
        let success = sdk::natives::bg_set_exitflag_response(
            
        );
        
        
        ResultOf_bg_set_exitflag_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_get_script_id_from_name_hash(&self, p0_: u32) -> ResultOf_bg_get_script_id_from_name_hash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::bg_get_script_id_from_name_hash(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_bg_get_script_id_from_name_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_is_exitflag_set(&self, ) -> ResultOf_bg_is_exitflag_set {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::bg_is_exitflag_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_bg_is_exitflag_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_of_this_script_name(&self, ) -> ResultOf_get_hash_of_this_script_name {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_hash_of_this_script_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_hash_of_this_script_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_event_exists(&self, eventGroup_: i32,
eventIndex_: i32) -> ResultOf_get_event_exists {
    unsafe {
        let mut native_return = Default::default();
let mut eventGroup_ = eventGroup_;
let mut eventIndex_ = eventIndex_;
        let success = sdk::natives::get_event_exists(
            &mut native_return,
eventGroup_,
eventIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_event_exists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_start_context(&self, contextName_: Option<String>) -> ResultOf_bg_start_context {
    unsafe {
        let mut contextName_ = sdk_helpers::create_c_string_ptr(contextName_);
        let success = sdk::natives::bg_start_context(
            contextName_.as_ref().unwrap(),
        );
        
        
        ResultOf_bg_start_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_tu_script_event(&self, eventGroup_: i32,
eventData_: i32,
eventDataSize_: i32,
playerBits_: i32) -> ResultOf_send_tu_script_event {
    unsafe {
        let mut eventGroup_ = eventGroup_;
let mut eventData_ = Default::default();
let mut eventDataSize_ = eventDataSize_;
let mut playerBits_ = playerBits_;
        let success = sdk::natives::send_tu_script_event(
            &mut eventData_,
eventGroup_,
eventDataSize_,
playerBits_,
        );
        let eventData_ = eventData_;
        
        ResultOf_send_tu_script_event {
            success,
            ret: (),
            eventData_
        }
    }
}

    fn native_commit_to_loadingscreen_selction(&self, ) -> ResultOf_commit_to_loadingscreen_selction {
    unsafe {
        
        let success = sdk::natives::commit_to_loadingscreen_selction(
            
        );
        
        
        ResultOf_commit_to_loadingscreen_selction {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_id_of_this_thread(&self, ) -> ResultOf_get_id_of_this_thread {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_id_of_this_thread(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_id_of_this_thread {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_script_with_name_hash_as_no_longer_needed(&self, scriptHash_: u32) -> ResultOf_set_script_with_name_hash_as_no_longer_needed {
    unsafe {
        let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::set_script_with_name_hash_as_no_longer_needed(
            scriptHash_,
        );
        
        
        ResultOf_set_script_with_name_hash_as_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_thread(&self, threadId_: i32) -> ResultOf_terminate_thread {
    unsafe {
        let mut threadId_ = threadId_;
        let success = sdk::natives::terminate_thread(
            threadId_,
        );
        
        
        ResultOf_terminate_thread {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_as_no_longer_needed(&self, scriptName_: Option<String>) -> ResultOf_set_script_as_no_longer_needed {
    unsafe {
        let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::set_script_as_no_longer_needed(
            scriptName_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_script_as_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_script_with_name_hash(&self, scriptHash_: u32) -> ResultOf_request_script_with_name_hash {
    unsafe {
        let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::request_script_with_name_hash(
            scriptHash_,
        );
        
        
        ResultOf_request_script_with_name_hash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_event_at_index(&self, eventGroup_: i32,
eventIndex_: i32) -> ResultOf_get_event_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut eventGroup_ = eventGroup_;
let mut eventIndex_ = eventIndex_;
        let success = sdk::natives::get_event_at_index(
            &mut native_return,
eventGroup_,
eventIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_event_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_thread_iterator_reset(&self, ) -> ResultOf_script_thread_iterator_reset {
    unsafe {
        
        let success = sdk::natives::script_thread_iterator_reset(
            
        );
        
        
        ResultOf_script_thread_iterator_reset {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_end_context(&self, contextName_: Option<String>) -> ResultOf_bg_end_context {
    unsafe {
        let mut contextName_ = sdk_helpers::create_c_string_ptr(contextName_);
        let success = sdk::natives::bg_end_context(
            contextName_.as_ref().unwrap(),
        );
        
        
        ResultOf_bg_end_context {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_script_loaded(&self, scriptName_: Option<String>) -> ResultOf_has_script_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::has_script_loaded(
            &mut native_return,
scriptName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_script_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_with_name_hash_exist(&self, scriptHash_: u32) -> ResultOf_does_script_with_name_hash_exist {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
        let success = sdk::natives::does_script_with_name_hash_exist(
            &mut native_return,
scriptHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_script_with_name_hash_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_exist(&self, scriptName_: Option<String>) -> ResultOf_does_script_exist {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
        let success = sdk::natives::does_script_exist(
            &mut native_return,
scriptName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_script_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unregister_script_variable(&self, unkVariable_: i32) -> ResultOf_unregister_script_variable {
    unsafe {
        let mut unkVariable_ = Default::default();
        let success = sdk::natives::unregister_script_variable(
            &mut unkVariable_,
        );
        let unkVariable_ = unkVariable_;
        
        ResultOf_unregister_script_variable {
            success,
            ret: (),
            unkVariable_
        }
    }
}

    fn native_register_script_variable(&self, unkVariable_: i32) -> ResultOf_register_script_variable {
    unsafe {
        let mut unkVariable_ = Default::default();
        let success = sdk::natives::register_script_variable(
            &mut unkVariable_,
        );
        let unkVariable_ = unkVariable_;
        
        ResultOf_register_script_variable {
            success,
            ret: (),
            unkVariable_
        }
    }
}

    fn native_force_check_script_variables(&self, ) -> ResultOf_force_check_script_variables {
    unsafe {
        
        let success = sdk::natives::force_check_script_variables(
            
        );
        
        
        ResultOf_force_check_script_variables {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_shape_test_bounding_box(&self, entity_: u32,
flags1_: i32,
flags2_: i32) -> ResultOf_start_shape_test_bounding_box {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut flags1_ = flags1_;
let mut flags2_ = flags2_;
        let success = sdk::natives::start_shape_test_bounding_box(
            &mut native_return,
entity_,
flags1_,
flags2_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_bounding_box {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_capsule(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32,
flags_: i32,
entity_: u32,
p9_: i32) -> ResultOf_start_shape_test_capsule {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p9_ = p9_;
        let success = sdk::natives::start_shape_test_capsule(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
flags_,
entity_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_capsule {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_script_guid_from_entity(&self, entityHit_: u32) -> ResultOf_release_script_guid_from_entity {
    unsafe {
        let mut entityHit_ = entityHit_;
        let success = sdk::natives::release_script_guid_from_entity(
            entityHit_,
        );
        
        
        ResultOf_release_script_guid_from_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_shape_test_bound(&self, entity_: u32,
flags1_: i32,
flags2_: i32) -> ResultOf_start_shape_test_bound {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut flags1_ = flags1_;
let mut flags2_ = flags2_;
        let success = sdk::natives::start_shape_test_bound(
            &mut native_return,
entity_,
flags1_,
flags2_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_bound {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_expensive_synchronous_shape_test_los_probe(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
entity_: u32,
p8_: i32) -> ResultOf_start_expensive_synchronous_shape_test_los_probe {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p8_ = p8_;
        let success = sdk::natives::start_expensive_synchronous_shape_test_los_probe(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
entity_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_start_expensive_synchronous_shape_test_los_probe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shape_test_result(&self, shapeTestHandle_: i32,
hit_: bool,
endCoords_: Option<shared::Vector3>,
surfaceNormal_: Option<shared::Vector3>,
entityHit_: u32) -> ResultOf_get_shape_test_result {
    unsafe {
        let mut native_return = Default::default();
let mut shapeTestHandle_ = shapeTestHandle_;
let mut hit_ = Default::default();
let mut endCoords_ = sdk_helpers::create_vector3_ptr(endCoords_);
let mut surfaceNormal_ = sdk_helpers::create_vector3_ptr(surfaceNormal_);
let mut entityHit_ = Default::default();
        let success = sdk::natives::get_shape_test_result(
            &mut native_return,
&mut hit_,
endCoords_.pin_mut(),
surfaceNormal_.pin_mut(),
&mut entityHit_,
shapeTestHandle_,
        );
        let native_return = native_return;
let hit_ = hit_;
let endCoords_ = sdk_helpers::read_cpp_vector3(endCoords_);
let surfaceNormal_ = sdk_helpers::read_cpp_vector3(surfaceNormal_);
let entityHit_ = entityHit_;
        
        ResultOf_get_shape_test_result {
            success,
            ret: native_return,
            hit_,
endCoords_,
surfaceNormal_,
entityHit_
        }
    }
}

    fn native_get_shape_test_result_including_material(&self, shapeTestHandle_: i32,
hit_: bool,
endCoords_: Option<shared::Vector3>,
surfaceNormal_: Option<shared::Vector3>,
materialHash_: u32,
entityHit_: u32) -> ResultOf_get_shape_test_result_including_material {
    unsafe {
        let mut native_return = Default::default();
let mut shapeTestHandle_ = shapeTestHandle_;
let mut hit_ = Default::default();
let mut endCoords_ = sdk_helpers::create_vector3_ptr(endCoords_);
let mut surfaceNormal_ = sdk_helpers::create_vector3_ptr(surfaceNormal_);
let mut materialHash_ = Default::default();
let mut entityHit_ = Default::default();
        let success = sdk::natives::get_shape_test_result_including_material(
            &mut native_return,
&mut hit_,
endCoords_.pin_mut(),
surfaceNormal_.pin_mut(),
&mut materialHash_,
&mut entityHit_,
shapeTestHandle_,
        );
        let native_return = native_return;
let hit_ = hit_;
let endCoords_ = sdk_helpers::read_cpp_vector3(endCoords_);
let surfaceNormal_ = sdk_helpers::read_cpp_vector3(surfaceNormal_);
let materialHash_ = materialHash_;
let entityHit_ = entityHit_;
        
        ResultOf_get_shape_test_result_including_material {
            success,
            ret: native_return,
            hit_,
endCoords_,
surfaceNormal_,
materialHash_,
entityHit_
        }
    }
}

    fn native_start_shape_test_los_probe(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
entity_: u32,
p8_: i32) -> ResultOf_start_shape_test_los_probe {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p8_ = p8_;
        let success = sdk::natives::start_shape_test_los_probe(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
entity_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_los_probe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_swept_sphere(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32,
flags_: i32,
entity_: u32,
p9_: i32) -> ResultOf_start_shape_test_swept_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p9_ = p9_;
        let success = sdk::natives::start_shape_test_swept_sphere(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
flags_,
entity_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_swept_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_box(&self, x_: f32,
y_: f32,
z_: f32,
dimX_: f32,
dimY_: f32,
dimZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
p9_: i32,
flags_: i32,
entity_: u32,
p12_: i32) -> ResultOf_start_shape_test_box {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut dimX_ = dimX_;
let mut dimY_ = dimY_;
let mut dimZ_ = dimZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut p9_ = p9_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p12_ = p12_;
        let success = sdk::natives::start_shape_test_box(
            &mut native_return,
x_,
y_,
z_,
dimX_,
dimY_,
dimZ_,
rotX_,
rotY_,
rotZ_,
p9_,
flags_,
entity_,
p12_,
        );
        let native_return = native_return;
        
        ResultOf_start_shape_test_box {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_mouse_cursor_los_probe(&self, pVec1_: Option<shared::Vector3>,
pVec2_: Option<shared::Vector3>,
flag_: i32,
entity_: u32,
flag2_: i32) -> ResultOf_start_shape_test_mouse_cursor_los_probe {
    unsafe {
        let mut native_return = Default::default();
let mut pVec1_ = sdk_helpers::create_vector3_ptr(pVec1_);
let mut pVec2_ = sdk_helpers::create_vector3_ptr(pVec2_);
let mut flag_ = flag_;
let mut entity_ = entity_;
let mut flag2_ = flag2_;
        let success = sdk::natives::start_shape_test_mouse_cursor_los_probe(
            &mut native_return,
pVec1_.pin_mut(),
pVec2_.pin_mut(),
flag_,
entity_,
flag2_,
        );
        let native_return = native_return;
let pVec1_ = sdk_helpers::read_cpp_vector3(pVec1_);
let pVec2_ = sdk_helpers::read_cpp_vector3(pVec2_);
        
        ResultOf_start_shape_test_mouse_cursor_los_probe {
            success,
            ret: native_return,
            pVec1_,
pVec2_
        }
    }
}

    fn native_sc_inbox_get_total_num_messages(&self, ) -> ResultOf_sc_inbox_get_total_num_messages {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_inbox_get_total_num_messages(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_get_total_num_messages {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_retrieve_emails(&self, offset_: i32,
limit_: i32) -> ResultOf_sc_email_retrieve_emails {
    unsafe {
        let mut offset_ = offset_;
let mut limit_ = limit_;
        let success = sdk::natives::sc_email_retrieve_emails(
            offset_,
limit_,
        );
        
        
        ResultOf_sc_email_retrieve_emails {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_licenseplate_get_add_is_pending(&self, token_: i32) -> ResultOf_sc_licenseplate_get_add_is_pending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_add_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_add_is_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_set_current_email_tag(&self, p0_: i32) -> ResultOf_sc_email_set_current_email_tag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_email_set_current_email_tag(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_email_set_current_email_tag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_isvalid(&self, plateText_: Option<String>,
token_: i32) -> ResultOf_sc_licenseplate_isvalid {
    unsafe {
        let mut native_return = Default::default();
let mut plateText_ = sdk_helpers::create_c_string_ptr(plateText_);
let mut token_ = Default::default();
        let success = sdk::natives::sc_licenseplate_isvalid(
            &mut native_return,
&mut token_,
plateText_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOf_sc_licenseplate_isvalid {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_email_send_email(&self, p0_: Option<String>) -> ResultOf_sc_email_send_email {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_email_send_email(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_sc_email_send_email {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_email_get_retrieval_status(&self, ) -> ResultOf_sc_email_get_retrieval_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_email_get_retrieval_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_email_get_retrieval_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_check_is_valid(&self, token_: i32) -> ResultOf_sc_profanity_get_check_is_valid {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_check_is_valid(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_profanity_get_check_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_display_name_by_id(&self, p0_: i32,
p1_: Option<String>) -> ResultOf_sc_community_event_get_display_name_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_display_name_by_id(
            &mut native_return,
p1_.pin_mut(),
p0_,
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOf_sc_community_event_get_display_name_by_id {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_licenseplate_add(&self, plateText_: Option<String>,
plateData_: i32,
token_: i32) -> ResultOf_sc_licenseplate_add {
    unsafe {
        let mut native_return = Default::default();
let mut plateText_ = sdk_helpers::create_c_string_ptr(plateText_);
let mut plateData_ = Default::default();
let mut token_ = Default::default();
        let success = sdk::natives::sc_licenseplate_add(
            &mut native_return,
&mut plateData_,
&mut token_,
plateText_.as_ref().unwrap(),
        );
        let native_return = native_return;
let plateData_ = plateData_;
let token_ = token_;
        
        ResultOf_sc_licenseplate_add {
            success,
            ret: native_return,
            plateData_,
token_
        }
    }
}

    fn native_sc_account_info_get_nickname(&self, ) -> ResultOf_sc_account_info_get_nickname {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::sc_account_info_get_nickname(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_sc_account_info_get_nickname {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string_for_type(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>) -> ResultOf_sc_community_event_get_extra_data_string_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_string_for_type(
            &mut native_return,
p1_.pin_mut(),
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOf_sc_community_event_get_extra_data_string_for_type {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_licenseplate_get_plate(&self, token_: i32,
plateIndex_: i32) -> ResultOf_sc_licenseplate_get_plate {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut token_ = token_;
let mut plateIndex_ = plateIndex_;
        let success = sdk::natives::sc_licenseplate_get_plate(
            native_return.pin_mut(),
token_,
plateIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_sc_licenseplate_get_plate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_presence_attr_set_int(&self, attrHash_: u32,
value_: i32) -> ResultOf_sc_presence_attr_set_int {
    unsafe {
        let mut native_return = Default::default();
let mut attrHash_ = attrHash_;
let mut value_ = value_;
        let success = sdk::natives::sc_presence_attr_set_int(
            &mut native_return,
attrHash_,
value_,
        );
        let native_return = native_return;
        
        ResultOf_sc_presence_attr_set_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_achievement_info_status(&self, p0_: i32) -> ResultOf_sc_achievement_info_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::sc_achievement_info_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_sc_achievement_info_status {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_email_message_push_gamer_to_recip_list(&self, gamerHandle_: i32) -> ResultOf_sc_email_message_push_gamer_to_recip_list {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::sc_email_message_push_gamer_to_recip_list(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_sc_email_message_push_gamer_to_recip_list {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_sc_community_event_get_extra_data_float_for_type(&self, p0_: Option<String>,
p1_: f32,
p2_: Option<String>) -> ResultOf_sc_community_event_get_extra_data_float_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_float_for_type(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_community_event_get_extra_data_float_for_type {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_presence_attr_set_string(&self, attrHash_: u32,
value_: Option<String>) -> ResultOf_sc_presence_attr_set_string {
    unsafe {
        let mut native_return = Default::default();
let mut attrHash_ = attrHash_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::sc_presence_attr_set_string(
            &mut native_return,
attrHash_,
value_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_sc_presence_attr_set_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_set_message_as_read_at_index(&self, msgIndex_: i32) -> ResultOf_sc_inbox_set_message_as_read_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut msgIndex_ = msgIndex_;
        let success = sdk::natives::sc_inbox_set_message_as_read_at_index(
            &mut native_return,
msgIndex_,
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_set_message_as_read_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_active_xp_bonus(&self, value_: f32) -> ResultOf_sc_gamerdata_get_active_xp_bonus {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = Default::default();
        let success = sdk::natives::sc_gamerdata_get_active_xp_bonus(
            &mut native_return,
&mut value_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_sc_gamerdata_get_active_xp_bonus {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_get_plate_data(&self, token_: i32,
plateIndex_: i32) -> ResultOf_sc_licenseplate_get_plate_data {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut token_ = token_;
let mut plateIndex_ = plateIndex_;
        let success = sdk::natives::sc_licenseplate_get_plate_data(
            native_return.pin_mut(),
token_,
plateIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_sc_licenseplate_get_plate_data {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_has_extra_data_tu(&self, ) -> ResultOf_sc_transition_news_has_extra_data_tu {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_transition_news_has_extra_data_tu(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_transition_news_has_extra_data_tu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_display_name_for_type(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOf_sc_community_event_get_display_name_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_display_name_for_type(
            &mut native_return,
p0_.pin_mut(),
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_c_string_ptr(p0_);
        
        ResultOf_sc_community_event_get_display_name_for_type {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_has_achievement_been_passed(&self, achievementId_: i32) -> ResultOf_sc_has_achievement_been_passed {
    unsafe {
        let mut native_return = Default::default();
let mut achievementId_ = achievementId_;
        let success = sdk::natives::sc_has_achievement_been_passed(
            &mut native_return,
achievementId_,
        );
        let native_return = native_return;
        
        ResultOf_sc_has_achievement_been_passed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_delete_emails(&self, p0_: i32,
p1_: i32) -> ResultOf_sc_email_delete_emails {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::sc_email_delete_emails(
            &mut p0_,
p1_,
        );
        let p0_ = p0_;
        
        ResultOf_sc_email_delete_emails {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_sc_community_event_is_active_for_type(&self, p0_: Option<String>) -> ResultOf_sc_community_event_is_active_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_is_active_for_type(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_sc_community_event_is_active_for_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_get_email_at_index(&self, p0_: i32,
p1_: i32) -> ResultOf_sc_email_get_email_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::sc_email_get_email_at_index(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_email_get_email_at_index {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_presence_set_activity_rating(&self, p0_: i32,
p1_: f32) -> ResultOf_sc_presence_set_activity_rating {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::sc_presence_set_activity_rating(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_sc_presence_set_activity_rating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_event_id_for_type(&self, p0_: Option<String>) -> ResultOf_sc_community_event_get_event_id_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_get_event_id_for_type(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_sc_community_event_get_event_id_for_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_event_id(&self, ) -> ResultOf_sc_community_event_get_event_id {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_community_event_get_event_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_community_event_get_event_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_float(&self, p0_: Option<String>,
p1_: f32) -> ResultOf_sc_community_event_get_extra_data_float {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
        let success = sdk::natives::sc_community_event_get_extra_data_float(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_community_event_get_extra_data_float {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_email_message_clear_recip_list(&self, ) -> ResultOf_sc_email_message_clear_recip_list {
    unsafe {
        
        let success = sdk::natives::sc_email_message_clear_recip_list(
            
        );
        
        
        ResultOf_sc_email_message_clear_recip_list {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_licenseplate_get_isvalid_status(&self, token_: i32) -> ResultOf_sc_licenseplate_get_isvalid_status {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_isvalid_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_isvalid_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_end(&self, ) -> ResultOf_sc_transition_news_end {
    unsafe {
        
        let success = sdk::natives::sc_transition_news_end(
            
        );
        
        
        ResultOf_sc_transition_news_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOf_sc_community_event_get_extra_data_string_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_string_by_id(
            &mut native_return,
p2_.pin_mut(),
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = sdk_helpers::read_c_string_ptr(p2_);
        
        ResultOf_sc_community_event_get_extra_data_string_by_id {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_inbox_message_get_ugcdata(&self, p0_: i32,
p1_: i32) -> ResultOf_sc_inbox_message_get_ugcdata {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::sc_inbox_message_get_ugcdata(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_inbox_message_get_ugcdata {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_send_bounty_to_recip_list(&self, data_: i32) -> ResultOf_sc_inbox_send_bounty_to_recip_list {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
        let success = sdk::natives::sc_inbox_send_bounty_to_recip_list(
            &mut native_return,
&mut data_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_sc_inbox_send_bounty_to_recip_list {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_sc_transition_news_show(&self, p0_: i32) -> ResultOf_sc_transition_news_show {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_transition_news_show(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_transition_news_show {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_get_count(&self, token_: i32) -> ResultOf_sc_licenseplate_get_count {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_count(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int(&self, p0_: Option<String>,
p1_: i32) -> ResultOf_sc_community_event_get_extra_data_int {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
        let success = sdk::natives::sc_community_event_get_extra_data_int(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_community_event_get_extra_data_int {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_profanity_check_string(&self, string_: Option<String>,
token_: i32) -> ResultOf_sc_profanity_check_string {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut token_ = Default::default();
        let success = sdk::natives::sc_profanity_check_string(
            &mut native_return,
&mut token_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOf_sc_profanity_check_string {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_inbox_message_get_data_string(&self, p0_: i32,
context_: Option<String>,
out_: Option<String>) -> ResultOf_sc_inbox_message_get_data_string {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut out_ = sdk_helpers::create_c_string_ptr(out_);
        let success = sdk::natives::sc_inbox_message_get_data_string(
            &mut native_return,
out_.pin_mut(),
p0_,
context_.as_ref().unwrap(),
        );
        let native_return = native_return;
let out_ = sdk_helpers::read_c_string_ptr(out_);
        
        ResultOf_sc_inbox_message_get_data_string {
            success,
            ret: native_return,
            out_
        }
    }
}

    fn native_sc_email_get_num_retrieved_emails(&self, ) -> ResultOf_sc_email_get_num_retrieved_emails {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_email_get_num_retrieved_emails(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_email_get_num_retrieved_emails {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_string(&self, name_: Option<String>,
value_: Option<String>) -> ResultOf_sc_gamerdata_get_string {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::sc_gamerdata_get_string(
            &mut native_return,
value_.pin_mut(),
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = sdk_helpers::read_c_string_ptr(value_);
        
        ResultOf_sc_gamerdata_get_string {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_get_add_status(&self, token_: i32) -> ResultOf_sc_licenseplate_get_add_status {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_add_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_add_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_check_is_pending(&self, token_: i32) -> ResultOf_sc_profanity_get_check_is_pending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_check_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_profanity_get_check_is_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_bool(&self, name_: Option<String>) -> ResultOf_sc_gamerdata_get_bool {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::sc_gamerdata_get_bool(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_sc_gamerdata_get_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_string_passed(&self, token_: i32) -> ResultOf_sc_profanity_get_string_passed {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_string_passed(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_profanity_get_string_passed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_get_bounty_data_at_index(&self, index_: i32,
outData_: i32) -> ResultOf_sc_inbox_get_bounty_data_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut outData_ = Default::default();
        let success = sdk::natives::sc_inbox_get_bounty_data_at_index(
            &mut native_return,
&mut outData_,
index_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_sc_inbox_get_bounty_data_at_index {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_sc_pause_news_get_pending_story(&self, p0_: i32) -> ResultOf_sc_pause_news_get_pending_story {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_pause_news_get_pending_story(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_pause_news_get_pending_story {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: i32) -> ResultOf_sc_community_event_get_extra_data_int_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = Default::default();
        let success = sdk::natives::sc_community_event_get_extra_data_int_by_id(
            &mut native_return,
&mut p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_sc_community_event_get_extra_data_int_by_id {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_licenseplate_get_check_is_pending(&self, p0_: i32) -> ResultOf_sc_licenseplate_get_check_is_pending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_licenseplate_get_check_is_pending(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_check_is_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_get_extra_data_int_tu(&self, p0_: Option<String>,
p1_: i32) -> ResultOf_sc_transition_news_get_extra_data_int_tu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
        let success = sdk::natives::sc_transition_news_get_extra_data_int_tu(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_transition_news_get_extra_data_int_tu {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_get_message_is_read_at_index(&self, msgIndex_: i32) -> ResultOf_sc_inbox_get_message_is_read_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut msgIndex_ = msgIndex_;
        let success = sdk::natives::sc_inbox_get_message_is_read_at_index(
            &mut native_return,
msgIndex_,
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_get_message_is_read_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_string_status(&self, token_: i32) -> ResultOf_sc_profanity_get_string_status {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_string_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_profanity_get_string_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_do_apply(&self, p0_: i32) -> ResultOf_sc_inbox_message_do_apply {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_inbox_message_do_apply(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_message_do_apply {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOf_sc_community_event_get_extra_data_string {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_extra_data_string(
            &mut native_return,
p1_.pin_mut(),
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOf_sc_community_event_get_extra_data_string {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_message_get_data_int(&self, p0_: i32,
context_: Option<String>,
out_: i32) -> ResultOf_sc_inbox_message_get_data_int {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut out_ = Default::default();
        let success = sdk::natives::sc_inbox_message_get_data_int(
            &mut native_return,
&mut out_,
p0_,
context_.as_ref().unwrap(),
        );
        let native_return = native_return;
let out_ = out_;
        
        ResultOf_sc_inbox_message_get_data_int {
            success,
            ret: native_return,
            out_
        }
    }
}

    fn native_sc_community_event_is_active_by_id(&self, p0_: i32) -> ResultOf_sc_community_event_is_active_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_community_event_is_active_by_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_community_event_is_active_by_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_send_ugcstatupdate_to_recip_list(&self, data_: i32) -> ResultOf_sc_inbox_send_ugcstatupdate_to_recip_list {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::sc_inbox_send_ugcstatupdate_to_recip_list(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_sc_inbox_send_ugcstatupdate_to_recip_list {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_sc_gamerdata_get_float(&self, name_: Option<String>,
value_: f32) -> ResultOf_sc_gamerdata_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = Default::default();
        let success = sdk::natives::sc_gamerdata_get_float(
            &mut native_return,
&mut value_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_sc_gamerdata_get_float {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_inbox_get_message_type_at_index(&self, msgIndex_: i32) -> ResultOf_sc_inbox_get_message_type_at_index {
    unsafe {
        let mut native_return = Default::default();
let mut msgIndex_ = msgIndex_;
        let success = sdk::natives::sc_inbox_get_message_type_at_index(
            &mut native_return,
msgIndex_,
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_get_message_type_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_has_new_rockstar_msg(&self, ) -> ResultOf_sc_has_new_rockstar_msg {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_has_new_rockstar_msg(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_has_new_rockstar_msg {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_cache_new_rockstar_msgs(&self, toggle_: bool) -> ResultOf_sc_cache_new_rockstar_msgs {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::sc_cache_new_rockstar_msgs(
            toggle_,
        );
        
        
        ResultOf_sc_cache_new_rockstar_msgs {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_community_event_get_display_name(&self, p0_: Option<String>) -> ResultOf_sc_community_event_get_display_name {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_get_display_name(
            &mut native_return,
p0_.pin_mut(),
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_c_string_ptr(p0_);
        
        ResultOf_sc_community_event_get_display_name {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_presence_attr_set_float(&self, attrHash_: u32,
value_: f32) -> ResultOf_sc_presence_attr_set_float {
    unsafe {
        let mut native_return = Default::default();
let mut attrHash_ = attrHash_;
let mut value_ = value_;
        let success = sdk::natives::sc_presence_attr_set_float(
            &mut native_return,
attrHash_,
value_,
        );
        let native_return = native_return;
        
        ResultOf_sc_presence_attr_set_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_float_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: f32) -> ResultOf_sc_community_event_get_extra_data_float_by_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = Default::default();
        let success = sdk::natives::sc_community_event_get_extra_data_float_by_id(
            &mut native_return,
&mut p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_sc_community_event_get_extra_data_float_by_id {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_gamerdata_get_int(&self, name_: Option<String>,
value_: i32) -> ResultOf_sc_gamerdata_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = Default::default();
        let success = sdk::natives::sc_gamerdata_get_int(
            &mut native_return,
&mut value_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_sc_gamerdata_get_int {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_set_plate_data(&self, oldPlateText_: Option<String>,
newPlateText_: Option<String>,
plateData_: i32) -> ResultOf_sc_licenseplate_set_plate_data {
    unsafe {
        let mut native_return = Default::default();
let mut oldPlateText_ = sdk_helpers::create_c_string_ptr(oldPlateText_);
let mut newPlateText_ = sdk_helpers::create_c_string_ptr(newPlateText_);
let mut plateData_ = Default::default();
        let success = sdk::natives::sc_licenseplate_set_plate_data(
            &mut native_return,
&mut plateData_,
oldPlateText_.as_ref().unwrap(),
newPlateText_.as_ref().unwrap(),
        );
        let native_return = native_return;
let plateData_ = plateData_;
        
        ResultOf_sc_licenseplate_set_plate_data {
            success,
            ret: native_return,
            plateData_
        }
    }
}

    fn native_sc_licenseplate_get_isvalid_is_pending(&self, token_: i32) -> ResultOf_sc_licenseplate_get_isvalid_is_pending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_isvalid_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_isvalid_is_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_show_next_item(&self, ) -> ResultOf_sc_transition_news_show_next_item {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_transition_news_show_next_item(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_transition_news_show_next_item {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_push_gamer_t0_recip_list(&self, gamerHandle_: i32) -> ResultOf_sc_inbox_message_push_gamer_t0_recip_list {
    unsafe {
        let mut gamerHandle_ = Default::default();
        let success = sdk::natives::sc_inbox_message_push_gamer_t0_recip_list(
            &mut gamerHandle_,
        );
        let gamerHandle_ = gamerHandle_;
        
        ResultOf_sc_inbox_message_push_gamer_t0_recip_list {
            success,
            ret: (),
            gamerHandle_
        }
    }
}

    fn native_sc_get_new_rockstar_msg(&self, ) -> ResultOf_sc_get_new_rockstar_msg {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::sc_get_new_rockstar_msg(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_sc_get_new_rockstar_msg {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_pause_news_init_starter_pack(&self, p0_: i32) -> ResultOf_sc_pause_news_init_starter_pack {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_pause_news_init_starter_pack(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_pause_news_init_starter_pack {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int_for_type(&self, p0_: Option<String>,
p1_: i32,
p2_: Option<String>) -> ResultOf_sc_community_event_get_extra_data_int_for_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_int_for_type(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_community_event_get_extra_data_int_for_type {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_pause_news_shutdown(&self, ) -> ResultOf_sc_pause_news_shutdown {
    unsafe {
        
        let success = sdk::natives::sc_pause_news_shutdown(
            
        );
        
        
        ResultOf_sc_pause_news_shutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_profanity_check_string_ugc(&self, string_: Option<String>,
token_: i32) -> ResultOf_sc_profanity_check_string_ugc {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut token_ = Default::default();
        let success = sdk::natives::sc_profanity_check_string_ugc(
            &mut native_return,
&mut token_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOf_sc_profanity_check_string_ugc {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_licenseplate_get_check_is_valid(&self, p0_: i32) -> ResultOf_sc_licenseplate_get_check_is_valid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_licenseplate_get_check_is_valid(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_sc_licenseplate_get_check_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_get_raw_type_at_index(&self, p0_: i32) -> ResultOf_sc_inbox_message_get_raw_type_at_index {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::sc_inbox_message_get_raw_type_at_index(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_sc_inbox_message_get_raw_type_at_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_check_string(&self, p0_: Option<String>,
p1_: i32) -> ResultOf_sc_licenseplate_check_string {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = Default::default();
        let success = sdk::natives::sc_licenseplate_check_string(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_sc_licenseplate_check_string {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_transition_news_show_timed(&self, p0_: i32,
p1_: i32) -> ResultOf_sc_transition_news_show_timed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::sc_transition_news_show_timed(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_sc_transition_news_show_timed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_is_active(&self, ) -> ResultOf_sc_community_event_is_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_community_event_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_sc_community_event_is_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_get_data_bool(&self, p0_: i32,
p1_: Option<String>) -> ResultOf_sc_inbox_message_get_data_bool {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_inbox_message_get_data_bool(
            &mut native_return,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_sc_inbox_message_get_data_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_npc_phone(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32) -> ResultOf_playstats_npc_phone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::playstats_npc_phone(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        
        
        ResultOf_playstats_npc_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_metric_punish_bodyguard(&self, p0_: i32) -> ResultOf_send_metric_punish_bodyguard {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::send_metric_punish_bodyguard(
            p0_,
        );
        
        
        ResultOf_send_metric_punish_bodyguard {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_formation_ends(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_playstats_mc_formation_ends {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_mc_formation_ends(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_playstats_mc_formation_ends {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_cheat_is_active(&self, ) -> ResultOf_stat_set_cheat_is_active {
    unsafe {
        
        let success = sdk::natives::stat_set_cheat_is_active(
            
        );
        
        
        ResultOf_stat_set_cheat_is_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_inside_track(&self, p0_: i32) -> ResultOf_playstats_casino_inside_track {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_inside_track(
            p0_,
        );
        
        
        ResultOf_playstats_casino_inside_track {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_recover_contraband_mission(&self, data_: i32) -> ResultOf_playstats_recover_contraband_mission {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_recover_contraband_mission(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_recover_contraband_mission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_bc_smash_and_grab(&self, p0_: i32) -> ResultOf_playstats_bc_smash_and_grab {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_smash_and_grab(
            p0_,
        );
        
        
        ResultOf_playstats_bc_smash_and_grab {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_started_session_in_offlinemode(&self, ) -> ResultOf_playstats_started_session_in_offlinemode {
    unsafe {
        
        let success = sdk::natives::playstats_started_session_in_offlinemode(
            
        );
        
        
        ResultOf_playstats_started_session_in_offlinemode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_chip(&self, p0_: i32) -> ResultOf_playstats_casino_chip {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_chip(
            p0_,
        );
        
        
        ResultOf_playstats_casino_chip {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_switch_mc_emblem(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_switch_mc_emblem {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_switch_mc_emblem(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_switch_mc_emblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_deaddrop(&self, p0_: i32) -> ResultOf_playstats_fm_event_deaddrop {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_deaddrop(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_deaddrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_change_mc_role(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
role_: i32,
p5_: i32,
p6_: i32) -> ResultOf_playstats_change_mc_role {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut role_ = role_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_change_mc_role(
            p0_,
p1_,
p2_,
p3_,
role_,
p5_,
p6_,
        );
        
        
        ResultOf_playstats_change_mc_role {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_vehicle_bail_distance(&self, ) -> ResultOf_stat_get_vehicle_bail_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_vehicle_bail_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_vehicle_bail_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_dar_checkpoint(&self, data_: i32) -> ResultOf_playstats_dar_checkpoint {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_dar_checkpoint(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_dar_checkpoint {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_get_packed_stat_int_code(&self, index_: i32,
characterSlot_: i32) -> ResultOf_get_packed_stat_int_code {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::get_packed_stat_int_code(
            &mut native_return,
index_,
characterSlot_,
        );
        let native_return = native_return;
        
        ResultOf_get_packed_stat_int_code {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_write_add_column(&self, p0_: i32,
p1_: i32,
p2_: f32) -> ResultOf_leaderboards_write_add_column {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_write_add_column(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_leaderboards_write_add_column {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_lucky_seven(&self, p0_: i32) -> ResultOf_playstats_casino_lucky_seven {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_lucky_seven(
            p0_,
        );
        
        
        ResultOf_playstats_casino_lucky_seven {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_freemode_prologue_done(&self, p0_: i32,
characterSlot_: i32) -> ResultOf_set_freemode_prologue_done {
    unsafe {
        let mut p0_ = p0_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::set_freemode_prologue_done(
            p0_,
characterSlot_,
        );
        
        
        ResultOf_set_freemode_prologue_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_slot_is_loaded(&self, statSlot_: i32) -> ResultOf_stat_slot_is_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut statSlot_ = statSlot_;
        let success = sdk::natives::stat_slot_is_loaded(
            &mut native_return,
statSlot_,
        );
        let native_return = native_return;
        
        ResultOf_stat_slot_is_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_gunrunning_mission_ended(&self, data_: i32) -> ResultOf_playstats_gunrunning_mission_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_gunrunning_mission_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_gunrunning_mission_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_friend_activity(&self, p0_: i32,
p1_: bool) -> ResultOf_playstats_friend_activity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_friend_activity(
            p0_,
p1_,
        );
        
        
        ResultOf_playstats_friend_activity {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_number_of_columns(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards_get_number_of_columns {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards_get_number_of_columns(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_number_of_columns {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_carclub_challenge(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_carclub_challenge {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_carclub_challenge(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_carclub_challenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_bool(&self, statHash_: u32,
outValue_: bool,
p2_: i32) -> ResultOf_stat_get_bool {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_bool(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_bool {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_presence_event_updatestat_int(&self, statHash_: u32,
value_: i32,
p2_: i32) -> ResultOf_presence_event_updatestat_int {
    unsafe {
        let mut statHash_ = statHash_;
let mut value_ = value_;
let mut p2_ = p2_;
        let success = sdk::natives::presence_event_updatestat_int(
            statHash_,
value_,
p2_,
        );
        
        
        ResultOf_presence_event_updatestat_int {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_ros_bet(&self, amount_: i32,
act_: i32,
player_: u32,
cm_: f32) -> ResultOf_playstats_ros_bet {
    unsafe {
        let mut amount_ = amount_;
let mut act_ = act_;
let mut player_ = player_;
let mut cm_ = cm_;
        let success = sdk::natives::playstats_ros_bet(
            amount_,
act_,
player_,
cm_,
        );
        
        
        ResultOf_playstats_ros_bet {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_lts_round_end(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_job_lts_round_end {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::playstats_job_lts_round_end(
            &mut p0_,
&mut p1_,
&mut p2_,
&mut p3_,
        );
        let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_playstats_job_lts_round_end {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_playstats_bc_protection_racket(&self, p0_: i32) -> ResultOf_playstats_bc_protection_racket {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_protection_racket(
            p0_,
        );
        
        
        ResultOf_playstats_bc_protection_racket {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_packed_stat_int_code(&self, index_: i32,
value_: i32,
characterSlot_: i32) -> ResultOf_set_packed_stat_int_code {
    unsafe {
        let mut index_ = index_;
let mut value_ = value_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::set_packed_stat_int_code(
            index_,
value_,
characterSlot_,
        );
        
        
        ResultOf_set_packed_stat_int_code {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_kingofthecastle(&self, p0_: i32) -> ResultOf_playstats_fm_event_kingofthecastle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_kingofthecastle(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_kingofthecastle {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_shop_item(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_shop_item {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_shop_item(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_shop_item {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_gxt_label(&self, statName_: u32,
value_: Option<String>,
save_: bool) -> ResultOf_stat_set_gxt_label {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_gxt_label(
            &mut native_return,
statName_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_gxt_label {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_freemode_casino_mission_ended(&self, data_: i32) -> ResultOf_playstats_freemode_casino_mission_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_freemode_casino_mission_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_freemode_casino_mission_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_robbery_prep(&self, p0_: i32) -> ResultOf_playstats_robbery_prep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_robbery_prep(
            p0_,
        );
        
        
        ResultOf_playstats_robbery_prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_pennedin(&self, p0_: i32) -> ResultOf_playstats_fm_event_pennedin {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_pennedin(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_pennedin {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_flying_altitude(&self, outValue_: f32) -> ResultOf_stat_get_flying_altitude {
    unsafe {
        let mut native_return = Default::default();
let mut outValue_ = Default::default();
        let success = sdk::natives::stat_get_flying_altitude(
            &mut native_return,
&mut outValue_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_flying_altitude {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_playstats_crate_drop_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOf_playstats_crate_drop_mission_done {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::playstats_crate_drop_mission_done(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_playstats_crate_drop_mission_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_instanced_heist_ended(&self, data_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_instanced_heist_ended {
    unsafe {
        let mut data_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_instanced_heist_ended(
            &mut data_,
p1_,
p2_,
p3_,
        );
        let data_ = data_;
        
        ResultOf_playstats_instanced_heist_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_pimenu_hide_options(&self, data_: i32) -> ResultOf_playstats_pimenu_hide_options {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_pimenu_hide_options(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_pimenu_hide_options {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_get_user_id(&self, statHash_: u32) -> ResultOf_stat_get_user_id {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut statHash_ = statHash_;
        let success = sdk::natives::stat_get_user_id(
            native_return.pin_mut(),
statHash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_stat_get_user_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_inside_track_light(&self, p0_: i32) -> ResultOf_playstats_casino_inside_track_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_inside_track_light(
            p0_,
        );
        
        
        ResultOf_playstats_casino_inside_track_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_defend_contraband_mission(&self, data_: i32) -> ResultOf_playstats_defend_contraband_mission {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_defend_contraband_mission(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_defend_contraband_mission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_reset_all_online_character_stats(&self, p0_: i32) -> ResultOf_stat_reset_all_online_character_stats {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_reset_all_online_character_stats(
            p0_,
        );
        
        
        ResultOf_stat_reset_all_online_character_stats {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_rival_behavior(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOf_playstats_rival_behavior {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::playstats_rival_behavior(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_playstats_rival_behavior {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_hub_entry(&self, p0_: i32) -> ResultOf_playstats_hub_entry {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hub_entry(
            p0_,
        );
        
        
        ResultOf_playstats_hub_entry {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_fragile_goods(&self, p0_: i32) -> ResultOf_playstats_bw_fragile_goods {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_fragile_goods(
            p0_,
        );
        
        
        ResultOf_playstats_bw_fragile_goods {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_change_mc_outfit(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_change_mc_outfit {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_change_mc_outfit(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_change_mc_outfit {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_ng_int_stat_key(&self, index_: i32,
spStat_: bool,
charStat_: bool,
character_: i32,
section_: Option<String>) -> ResultOf_get_packed_ng_int_stat_key {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut spStat_ = spStat_;
let mut charStat_ = charStat_;
let mut character_ = character_;
let mut section_ = sdk_helpers::create_c_string_ptr(section_);
        let success = sdk::natives::get_packed_ng_int_stat_key(
            &mut native_return,
index_,
spStat_,
charStat_,
character_,
section_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_packed_ng_int_stat_key {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_import_export_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_import_export_mission_done {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_import_export_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_import_export_mission_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_date(&self, statName_: u32,
value_: i32,
numFields_: i32,
save_: bool) -> ResultOf_stat_set_date {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = Default::default();
let mut numFields_ = numFields_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_date(
            &mut native_return,
&mut value_,
statName_,
numFields_,
save_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_stat_set_date {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_playstats_fm_event_huntbeast(&self, p0_: i32) -> ResultOf_playstats_fm_event_huntbeast {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_huntbeast(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_huntbeast {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_number_of_seconds(&self, statName_: u32) -> ResultOf_stat_get_number_of_seconds {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
        let success = sdk::natives::stat_get_number_of_seconds(
            &mut native_return,
statName_,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_number_of_seconds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_warehouse_mission_ended(&self, p0_: i32) -> ResultOf_playstats_warehouse_mission_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_warehouse_mission_ended(
            p0_,
        );
        
        
        ResultOf_playstats_warehouse_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_finale(&self, p0_: i32) -> ResultOf_playstats_heist3_finale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_finale(
            p0_,
        );
        
        
        ResultOf_playstats_heist3_finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_write_add_column_long(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_write_add_column_long {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_write_add_column_long(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_leaderboards_write_add_column_long {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_hack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_heist4_hack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_heist4_hack(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_heist4_hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_successful(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_read_successful {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_successful(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_read_successful {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_presence_event_updatestat_float(&self, statHash_: u32,
value_: f32,
p2_: i32) -> ResultOf_presence_event_updatestat_float {
    unsafe {
        let mut statHash_ = statHash_;
let mut value_ = value_;
let mut p2_ = p2_;
        let success = sdk::natives::presence_event_updatestat_float(
            statHash_,
value_,
p2_,
        );
        
        
        ResultOf_presence_event_updatestat_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_business_battle_ended(&self, p0_: i32) -> ResultOf_playstats_business_battle_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_business_battle_ended(
            p0_,
        );
        
        
        ResultOf_playstats_business_battle_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_smuggler_mission_ended(&self, data_: i32) -> ResultOf_playstats_smuggler_mission_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_smuggler_mission_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_smuggler_mission_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_save_migration_consume_content(&self, contentId_: u32,
srcPlatform_: Option<String>,
srcGamerHandle_: Option<String>) -> ResultOf_stat_save_migration_consume_content {
    unsafe {
        let mut native_return = Default::default();
let mut contentId_ = contentId_;
let mut srcPlatform_ = sdk_helpers::create_c_string_ptr(srcPlatform_);
let mut srcGamerHandle_ = sdk_helpers::create_c_string_ptr(srcGamerHandle_);
        let success = sdk::natives::stat_save_migration_consume_content(
            &mut native_return,
contentId_,
srcPlatform_.as_ref().unwrap(),
srcGamerHandle_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_stat_save_migration_consume_content {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_driving_reverse_distance(&self, ) -> ResultOf_stat_get_current_driving_reverse_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_driving_reverse_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_driving_reverse_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_start_record_stat(&self, statType_: i32,
valueType_: i32) -> ResultOf_stat_start_record_stat {
    unsafe {
        let mut native_return = Default::default();
let mut statType_ = statType_;
let mut valueType_ = valueType_;
        let success = sdk::natives::stat_start_record_stat(
            &mut native_return,
statType_,
valueType_,
        );
        let native_return = native_return;
        
        ResultOf_stat_start_record_stat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_info(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards2_read_get_row_data_info {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::leaderboards2_read_get_row_data_info(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_leaderboards2_read_get_row_data_info {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_playstats_cloth_change(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_cloth_change {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_cloth_change(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_cloth_change {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_pos(&self, statName_: u32,
outX_: f32,
outY_: f32,
outZ_: f32,
p4_: i32) -> ResultOf_stat_get_pos {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut outX_ = Default::default();
let mut outY_ = Default::default();
let mut outZ_ = Default::default();
let mut p4_ = p4_;
        let success = sdk::natives::stat_get_pos(
            &mut native_return,
&mut outX_,
&mut outY_,
&mut outZ_,
statName_,
p4_,
        );
        let native_return = native_return;
let outX_ = outX_;
let outY_ = outY_;
let outZ_ = outZ_;
        
        ResultOf_stat_get_pos {
            success,
            ret: native_return,
            outX_,
outY_,
outZ_
        }
    }
}

    fn native_playstats_stone_hatchet_ended(&self, data_: i32) -> ResultOf_playstats_stone_hatchet_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_stone_hatchet_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_stone_hatchet_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_switch_passive_mode(&self, p0_: bool,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_switch_passive_mode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_switch_passive_mode(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_switch_passive_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_float(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards2_read_get_row_data_float {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards2_read_get_row_data_float(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards2_read_get_row_data_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_creator_dm_done(&self, value_: i32) -> ResultOf_set_profile_setting_creator_dm_done {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_dm_done(
            value_,
        );
        
        
        ResultOf_set_profile_setting_creator_dm_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_checkpointcollection(&self, p0_: i32) -> ResultOf_playstats_fm_event_checkpointcollection {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_checkpointcollection(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_checkpointcollection {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_blackjack(&self, p0_: i32) -> ResultOf_playstats_casino_blackjack {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_blackjack(
            p0_,
        );
        
        
        ResultOf_playstats_casino_blackjack {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_being_boss(&self, p0_: i32) -> ResultOf_start_being_boss {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::start_being_boss(
            p0_,
        );
        
        
        ResultOf_start_being_boss {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_passtheparcel(&self, p0_: i32) -> ResultOf_playstats_fm_event_passtheparcel {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_passtheparcel(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_passtheparcel {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_network_increment_on_suicide(&self, p0_: i32,
p1_: f32) -> ResultOf_stat_network_increment_on_suicide {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_network_increment_on_suicide(
            p0_,
p1_,
        );
        
        
        ResultOf_stat_network_increment_on_suicide {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_goon_looking_for_work(&self, p0_: i32) -> ResultOf_change_goon_looking_for_work {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::change_goon_looking_for_work(
            p0_,
        );
        
        
        ResultOf_change_goon_looking_for_work {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_append_director_metric(&self, p0_: i32) -> ResultOf_playstats_append_director_metric {
    unsafe {
        let mut p0_ = Default::default();
        let success = sdk::natives::playstats_append_director_metric(
            &mut p0_,
        );
        let p0_ = p0_;
        
        ResultOf_playstats_append_director_metric {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_playstats_fm_mission_end(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_playstats_fm_mission_end {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_fm_mission_end(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_fm_mission_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_xp(&self, amount_: i32,
type_: u32,
category_: u32) -> ResultOf_playstats_award_xp {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = type_;
let mut category_ = category_;
        let success = sdk::natives::playstats_award_xp(
            amount_,
type_,
category_,
        );
        
        
        ResultOf_playstats_award_xp {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_bad_sport(&self, id_: i32) -> ResultOf_playstats_award_bad_sport {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::playstats_award_bad_sport(
            id_,
        );
        
        
        ResultOf_playstats_award_bad_sport {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_float(&self, statName_: u32,
value_: f32,
save_: bool) -> ResultOf_stat_set_float {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_float(
            &mut native_return,
statName_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native__playstats_player_style(&self, p0_: i32) -> ResultOf__playstats_player_style {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::_playstats_player_style(
            p0_,
        );
        
        
        ResultOf__playstats_player_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_delete_slot(&self, p0_: i32) -> ResultOf_stat_delete_slot {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_delete_slot(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stat_delete_slot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_kill_yourself(&self, ) -> ResultOf_playstats_kill_yourself {
    unsafe {
        
        let success = sdk::natives::playstats_kill_yourself(
            
        );
        
        
        ResultOf_playstats_kill_yourself {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_bool(&self, statName_: u32,
value_: bool,
save_: bool) -> ResultOf_stat_set_bool {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_bool(
            &mut native_return,
statName_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_migrate_check_already_done(&self, ) -> ResultOf_stat_migrate_check_already_done {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_check_already_done(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_migrate_check_already_done {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fast_trvl(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOf_playstats_fast_trvl {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::playstats_fast_trvl(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_playstats_fast_trvl {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arcade_love_match(&self, p0_: i32,
p1_: i32) -> ResultOf_playstats_arcade_love_match {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_arcade_love_match(
            p0_,
p1_,
        );
        
        
        ResultOf_playstats_arcade_love_match {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_migration_cancel_pending_operation(&self, ) -> ResultOf_stat_save_migration_cancel_pending_operation {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_migration_cancel_pending_operation(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_save_migration_cancel_pending_operation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_background_script_action(&self, action_: Option<String>,
value_: i32) -> ResultOf_playstats_background_script_action {
    unsafe {
        let mut action_ = sdk_helpers::create_c_string_ptr(action_);
let mut value_ = value_;
        let success = sdk::natives::playstats_background_script_action(
            action_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_playstats_background_script_action {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_earned_mc_points(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_playstats_earned_mc_points {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_earned_mc_points(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_playstats_earned_mc_points {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_ban_alert(&self, p0_: i32) -> ResultOf_playstats_ban_alert {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_ban_alert(
            p0_,
        );
        
        
        ResultOf_playstats_ban_alert {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arcade_game(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_playstats_arcade_game {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_arcade_game(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_playstats_arcade_game {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_prep(&self, p0_: i32) -> ResultOf_playstats_heist3_prep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_prep(
            p0_,
        );
        
        
        ResultOf_playstats_heist3_prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_cashing(&self, p0_: i32) -> ResultOf_playstats_bc_cashing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_cashing(
            p0_,
        );
        
        
        ResultOf_playstats_bc_cashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_license_plate(&self, statName_: u32) -> ResultOf_stat_get_license_plate {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut statName_ = statName_;
        let success = sdk::natives::stat_get_license_plate(
            native_return.pin_mut(),
statName_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_stat_get_license_plate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_creator_ctf_done(&self, value_: i32) -> ResultOf_set_profile_setting_creator_ctf_done {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_ctf_done(
            value_,
        );
        
        
        ResultOf_set_profile_setting_creator_ctf_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_speed(&self, ) -> ResultOf_stat_get_current_speed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_speed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_cancel_save_migration_status(&self, ) -> ResultOf_stat_get_cancel_save_migration_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_cancel_save_migration_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_cancel_save_migration_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_set_open_savetype_in_job(&self, p0_: i32) -> ResultOf_stat_set_open_savetype_in_job {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_set_open_savetype_in_job(
            p0_,
        );
        
        
        ResultOf_stat_set_open_savetype_in_job {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_number_of_rows(&self, p0_: i32) -> ResultOf_leaderboards_get_cache_number_of_rows {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_number_of_rows(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_cache_number_of_rows {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_hub_exit(&self, p0_: i32) -> ResultOf_playstats_hub_exit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hub_exit(
            p0_,
        );
        
        
        ResultOf_playstats_hub_exit {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_community_start_synch(&self, ) -> ResultOf_stat_community_start_synch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_community_start_synch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_community_start_synch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_migrate_check_get_is_platform_available(&self, p0_: i32) -> ResultOf_stat_migrate_check_get_is_platform_available {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_migrate_check_get_is_platform_available(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stat_migrate_check_get_is_platform_available {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_quit_mode(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_quit_mode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_quit_mode(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_quit_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_njvs_vote(&self, p0_: i32) -> ResultOf_playstats_njvs_vote {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_njvs_vote(
            p0_,
        );
        
        
        ResultOf_playstats_njvs_vote {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_radius(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards2_read_by_radius {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = Default::default();
        let success = sdk::natives::leaderboards2_read_by_radius(
            &mut native_return,
&mut p0_,
&mut p2_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p2_ = p2_;
        
        ResultOf_leaderboards2_read_by_radius {
            success,
            ret: native_return,
            p0_,
p2_
        }
    }
}

    fn native_playstats_idle_kick(&self, msStoodIdle_: i32) -> ResultOf_playstats_idle_kick {
    unsafe {
        let mut msStoodIdle_ = msStoodIdle_;
        let success = sdk::natives::playstats_idle_kick(
            msStoodIdle_,
        );
        
        
        ResultOf_playstats_idle_kick {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_has_driven_all_vehicles(&self, ) -> ResultOf_get_player_has_driven_all_vehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_has_driven_all_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_has_driven_all_vehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_head_hunter(&self, p0_: i32) -> ResultOf_playstats_bw_head_hunter {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_head_hunter(
            p0_,
        );
        
        
        ResultOf_playstats_bw_head_hunter {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_cheat_applied(&self, cheat_: Option<String>) -> ResultOf_playstats_cheat_applied {
    unsafe {
        let mut cheat_ = sdk_helpers::create_c_string_ptr(cheat_);
        let success = sdk::natives::playstats_cheat_applied(
            cheat_.as_ref().unwrap(),
        );
        
        
        ResultOf_playstats_cheat_applied {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_hit_contraband_destroy_limit(&self, p0_: i32) -> ResultOf_playstats_hit_contraband_destroy_limit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hit_contraband_destroy_limit(
            p0_,
        );
        
        
        ResultOf_playstats_hit_contraband_destroy_limit {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_int_stat_key(&self, index_: i32,
spStat_: bool,
charStat_: bool,
character_: i32) -> ResultOf_get_packed_int_stat_key {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut spStat_ = spStat_;
let mut charStat_ = charStat_;
let mut character_ = character_;
        let success = sdk::natives::get_packed_int_stat_key(
            &mut native_return,
index_,
spStat_,
charStat_,
character_,
        );
        let native_return = native_return;
        
        ResultOf_get_packed_int_stat_key {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_disable_stats_tracking(&self, ) -> ResultOf_stat_disable_stats_tracking {
    unsafe {
        
        let success = sdk::natives::stat_disable_stats_tracking(
            
        );
        
        
        ResultOf_stat_disable_stats_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_presence_event_updatestat_int_with_string(&self, statHash_: u32,
value_: i32,
p2_: i32,
string_: Option<String>) -> ResultOf_presence_event_updatestat_int_with_string {
    unsafe {
        let mut statHash_ = statHash_;
let mut value_ = value_;
let mut p2_ = p2_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::presence_event_updatestat_int_with_string(
            statHash_,
value_,
p2_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOf_presence_event_updatestat_int_with_string {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_masked_int(&self, statHash_: u32,
outValue_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_stat_get_masked_int {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::stat_get_masked_int(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_masked_int {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_playstats_fm_event_competitiveurbanwarfare(&self, p0_: i32) -> ResultOf_playstats_fm_event_competitiveurbanwarfare {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_competitiveurbanwarfare(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_competitiveurbanwarfare {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_roulette_light(&self, p0_: i32) -> ResultOf_playstats_casino_roulette_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_roulette_light(
            p0_,
        );
        
        
        ResultOf_playstats_casino_roulette_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_drone_usage(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_playstats_drone_usage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_drone_usage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_drone_usage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_spin_wheel(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_spin_wheel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_spin_wheel(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_spin_wheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_assault(&self, p0_: i32) -> ResultOf_playstats_bw_assault {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_assault(
            p0_,
        );
        
        
        ResultOf_playstats_bw_assault {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_profile_setting_value(&self, profileSetting_: i32,
value_: i32) -> ResultOf_stat_set_profile_setting_value {
    unsafe {
        let mut profileSetting_ = profileSetting_;
let mut value_ = value_;
        let success = sdk::natives::stat_set_profile_setting_value(
            profileSetting_,
value_,
        );
        
        
        ResultOf_stat_set_profile_setting_value {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_carclub_prize(&self, p0_: i32,
vehicleModel_: u32) -> ResultOf_playstats_carclub_prize {
    unsafe {
        let mut p0_ = p0_;
let mut vehicleModel_ = vehicleModel_;
        let success = sdk::natives::playstats_carclub_prize(
            p0_,
vehicleModel_,
        );
        
        
        ResultOf_playstats_carclub_prize {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_oddjob_done(&self, totalTimeMs_: i32,
p1_: i32,
p2_: bool) -> ResultOf_playstats_oddjob_done {
    unsafe {
        let mut totalTimeMs_ = totalTimeMs_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_oddjob_done(
            totalTimeMs_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_oddjob_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_license_plate(&self, statName_: u32,
str_: Option<String>) -> ResultOf_stat_set_license_plate {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut str_ = sdk_helpers::create_c_string_ptr(str_);
        let success = sdk::natives::stat_set_license_plate(
            &mut native_return,
statName_,
str_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_stat_set_license_plate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_challenges(&self, p0_: i32) -> ResultOf_playstats_fm_event_challenges {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_challenges(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_challenges {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_block_saves(&self, ) -> ResultOf_stat_get_block_saves {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_block_saves(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_block_saves {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_boss_goon_uuid(&self, characterSlot_: i32,
p1_: i32,
p2_: i32) -> ResultOf_get_boss_goon_uuid {
    unsafe {
        let mut characterSlot_ = characterSlot_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_boss_goon_uuid(
            characterSlot_,
p1_,
p2_,
        );
        
        
        ResultOf_get_boss_goon_uuid {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_being_goon(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_end_being_goon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::end_being_goon(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_end_being_goon {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_create_match_history_id_2(&self, playerAccountId_: i32,
posixTime_: i32) -> ResultOf_playstats_create_match_history_id_2 {
    unsafe {
        let mut native_return = Default::default();
let mut playerAccountId_ = Default::default();
let mut posixTime_ = Default::default();
        let success = sdk::natives::playstats_create_match_history_id_2(
            &mut native_return,
&mut playerAccountId_,
&mut posixTime_,
        );
        let native_return = native_return;
let playerAccountId_ = playerAccountId_;
let posixTime_ = posixTime_;
        
        ResultOf_playstats_create_match_history_id_2 {
            success,
            ret: native_return,
            playerAccountId_,
posixTime_
        }
    }
}

    fn native_stat_get_challenge_flying_dist(&self, ) -> ResultOf_stat_get_challenge_flying_dist {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_challenge_flying_dist(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_challenge_flying_dist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_cloud_mp_stats_download_and_overwrite_local_save(&self, ) -> ResultOf_force_cloud_mp_stats_download_and_overwrite_local_save {
    unsafe {
        
        let success = sdk::natives::force_cloud_mp_stats_download_and_overwrite_local_save(
            
        );
        
        
        ResultOf_force_cloud_mp_stats_download_and_overwrite_local_save {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arena_wars_spectator(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_arena_wars_spectator {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_arena_wars_spectator(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_arena_wars_spectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_metric_ghosting_to_player(&self, p0_: i32) -> ResultOf_send_metric_ghosting_to_player {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::send_metric_ghosting_to_player(
            p0_,
        );
        
        
        ResultOf_send_metric_ghosting_to_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_nav(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_award_nav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_award_nav(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_award_nav {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_random_mission_done(&self, name_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_random_mission_done {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_random_mission_done(
            name_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_random_mission_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_end(&self, ) -> ResultOf_leaderboards2_read_get_row_data_end {
    unsafe {
        
        let success = sdk::natives::leaderboards2_read_get_row_data_end(
            
        );
        
        
        ResultOf_leaderboards2_read_get_row_data_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_job_activity_id_started(&self, p0_: i32,
characterSlot_: i32) -> ResultOf_set_job_activity_id_started {
    unsafe {
        let mut p0_ = p0_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::set_job_activity_id_started(
            p0_,
characterSlot_,
        );
        
        
        ResultOf_set_job_activity_id_started {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_point_to_point(&self, p0_: i32) -> ResultOf_playstats_bc_point_to_point {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_point_to_point(
            p0_,
        );
        
        
        ResultOf_playstats_bc_point_to_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_number_of_minutes(&self, statName_: u32) -> ResultOf_stat_get_number_of_minutes {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
        let success = sdk::natives::stat_get_number_of_minutes(
            &mut native_return,
statName_,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_number_of_minutes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_int(&self, statHash_: u32,
outValue_: i32,
p2_: i32) -> ResultOf_stat_get_int {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_int(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_int {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_hired_limo(&self, p0_: i32,
p1_: i32) -> ResultOf_hired_limo {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::hired_limo(
            p0_,
p1_,
        );
        
        
        ResultOf_hired_limo {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_acquired_hidden_package(&self, p0_: i32) -> ResultOf_playstats_acquired_hidden_package {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_acquired_hidden_package(
            p0_,
        );
        
        
        ResultOf_playstats_acquired_hidden_package {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_freemode_strand_progression_status(&self, profileSetting_: i32,
settingValue_: i32) -> ResultOf_set_freemode_strand_progression_status {
    unsafe {
        let mut profileSetting_ = profileSetting_;
let mut settingValue_ = settingValue_;
        let success = sdk::natives::set_freemode_strand_progression_status(
            profileSetting_,
settingValue_,
        );
        
        
        ResultOf_set_freemode_strand_progression_status {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_car_jacking(&self, p0_: i32) -> ResultOf_playstats_bc_car_jacking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_car_jacking(
            p0_,
        );
        
        
        ResultOf_playstats_bc_car_jacking {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_masked_int(&self, statName_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
save_: bool) -> ResultOf_stat_set_masked_int {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_masked_int(
            &mut native_return,
statName_,
p1_,
p2_,
p3_,
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_masked_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_mission_over(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOf_playstats_mission_over {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_mission_over(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_playstats_mission_over {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_clear(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_read_clear {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_clear(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_read_clear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bc_salvage(&self, p0_: i32) -> ResultOf_playstats_bc_salvage {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_salvage(
            p0_,
        );
        
        
        ResultOf_playstats_bc_salvage {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_pending(&self, ) -> ResultOf_stat_save_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_save_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_impexp_mission_ended(&self, p0_: i32) -> ResultOf_playstats_impexp_mission_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_impexp_mission_ended(
            p0_,
        );
        
        
        ResultOf_playstats_impexp_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_cloud_slot_save_failed(&self, p0_: i32) -> ResultOf_stat_cloud_slot_save_failed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_save_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stat_cloud_slot_save_failed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_score_int(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards2_read_by_score_int {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_score_int(
            &mut native_return,
&mut p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_read_by_score_int {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_cloud_slot_load_failed(&self, p0_: i32) -> ResultOf_stat_cloud_slot_load_failed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_load_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stat_cloud_slot_load_failed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_master_control(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_master_control {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_master_control(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_master_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_nightclub_mission_ended(&self, p0_: i32) -> ResultOf_playstats_nightclub_mission_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_nightclub_mission_ended(
            p0_,
        );
        
        
        ResultOf_playstats_nightclub_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_dupe_detected(&self, data_: i32) -> ResultOf_playstats_dupe_detected {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_dupe_detected(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_dupe_detected {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_get_current_front_wheel_distance(&self, ) -> ResultOf_stat_get_current_front_wheel_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_front_wheel_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_front_wheel_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_hotproperty(&self, p0_: i32) -> ResultOf_playstats_fm_event_hotproperty {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_hotproperty(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_hotproperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_enter_session_pack(&self, data_: i32) -> ResultOf_playstats_enter_session_pack {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_enter_session_pack(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_enter_session_pack {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_bw_hunt_the_boss(&self, p0_: i32) -> ResultOf_playstats_bw_hunt_the_boss {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_hunt_the_boss(
            p0_,
        );
        
        
        ResultOf_playstats_bw_hunt_the_boss {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_int(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards2_read_get_row_data_int {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards2_read_get_row_data_int(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards2_read_get_row_data_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_save_migration_status(&self, data_: i32) -> ResultOf_stat_get_save_migration_status {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = Default::default();
        let success = sdk::natives::stat_get_save_migration_status(
            &mut native_return,
&mut data_,
        );
        let native_return = native_return;
let data_ = data_;
        
        ResultOf_stat_get_save_migration_status {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_playstats_inventory(&self, p0_: i32) -> ResultOf_playstats_inventory {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_inventory(
            p0_,
        );
        
        
        ResultOf_playstats_inventory {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_clubhouse_activity(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOf_playstats_mc_clubhouse_activity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::playstats_mc_clubhouse_activity(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOf_playstats_mc_clubhouse_activity {
            success,
            ret: (),
            
        }
    }
}

    fn native__playstats_acid_mission_end(&self, p0_: i32) -> ResultOf__playstats_acid_mission_end {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::_playstats_acid_mission_end(
            p0_,
        );
        
        
        ResultOf__playstats_acid_mission_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_stop_tracking_stunts(&self, ) -> ResultOf_playstats_stop_tracking_stunts {
    unsafe {
        
        let success = sdk::natives::playstats_stop_tracking_stunts(
            
        );
        
        
        ResultOf_playstats_stop_tracking_stunts {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_date(&self, statHash_: u32,
outValue_: i32,
numFields_: i32,
p3_: i32) -> ResultOf_stat_get_date {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut numFields_ = numFields_;
let mut p3_ = p3_;
        let success = sdk::natives::stat_get_date(
            &mut native_return,
&mut outValue_,
statHash_,
numFields_,
p3_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_date {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_stat_is_recording_stat(&self, ) -> ResultOf_stat_is_recording_stat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_recording_stat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_is_recording_stat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_urbanwarfare(&self, p0_: i32) -> ResultOf_playstats_fm_event_urbanwarfare {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_urbanwarfare(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_urbanwarfare {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_user_id(&self, statName_: u32,
value_: Option<String>,
save_: bool) -> ResultOf_stat_set_user_id {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_user_id(
            &mut native_return,
statName_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_user_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_bossonbossdeathmatch(&self, p0_: i32) -> ResultOf_playstats_bw_bossonbossdeathmatch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_bossonbossdeathmatch(
            p0_,
        );
        
        
        ResultOf_playstats_bw_bossonbossdeathmatch {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_clear_cache_data_id(&self, p0_: i32) -> ResultOf_leaderboards_clear_cache_data_id {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_clear_cache_data_id(
            p0_,
        );
        
        
        ResultOf_leaderboards_clear_cache_data_id {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_quickfix_tool(&self, element_: i32,
item_: Option<String>) -> ResultOf_playstats_quickfix_tool {
    unsafe {
        let mut element_ = element_;
let mut item_ = sdk_helpers::create_c_string_ptr(item_);
        let success = sdk::natives::playstats_quickfix_tool(
            element_,
item_.as_ref().unwrap(),
        );
        
        
        ResultOf_playstats_quickfix_tool {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_data_row(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_get_cache_data_row {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = Default::default();
        let success = sdk::natives::leaderboards_get_cache_data_row(
            &mut native_return,
&mut p2_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOf_leaderboards_get_cache_data_row {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_leaderboards2_read_friends_by_row(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: i32,
p5_: i32) -> ResultOf_leaderboards2_read_friends_by_row {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::leaderboards2_read_friends_by_row(
            &mut native_return,
&mut p0_,
&mut p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_leaderboards2_read_friends_by_row {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_playstats_start_tracking_stunts(&self, ) -> ResultOf_playstats_start_tracking_stunts {
    unsafe {
        
        let success = sdk::natives::playstats_start_tracking_stunts(
            
        );
        
        
        ResultOf_playstats_start_tracking_stunts {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_hack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_playstats_heist3_hack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_heist3_hack(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_playstats_heist3_hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_npc_invite(&self, p0_: Option<String>) -> ResultOf_playstats_npc_invite {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::playstats_npc_invite(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOf_playstats_npc_invite {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_most_wanted(&self, p0_: i32) -> ResultOf_playstats_bc_most_wanted {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_most_wanted(
            p0_,
        );
        
        
        ResultOf_playstats_bc_most_wanted {
            success,
            ret: (),
            
        }
    }
}

    fn native_packed_stat_get_int_stat_index(&self, p0_: i32) -> ResultOf_packed_stat_get_int_stat_index {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::packed_stat_get_int_stat_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_packed_stat_get_int_stat_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_roulette(&self, p0_: i32) -> ResultOf_playstats_casino_roulette {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_roulette(
            p0_,
        );
        
        
        ResultOf_playstats_casino_roulette {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_pegasus_as_personal_aircraft(&self, modelHash_: u32) -> ResultOf_playstats_pegasus_as_personal_aircraft {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::playstats_pegasus_as_personal_aircraft(
            modelHash_,
        );
        
        
        ResultOf_playstats_pegasus_as_personal_aircraft {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_being_goon(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_start_being_goon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::start_being_goon(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_start_being_goon {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_enable_stats_tracking(&self, ) -> ResultOf_stat_enable_stats_tracking {
    unsafe {
        
        let success = sdk::natives::stat_enable_stats_tracking(
            
        );
        
        
        ResultOf_stat_enable_stats_tracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_savegame_get_status(&self, ) -> ResultOf_stat_migrate_savegame_get_status {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_savegame_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_migrate_savegame_get_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_clear_dirty_read_detected(&self, ) -> ResultOf_stat_clear_dirty_read_detected {
    unsafe {
        
        let success = sdk::natives::stat_clear_dirty_read_detected(
            
        );
        
        
        ResultOf_stat_clear_dirty_read_detected {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_increment(&self, statName_: u32,
value_: f32) -> ResultOf_stat_increment {
    unsafe {
        let mut statName_ = statName_;
let mut value_ = value_;
        let success = sdk::natives::stat_increment(
            statName_,
value_,
        );
        
        
        ResultOf_stat_increment {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_race_checkpoint(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_race_checkpoint {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_race_checkpoint(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_race_checkpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_exists(&self, p0_: i32) -> ResultOf_leaderboards_get_cache_exists {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_exists(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_cache_exists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_jump_distance(&self, ) -> ResultOf_stat_get_current_jump_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_jump_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_jump_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_activity_done(&self, p0_: i32,
activityId_: i32) -> ResultOf_playstats_activity_done {
    unsafe {
        let mut p0_ = p0_;
let mut activityId_ = activityId_;
        let success = sdk::natives::playstats_activity_done(
            p0_,
activityId_,
        );
        
        
        ResultOf_playstats_activity_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_start(&self, p0_: i32) -> ResultOf_leaderboards2_read_get_row_data_start {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::leaderboards2_read_get_row_data_start(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_read_get_row_data_start {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_load_pending(&self, statSlot_: i32) -> ResultOf_stat_load_pending {
    unsafe {
        let mut native_return = Default::default();
let mut statSlot_ = statSlot_;
        let success = sdk::natives::stat_load_pending(
            &mut native_return,
statSlot_,
        );
        let native_return = native_return;
        
        ResultOf_stat_load_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_read_any_pending(&self, ) -> ResultOf_leaderboards_read_any_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::leaderboards_read_any_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_read_any_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_read_clear_all(&self, ) -> ResultOf_leaderboards_read_clear_all {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::leaderboards_read_clear_all(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_read_clear_all {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_being_boss(&self, p0_: i32,
p1_: i32) -> ResultOf_end_being_boss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::end_being_boss(
            p0_,
p1_,
        );
        
        
        ResultOf_end_being_boss {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_savegame_start(&self, platformName_: Option<String>) -> ResultOf_stat_migrate_savegame_start {
    unsafe {
        let mut native_return = Default::default();
let mut platformName_ = sdk_helpers::create_c_string_ptr(platformName_);
        let success = sdk::natives::stat_migrate_savegame_start(
            &mut native_return,
platformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_stat_migrate_savegame_start {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_load(&self, statSlot_: i32) -> ResultOf_stat_load {
    unsafe {
        let mut native_return = Default::default();
let mut statSlot_ = statSlot_;
        let success = sdk::natives::stat_load(
            &mut native_return,
statSlot_,
        );
        let native_return = native_return;
        
        ResultOf_stat_load {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_belly_of_the_beast(&self, p0_: i32) -> ResultOf_playstats_bw_belly_of_the_beast {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_belly_of_the_beast(
            p0_,
        );
        
        
        ResultOf_playstats_bw_belly_of_the_beast {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_lts_end(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_job_lts_end {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::playstats_job_lts_end(
            &mut p0_,
&mut p1_,
&mut p2_,
&mut p3_,
        );
        let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_playstats_job_lts_end {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_stat_stop_record_stat(&self, ) -> ResultOf_stat_stop_record_stat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_stop_record_stat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_stop_record_stat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_local_reset_all_online_character_stats(&self, p0_: i32) -> ResultOf_stat_local_reset_all_online_character_stats {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_local_reset_all_online_character_stats(
            p0_,
        );
        
        
        ResultOf_stat_local_reset_all_online_character_stats {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_clear_pending_saves(&self, p0_: i32) -> ResultOf_stat_clear_pending_saves {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_clear_pending_saves(
            p0_,
        );
        
        
        ResultOf_stat_clear_pending_saves {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_string(&self, statName_: u32,
value_: Option<String>,
save_: bool) -> ResultOf_stat_set_string {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_string(
            &mut native_return,
statName_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_rear_wheel_distance(&self, ) -> ResultOf_stat_get_current_rear_wheel_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_rear_wheel_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_rear_wheel_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_row(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_leaderboards2_read_by_row {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = p2_;
let mut p3_ = Default::default();
let mut p4_ = p4_;
let mut p5_ = Default::default();
let mut p6_ = p6_;
        let success = sdk::natives::leaderboards2_read_by_row(
            &mut native_return,
&mut p0_,
&mut p1_,
&mut p3_,
&mut p5_,
p2_,
p4_,
p6_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
let p3_ = p3_;
let p5_ = p5_;
        
        ResultOf_leaderboards2_read_by_row {
            success,
            ret: native_return,
            p0_,
p1_,
p3_,
p5_
        }
    }
}

    fn native_send_metric_vip_poach(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_send_metric_vip_poach {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::send_metric_vip_poach(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_send_metric_vip_poach {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_pending(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_read_pending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_pending(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_read_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_race_to_point_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_race_to_point_mission_done {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_race_to_point_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_race_to_point_mission_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_write_data(&self, p0_: i32) -> ResultOf_leaderboards2_write_data {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::leaderboards2_write_data(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_write_data {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_playstats_crate_created(&self, p0_: f32,
p1_: f32,
p2_: f32) -> ResultOf_playstats_crate_created {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_crate_created(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_crate_created {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_skydiving_distance(&self, ) -> ResultOf_stat_get_current_skydiving_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_skydiving_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_skydiving_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_community_synch_is_pending(&self, ) -> ResultOf_stat_community_synch_is_pending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_community_synch_is_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_community_synch_is_pending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_dj_usage(&self, p0_: i32,
p1_: i32) -> ResultOf_playstats_dj_usage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_dj_usage(
            p0_,
p1_,
        );
        
        
        ResultOf_playstats_dj_usage {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_int(&self, statName_: u32,
value_: i32,
save_: bool) -> ResultOf_stat_set_int {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_int(
            &mut native_return,
statName_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_int {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_rollback_save_migration(&self, ) -> ResultOf_stat_rollback_save_migration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_rollback_save_migration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_rollback_save_migration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_prologue_complete(&self, ) -> ResultOf_set_profile_setting_prologue_complete {
    unsafe {
        
        let success = sdk::natives::set_profile_setting_prologue_complete(
            
        );
        
        
        ResultOf_set_profile_setting_prologue_complete {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arena_wars_ended(&self, data_: i32) -> ResultOf_playstats_arena_wars_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_arena_wars_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_arena_wars_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_copy_rank_into_new_slot(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_playstats_copy_rank_into_new_slot {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_copy_rank_into_new_slot(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_playstats_copy_rank_into_new_slot {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_cache_data_row(&self, p0_: i32) -> ResultOf_leaderboards_cache_data_row {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::leaderboards_cache_data_row(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards_cache_data_row {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_leaderboards2_read_by_rank(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards2_read_by_rank {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_rank(
            &mut native_return,
&mut p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_read_by_rank {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_playstats_prop_change(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_prop_change {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_prop_change(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_prop_change {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_drive_nocrash_distance(&self, ) -> ResultOf_stat_get_current_drive_nocrash_distance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_drive_nocrash_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_drive_nocrash_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_atob(&self, p0_: i32) -> ResultOf_playstats_fm_event_atob {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_atob(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_atob {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_robbery_finale(&self, p0_: i32) -> ResultOf_playstats_robbery_finale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_robbery_finale(
            p0_,
        );
        
        
        ResultOf_playstats_robbery_finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_pending_or_requested(&self, ) -> ResultOf_stat_save_pending_or_requested {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_pending_or_requested(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_save_pending_or_requested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_match_started(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_playstats_match_started {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_match_started(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_match_started {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_is_stats_tracking_enabled(&self, ) -> ResultOf_stat_is_stats_tracking_enabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_stats_tracking_enabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_is_stats_tracking_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_spent_pi_custom_loadout(&self, amount_: i32) -> ResultOf_playstats_spent_pi_custom_loadout {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::playstats_spent_pi_custom_loadout(
            amount_,
        );
        
        
        ResultOf_playstats_spent_pi_custom_loadout {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_community_get_history(&self, statName_: u32,
p1_: i32,
outValue_: f32) -> ResultOf_stat_community_get_history {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut p1_ = p1_;
let mut outValue_ = Default::default();
        let success = sdk::natives::stat_community_get_history(
            &mut native_return,
&mut outValue_,
statName_,
p1_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_community_get_history {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_playstats_mission_ended(&self, p0_: i32) -> ResultOf_playstats_mission_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_mission_ended(
            p0_,
        );
        
        
        ResultOf_playstats_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_column_type(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_get_column_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_get_column_type(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_column_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_vehicletarget(&self, p0_: i32) -> ResultOf_playstats_fm_event_vehicletarget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_vehicletarget(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_vehicletarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_stats_completed_character_creation(&self, p0_: i32) -> ResultOf_stats_completed_character_creation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stats_completed_character_creation(
            p0_,
        );
        
        
        ResultOf_stats_completed_character_creation {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_vote(&self, p0_: i32) -> ResultOf_playstats_mission_vote {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_mission_vote(
            p0_,
        );
        
        
        ResultOf_playstats_mission_vote {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_load_safe_to_progress_to_mp_from_sp(&self, ) -> ResultOf_stat_get_load_safe_to_progress_to_mp_from_sp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_load_safe_to_progress_to_mp_from_sp(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_load_safe_to_progress_to_mp_from_sp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_has_posted_all_vehicles_driven(&self, ) -> ResultOf_set_has_posted_all_vehicles_driven {
    unsafe {
        
        let success = sdk::natives::set_has_posted_all_vehicles_driven(
            
        );
        
        
        ResultOf_set_has_posted_all_vehicles_driven {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_minigame_usage(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_playstats_minigame_usage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_minigame_usage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_playstats_minigame_usage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_started(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: bool) -> ResultOf_playstats_mission_started {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_mission_started(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_mission_started {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_finale(&self, p0_: i32) -> ResultOf_playstats_heist4_finale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist4_finale(
            p0_,
        );
        
        
        ResultOf_playstats_heist4_finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_current_posix_time(&self, statName_: u32,
p1_: bool) -> ResultOf_stat_set_current_posix_time {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_set_current_posix_time(
            &mut native_return,
statName_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_current_posix_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_handle(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards2_read_by_handle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::leaderboards2_read_by_handle(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_leaderboards2_read_by_handle {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_leaderboards2_read_rank_prediction(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards2_read_rank_prediction {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
        let success = sdk::natives::leaderboards2_read_rank_prediction(
            &mut native_return,
&mut p0_,
&mut p1_,
&mut p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
        
        ResultOf_leaderboards2_read_rank_prediction {
            success,
            ret: native_return,
            p0_,
p1_,
p2_
        }
    }
}

    fn native_leaderboards_get_column_id(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_leaderboards_get_column_id {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_get_column_id(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_column_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_leave_job_chain(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_leave_job_chain {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_leave_job_chain(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_leave_job_chain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_profile_setting_sp_chop_mission_complete(&self, ) -> ResultOf_set_profile_setting_sp_chop_mission_complete {
    unsafe {
        
        let success = sdk::natives::set_profile_setting_sp_chop_mission_complete(
            
        );
        
        
        ResultOf_set_profile_setting_sp_chop_mission_complete {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_check_start(&self, ) -> ResultOf_stat_migrate_check_start {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_check_start(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_migrate_check_start {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_sell_contraband_mission(&self, data_: i32) -> ResultOf_playstats_sell_contraband_mission {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_sell_contraband_mission(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_sell_contraband_mission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_rank_up(&self, rank_: i32) -> ResultOf_playstats_rank_up {
    unsafe {
        let mut rank_ = rank_;
        let success = sdk::natives::playstats_rank_up(
            rank_,
        );
        
        
        ResultOf_playstats_rank_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_clear_for_restart(&self, ) -> ResultOf_stat_migrate_clear_for_restart {
    unsafe {
        
        let success = sdk::natives::stat_migrate_clear_for_restart(
            
        );
        
        
        ResultOf_stat_migrate_clear_for_restart {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_three_card_poker_light(&self, p0_: i32) -> ResultOf_playstats_casino_three_card_poker_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_three_card_poker_light(
            p0_,
        );
        
        
        ResultOf_playstats_casino_three_card_poker_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_checkpoint(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_mission_checkpoint {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_mission_checkpoint(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_mission_checkpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_write_data_for_event_type(&self, p0_: i32,
p1_: i32) -> ResultOf_leaderboards2_write_data_for_event_type {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = Default::default();
        let success = sdk::natives::leaderboards2_write_data_for_event_type(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOf_leaderboards2_write_data_for_event_type {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_playstats_hold_up_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_hold_up_mission_done {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_hold_up_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_hold_up_mission_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_request_bike(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_mc_request_bike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_mc_request_bike(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_mc_request_bike {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_collectible_picked_up(&self, p0_: i32,
objectHash_: u32,
p2_: i32,
p3_: i32,
moneyAmount_: i32,
rpAmount_: i32,
chipsAmount_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOf_playstats_collectible_picked_up {
    unsafe {
        let mut p0_ = p0_;
let mut objectHash_ = objectHash_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut moneyAmount_ = moneyAmount_;
let mut rpAmount_ = rpAmount_;
let mut chipsAmount_ = chipsAmount_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::playstats_collectible_picked_up(
            p0_,
objectHash_,
p2_,
p3_,
moneyAmount_,
rpAmount_,
chipsAmount_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOf_playstats_collectible_picked_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_save_migration_consume_content_status(&self, p0_: i32) -> ResultOf_stat_get_save_migration_consume_content_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
        let success = sdk::natives::stat_get_save_migration_consume_content_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_stat_get_save_migration_consume_content_status {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_order_boss_vehicle(&self, p0_: i32,
p1_: i32,
vehicleHash_: u32) -> ResultOf_order_boss_vehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut vehicleHash_ = vehicleHash_;
        let success = sdk::natives::order_boss_vehicle(
            p0_,
p1_,
vehicleHash_,
        );
        
        
        ResultOf_order_boss_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native__playstats_acid_rnd(&self, p0_: i32) -> ResultOf__playstats_acid_rnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::_playstats_acid_rnd(
            p0_,
        );
        
        
        ResultOf__playstats_acid_rnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_set_join_type(&self, joinType_: i32) -> ResultOf_playstats_set_join_type {
    unsafe {
        let mut joinType_ = joinType_;
        let success = sdk::natives::playstats_set_join_type(
            joinType_,
        );
        
        
        ResultOf_playstats_set_join_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_tu_int_stat_key(&self, index_: i32,
spStat_: bool,
charStat_: bool,
character_: i32) -> ResultOf_get_packed_tu_int_stat_key {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut spStat_ = spStat_;
let mut charStat_ = charStat_;
let mut character_ = character_;
        let success = sdk::natives::get_packed_tu_int_stat_key(
            &mut native_return,
index_,
spStat_,
charStat_,
character_,
        );
        let native_return = native_return;
        
        ResultOf_get_packed_tu_int_stat_key {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_yatchattack(&self, p0_: i32) -> ResultOf_playstats_bw_yatchattack {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_yatchattack(
            p0_,
        );
        
        
        ResultOf_playstats_bw_yatchattack {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_uniform(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_change_uniform {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::change_uniform(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_change_uniform {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_sub_weap(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_sub_weap {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_sub_weap(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_playstats_sub_weap {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_clear_cache_data(&self, ) -> ResultOf_leaderboards_clear_cache_data {
    unsafe {
        
        let success = sdk::natives::leaderboards_clear_cache_data(
            
        );
        
        
        ResultOf_leaderboards_clear_cache_data {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_blackjack_light(&self, p0_: i32) -> ResultOf_playstats_casino_blackjack_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_blackjack_light(
            p0_,
        );
        
        
        ResultOf_playstats_casino_blackjack_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_abandoned_mc(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_abandoned_mc {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_abandoned_mc(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_abandoned_mc {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_buy_contraband_mission(&self, data_: i32) -> ResultOf_playstats_buy_contraband_mission {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_buy_contraband_mission(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_buy_contraband_mission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_dj_mission_ended(&self, p0_: i32) -> ResultOf_playstats_dj_mission_ended {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_dj_mission_ended(
            p0_,
        );
        
        
        ResultOf_playstats_dj_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_float(&self, statHash_: u32,
outValue_: f32,
p2_: i32) -> ResultOf_stat_get_float {
    unsafe {
        let mut native_return = Default::default();
let mut statHash_ = statHash_;
let mut outValue_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_float(
            &mut native_return,
&mut outValue_,
statHash_,
p2_,
        );
        let native_return = native_return;
let outValue_ = outValue_;
        
        ResultOf_stat_get_float {
            success,
            ret: native_return,
            outValue_
        }
    }
}

    fn native_playstats_fm_heist_prep_ended(&self, data_: i32) -> ResultOf_playstats_fm_heist_prep_ended {
    unsafe {
        let mut data_ = Default::default();
        let success = sdk::natives::playstats_fm_heist_prep_ended(
            &mut data_,
        );
        let data_ = data_;
        
        ResultOf_playstats_fm_heist_prep_ended {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_get_packed_stat_bool_code(&self, index_: i32,
characterSlot_: i32) -> ResultOf_get_packed_stat_bool_code {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::get_packed_stat_bool_code(
            &mut native_return,
index_,
characterSlot_,
        );
        let native_return = native_return;
        
        ResultOf_get_packed_stat_bool_code {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_has_specialedition_content(&self, value_: i32) -> ResultOf_set_has_specialedition_content {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_has_specialedition_content(
            value_,
        );
        
        
        ResultOf_set_has_specialedition_content {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_gunrunning_rnd(&self, p0_: i32) -> ResultOf_playstats_gunrunning_rnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_gunrunning_rnd(
            p0_,
        );
        
        
        ResultOf_playstats_gunrunning_rnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_pos(&self, statName_: u32,
x_: f32,
y_: f32,
z_: f32,
save_: bool) -> ResultOf_stat_set_pos {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_pos(
            &mut native_return,
statName_,
x_,
y_,
z_,
save_,
        );
        let native_return = native_return;
        
        ResultOf_stat_set_pos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_packed_stat_bool_code(&self, index_: i32,
value_: bool,
characterSlot_: i32) -> ResultOf_set_packed_stat_bool_code {
    unsafe {
        let mut index_ = index_;
let mut value_ = value_;
let mut characterSlot_ = characterSlot_;
        let success = sdk::natives::set_packed_stat_bool_code(
            index_,
value_,
characterSlot_,
        );
        
        
        ResultOf_set_packed_stat_bool_code {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_website_visited(&self, scaleformHash_: u32,
p1_: i32) -> ResultOf_playstats_website_visited {
    unsafe {
        let mut scaleformHash_ = scaleformHash_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_website_visited(
            scaleformHash_,
p1_,
        );
        
        
        ResultOf_playstats_website_visited {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_check_get_platform_status(&self, p0_: i32,
p1_: i32) -> ResultOf_stat_migrate_check_get_platform_status {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = Default::default();
        let success = sdk::natives::stat_migrate_check_get_platform_status(
            &mut native_return,
&mut p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOf_stat_migrate_check_get_platform_status {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_playstats_heist3_drone(&self, p0_: i32) -> ResultOf_playstats_heist3_drone {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_drone(
            p0_,
        );
        
        
        ResultOf_playstats_heist3_drone {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_prep(&self, p0_: i32) -> ResultOf_playstats_heist4_prep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist4_prep(
            p0_,
        );
        
        
        ResultOf_playstats_heist4_prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: bool) -> ResultOf_stat_save {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::stat_save(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_stat_save {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_number_of_days(&self, statName_: u32) -> ResultOf_stat_get_number_of_days {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
        let success = sdk::natives::stat_get_number_of_days(
            &mut native_return,
statName_,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_number_of_days {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bc_finders_keepers(&self, p0_: i32) -> ResultOf_playstats_bc_finders_keepers {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_finders_keepers(
            p0_,
        );
        
        
        ResultOf_playstats_bc_finders_keepers {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_cloud_slot_load_failed_code(&self, p0_: i32) -> ResultOf_stat_cloud_slot_load_failed_code {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_load_failed_code(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_stat_cloud_slot_load_failed_code {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_string(&self, statHash_: u32,
p1_: i32) -> ResultOf_stat_get_string {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut statHash_ = statHash_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_get_string(
            native_return.pin_mut(),
statHash_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_stat_get_string {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_slot_machine_light(&self, p0_: i32) -> ResultOf_playstats_casino_slot_machine_light {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_slot_machine_light(
            p0_,
        );
        
        
        ResultOf_playstats_casino_slot_machine_light {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_score_float(&self, p0_: i32,
p1_: f32,
p2_: i32) -> ResultOf_leaderboards2_read_by_score_float {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_score_float(
            &mut native_return,
&mut p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_read_by_score_float {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_get_current_near_miss_nocrash_precise(&self, ) -> ResultOf_stat_get_current_near_miss_nocrash_precise {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_near_miss_nocrash_precise(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_current_near_miss_nocrash_precise {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_weapon_mode_change(&self, weaponHash_: u32,
componentHashTo_: u32,
componentHashFrom_: u32) -> ResultOf_playstats_weapon_mode_change {
    unsafe {
        let mut weaponHash_ = weaponHash_;
let mut componentHashTo_ = componentHashTo_;
let mut componentHashFrom_ = componentHashFrom_;
        let success = sdk::natives::playstats_weapon_mode_change(
            weaponHash_,
componentHashTo_,
componentHashFrom_,
        );
        
        
        ResultOf_playstats_weapon_mode_change {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_clear_slot_for_reload(&self, statSlot_: i32) -> ResultOf_stat_clear_slot_for_reload {
    unsafe {
        let mut native_return = Default::default();
let mut statSlot_ = statSlot_;
        let success = sdk::natives::stat_clear_slot_for_reload(
            &mut native_return,
statSlot_,
        );
        let native_return = native_return;
        
        ResultOf_stat_clear_slot_for_reload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native__playstats_idle(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf__playstats_idle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::_playstats_idle(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf__playstats_idle {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_load_dirty_read_detected(&self, ) -> ResultOf_stat_load_dirty_read_detected {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_load_dirty_read_detected(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_load_dirty_read_detected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_criminaldamage(&self, p0_: i32) -> ResultOf_playstats_fm_event_criminaldamage {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_criminaldamage(
            p0_,
        );
        
        
        ResultOf_playstats_fm_event_criminaldamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_slot_machine(&self, p0_: i32) -> ResultOf_playstats_casino_slot_machine {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_slot_machine(
            p0_,
        );
        
        
        ResultOf_playstats_casino_slot_machine {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_time(&self, p0_: i32) -> ResultOf_leaderboards_get_cache_time {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_time(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_leaderboards_get_cache_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_air_freight(&self, p0_: i32) -> ResultOf_playstats_bw_air_freight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_air_freight(
            p0_,
        );
        
        
        ResultOf_playstats_bw_air_freight {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_recorded_value(&self, value_: f32) -> ResultOf_stat_get_recorded_value {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = Default::default();
        let success = sdk::natives::stat_get_recorded_value(
            &mut native_return,
&mut value_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOf_stat_get_recorded_value {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_set_profile_setting_creator_races_done(&self, value_: i32) -> ResultOf_set_profile_setting_creator_races_done {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_races_done(
            value_,
        );
        
        
        ResultOf_set_profile_setting_creator_races_done {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_plaform(&self, p0_: i32,
gamerHandleCsv_: Option<String>,
platformName_: Option<String>) -> ResultOf_leaderboards2_read_by_plaform {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = Default::default();
let mut gamerHandleCsv_ = sdk_helpers::create_c_string_ptr(gamerHandleCsv_);
let mut platformName_ = sdk_helpers::create_c_string_ptr(platformName_);
        let success = sdk::natives::leaderboards2_read_by_plaform(
            &mut native_return,
&mut p0_,
gamerHandleCsv_.as_ref().unwrap(),
platformName_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOf_leaderboards2_read_by_plaform {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_get_number_of_hours(&self, statName_: u32) -> ResultOf_stat_get_number_of_hours {
    unsafe {
        let mut native_return = Default::default();
let mut statName_ = statName_;
        let success = sdk::natives::stat_get_number_of_hours(
            &mut native_return,
statName_,
        );
        let native_return = native_return;
        
        ResultOf_stat_get_number_of_hours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_set_block_saves(&self, toggle_: bool) -> ResultOf_stat_set_block_saves {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::stat_set_block_saves(
            toggle_,
        );
        
        
        ResultOf_stat_set_block_saves {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist_save_cheat(&self, hash_: u32,
p1_: i32) -> ResultOf_playstats_heist_save_cheat {
    unsafe {
        let mut hash_ = hash_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_heist_save_cheat(
            hash_,
p1_,
        );
        
        
        ResultOf_playstats_heist_save_cheat {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_killed_rival_mc_member(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_playstats_mc_killed_rival_mc_member {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_mc_killed_rival_mc_member(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_playstats_mc_killed_rival_mc_member {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_bend(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_job_bend {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::playstats_job_bend(
            &mut p0_,
&mut p1_,
&mut p2_,
&mut p3_,
        );
        let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_playstats_job_bend {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_set_save_migration_transaction_id_warning(&self, transactionId_: i32) -> ResultOf_set_save_migration_transaction_id_warning {
    unsafe {
        let mut transactionId_ = transactionId_;
        let success = sdk::natives::set_save_migration_transaction_id_warning(
            transactionId_,
        );
        
        
        ResultOf_set_save_migration_transaction_id_warning {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_three_card_poker(&self, p0_: i32) -> ResultOf_playstats_casino_three_card_poker {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_three_card_poker(
            p0_,
        );
        
        
        ResultOf_playstats_casino_three_card_poker {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_activity_end(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_playstats_job_activity_end {
    unsafe {
        let mut p0_ = Default::default();
let mut p1_ = Default::default();
let mut p2_ = Default::default();
let mut p3_ = Default::default();
        let success = sdk::natives::playstats_job_activity_end(
            &mut p0_,
&mut p1_,
&mut p2_,
&mut p3_,
        );
        let p0_ = p0_;
let p1_ = p1_;
let p2_ = p2_;
let p3_ = p3_;
        
        ResultOf_playstats_job_activity_end {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_playstats_arcade_cabinet(&self, p0_: i32) -> ResultOf_playstats_arcade_cabinet {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_arcade_cabinet(
            p0_,
        );
        
        
        ResultOf_playstats_arcade_cabinet {
            success,
            ret: (),
            
        }
    }
}

    fn native__playstats_shopmenu_nav(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf__playstats_shopmenu_nav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::_playstats_shopmenu_nav(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf__playstats_shopmenu_nav {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_is_player_vehicle_above_ocean(&self, ) -> ResultOf_stat_is_player_vehicle_above_ocean {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_player_vehicle_above_ocean(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_stat_is_player_vehicle_above_ocean {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_extra_event(&self, p0_: i32) -> ResultOf_playstats_extra_event {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_extra_event(
            p0_,
        );
        
        
        ResultOf_playstats_extra_event {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_sightseer(&self, p0_: i32) -> ResultOf_playstats_bw_sightseer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_sightseer(
            p0_,
        );
        
        
        ResultOf_playstats_bw_sightseer {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_story_mission_ended(&self, p0_: i32,
p1_: i32) -> ResultOf_playstats_casino_story_mission_ended {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_casino_story_mission_ended(
            p0_,
p1_,
        );
        
        
        ResultOf_playstats_casino_story_mission_ended {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_inst_mission_end(&self, p0_: i32) -> ResultOf_playstats_inst_mission_end {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_inst_mission_end(
            p0_,
        );
        
        
        ResultOf_playstats_inst_mission_end {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_carclub_points(&self, p0_: i32) -> ResultOf_playstats_carclub_points {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_carclub_points(
            p0_,
        );
        
        
        ResultOf_playstats_carclub_points {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_new_load_scene_loaded(&self, ) -> ResultOf_is_new_load_scene_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_new_load_scene_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_new_load_scene_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_clip_set(&self, clipSet_: Option<String>) -> ResultOf_remove_clip_set {
    unsafe {
        let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
        let success = sdk::natives::remove_clip_set(
            clipSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_clip_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_allow_time_based_fading_this_frame(&self, ) -> ResultOf_force_allow_time_based_fading_this_frame {
    unsafe {
        
        let success = sdk::natives::force_allow_time_based_fading_this_frame(
            
        );
        
        
        ResultOf_force_allow_time_based_fading_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_collision_at_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_request_collision_at_coord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::request_collision_at_coord(
            x_,
y_,
z_,
        );
        
        
        ResultOf_request_collision_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_is_valid(&self, unused_: i32) -> ResultOf_streamvol_is_valid {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::streamvol_is_valid(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOf_streamvol_is_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_restore_focus_entity(&self, p0_: u32) -> ResultOf_set_restore_focus_entity {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_restore_focus_entity(
            p0_,
        );
        
        
        ResultOf_set_restore_focus_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_interp_out_duration(&self, ) -> ResultOf_get_player_switch_interp_out_duration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_interp_out_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_switch_interp_out_duration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_srl(&self, ) -> ResultOf_end_srl {
    unsafe {
        
        let success = sdk::natives::end_srl(
            
        );
        
        
        ResultOf_end_srl {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_create_line(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOf_streamvol_create_line {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::streamvol_create_line(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_streamvol_create_line {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_model_to_creator_budget(&self, modelHash_: u32) -> ResultOf_add_model_to_creator_budget {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::add_model_to_creator_budget(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_add_model_to_creator_budget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_lodscale(&self, ) -> ResultOf_get_lodscale {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_lodscale(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_lodscale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_switch_establishing_shot(&self, name_: Option<String>) -> ResultOf_set_player_switch_establishing_shot {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_player_switch_establishing_shot(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_player_switch_establishing_shot {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_anim_set(&self, animSet_: Option<String>) -> ResultOf_remove_anim_set {
    unsafe {
        let mut animSet_ = sdk_helpers::create_c_string_ptr(animSet_);
        let success = sdk::natives::remove_anim_set(
            animSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_anim_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_focus_entity(&self, entity_: u32) -> ResultOf_set_focus_entity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_focus_entity(
            entity_,
        );
        
        
        ResultOf_set_focus_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_a_vehicle(&self, model_: u32) -> ResultOf_is_model_a_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_a_vehicle(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_model_a_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scene_streaming_tracks_cam_pos_this_frame(&self, ) -> ResultOf_set_scene_streaming_tracks_cam_pos_this_frame {
    unsafe {
        
        let success = sdk::natives::set_scene_streaming_tracks_cam_pos_this_frame(
            
        );
        
        
        ResultOf_set_scene_streaming_tracks_cam_pos_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_delete(&self, unused_: i32) -> ResultOf_streamvol_delete {
    unsafe {
        let mut unused_ = unused_;
        let success = sdk::natives::streamvol_delete(
            unused_,
        );
        
        
        ResultOf_streamvol_delete {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_create_frustum(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOf_streamvol_create_frustum {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::streamvol_create_frustum(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_streamvol_create_frustum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_long_jump_mode(&self, p0_: bool) -> ResultOf_set_srl_long_jump_mode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_long_jump_mode(
            p0_,
        );
        
        
        ResultOf_set_srl_long_jump_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_short_switch_state(&self, ) -> ResultOf_get_player_short_switch_state {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_short_switch_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_short_switch_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_new_load_scene_start(&self, posX_: f32,
posY_: f32,
posZ_: f32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
radius_: f32,
p7_: i32) -> ResultOf_new_load_scene_start {
    unsafe {
        let mut native_return = Default::default();
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut radius_ = radius_;
let mut p7_ = p7_;
        let success = sdk::natives::new_load_scene_start(
            &mut native_return,
posX_,
posY_,
posZ_,
offsetX_,
offsetY_,
offsetZ_,
radius_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_new_load_scene_start {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_streamvol_create_sphere(&self, x_: f32,
y_: f32,
z_: f32,
rad_: f32,
p4_: i32,
p5_: i32) -> ResultOf_streamvol_create_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rad_ = rad_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::streamvol_create_sphere(
            &mut native_return,
x_,
y_,
z_,
rad_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_streamvol_create_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_collision_for_model_loaded(&self, model_: u32) -> ResultOf_has_collision_for_model_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::has_collision_for_model_loaded(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_has_collision_for_model_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_anim_dict_exist(&self, animDict_: Option<String>) -> ResultOf_does_anim_dict_exist {
    unsafe {
        let mut native_return = Default::default();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::does_anim_dict_exist(
            &mut native_return,
animDict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_anim_dict_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_focus(&self, entity_: u32) -> ResultOf_is_entity_focus {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_focus(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_focus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_clip_set_loaded(&self, clipSet_: Option<String>) -> ResultOf_has_clip_set_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
        let success = sdk::natives::has_clip_set_loaded(
            &mut native_return,
clipSet_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_clip_set_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_focus(&self, ) -> ResultOf_clear_focus {
    unsafe {
        
        let success = sdk::natives::clear_focus(
            
        );
        
        
        ResultOf_clear_focus {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_in_cdimage(&self, model_: u32) -> ResultOf_is_model_in_cdimage {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_in_cdimage(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_model_in_cdimage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prefetch_srl(&self, srl_: Option<String>) -> ResultOf_prefetch_srl {
    unsafe {
        let mut srl_ = sdk_helpers::create_c_string_ptr(srl_);
        let success = sdk::natives::prefetch_srl(
            srl_.as_ref().unwrap(),
        );
        
        
        ResultOf_prefetch_srl {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_used_creator_budget(&self, ) -> ResultOf_get_used_creator_budget {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_used_creator_budget(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_used_creator_budget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_streaming_requests(&self, ) -> ResultOf_get_number_of_streaming_requests {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_streaming_requests(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_streaming_requests {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_render_hd_only(&self, toggle_: bool) -> ResultOf_set_render_hd_only {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_render_hd_only(
            toggle_,
        );
        
        
        ResultOf_set_render_hd_only {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ipl(&self, iplName_: Option<String>) -> ResultOf_request_ipl {
    unsafe {
        let mut iplName_ = sdk_helpers::create_c_string_ptr(iplName_);
        let success = sdk::natives::request_ipl(
            iplName_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_ipl {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_network_loading_scene(&self, ) -> ResultOf_is_network_loading_scene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_network_loading_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_network_loading_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ditch_police_models(&self, toggle_: bool) -> ResultOf_set_ditch_police_models {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ditch_police_models(
            toggle_,
        );
        
        
        ResultOf_set_ditch_police_models {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_player_switch_pan(&self, ) -> ResultOf_allow_player_switch_pan {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_pan(
            
        );
        
        
        ResultOf_allow_player_switch_pan {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_scene(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_load_scene {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::load_scene(
            x_,
y_,
z_,
        );
        
        
        ResultOf_load_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_state(&self, ) -> ResultOf_get_player_switch_state {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_switch_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_hd_map_streaming_this_frame(&self, ) -> ResultOf_suppress_hd_map_streaming_this_frame {
    unsafe {
        
        let success = sdk::natives::suppress_hd_map_streaming_this_frame(
            
        );
        
        
        ResultOf_suppress_hd_map_streaming_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_mapdata_culled(&self, p0_: i32) -> ResultOf_set_all_mapdata_culled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_all_mapdata_culled(
            p0_,
        );
        
        
        ResultOf_set_all_mapdata_culled {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_is_active(&self, ) -> ResultOf_ipl_group_swap_is_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ipl_group_swap_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ipl_group_swap_is_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_switch_interp_out_current_time(&self, ) -> ResultOf_get_player_switch_interp_out_current_time {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_interp_out_current_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_switch_interp_out_current_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_switch_skipping_descent(&self, ) -> ResultOf_is_switch_skipping_descent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_skipping_descent(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_switch_skipping_descent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_short_switch_style(&self, p0_: i32) -> ResultOf_set_player_short_switch_style {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_short_switch_style(
            p0_,
        );
        
        
        ResultOf_set_player_short_switch_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_named_ptfx_asset(&self, fxName_: Option<String>) -> ResultOf_remove_named_ptfx_asset {
    unsafe {
        let mut fxName_ = sdk_helpers::create_c_string_ptr(fxName_);
        let success = sdk::natives::remove_named_ptfx_asset(
            fxName_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_named_ptfx_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_cancel(&self, ) -> ResultOf_ipl_group_swap_cancel {
    unsafe {
        
        let success = sdk::natives::ipl_group_swap_cancel(
            
        );
        
        
        ResultOf_ipl_group_swap_cancel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_streaming(&self, toggle_: bool) -> ResultOf_set_streaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_streaming(
            toggle_,
        );
        
        
        ResultOf_set_streaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_anim_set(&self, animSet_: Option<String>) -> ResultOf_request_anim_set {
    unsafe {
        let mut animSet_ = sdk_helpers::create_c_string_ptr(animSet_);
        let success = sdk::natives::request_anim_set(
            animSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_anim_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_game_pauses_for_streaming(&self, toggle_: bool) -> ResultOf_set_game_pauses_for_streaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_game_pauses_for_streaming(
            toggle_,
        );
        
        
        ResultOf_set_game_pauses_for_streaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_safe_to_start_player_switch(&self, ) -> ResultOf_is_safe_to_start_player_switch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_safe_to_start_player_switch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_safe_to_start_player_switch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_player_switch_outro(&self, ) -> ResultOf_allow_player_switch_outro {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_outro(
            
        );
        
        
        ResultOf_allow_player_switch_outro {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_a_ped(&self, model_: u32) -> ResultOf_is_model_a_ped {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_a_ped(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_model_a_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_reduce_ped_model_budget(&self, toggle_: bool) -> ResultOf_set_reduce_ped_model_budget {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_reduce_ped_model_budget(
            toggle_,
        );
        
        
        ResultOf_set_reduce_ped_model_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_jump_cut_index(&self, ) -> ResultOf_get_player_switch_jump_cut_index {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_jump_cut_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_switch_jump_cut_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_streamvol_has_loaded(&self, unused_: i32) -> ResultOf_streamvol_has_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::streamvol_has_loaded(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOf_streamvol_has_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_global_water_file(&self, waterType_: i32) -> ResultOf_load_global_water_file {
    unsafe {
        let mut waterType_ = waterType_;
        let success = sdk::natives::load_global_water_file(
            waterType_,
        );
        
        
        ResultOf_load_global_water_file {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_reduce_vehicle_model_budget(&self, toggle_: bool) -> ResultOf_set_reduce_vehicle_model_budget {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_reduce_vehicle_model_budget(
            toggle_,
        );
        
        
        ResultOf_set_reduce_vehicle_model_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_named_ptfx_asset_loaded(&self, fxName_: Option<String>) -> ResultOf_has_named_ptfx_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut fxName_ = sdk_helpers::create_c_string_ptr(fxName_);
        let success = sdk::natives::has_named_ptfx_asset_loaded(
            &mut native_return,
fxName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_named_ptfx_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ipl_active(&self, iplName_: Option<String>) -> ResultOf_is_ipl_active {
    unsafe {
        let mut native_return = Default::default();
let mut iplName_ = sdk_helpers::create_c_string_ptr(iplName_);
        let success = sdk::natives::is_ipl_active(
            &mut native_return,
iplName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_ipl_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ptfx_asset(&self, ) -> ResultOf_remove_ptfx_asset {
    unsafe {
        
        let success = sdk::natives::remove_ptfx_asset(
            
        );
        
        
        ResultOf_remove_ptfx_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_models_in_room(&self, interior_: i32,
roomName_: Option<String>) -> ResultOf_request_models_in_room {
    unsafe {
        let mut interior_ = interior_;
let mut roomName_ = sdk_helpers::create_c_string_ptr(roomName_);
        let success = sdk::natives::request_models_in_room(
            interior_,
roomName_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_models_in_room {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_population_budget(&self, p0_: i32) -> ResultOf_set_ped_population_budget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ped_population_budget(
            p0_,
        );
        
        
        ResultOf_set_ped_population_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_player_switch_ascent(&self, ) -> ResultOf_allow_player_switch_ascent {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_ascent(
            
        );
        
        
        ResultOf_allow_player_switch_ascent {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_collision_for_model(&self, model_: u32) -> ResultOf_request_collision_for_model {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_collision_for_model(
            model_,
        );
        
        
        ResultOf_request_collision_for_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_switch_to_multi_firstpart_finished(&self, ) -> ResultOf_is_switch_to_multi_firstpart_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_to_multi_firstpart_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_switch_to_multi_firstpart_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ptfx_asset(&self, ) -> ResultOf_request_ptfx_asset {
    unsafe {
        
        let success = sdk::natives::request_ptfx_asset(
            
        );
        
        
        ResultOf_request_ptfx_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_start(&self, iplName1_: Option<String>,
iplName2_: Option<String>) -> ResultOf_ipl_group_swap_start {
    unsafe {
        let mut iplName1_ = sdk_helpers::create_c_string_ptr(iplName1_);
let mut iplName2_ = sdk_helpers::create_c_string_ptr(iplName2_);
        let success = sdk::natives::ipl_group_swap_start(
            iplName1_.as_ref().unwrap(),
iplName2_.as_ref().unwrap(),
        );
        
        
        ResultOf_ipl_group_swap_start {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_player_switch(&self, ) -> ResultOf_stop_player_switch {
    unsafe {
        
        let success = sdk::natives::stop_player_switch(
            
        );
        
        
        ResultOf_stop_player_switch {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_model(&self, model_: u32) -> ResultOf_request_model {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_model(
            model_,
        );
        
        
        ResultOf_request_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_model_loaded(&self, model_: u32) -> ResultOf_has_model_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::has_model_loaded(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_has_model_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_island_enabled(&self, name_: Option<String>,
toggle_: bool) -> ResultOf_set_island_enabled {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_island_enabled(
            name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_island_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_srl(&self, ) -> ResultOf_begin_srl {
    unsafe {
        
        let success = sdk::natives::begin_srl(
            
        );
        
        
        ResultOf_begin_srl {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_menu_ped_model(&self, model_: u32) -> ResultOf_request_menu_ped_model {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_menu_ped_model(
            model_,
        );
        
        
        ResultOf_request_menu_ped_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_new_load_scene_active(&self, ) -> ResultOf_is_new_load_scene_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_new_load_scene_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_new_load_scene_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_time(&self, p0_: f32) -> ResultOf_set_srl_time {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_time(
            p0_,
        );
        
        
        ResultOf_set_srl_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_lodscale_this_frame(&self, scaling_: f32) -> ResultOf_override_lodscale_this_frame {
    unsafe {
        let mut scaling_ = scaling_;
        let success = sdk::natives::override_lodscale_this_frame(
            scaling_,
        );
        
        
        ResultOf_override_lodscale_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_to_multi_firstpart(&self, ped_: u32,
flags_: i32,
switchType_: i32) -> ResultOf_switch_to_multi_firstpart {
    unsafe {
        let mut ped_ = ped_;
let mut flags_ = flags_;
let mut switchType_ = switchType_;
        let success = sdk::natives::switch_to_multi_firstpart(
            ped_,
flags_,
switchType_,
        );
        
        
        ResultOf_switch_to_multi_firstpart {
            success,
            ret: (),
            
        }
    }
}

    fn native_new_load_scene_start_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: i32) -> ResultOf_new_load_scene_start_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
        let success = sdk::natives::new_load_scene_start_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
p4_,
        );
        let native_return = native_return;
        
        ResultOf_new_load_scene_start_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_player_switch_descent(&self, ) -> ResultOf_allow_player_switch_descent {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_descent(
            
        );
        
        
        ResultOf_allow_player_switch_descent {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mapdatacullbox_enabled(&self, name_: Option<String>,
toggle_: bool) -> ResultOf_set_mapdatacullbox_enabled {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mapdatacullbox_enabled(
            name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_mapdatacullbox_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_type(&self, ) -> ResultOf_get_player_switch_type {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_player_switch_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_creator_budget(&self, ) -> ResultOf_init_creator_budget {
    unsafe {
        
        let success = sdk::natives::init_creator_budget(
            
        );
        
        
        ResultOf_init_creator_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ideal_player_switch_type(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_get_ideal_player_switch_type {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::get_ideal_player_switch_type(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_get_ideal_player_switch_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_named_ptfx_asset(&self, fxName_: Option<String>) -> ResultOf_request_named_ptfx_asset {
    unsafe {
        let mut fxName_ = sdk_helpers::create_c_string_ptr(fxName_);
        let success = sdk::natives::request_named_ptfx_asset(
            fxName_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_named_ptfx_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hd_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_set_hd_area {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_hd_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_set_hd_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_focus_pos_and_vel(&self, x_: f32,
y_: f32,
z_: f32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32) -> ResultOf_set_focus_pos_and_vel {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
        let success = sdk::natives::set_focus_pos_and_vel(
            x_,
y_,
z_,
offsetX_,
offsetY_,
offsetZ_,
        );
        
        
        ResultOf_set_focus_pos_and_vel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_streamvol_active(&self, ) -> ResultOf_is_streamvol_active {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_streamvol_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_streamvol_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_switch_outro_fx(&self, ) -> ResultOf_disable_switch_outro_fx {
    unsafe {
        
        let success = sdk::natives::disable_switch_outro_fx(
            
        );
        
        
        ResultOf_disable_switch_outro_fx {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_all_objects_now(&self, ) -> ResultOf_load_all_objects_now {
    unsafe {
        
        let success = sdk::natives::load_all_objects_now(
            
        );
        
        
        ResultOf_load_all_objects_now {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_srl_readahead_times(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOf_set_srl_readahead_times {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_srl_readahead_times(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_set_srl_readahead_times {
            success,
            ret: (),
            
        }
    }
}

    fn native_remap_lodscale_range_this_frame(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOf_remap_lodscale_range_this_frame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::remap_lodscale_range_this_frame(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_remap_lodscale_range_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_valid(&self, model_: u32) -> ResultOf_is_model_valid {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_valid(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_model_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_new_load_scene_stop(&self, ) -> ResultOf_new_load_scene_stop {
    unsafe {
        
        let success = sdk::natives::new_load_scene_stop(
            
        );
        
        
        ResultOf_new_load_scene_stop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_switch_outro(&self, cameraCoordX_: f32,
cameraCoordY_: f32,
cameraCoordZ_: f32,
camRotationX_: f32,
camRotationY_: f32,
camRotationZ_: f32,
camFov_: f32,
camFarClip_: f32,
rotationOrder_: i32) -> ResultOf_set_player_switch_outro {
    unsafe {
        let mut cameraCoordX_ = cameraCoordX_;
let mut cameraCoordY_ = cameraCoordY_;
let mut cameraCoordZ_ = cameraCoordZ_;
let mut camRotationX_ = camRotationX_;
let mut camRotationY_ = camRotationY_;
let mut camRotationZ_ = camRotationZ_;
let mut camFov_ = camFov_;
let mut camFarClip_ = camFarClip_;
let mut rotationOrder_ = rotationOrder_;
        let success = sdk::natives::set_player_switch_outro(
            cameraCoordX_,
cameraCoordY_,
cameraCoordZ_,
camRotationX_,
camRotationY_,
camRotationZ_,
camFov_,
camFarClip_,
rotationOrder_,
        );
        
        
        ResultOf_set_player_switch_outro {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_update_load_scene(&self, ) -> ResultOf_network_update_load_scene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_update_load_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_network_update_load_scene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_anim_set_loaded(&self, animSet_: Option<String>) -> ResultOf_has_anim_set_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut animSet_ = sdk_helpers::create_c_string_ptr(animSet_);
        let success = sdk::natives::has_anim_set_loaded(
            &mut native_return,
animSet_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_anim_set_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_additional_collision_at_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_request_additional_collision_at_coord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::request_additional_collision_at_coord(
            x_,
y_,
z_,
        );
        
        
        ResultOf_request_additional_collision_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ptfx_asset_loaded(&self, ) -> ResultOf_has_ptfx_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_ptfx_asset_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_ptfx_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_population_budget(&self, p0_: i32) -> ResultOf_set_vehicle_population_budget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_population_budget(
            p0_,
        );
        
        
        ResultOf_set_vehicle_population_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_shutdown_creator_budget(&self, ) -> ResultOf_shutdown_creator_budget {
    unsafe {
        
        let success = sdk::natives::shutdown_creator_budget(
            
        );
        
        
        ResultOf_shutdown_creator_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_hd_area(&self, ) -> ResultOf_clear_hd_area {
    unsafe {
        
        let success = sdk::natives::clear_hd_area(
            
        );
        
        
        ResultOf_clear_hd_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_srl_loaded(&self, ) -> ResultOf_is_srl_loaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_srl_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_srl_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_anim_dict_loaded(&self, animDict_: Option<String>) -> ResultOf_has_anim_dict_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::has_anim_dict_loaded(
            &mut native_return,
animDict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_anim_dict_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_clip_set(&self, clipSet_: Option<String>) -> ResultOf_request_clip_set {
    unsafe {
        let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
        let success = sdk::natives::request_clip_set(
            clipSet_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_clip_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_anim_dict(&self, animDict_: Option<String>) -> ResultOf_request_anim_dict {
    unsafe {
        let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::request_anim_dict(
            animDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_anim_dict {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_switch_pause_before_descent(&self, ) -> ResultOf_enable_switch_pause_before_descent {
    unsafe {
        
        let success = sdk::natives::enable_switch_pause_before_descent(
            
        );
        
        
        ResultOf_enable_switch_pause_before_descent {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_to_multi_secondpart(&self, ped_: u32) -> ResultOf_switch_to_multi_secondpart {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::switch_to_multi_secondpart(
            ped_,
        );
        
        
        ResultOf_switch_to_multi_secondpart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_switch_in_progress(&self, ) -> ResultOf_is_player_switch_in_progress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_switch_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_player_switch_in_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_switch_ready_for_descent(&self, ) -> ResultOf_is_switch_ready_for_descent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_ready_for_descent(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_is_switch_ready_for_descent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_interior_active(&self, interiorID_: i32,
toggle_: bool) -> ResultOf_set_interior_active {
    unsafe {
        let mut interiorID_ = interiorID_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_interior_active(
            interiorID_,
toggle_,
        );
        
        
        ResultOf_set_interior_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_model_as_no_longer_needed(&self, model_: u32) -> ResultOf_set_model_as_no_longer_needed {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::set_model_as_no_longer_needed(
            model_,
        );
        
        
        ResultOf_set_model_as_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ipl(&self, iplName_: Option<String>) -> ResultOf_remove_ipl {
    unsafe {
        let mut iplName_ = sdk_helpers::create_c_string_ptr(iplName_);
        let success = sdk::natives::remove_ipl(
            iplName_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_ipl {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_srl_post_cutscene_camera(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_set_srl_post_cutscene_camera {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_srl_post_cutscene_camera(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_set_srl_post_cutscene_camera {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_model_from_creator_budget(&self, modelHash_: u32) -> ResultOf_remove_model_from_creator_budget {
    unsafe {
        let mut modelHash_ = modelHash_;
        let success = sdk::natives::remove_model_from_creator_budget(
            modelHash_,
        );
        
        
        ResultOf_remove_model_from_creator_budget {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_finish(&self, ) -> ResultOf_ipl_group_swap_finish {
    unsafe {
        
        let success = sdk::natives::ipl_group_swap_finish(
            
        );
        
        
        ResultOf_ipl_group_swap_finish {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_anim_dict(&self, animDict_: Option<String>) -> ResultOf_remove_anim_dict {
    unsafe {
        let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
        let success = sdk::natives::remove_anim_dict(
            animDict_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_anim_dict {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_global_water_file(&self, ) -> ResultOf_get_global_water_file {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_global_water_file(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_global_water_file {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_force_prestream(&self, p0_: i32) -> ResultOf_set_srl_force_prestream {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_force_prestream(
            p0_,
        );
        
        
        ResultOf_set_srl_force_prestream {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_player_switch(&self, from_: u32,
to_: u32,
flags_: i32,
switchType_: i32) -> ResultOf_start_player_switch {
    unsafe {
        let mut from_ = from_;
let mut to_ = to_;
let mut flags_ = flags_;
let mut switchType_ = switchType_;
        let success = sdk::natives::start_player_switch(
            from_,
to_,
flags_,
switchType_,
        );
        
        
        ResultOf_start_player_switch {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_is_ready(&self, ) -> ResultOf_ipl_group_swap_is_ready {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ipl_group_swap_is_ready(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_ipl_group_swap_is_ready {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_timestep(&self, ) -> ResultOf_timestep {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timestep(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_timestep {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sin(&self, value_: f32) -> ResultOf_sin {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::sin(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_sin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ceil(&self, value_: f32) -> ResultOf_ceil {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::ceil(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_ceil {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vdist(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_vdist {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::vdist(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_vdist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_thread_priority(&self, priority_: i32) -> ResultOf_set_this_thread_priority {
    unsafe {
        let mut priority_ = priority_;
        let success = sdk::natives::set_this_thread_priority(
            priority_,
        );
        
        
        ResultOf_set_this_thread_priority {
            success,
            ret: (),
            
        }
    }
}

    fn native_wait(&self, ms_: i32) -> ResultOf_wait {
    unsafe {
        let mut ms_ = ms_;
        let success = sdk::natives::wait(
            ms_,
        );
        
        
        ResultOf_wait {
            success,
            ret: (),
            
        }
    }
}

    fn native_settimerb(&self, value_: i32) -> ResultOf_settimerb {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::settimerb(
            value_,
        );
        
        
        ResultOf_settimerb {
            success,
            ret: (),
            
        }
    }
}

    fn native_vmag(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_vmag {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::vmag(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_vmag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sqrt(&self, value_: f32) -> ResultOf_sqrt {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::sqrt(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_sqrt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_timera(&self, ) -> ResultOf_timera {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timera(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_timera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shift_right(&self, value_: i32,
bitShift_: i32) -> ResultOf_shift_right {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
let mut bitShift_ = bitShift_;
        let success = sdk::natives::shift_right(
            &mut native_return,
value_,
bitShift_,
        );
        let native_return = native_return;
        
        ResultOf_shift_right {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vmag2(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_vmag2 {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::vmag2(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_vmag2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vdist2(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOf_vdist2 {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::vdist2(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_vdist2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script_with_args(&self, scriptName_: Option<String>,
args_: i32,
argCount_: i32,
stackSize_: i32) -> ResultOf_start_new_script_with_args {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut args_ = Default::default();
let mut argCount_ = argCount_;
let mut stackSize_ = stackSize_;
        let success = sdk::natives::start_new_script_with_args(
            &mut native_return,
&mut args_,
scriptName_.as_ref().unwrap(),
argCount_,
stackSize_,
        );
        let native_return = native_return;
let args_ = args_;
        
        ResultOf_start_new_script_with_args {
            success,
            ret: native_return,
            args_
        }
    }
}

    fn native_to_float(&self, value_: i32) -> ResultOf_to_float {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::to_float(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_to_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_settimera(&self, value_: i32) -> ResultOf_settimera {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::settimera(
            value_,
        );
        
        
        ResultOf_settimera {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_new_script_with_name_hash_and_args(&self, scriptHash_: u32,
args_: i32,
argCount_: i32,
stackSize_: i32) -> ResultOf_start_new_script_with_name_hash_and_args {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
let mut args_ = Default::default();
let mut argCount_ = argCount_;
let mut stackSize_ = stackSize_;
        let success = sdk::natives::start_new_script_with_name_hash_and_args(
            &mut native_return,
&mut args_,
scriptHash_,
argCount_,
stackSize_,
        );
        let native_return = native_return;
let args_ = args_;
        
        ResultOf_start_new_script_with_name_hash_and_args {
            success,
            ret: native_return,
            args_
        }
    }
}

    fn native_timerb(&self, ) -> ResultOf_timerb {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timerb(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_timerb {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cos(&self, value_: f32) -> ResultOf_cos {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::cos(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_cos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pow(&self, base_: f32,
exponent_: f32) -> ResultOf_pow {
    unsafe {
        let mut native_return = Default::default();
let mut base_ = base_;
let mut exponent_ = exponent_;
        let success = sdk::natives::pow(
            &mut native_return,
base_,
exponent_,
        );
        let native_return = native_return;
        
        ResultOf_pow {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script(&self, scriptName_: Option<String>,
stackSize_: i32) -> ResultOf_start_new_script {
    unsafe {
        let mut native_return = Default::default();
let mut scriptName_ = sdk_helpers::create_c_string_ptr(scriptName_);
let mut stackSize_ = stackSize_;
        let success = sdk::natives::start_new_script(
            &mut native_return,
scriptName_.as_ref().unwrap(),
stackSize_,
        );
        let native_return = native_return;
        
        ResultOf_start_new_script {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_log10(&self, value_: f32) -> ResultOf_log10 {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::log10(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_log10 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script_with_name_hash(&self, scriptHash_: u32,
stackSize_: i32) -> ResultOf_start_new_script_with_name_hash {
    unsafe {
        let mut native_return = Default::default();
let mut scriptHash_ = scriptHash_;
let mut stackSize_ = stackSize_;
        let success = sdk::natives::start_new_script_with_name_hash(
            &mut native_return,
scriptHash_,
stackSize_,
        );
        let native_return = native_return;
        
        ResultOf_start_new_script_with_name_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shift_left(&self, value_: i32,
bitShift_: i32) -> ResultOf_shift_left {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
let mut bitShift_ = bitShift_;
        let success = sdk::natives::shift_left(
            &mut native_return,
value_,
bitShift_,
        );
        let native_return = native_return;
        
        ResultOf_shift_left {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_round(&self, value_: f32) -> ResultOf_round {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::round(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_round {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_floor(&self, value_: f32) -> ResultOf_floor {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::floor(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOf_floor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_recording_get_speed_at_point(&self, name_: Option<String>,
point_: i32) -> ResultOf_waypoint_recording_get_speed_at_point {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
        let success = sdk::natives::waypoint_recording_get_speed_at_point(
            &mut native_return,
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
        
        ResultOf_waypoint_recording_get_speed_at_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_sequence_progress(&self, ped_: u32) -> ResultOf_get_sequence_progress {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_sequence_progress(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_sequence_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scenario_group_enabled(&self, scenarioGroup_: Option<String>,
enabled_: bool) -> ResultOf_set_scenario_group_enabled {
    unsafe {
        let mut scenarioGroup_ = sdk_helpers::create_c_string_ptr(scenarioGroup_);
let mut enabled_ = enabled_;
        let success = sdk::natives::set_scenario_group_enabled(
            scenarioGroup_.as_ref().unwrap(),
enabled_,
        );
        
        
        ResultOf_set_scenario_group_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_rate(&self, entity_: u32,
rate_: f32,
priority_: i32,
secondary_: bool) -> ResultOf_set_anim_rate {
    unsafe {
        let mut entity_ = entity_;
let mut rate_ = rate_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_rate(
            entity_,
rate_,
priority_,
secondary_,
        );
        
        
        ResultOf_set_anim_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity_while_aiming_at_coord(&self, ped_: u32,
entity_: u32,
aimX_: f32,
aimY_: f32,
aimZ_: f32,
moveBlendRatio_: f32,
shoot_: bool,
targetRadius_: f32,
slowDistance_: f32,
useNavMesh_: bool,
instantBlendToAim_: bool,
firingPattern_: u32) -> ResultOf_task_go_to_entity_while_aiming_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut aimX_ = aimX_;
let mut aimY_ = aimY_;
let mut aimZ_ = aimZ_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut shoot_ = shoot_;
let mut targetRadius_ = targetRadius_;
let mut slowDistance_ = slowDistance_;
let mut useNavMesh_ = useNavMesh_;
let mut instantBlendToAim_ = instantBlendToAim_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_go_to_entity_while_aiming_at_coord(
            ped_,
entity_,
aimX_,
aimY_,
aimZ_,
moveBlendRatio_,
shoot_,
targetRadius_,
slowDistance_,
useNavMesh_,
instantBlendToAim_,
firingPattern_,
        );
        
        
        ResultOf_task_go_to_entity_while_aiming_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_shooting_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool,
firingPattern_: u32) -> ResultOf_waypoint_playback_start_shooting_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::waypoint_playback_start_shooting_at_coord(
            ped_,
x_,
y_,
z_,
p4_,
firingPattern_,
        );
        
        
        ResultOf_waypoint_playback_start_shooting_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_parachute_task_thrust(&self, ped_: u32,
thrust_: f32) -> ResultOf_set_parachute_task_thrust {
    unsafe {
        let mut ped_ = ped_;
let mut thrust_ = thrust_;
        let success = sdk::natives::set_parachute_task_thrust(
            ped_,
thrust_,
        );
        
        
        ResultOf_set_parachute_task_thrust {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_waypoint_recording(&self, ped_: u32,
name_: Option<String>,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_task_follow_waypoint_recording {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::task_follow_waypoint_recording(
            ped_,
name_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_task_follow_waypoint_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shoot_at_entity(&self, entity_: u32,
target_: u32,
duration_: i32,
firingPattern_: u32) -> ResultOf_task_shoot_at_entity {
    unsafe {
        let mut entity_ = entity_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_shoot_at_entity(
            entity_,
target_,
duration_,
firingPattern_,
        );
        
        
        ResultOf_task_shoot_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_rappel_from_heli(&self, ped_: u32,
minHeightAboveGround_: f32) -> ResultOf_task_rappel_from_heli {
    unsafe {
        let mut ped_ = ped_;
let mut minHeightAboveGround_ = minHeightAboveGround_;
        let success = sdk::natives::task_rappel_from_heli(
            ped_,
minHeightAboveGround_,
        );
        
        
        ResultOf_task_rappel_from_heli {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_of_type_exist_in_area(&self, x_: f32,
y_: f32,
z_: f32,
scenarioName_: Option<String>,
radius_: f32,
mustBeFree_: bool) -> ResultOf_does_scenario_of_type_exist_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut scenarioName_ = sdk_helpers::create_c_string_ptr(scenarioName_);
let mut radius_ = radius_;
let mut mustBeFree_ = mustBeFree_;
        let success = sdk::natives::does_scenario_of_type_exist_in_area(
            &mut native_return,
x_,
y_,
z_,
scenarioName_.as_ref().unwrap(),
radius_,
mustBeFree_,
        );
        let native_return = native_return;
        
        ResultOf_does_scenario_of_type_exist_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_jump(&self, ped_: u32,
usePlayerLaunchForce_: bool,
doSuperJump_: bool,
useFullSuperJumpForce_: bool) -> ResultOf_task_jump {
    unsafe {
        let mut ped_ = ped_;
let mut usePlayerLaunchForce_ = usePlayerLaunchForce_;
let mut doSuperJump_ = doSuperJump_;
let mut useFullSuperJumpForce_ = useFullSuperJumpForce_;
        let success = sdk::natives::task_jump(
            ped_,
usePlayerLaunchForce_,
doSuperJump_,
useFullSuperJumpForce_,
        );
        
        
        ResultOf_task_jump {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_scenario_types_enabled(&self, ) -> ResultOf_reset_scenario_types_enabled {
    unsafe {
        
        let success = sdk::natives::reset_scenario_types_enabled(
            
        );
        
        
        ResultOf_reset_scenario_types_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_pause(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOf_waypoint_playback_pause {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_pause(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_waypoint_playback_pause {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_park(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
mode_: i32,
radius_: f32,
keepEngineOn_: bool) -> ResultOf_task_vehicle_park {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut mode_ = mode_;
let mut radius_ = radius_;
let mut keepEngineOn_ = keepEngineOn_;
        let success = sdk::natives::task_vehicle_park(
            ped_,
vehicle_,
x_,
y_,
z_,
heading_,
mode_,
radius_,
keepEngineOn_,
        );
        
        
        ResultOf_task_vehicle_park {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_clear_look_at(&self, ped_: u32) -> ResultOf_task_clear_look_at {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_clear_look_at(
            ped_,
        );
        
        
        ResultOf_task_clear_look_at {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_escort(&self, ped_: u32,
vehicle_: u32,
targetVehicle_: u32,
mode_: i32,
speed_: f32,
drivingStyle_: i32,
minDistance_: f32,
minHeightAboveTerrain_: i32,
noRoadsDistance_: f32) -> ResultOf_task_vehicle_escort {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut targetVehicle_ = targetVehicle_;
let mut mode_ = mode_;
let mut speed_ = speed_;
let mut drivingStyle_ = drivingStyle_;
let mut minDistance_ = minDistance_;
let mut minHeightAboveTerrain_ = minHeightAboveTerrain_;
let mut noRoadsDistance_ = noRoadsDistance_;
        let success = sdk::natives::task_vehicle_escort(
            ped_,
vehicle_,
targetVehicle_,
mode_,
speed_,
drivingStyle_,
minDistance_,
minHeightAboveTerrain_,
noRoadsDistance_,
        );
        
        
        ResultOf_task_vehicle_escort {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_enable_collision_on_network_clone_when_fixed(&self, ped_: u32,
enable_: bool) -> ResultOf_set_task_move_network_enable_collision_on_network_clone_when_fixed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut enable_ = enable_;
        let success = sdk::natives::set_task_move_network_enable_collision_on_network_clone_when_fixed(
            &mut native_return,
ped_,
enable_,
        );
        let native_return = native_return;
        
        ResultOf_set_task_move_network_enable_collision_on_network_clone_when_fixed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_shoot_at_ped(&self, ped_: u32,
target_: u32,
fireTolerance_: f32) -> ResultOf_task_vehicle_shoot_at_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut fireTolerance_ = fireTolerance_;
        let success = sdk::natives::task_vehicle_shoot_at_ped(
            ped_,
target_,
fireTolerance_,
        );
        
        
        ResultOf_task_vehicle_shoot_at_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_while_aiming_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
aimAtX_: f32,
aimAtY_: f32,
aimAtZ_: f32,
moveBlendRatio_: f32,
shoot_: bool,
targetRadius_: f32,
slowDistance_: f32,
useNavMesh_: bool,
navFlags_: i32,
instantBlendToAim_: bool,
firingPattern_: u32) -> ResultOf_task_go_to_coord_while_aiming_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut aimAtX_ = aimAtX_;
let mut aimAtY_ = aimAtY_;
let mut aimAtZ_ = aimAtZ_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut shoot_ = shoot_;
let mut targetRadius_ = targetRadius_;
let mut slowDistance_ = slowDistance_;
let mut useNavMesh_ = useNavMesh_;
let mut navFlags_ = navFlags_;
let mut instantBlendToAim_ = instantBlendToAim_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_go_to_coord_while_aiming_at_coord(
            ped_,
x_,
y_,
z_,
aimAtX_,
aimAtY_,
aimAtZ_,
moveBlendRatio_,
shoot_,
targetRadius_,
slowDistance_,
useNavMesh_,
navFlags_,
instantBlendToAim_,
firingPattern_,
        );
        
        
        ResultOf_task_go_to_coord_while_aiming_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_override_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOf_vehicle_waypoint_playback_override_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::vehicle_waypoint_playback_override_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOf_vehicle_waypoint_playback_override_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_scripted_animation(&self, ped_: u32,
priorityLowData_: i32,
priorityMidData_: i32,
priorityHighData_: i32,
blendInDelta_: f32,
blendOutDelta_: f32) -> ResultOf_task_scripted_animation {
    unsafe {
        let mut ped_ = ped_;
let mut priorityLowData_ = Default::default();
let mut priorityMidData_ = Default::default();
let mut priorityHighData_ = Default::default();
let mut blendInDelta_ = blendInDelta_;
let mut blendOutDelta_ = blendOutDelta_;
        let success = sdk::natives::task_scripted_animation(
            &mut priorityLowData_,
&mut priorityMidData_,
&mut priorityHighData_,
ped_,
blendInDelta_,
blendOutDelta_,
        );
        let priorityLowData_ = priorityLowData_;
let priorityMidData_ = priorityMidData_;
let priorityHighData_ = priorityHighData_;
        
        ResultOf_task_scripted_animation {
            success,
            ret: (),
            priorityLowData_,
priorityMidData_,
priorityHighData_
        }
    }
}

    fn native_assisted_movement_override_load_distance_this_frame(&self, dist_: f32) -> ResultOf_assisted_movement_override_load_distance_this_frame {
    unsafe {
        let mut dist_ = dist_;
        let success = sdk::natives::assisted_movement_override_load_distance_this_frame(
            dist_,
        );
        
        
        ResultOf_assisted_movement_override_load_distance_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_start_scenario_in_place(&self, ped_: u32,
scenarioName_: Option<String>,
unkDelay_: i32,
playEnterAnim_: bool) -> ResultOf_task_start_scenario_in_place {
    unsafe {
        let mut ped_ = ped_;
let mut scenarioName_ = sdk_helpers::create_c_string_ptr(scenarioName_);
let mut unkDelay_ = unkDelay_;
let mut playEnterAnim_ = playEnterAnim_;
        let success = sdk::natives::task_start_scenario_in_place(
            ped_,
scenarioName_.as_ref().unwrap(),
unkDelay_,
playEnterAnim_,
        );
        
        
        ResultOf_task_start_scenario_in_place {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_to_coord_longrange(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
driveMode_: i32,
stopRange_: f32) -> ResultOf_task_vehicle_drive_to_coord_longrange {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut driveMode_ = driveMode_;
let mut stopRange_ = stopRange_;
        let success = sdk::natives::task_vehicle_drive_to_coord_longrange(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
driveMode_,
stopRange_,
        );
        
        
        ResultOf_task_vehicle_drive_to_coord_longrange {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_boat_mission(&self, pedDriver_: u32,
vehicle_: u32,
targetVehicle_: u32,
targetPed_: u32,
x_: f32,
y_: f32,
z_: f32,
mission_: i32,
maxSpeed_: f32,
drivingStyle_: i32,
targetReached_: f32,
boatFlags_: i32) -> ResultOf_task_boat_mission {
    unsafe {
        let mut pedDriver_ = pedDriver_;
let mut vehicle_ = vehicle_;
let mut targetVehicle_ = targetVehicle_;
let mut targetPed_ = targetPed_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut mission_ = mission_;
let mut maxSpeed_ = maxSpeed_;
let mut drivingStyle_ = drivingStyle_;
let mut targetReached_ = targetReached_;
let mut boatFlags_ = boatFlags_;
        let success = sdk::natives::task_boat_mission(
            pedDriver_,
vehicle_,
targetVehicle_,
targetPed_,
x_,
y_,
z_,
mission_,
maxSpeed_,
drivingStyle_,
targetReached_,
boatFlags_,
        );
        
        
        ResultOf_task_boat_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_nav_mesh_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
time_: i32,
targetRadius_: f32,
flags_: i32,
targetHeading_: f32) -> ResultOf_task_follow_nav_mesh_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut time_ = time_;
let mut targetRadius_ = targetRadius_;
let mut flags_ = flags_;
let mut targetHeading_ = targetHeading_;
        let success = sdk::natives::task_follow_nav_mesh_to_coord(
            ped_,
x_,
y_,
z_,
moveBlendRatio_,
time_,
targetRadius_,
flags_,
targetHeading_,
        );
        
        
        ResultOf_task_follow_nav_mesh_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_secondary_task(&self, ped_: u32) -> ResultOf_clear_ped_secondary_task {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_secondary_task(
            ped_,
        );
        
        
        ResultOf_clear_ped_secondary_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_nav_mesh_to_coord_advanced(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
time_: i32,
targetRadius_: f32,
flags_: i32,
slideToCoordHeading_: f32,
maxSlopeNavigable_: f32,
clampMaxSearchDistance_: f32,
targetHeading_: f32) -> ResultOf_task_follow_nav_mesh_to_coord_advanced {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut time_ = time_;
let mut targetRadius_ = targetRadius_;
let mut flags_ = flags_;
let mut slideToCoordHeading_ = slideToCoordHeading_;
let mut maxSlopeNavigable_ = maxSlopeNavigable_;
let mut clampMaxSearchDistance_ = clampMaxSearchDistance_;
let mut targetHeading_ = targetHeading_;
        let success = sdk::natives::task_follow_nav_mesh_to_coord_advanced(
            ped_,
x_,
y_,
z_,
moveBlendRatio_,
time_,
targetRadius_,
flags_,
slideToCoordHeading_,
maxSlopeNavigable_,
clampMaxSearchDistance_,
targetHeading_,
        );
        
        
        ResultOf_task_follow_nav_mesh_to_coord_advanced {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_goto_navmesh(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
behaviorFlag_: i32,
stoppingRange_: f32) -> ResultOf_task_vehicle_goto_navmesh {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut behaviorFlag_ = behaviorFlag_;
let mut stoppingRange_ = stoppingRange_;
        let success = sdk::natives::task_vehicle_goto_navmesh(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
behaviorFlag_,
stoppingRange_,
        );
        
        
        ResultOf_task_vehicle_goto_navmesh {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_agitated_action_confront_response(&self, ped_: u32,
ped2_: u32) -> ResultOf_task_agitated_action_confront_response {
    unsafe {
        let mut ped_ = ped_;
let mut ped2_ = ped2_;
        let success = sdk::natives::task_agitated_action_confront_response(
            ped_,
ped2_,
        );
        
        
        ResultOf_task_agitated_action_confront_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_put_ped_directly_into_melee(&self, ped_: u32,
meleeTarget_: u32,
blendInDuration_: f32,
timeInMelee_: f32,
strafePhaseSync_: f32,
aiCombatFlags_: i32) -> ResultOf_task_put_ped_directly_into_melee {
    unsafe {
        let mut ped_ = ped_;
let mut meleeTarget_ = meleeTarget_;
let mut blendInDuration_ = blendInDuration_;
let mut timeInMelee_ = timeInMelee_;
let mut strafePhaseSync_ = strafePhaseSync_;
let mut aiCombatFlags_ = aiCombatFlags_;
        let success = sdk::natives::task_put_ped_directly_into_melee(
            ped_,
meleeTarget_,
blendInDuration_,
timeInMelee_,
strafePhaseSync_,
aiCombatFlags_,
        );
        
        
        ResultOf_task_put_ped_directly_into_melee {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_any_means_extra_params(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
vehicle_: u32,
useLongRangeVehiclePathing_: bool,
drivingFlags_: i32,
maxRangeToShootTargets_: f32,
extraVehToTargetDistToPreferVehicle_: f32,
driveStraightLineDistance_: f32,
extraFlags_: i32,
warpTimerMS_: f32) -> ResultOf_task_go_to_coord_any_means_extra_params {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut vehicle_ = vehicle_;
let mut useLongRangeVehiclePathing_ = useLongRangeVehiclePathing_;
let mut drivingFlags_ = drivingFlags_;
let mut maxRangeToShootTargets_ = maxRangeToShootTargets_;
let mut extraVehToTargetDistToPreferVehicle_ = extraVehToTargetDistToPreferVehicle_;
let mut driveStraightLineDistance_ = driveStraightLineDistance_;
let mut extraFlags_ = extraFlags_;
let mut warpTimerMS_ = warpTimerMS_;
        let success = sdk::natives::task_go_to_coord_any_means_extra_params(
            ped_,
x_,
y_,
z_,
moveBlendRatio_,
vehicle_,
useLongRangeVehiclePathing_,
drivingFlags_,
maxRangeToShootTargets_,
extraVehToTargetDistToPreferVehicle_,
driveStraightLineDistance_,
extraFlags_,
warpTimerMS_,
        );
        
        
        ResultOf_task_go_to_coord_any_means_extra_params {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_turn_ped_to_face_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32) -> ResultOf_task_turn_ped_to_face_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
        let success = sdk::natives::task_turn_ped_to_face_coord(
            ped_,
x_,
y_,
z_,
duration_,
        );
        
        
        ResultOf_task_turn_ped_to_face_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_heli_protect(&self, pilot_: u32,
vehicle_: u32,
entityToFollow_: u32,
targetSpeed_: f32,
drivingFlags_: i32,
radius_: f32,
altitude_: i32,
heliFlags_: i32) -> ResultOf_task_vehicle_heli_protect {
    unsafe {
        let mut pilot_ = pilot_;
let mut vehicle_ = vehicle_;
let mut entityToFollow_ = entityToFollow_;
let mut targetSpeed_ = targetSpeed_;
let mut drivingFlags_ = drivingFlags_;
let mut radius_ = radius_;
let mut altitude_ = altitude_;
let mut heliFlags_ = heliFlags_;
        let success = sdk::natives::task_vehicle_heli_protect(
            pilot_,
vehicle_,
entityToFollow_,
targetSpeed_,
drivingFlags_,
radius_,
altitude_,
heliFlags_,
        );
        
        
        ResultOf_task_vehicle_heli_protect {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_extend_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_extend_route {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_extend_route(
            x_,
y_,
z_,
        );
        
        
        ResultOf_task_extend_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_desired_move_blend_ratio(&self, ped_: u32,
newMoveBlendRatio_: f32) -> ResultOf_set_ped_desired_move_blend_ratio {
    unsafe {
        let mut ped_ = ped_;
let mut newMoveBlendRatio_ = newMoveBlendRatio_;
        let success = sdk::natives::set_ped_desired_move_blend_ratio(
            ped_,
newMoveBlendRatio_,
        );
        
        
        ResultOf_set_ped_desired_move_blend_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_phone_gesture_anim_total_time(&self, ped_: u32) -> ResultOf_get_phone_gesture_anim_total_time {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_phone_gesture_anim_total_time(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_phone_gesture_anim_total_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_specific_cover_blocking_areas(&self, startX_: f32,
startY_: f32,
startZ_: f32,
endX_: f32,
endY_: f32,
endZ_: f32,
blockObjects_: bool,
blockVehicles_: bool,
blockMap_: bool,
blockPlayer_: bool) -> ResultOf_remove_specific_cover_blocking_areas {
    unsafe {
        let mut startX_ = startX_;
let mut startY_ = startY_;
let mut startZ_ = startZ_;
let mut endX_ = endX_;
let mut endY_ = endY_;
let mut endZ_ = endZ_;
let mut blockObjects_ = blockObjects_;
let mut blockVehicles_ = blockVehicles_;
let mut blockMap_ = blockMap_;
let mut blockPlayer_ = blockPlayer_;
        let success = sdk::natives::remove_specific_cover_blocking_areas(
            startX_,
startY_,
startZ_,
endX_,
endY_,
endZ_,
blockObjects_,
blockVehicles_,
blockMap_,
blockPlayer_,
        );
        
        
        ResultOf_remove_specific_cover_blocking_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sweep_aim_entity(&self, ped_: u32,
animDict_: Option<String>,
lowAnimName_: Option<String>,
medAnimName_: Option<String>,
hiAnimName_: Option<String>,
runtime_: i32,
targetEntity_: u32,
turnRate_: f32,
blendInDuration_: f32) -> ResultOf_task_sweep_aim_entity {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut lowAnimName_ = sdk_helpers::create_c_string_ptr(lowAnimName_);
let mut medAnimName_ = sdk_helpers::create_c_string_ptr(medAnimName_);
let mut hiAnimName_ = sdk_helpers::create_c_string_ptr(hiAnimName_);
let mut runtime_ = runtime_;
let mut targetEntity_ = targetEntity_;
let mut turnRate_ = turnRate_;
let mut blendInDuration_ = blendInDuration_;
        let success = sdk::natives::task_sweep_aim_entity(
            ped_,
animDict_.as_ref().unwrap(),
lowAnimName_.as_ref().unwrap(),
medAnimName_.as_ref().unwrap(),
hiAnimName_.as_ref().unwrap(),
runtime_,
targetEntity_,
turnRate_,
blendInDuration_,
        );
        
        
        ResultOf_task_sweep_aim_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_weight(&self, entity_: u32,
weight_: f32,
priority_: i32,
index_: i32,
secondary_: bool) -> ResultOf_set_anim_weight {
    unsafe {
        let mut entity_ = entity_;
let mut weight_ = weight_;
let mut priority_ = priority_;
let mut index_ = index_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_weight(
            entity_,
weight_,
priority_,
index_,
secondary_,
        );
        
        
        ResultOf_set_anim_weight {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_aiming_at_ped(&self, ped_: u32,
target_: u32,
p2_: bool) -> ResultOf_waypoint_playback_start_aiming_at_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_start_aiming_at_ped(
            ped_,
target_,
p2_,
        );
        
        
        ResultOf_waypoint_playback_start_aiming_at_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_smart_flee_ped(&self, ped_: u32,
fleeTarget_: u32,
safeDistance_: f32,
fleeTime_: i32,
preferPavements_: bool,
updateToNearestHatedPed_: bool) -> ResultOf_task_smart_flee_ped {
    unsafe {
        let mut ped_ = ped_;
let mut fleeTarget_ = fleeTarget_;
let mut safeDistance_ = safeDistance_;
let mut fleeTime_ = fleeTime_;
let mut preferPavements_ = preferPavements_;
let mut updateToNearestHatedPed_ = updateToNearestHatedPed_;
        let success = sdk::natives::task_smart_flee_ped(
            ped_,
fleeTarget_,
safeDistance_,
fleeTime_,
preferPavements_,
updateToNearestHatedPed_,
        );
        
        
        ResultOf_task_smart_flee_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_patrol_route_link(&self, nodeId1_: i32,
nodeId2_: i32) -> ResultOf_add_patrol_route_link {
    unsafe {
        let mut nodeId1_ = nodeId1_;
let mut nodeId2_ = nodeId2_;
        let success = sdk::natives::add_patrol_route_link(
            nodeId1_,
nodeId2_,
        );
        
        
        ResultOf_add_patrol_route_link {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_mission(&self, pilot_: u32,
aircraft_: u32,
targetVehicle_: u32,
targetPed_: u32,
destinationX_: f32,
destinationY_: f32,
destinationZ_: f32,
missionFlag_: i32,
angularDrag_: f32,
targetReached_: f32,
targetHeading_: f32,
maxZ_: f32,
minZ_: f32,
precise_: bool) -> ResultOf_task_plane_mission {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut targetVehicle_ = targetVehicle_;
let mut targetPed_ = targetPed_;
let mut destinationX_ = destinationX_;
let mut destinationY_ = destinationY_;
let mut destinationZ_ = destinationZ_;
let mut missionFlag_ = missionFlag_;
let mut angularDrag_ = angularDrag_;
let mut targetReached_ = targetReached_;
let mut targetHeading_ = targetHeading_;
let mut maxZ_ = maxZ_;
let mut minZ_ = minZ_;
let mut precise_ = precise_;
        let success = sdk::natives::task_plane_mission(
            pilot_,
aircraft_,
targetVehicle_,
targetPed_,
destinationX_,
destinationY_,
destinationZ_,
missionFlag_,
angularDrag_,
targetReached_,
targetHeading_,
maxZ_,
minZ_,
precise_,
        );
        
        
        ResultOf_task_plane_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_resume(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: i32) -> ResultOf_waypoint_playback_resume {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::waypoint_playback_resume(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_waypoint_playback_resume {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_sprinting(&self, ped_: u32) -> ResultOf_is_move_blend_ratio_sprinting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_sprinting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_move_blend_ratio_sprinting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_waypoint_progress(&self, ped_: u32) -> ResultOf_get_ped_waypoint_progress {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_waypoint_progress(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_waypoint_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_use_nearest_scenario_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
distance_: f32,
duration_: i32) -> ResultOf_task_use_nearest_scenario_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut distance_ = distance_;
let mut duration_ = duration_;
        let success = sdk::natives::task_use_nearest_scenario_to_coord(
            ped_,
x_,
y_,
z_,
distance_,
duration_,
        );
        
        
        ResultOf_task_use_nearest_scenario_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_scripted_cover_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_add_scripted_cover_area {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::add_scripted_cover_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_add_scripted_cover_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_ped_has_use_scenario_task(&self, ped_: u32) -> ResultOf_ped_has_use_scenario_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::ped_has_use_scenario_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_ped_has_use_scenario_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_move_network_advanced_by_name_with_init_params(&self, ped_: u32,
network_: Option<String>,
initialParameters_: i32,
x_: f32,
y_: f32,
z_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
rotOrder_: i32,
blendDuration_: f32,
allowOverrideCloneUpdate_: bool,
dictionary_: Option<String>,
flags_: i32) -> ResultOf_task_move_network_advanced_by_name_with_init_params {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut initialParameters_ = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut rotOrder_ = rotOrder_;
let mut blendDuration_ = blendDuration_;
let mut allowOverrideCloneUpdate_ = allowOverrideCloneUpdate_;
let mut dictionary_ = sdk_helpers::create_c_string_ptr(dictionary_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_advanced_by_name_with_init_params(
            &mut initialParameters_,
ped_,
network_.as_ref().unwrap(),
x_,
y_,
z_,
rotX_,
rotY_,
rotZ_,
rotOrder_,
blendDuration_,
allowOverrideCloneUpdate_,
dictionary_.as_ref().unwrap(),
flags_,
        );
        let initialParameters_ = initialParameters_;
        
        ResultOf_task_move_network_advanced_by_name_with_init_params {
            success,
            ret: (),
            initialParameters_
        }
    }
}

    fn native_is_ped_getting_up(&self, ped_: u32) -> ResultOf_is_ped_getting_up {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_getting_up(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_getting_up {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_combat_hated_targets_around_ped_timed(&self, ped_: u32,
radius_: f32,
time_: i32,
combatFlags_: i32) -> ResultOf_task_combat_hated_targets_around_ped_timed {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut time_ = time_;
let mut combatFlags_ = combatFlags_;
        let success = sdk::natives::task_combat_hated_targets_around_ped_timed(
            ped_,
radius_,
time_,
combatFlags_,
        );
        
        
        ResultOf_task_combat_hated_targets_around_ped_timed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_chase(&self, pilot_: u32,
entityToFollow_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_plane_chase {
    unsafe {
        let mut pilot_ = pilot_;
let mut entityToFollow_ = entityToFollow_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_plane_chase(
            pilot_,
entityToFollow_,
x_,
y_,
z_,
        );
        
        
        ResultOf_task_plane_chase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_by_name(&self, ped_: u32,
task_: Option<String>,
multiplier_: f32,
allowOverrideCloneUpdate_: bool,
animDict_: Option<String>,
flags_: i32) -> ResultOf_task_move_network_by_name {
    unsafe {
        let mut ped_ = ped_;
let mut task_ = sdk_helpers::create_c_string_ptr(task_);
let mut multiplier_ = multiplier_;
let mut allowOverrideCloneUpdate_ = allowOverrideCloneUpdate_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_by_name(
            ped_,
task_.as_ref().unwrap(),
multiplier_,
allowOverrideCloneUpdate_,
animDict_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOf_task_move_network_by_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_drive_by(&self, driverPed_: u32,
targetPed_: u32,
targetVehicle_: u32,
targetX_: f32,
targetY_: f32,
targetZ_: f32,
distanceToShoot_: f32,
pedAccuracy_: i32,
pushUnderneathDrivingTaskIfDriving_: bool,
firingPattern_: u32) -> ResultOf_task_drive_by {
    unsafe {
        let mut driverPed_ = driverPed_;
let mut targetPed_ = targetPed_;
let mut targetVehicle_ = targetVehicle_;
let mut targetX_ = targetX_;
let mut targetY_ = targetY_;
let mut targetZ_ = targetZ_;
let mut distanceToShoot_ = distanceToShoot_;
let mut pedAccuracy_ = pedAccuracy_;
let mut pushUnderneathDrivingTaskIfDriving_ = pushUnderneathDrivingTaskIfDriving_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_drive_by(
            driverPed_,
targetPed_,
targetVehicle_,
targetX_,
targetY_,
targetZ_,
distanceToShoot_,
pedAccuracy_,
pushUnderneathDrivingTaskIfDriving_,
firingPattern_,
        );
        
        
        ResultOf_task_drive_by {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_recording_get_coord(&self, name_: Option<String>,
point_: i32,
coord_: Option<shared::Vector3>) -> ResultOf_waypoint_recording_get_coord {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
let mut coord_ = sdk_helpers::create_vector3_ptr(coord_);
        let success = sdk::natives::waypoint_recording_get_coord(
            &mut native_return,
coord_.pin_mut(),
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
let coord_ = sdk_helpers::read_cpp_vector3(coord_);
        
        ResultOf_waypoint_recording_get_coord {
            success,
            ret: native_return,
            coord_
        }
    }
}

    fn native_task_follow_to_offset_of_entity(&self, ped_: u32,
entity_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
movementSpeed_: f32,
timeout_: i32,
stoppingRange_: f32,
persistFollowing_: bool) -> ResultOf_task_follow_to_offset_of_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut movementSpeed_ = movementSpeed_;
let mut timeout_ = timeout_;
let mut stoppingRange_ = stoppingRange_;
let mut persistFollowing_ = persistFollowing_;
        let success = sdk::natives::task_follow_to_offset_of_entity(
            ped_,
entity_,
offsetX_,
offsetY_,
offsetZ_,
movementSpeed_,
timeout_,
stoppingRange_,
persistFollowing_,
        );
        
        
        ResultOf_task_follow_to_offset_of_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_task_move_network_ready_for_transition(&self, ped_: u32) -> ResultOf_is_task_move_network_ready_for_transition {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_task_move_network_ready_for_transition(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_task_move_network_ready_for_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_follow_waypoint_recording(&self, ped_: u32,
vehicle_: u32,
WPRecording_: Option<String>,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: f32,
p8_: bool,
p9_: f32) -> ResultOf_task_vehicle_follow_waypoint_recording {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut WPRecording_ = sdk_helpers::create_c_string_ptr(WPRecording_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::task_vehicle_follow_waypoint_recording(
            ped_,
vehicle_,
WPRecording_.as_ref().unwrap(),
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOf_task_vehicle_follow_waypoint_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_offset_xy(&self, ped_: u32,
entity_: u32,
duration_: i32,
targetRadius_: f32,
offsetX_: f32,
offsetY_: f32,
moveBlendRatio_: f32,
gotoEntityOffsetFlags_: i32) -> ResultOf_task_goto_entity_offset_xy {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
let mut targetRadius_ = targetRadius_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut gotoEntityOffsetFlags_ = gotoEntityOffsetFlags_;
        let success = sdk::natives::task_goto_entity_offset_xy(
            ped_,
entity_,
duration_,
targetRadius_,
offsetX_,
offsetY_,
moveBlendRatio_,
gotoEntityOffsetFlags_,
        );
        
        
        ResultOf_task_goto_entity_offset_xy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_still(&self, ped_: u32) -> ResultOf_is_move_blend_ratio_still {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_still(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_move_blend_ratio_still {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_assisted_movement_remove_route(&self, route_: Option<String>) -> ResultOf_assisted_movement_remove_route {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_remove_route(
            route_.as_ref().unwrap(),
        );
        
        
        ResultOf_assisted_movement_remove_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scenario_group_enabled(&self, scenarioGroup_: Option<String>) -> ResultOf_is_scenario_group_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut scenarioGroup_ = sdk_helpers::create_c_string_ptr(scenarioGroup_);
        let success = sdk::natives::is_scenario_group_enabled(
            &mut native_return,
scenarioGroup_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_scenario_group_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_move_network_signal_local_float(&self, ped_: u32,
signalName_: Option<String>,
value_: f32) -> ResultOf_set_task_move_network_signal_local_float {
    unsafe {
        let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_local_float(
            ped_,
signalName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_task_move_network_signal_local_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_sequence_task(&self, taskSequenceId_: i32) -> ResultOf_clear_sequence_task {
    unsafe {
        let mut taskSequenceId_ = Default::default();
        let success = sdk::natives::clear_sequence_task(
            &mut taskSequenceId_,
        );
        let taskSequenceId_ = taskSequenceId_;
        
        ResultOf_clear_sequence_task {
            success,
            ret: (),
            taskSequenceId_
        }
    }
}

    fn native_set_ped_path_prefer_to_avoid_water(&self, ped_: u32,
avoidWater_: bool) -> ResultOf_set_ped_path_prefer_to_avoid_water {
    unsafe {
        let mut ped_ = ped_;
let mut avoidWater_ = avoidWater_;
        let success = sdk::natives::set_ped_path_prefer_to_avoid_water(
            ped_,
avoidWater_,
        );
        
        
        ResultOf_set_ped_path_prefer_to_avoid_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_to_coords(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
timeout_: i32,
shortRoute_: bool) -> ResultOf_task_seek_cover_to_coords {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut timeout_ = timeout_;
let mut shortRoute_ = shortRoute_;
        let success = sdk::natives::task_seek_cover_to_coords(
            ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
timeout_,
shortRoute_,
        );
        
        
        ResultOf_task_seek_cover_to_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_sequence_task(&self, taskSequenceId_: i32) -> ResultOf_close_sequence_task {
    unsafe {
        let mut taskSequenceId_ = taskSequenceId_;
        let success = sdk::natives::close_sequence_task(
            taskSequenceId_,
        );
        
        
        ResultOf_close_sequence_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scenario_type_enabled(&self, scenarioType_: Option<String>) -> ResultOf_is_scenario_type_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut scenarioType_ = sdk_helpers::create_c_string_ptr(scenarioType_);
        let success = sdk::natives::is_scenario_type_enabled(
            &mut native_return,
scenarioType_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_is_scenario_type_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clip_set_for_scripted_gun_task(&self, gunTaskType_: i32) -> ResultOf_get_clip_set_for_scripted_gun_task {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gunTaskType_ = gunTaskType_;
        let success = sdk::natives::get_clip_set_for_scripted_gun_task(
            native_return.pin_mut(),
gunTaskType_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_clip_set_for_scripted_gun_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_chase(&self, driver_: u32,
targetEnt_: u32) -> ResultOf_task_vehicle_chase {
    unsafe {
        let mut driver_ = driver_;
let mut targetEnt_ = targetEnt_;
        let success = sdk::natives::task_vehicle_chase(
            driver_,
targetEnt_,
        );
        
        
        ResultOf_task_vehicle_chase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_by_name_with_init_params(&self, ped_: u32,
network_: Option<String>,
initialParameters_: i32,
blendDuration_: f32,
allowOverrideCloneUpdate_: bool,
animDict_: Option<String>,
flags_: i32) -> ResultOf_task_move_network_by_name_with_init_params {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut initialParameters_ = Default::default();
let mut blendDuration_ = blendDuration_;
let mut allowOverrideCloneUpdate_ = allowOverrideCloneUpdate_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_by_name_with_init_params(
            &mut initialParameters_,
ped_,
network_.as_ref().unwrap(),
blendDuration_,
allowOverrideCloneUpdate_,
animDict_.as_ref().unwrap(),
flags_,
        );
        let initialParameters_ = initialParameters_;
        
        ResultOf_task_move_network_by_name_with_init_params {
            success,
            ret: (),
            initialParameters_
        }
    }
}

    fn native_is_ped_running_arrest_task(&self, ped_: u32) -> ResultOf_is_ped_running_arrest_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_arrest_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_running_arrest_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_controlled_vehicle_unable_to_get_to_road(&self, ped_: u32) -> ResultOf_is_controlled_vehicle_unable_to_get_to_road {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_controlled_vehicle_unable_to_get_to_road(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_controlled_vehicle_unable_to_get_to_road {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_cower(&self, ped_: u32,
duration_: i32) -> ResultOf_task_cower {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::task_cower(
            ped_,
duration_,
        );
        
        
        ResultOf_task_cower {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stop_phone_gesture_animation(&self, ped_: u32,
blendOutOverride_: f32) -> ResultOf_task_stop_phone_gesture_animation {
    unsafe {
        let mut ped_ = ped_;
let mut blendOutOverride_ = blendOutOverride_;
        let success = sdk::natives::task_stop_phone_gesture_animation(
            ped_,
blendOutOverride_,
        );
        
        
        ResultOf_task_stop_phone_gesture_animation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_max_cruise_speed(&self, ped_: u32,
speed_: f32) -> ResultOf_set_drive_task_max_cruise_speed {
    unsafe {
        let mut ped_ = ped_;
let mut speed_ = speed_;
        let success = sdk::natives::set_drive_task_max_cruise_speed(
            ped_,
speed_,
        );
        
        
        ResultOf_set_drive_task_max_cruise_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_waypoint_target_point(&self, vehicle_: u32) -> ResultOf_get_vehicle_waypoint_target_point {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_waypoint_target_point(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_waypoint_target_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_put_ped_directly_into_cover(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
allowPeekingAndFiring_: bool,
blendInDuration_: f32,
forceInitialFacingDirection_: bool,
forceFaceLeft_: bool,
identifier_: i32,
doEntry_: bool) -> ResultOf_task_put_ped_directly_into_cover {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut allowPeekingAndFiring_ = allowPeekingAndFiring_;
let mut blendInDuration_ = blendInDuration_;
let mut forceInitialFacingDirection_ = forceInitialFacingDirection_;
let mut forceFaceLeft_ = forceFaceLeft_;
let mut identifier_ = identifier_;
let mut doEntry_ = doEntry_;
        let success = sdk::natives::task_put_ped_directly_into_cover(
            ped_,
x_,
y_,
z_,
time_,
allowPeekingAndFiring_,
blendInDuration_,
forceInitialFacingDirection_,
forceFaceLeft_,
identifier_,
doEntry_,
        );
        
        
        ResultOf_task_put_ped_directly_into_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_exclusive_scenario_group(&self, ) -> ResultOf_reset_exclusive_scenario_group {
    unsafe {
        
        let success = sdk::natives::reset_exclusive_scenario_group(
            
        );
        
        
        ResultOf_reset_exclusive_scenario_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_avoid_fire(&self, ped_: u32,
avoidFire_: bool) -> ResultOf_set_ped_path_avoid_fire {
    unsafe {
        let mut ped_ = ped_;
let mut avoidFire_ = avoidFire_;
        let success = sdk::natives::set_ped_path_avoid_fire(
            ped_,
avoidFire_,
        );
        
        
        ResultOf_set_ped_path_avoid_fire {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_aim_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_vehicle_aim_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_vehicle_aim_at_coord(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOf_task_vehicle_aim_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_move_network_signal_float(&self, ped_: u32,
signalName_: Option<String>) -> ResultOf_get_task_move_network_signal_float {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
        let success = sdk::natives::get_task_move_network_signal_float(
            &mut native_return,
ped_,
signalName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_task_move_network_signal_float {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_shocking_event_react(&self, ped_: u32,
eventHandle_: i32) -> ResultOf_task_shocking_event_react {
    unsafe {
        let mut ped_ = ped_;
let mut eventHandle_ = eventHandle_;
        let success = sdk::natives::task_shocking_event_react(
            ped_,
eventHandle_,
        );
        
        
        ResultOf_task_shocking_event_react {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cover_blocking_area(&self, startX_: f32,
startY_: f32,
startZ_: f32,
endX_: f32,
endY_: f32,
endZ_: f32,
blockObjects_: bool,
blockVehicles_: bool,
blockMap_: bool,
blockPlayer_: bool) -> ResultOf_add_cover_blocking_area {
    unsafe {
        let mut startX_ = startX_;
let mut startY_ = startY_;
let mut startZ_ = startZ_;
let mut endX_ = endX_;
let mut endY_ = endY_;
let mut endZ_ = endZ_;
let mut blockObjects_ = blockObjects_;
let mut blockVehicles_ = blockVehicles_;
let mut blockMap_ = blockMap_;
let mut blockPlayer_ = blockPlayer_;
        let success = sdk::natives::add_cover_blocking_area(
            startX_,
startY_,
startZ_,
endX_,
endY_,
endZ_,
blockObjects_,
blockVehicles_,
blockMap_,
blockPlayer_,
        );
        
        
        ResultOf_add_cover_blocking_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shoot_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
firingPattern_: u32) -> ResultOf_task_shoot_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_shoot_at_coord(
            ped_,
x_,
y_,
z_,
duration_,
firingPattern_,
        );
        
        
        ResultOf_task_shoot_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_phone_gesture_anim_current_time(&self, ped_: u32) -> ResultOf_get_phone_gesture_anim_current_time {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_phone_gesture_anim_current_time(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_phone_gesture_anim_current_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_playback_stop_aiming_or_shooting(&self, ped_: u32) -> ResultOf_waypoint_playback_stop_aiming_or_shooting {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::waypoint_playback_stop_aiming_or_shooting(
            ped_,
        );
        
        
        ResultOf_waypoint_playback_stop_aiming_or_shooting {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_wander(&self, ped_: u32,
vehicle_: u32,
speed_: f32,
drivingStyle_: i32) -> ResultOf_task_vehicle_drive_wander {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
let mut drivingStyle_ = drivingStyle_;
        let success = sdk::natives::task_vehicle_drive_wander(
            ped_,
vehicle_,
speed_,
drivingStyle_,
        );
        
        
        ResultOf_task_vehicle_drive_wander {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_guard_current_position(&self, ped_: u32,
maxPatrolProximity_: f32,
defensiveAreaRadius_: f32,
setDefensiveArea_: bool) -> ResultOf_task_guard_current_position {
    unsafe {
        let mut ped_ = ped_;
let mut maxPatrolProximity_ = maxPatrolProximity_;
let mut defensiveAreaRadius_ = defensiveAreaRadius_;
let mut setDefensiveArea_ = setDefensiveArea_;
        let success = sdk::natives::task_guard_current_position(
            ped_,
maxPatrolProximity_,
defensiveAreaRadius_,
setDefensiveArea_,
        );
        
        
        ResultOf_task_guard_current_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_hated_targets_in_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
combatFlags_: i32) -> ResultOf_task_combat_hated_targets_in_area {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut combatFlags_ = combatFlags_;
        let success = sdk::natives::task_combat_hated_targets_in_area(
            ped_,
x_,
y_,
z_,
radius_,
combatFlags_,
        );
        
        
        ResultOf_task_combat_hated_targets_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_force_motion_state(&self, ped_: u32,
state_: u32,
forceRestart_: bool) -> ResultOf_task_force_motion_state {
    unsafe {
        let mut ped_ = ped_;
let mut state_ = state_;
let mut forceRestart_ = forceRestart_;
        let success = sdk::natives::task_force_motion_state(
            ped_,
state_,
forceRestart_,
        );
        
        
        ResultOf_task_force_motion_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_leave_any_vehicle(&self, ped_: u32,
delayTime_: i32,
flags_: i32) -> ResultOf_task_leave_any_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut delayTime_ = delayTime_;
let mut flags_ = flags_;
        let success = sdk::natives::task_leave_any_vehicle(
            ped_,
delayTime_,
flags_,
        );
        
        
        ResultOf_task_leave_any_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_shoot_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
fireTolerance_: f32) -> ResultOf_task_vehicle_shoot_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut fireTolerance_ = fireTolerance_;
        let success = sdk::natives::task_vehicle_shoot_at_coord(
            ped_,
x_,
y_,
z_,
fireTolerance_,
        );
        
        
        ResultOf_task_vehicle_shoot_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_patrol_task_info(&self, ped_: u32,
timeLeftAtNode_: i32,
nodeId_: i32) -> ResultOf_get_patrol_task_info {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut timeLeftAtNode_ = Default::default();
let mut nodeId_ = Default::default();
        let success = sdk::natives::get_patrol_task_info(
            &mut native_return,
&mut timeLeftAtNode_,
&mut nodeId_,
ped_,
        );
        let native_return = native_return;
let timeLeftAtNode_ = timeLeftAtNode_;
let nodeId_ = nodeId_;
        
        ResultOf_get_patrol_task_info {
            success,
            ret: native_return,
            timeLeftAtNode_,
nodeId_
        }
    }
}

    fn native_waypoint_recording_get_num_points(&self, name_: Option<String>,
points_: i32) -> ResultOf_waypoint_recording_get_num_points {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut points_ = Default::default();
        let success = sdk::natives::waypoint_recording_get_num_points(
            &mut native_return,
&mut points_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let points_ = points_;
        
        ResultOf_waypoint_recording_get_num_points {
            success,
            ret: native_return,
            points_
        }
    }
}

    fn native_get_active_vehicle_mission_type(&self, vehicle_: u32) -> ResultOf_get_active_vehicle_mission_type {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_active_vehicle_mission_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_active_vehicle_mission_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_exclusive_scenario_group(&self, scenarioGroup_: Option<String>) -> ResultOf_set_exclusive_scenario_group {
    unsafe {
        let mut scenarioGroup_ = sdk_helpers::create_c_string_ptr(scenarioGroup_);
        let success = sdk::natives::set_exclusive_scenario_group(
            scenarioGroup_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_exclusive_scenario_group {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_crash_task(&self, vehicle_: u32) -> ResultOf_clear_vehicle_crash_task {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_crash_task(
            vehicle_,
        );
        
        
        ResultOf_clear_vehicle_crash_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sprinting(&self, ped_: u32) -> ResultOf_is_ped_sprinting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sprinting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_sprinting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_sequence_to_repeat(&self, taskSequenceId_: i32,
repeat_: bool) -> ResultOf_set_sequence_to_repeat {
    unsafe {
        let mut taskSequenceId_ = taskSequenceId_;
let mut repeat_ = repeat_;
        let success = sdk::natives::set_sequence_to_repeat(
            taskSequenceId_,
repeat_,
        );
        
        
        ResultOf_set_sequence_to_repeat {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_to_coord_warp(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
timeToLeave_: i32) -> ResultOf_task_use_nearest_scenario_to_coord_warp {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut timeToLeave_ = timeToLeave_;
        let success = sdk::natives::task_use_nearest_scenario_to_coord_warp(
            ped_,
x_,
y_,
z_,
radius_,
timeToLeave_,
        );
        
        
        ResultOf_task_use_nearest_scenario_to_coord_warp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scripted_cover_point_coords(&self, coverpoint_: u32) -> ResultOf_get_scripted_cover_point_coords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut coverpoint_ = coverpoint_;
        let success = sdk::natives::get_scripted_cover_point_coords(
            native_return.pin_mut(),
coverpoint_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_scripted_cover_point_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_follow_point_route(&self, ped_: u32,
speed_: f32,
mode_: i32) -> ResultOf_task_follow_point_route {
    unsafe {
        let mut ped_ = ped_;
let mut speed_ = speed_;
let mut mode_ = mode_;
        let success = sdk::natives::task_follow_point_route(
            ped_,
speed_,
mode_,
        );
        
        
        ResultOf_task_follow_point_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_waypoint_recording_as_assisted_movement_route(&self, name_: Option<String>,
p1_: bool,
p2_: f32,
p3_: f32) -> ResultOf_use_waypoint_recording_as_assisted_movement_route {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::use_waypoint_recording_as_assisted_movement_route(
            name_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOf_use_waypoint_recording_as_assisted_movement_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_ped_slide_to_coord_hdg_rate(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
speed_: f32,
headingChangeRate_: f32) -> ResultOf_task_ped_slide_to_coord_hdg_rate {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut speed_ = speed_;
let mut headingChangeRate_ = headingChangeRate_;
        let success = sdk::natives::task_ped_slide_to_coord_hdg_rate(
            ped_,
x_,
y_,
z_,
heading_,
speed_,
headingChangeRate_,
        );
        
        
        ResultOf_task_ped_slide_to_coord_hdg_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_exist_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
mustBeFree_: bool) -> ResultOf_does_scenario_exist_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut mustBeFree_ = mustBeFree_;
        let success = sdk::natives::does_scenario_exist_in_area(
            &mut native_return,
x_,
y_,
z_,
radius_,
mustBeFree_,
        );
        let native_return = native_return;
        
        ResultOf_does_scenario_exist_in_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_perform_sequence(&self, ped_: u32,
taskSequenceId_: i32) -> ResultOf_task_perform_sequence {
    unsafe {
        let mut ped_ = ped_;
let mut taskSequenceId_ = taskSequenceId_;
        let success = sdk::natives::task_perform_sequence(
            ped_,
taskSequenceId_,
        );
        
        
        ResultOf_task_perform_sequence {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_turn_ped_to_face_entity(&self, ped_: u32,
entity_: u32,
duration_: i32) -> ResultOf_task_turn_ped_to_face_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
        let success = sdk::natives::task_turn_ped_to_face_entity(
            ped_,
entity_,
duration_,
        );
        
        
        ResultOf_task_turn_ped_to_face_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_any_means(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
vehicle_: u32,
useLongRangeVehiclePathing_: bool,
drivingFlags_: i32,
maxRangeToShootTargets_: f32) -> ResultOf_task_go_to_coord_any_means {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut vehicle_ = vehicle_;
let mut useLongRangeVehiclePathing_ = useLongRangeVehiclePathing_;
let mut drivingFlags_ = drivingFlags_;
let mut maxRangeToShootTargets_ = maxRangeToShootTargets_;
        let success = sdk::natives::task_go_to_coord_any_means(
            ped_,
x_,
y_,
z_,
moveBlendRatio_,
vehicle_,
useLongRangeVehiclePathing_,
drivingFlags_,
maxRangeToShootTargets_,
        );
        
        
        ResultOf_task_go_to_coord_any_means {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_cruise_speed(&self, driver_: u32,
cruiseSpeed_: f32) -> ResultOf_set_drive_task_cruise_speed {
    unsafe {
        let mut driver_ = driver_;
let mut cruiseSpeed_ = cruiseSpeed_;
        let success = sdk::natives::set_drive_task_cruise_speed(
            driver_,
cruiseSpeed_,
        );
        
        
        ResultOf_set_drive_task_cruise_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_use_default_speed(&self, vehicle_: u32) -> ResultOf_vehicle_waypoint_playback_use_default_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_use_default_speed(
            vehicle_,
        );
        
        
        ResultOf_vehicle_waypoint_playback_use_default_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_subtask_attack_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_add_vehicle_subtask_attack_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_vehicle_subtask_attack_coord(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOf_add_vehicle_subtask_attack_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_mobile_phone_timed(&self, ped_: u32,
duration_: i32) -> ResultOf_task_use_mobile_phone_timed {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::task_use_mobile_phone_timed(
            ped_,
duration_,
        );
        
        
        ResultOf_task_use_mobile_phone_timed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sky_dive(&self, ped_: u32,
instant_: bool) -> ResultOf_task_sky_dive {
    unsafe {
        let mut ped_ = ped_;
let mut instant_ = instant_;
        let success = sdk::natives::task_sky_dive(
            ped_,
instant_,
        );
        
        
        ResultOf_task_sky_dive {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_is_route_loaded(&self, route_: Option<String>) -> ResultOf_assisted_movement_is_route_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_is_route_loaded(
            &mut native_return,
route_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_assisted_movement_is_route_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_default_primary_task(&self, ped_: u32) -> ResultOf_clear_default_primary_task {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_default_primary_task(
            ped_,
        );
        
        
        ResultOf_clear_default_primary_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_straight_to_coord_relative_to_entity(&self, ped_: u32,
entity_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
time_: i32) -> ResultOf_task_go_straight_to_coord_relative_to_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut time_ = time_;
        let success = sdk::natives::task_go_straight_to_coord_relative_to_entity(
            ped_,
entity_,
x_,
y_,
z_,
moveBlendRatio_,
time_,
        );
        
        
        ResultOf_task_go_straight_to_coord_relative_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_playing_base_clip_in_scenario(&self, ped_: u32) -> ResultOf_is_ped_playing_base_clip_in_scenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_playing_base_clip_in_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_playing_base_clip_in_scenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_reload_weapon(&self, ped_: u32,
drawWeapon_: bool) -> ResultOf_task_reload_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut drawWeapon_ = drawWeapon_;
        let success = sdk::natives::task_reload_weapon(
            ped_,
drawWeapon_,
        );
        
        
        ResultOf_task_reload_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_navmesh_route_result(&self, ped_: u32) -> ResultOf_get_navmesh_route_result {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_navmesh_route_result(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_navmesh_route_result {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_vehicle_chase_ideal_pursuit_distance(&self, ped_: u32,
distance_: f32) -> ResultOf_set_task_vehicle_chase_ideal_pursuit_distance {
    unsafe {
        let mut ped_ = ped_;
let mut distance_ = distance_;
        let success = sdk::natives::set_task_vehicle_chase_ideal_pursuit_distance(
            ped_,
distance_,
        );
        
        
        ResultOf_set_task_vehicle_chase_ideal_pursuit_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission(&self, driver_: u32,
vehicle_: u32,
vehicleTarget_: u32,
missionType_: i32,
cruiseSpeed_: f32,
drivingStyle_: i32,
targetReached_: f32,
straightLineDistance_: f32,
DriveAgainstTraffic_: bool) -> ResultOf_task_vehicle_mission {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut vehicleTarget_ = vehicleTarget_;
let mut missionType_ = missionType_;
let mut cruiseSpeed_ = cruiseSpeed_;
let mut drivingStyle_ = drivingStyle_;
let mut targetReached_ = targetReached_;
let mut straightLineDistance_ = straightLineDistance_;
let mut DriveAgainstTraffic_ = DriveAgainstTraffic_;
        let success = sdk::natives::task_vehicle_mission(
            driver_,
vehicle_,
vehicleTarget_,
missionType_,
cruiseSpeed_,
drivingStyle_,
targetReached_,
straightLineDistance_,
DriveAgainstTraffic_,
        );
        
        
        ResultOf_task_vehicle_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_use_default_speed(&self, p0_: i32) -> ResultOf_waypoint_playback_use_default_speed {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::waypoint_playback_use_default_speed(
            p0_,
        );
        
        
        ResultOf_waypoint_playback_use_default_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
instantBlendToAim_: bool,
playAnimIntro_: bool) -> ResultOf_task_aim_gun_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut instantBlendToAim_ = instantBlendToAim_;
let mut playAnimIntro_ = playAnimIntro_;
        let success = sdk::natives::task_aim_gun_at_coord(
            ped_,
x_,
y_,
z_,
time_,
instantBlendToAim_,
playAnimIntro_,
        );
        
        
        ResultOf_task_aim_gun_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_uncuff_ped(&self, ped_: u32) -> ResultOf_uncuff_ped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::uncuff_ped(
            ped_,
        );
        
        
        ResultOf_uncuff_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_wander_specific(&self, ped_: u32,
conditionalAnimGroupStr_: Option<String>,
conditionalAnimStr_: Option<String>,
heading_: f32) -> ResultOf_task_wander_specific {
    unsafe {
        let mut ped_ = ped_;
let mut conditionalAnimGroupStr_ = sdk_helpers::create_c_string_ptr(conditionalAnimGroupStr_);
let mut conditionalAnimStr_ = sdk_helpers::create_c_string_ptr(conditionalAnimStr_);
let mut heading_ = heading_;
        let success = sdk::natives::task_wander_specific(
            ped_,
conditionalAnimGroupStr_.as_ref().unwrap(),
conditionalAnimStr_.as_ref().unwrap(),
heading_,
        );
        
        
        ResultOf_task_wander_specific {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_look_at_entity(&self, ped_: u32,
lookAt_: u32,
duration_: i32,
flags_: i32,
priority_: i32) -> ResultOf_task_look_at_entity {
    unsafe {
        let mut ped_ = ped_;
let mut lookAt_ = lookAt_;
let mut duration_ = duration_;
let mut flags_ = flags_;
let mut priority_ = priority_;
        let success = sdk::natives::task_look_at_entity(
            ped_,
lookAt_,
duration_,
flags_,
priority_,
        );
        
        
        ResultOf_task_look_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_play_anim(&self, vehicle_: u32,
animationSet_: Option<String>,
animationName_: Option<String>) -> ResultOf_task_vehicle_play_anim {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut animationSet_ = sdk_helpers::create_c_string_ptr(animationSet_);
let mut animationName_ = sdk_helpers::create_c_string_ptr(animationName_);
        let success = sdk::natives::task_vehicle_play_anim(
            vehicle_,
animationSet_.as_ref().unwrap(),
animationName_.as_ref().unwrap(),
        );
        
        
        ResultOf_task_vehicle_play_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity(&self, entity_: u32,
target_: u32,
duration_: i32,
distance_: f32,
moveBlendRatio_: f32,
slowDownDistance_: f32,
flags_: i32) -> ResultOf_task_go_to_entity {
    unsafe {
        let mut entity_ = entity_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut distance_ = distance_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut slowDownDistance_ = slowDownDistance_;
let mut flags_ = flags_;
        let success = sdk::natives::task_go_to_entity(
            entity_,
target_,
duration_,
distance_,
moveBlendRatio_,
slowDownDistance_,
flags_,
        );
        
        
        ResultOf_task_go_to_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_min_bird_flight_height(&self, height_: f32) -> ResultOf_set_global_min_bird_flight_height {
    unsafe {
        let mut height_ = height_;
        let success = sdk::natives::set_global_min_bird_flight_height(
            height_,
        );
        
        
        ResultOf_set_global_min_bird_flight_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_warp_ped_directly_into_cover(&self, ped_: u32,
time_: i32,
allowPeekingAndFiring_: bool,
forceInitialFacingDirection_: bool,
forceFaceLeft_: bool,
identifier_: i32) -> ResultOf_task_warp_ped_directly_into_cover {
    unsafe {
        let mut ped_ = ped_;
let mut time_ = time_;
let mut allowPeekingAndFiring_ = allowPeekingAndFiring_;
let mut forceInitialFacingDirection_ = forceInitialFacingDirection_;
let mut forceFaceLeft_ = forceFaceLeft_;
let mut identifier_ = identifier_;
        let success = sdk::natives::task_warp_ped_directly_into_cover(
            ped_,
time_,
allowPeekingAndFiring_,
forceInitialFacingDirection_,
forceFaceLeft_,
identifier_,
        );
        
        
        ResultOf_task_warp_ped_directly_into_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_look_at_coord(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
flags_: i32,
priority_: i32) -> ResultOf_task_look_at_coord {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut flags_ = flags_;
let mut priority_ = priority_;
        let success = sdk::natives::task_look_at_coord(
            entity_,
x_,
y_,
z_,
duration_,
flags_,
priority_,
        );
        
        
        ResultOf_task_look_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_looped(&self, entity_: u32,
looped_: bool,
priority_: i32,
secondary_: bool) -> ResultOf_set_anim_looped {
    unsafe {
        let mut entity_ = entity_;
let mut looped_ = looped_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_looped(
            entity_,
looped_,
priority_,
secondary_,
        );
        
        
        ResultOf_set_anim_looped {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_get_is_paused(&self, p0_: i32) -> ResultOf_waypoint_playback_get_is_paused {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::waypoint_playback_get_is_paused(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_waypoint_playback_get_is_paused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_task_move_network_state(&self, ped_: u32) -> ResultOf_get_task_move_network_state {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut ped_ = ped_;
        let success = sdk::natives::get_task_move_network_state(
            native_return.pin_mut(),
ped_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_task_move_network_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_throw_projectile(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
ignoreCollisionEntityIndex_: i32,
createInvincibleProjectile_: bool) -> ResultOf_task_throw_projectile {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ignoreCollisionEntityIndex_ = ignoreCollisionEntityIndex_;
let mut createInvincibleProjectile_ = createInvincibleProjectile_;
        let success = sdk::natives::task_throw_projectile(
            ped_,
x_,
y_,
z_,
ignoreCollisionEntityIndex_,
createInvincibleProjectile_,
        );
        
        
        ResultOf_task_throw_projectile {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_react_and_flee_ped(&self, ped_: u32,
fleeTarget_: u32) -> ResultOf_task_react_and_flee_ped {
    unsafe {
        let mut ped_ = ped_;
let mut fleeTarget_ = fleeTarget_;
        let success = sdk::natives::task_react_and_flee_ped(
            ped_,
fleeTarget_,
        );
        
        
        ResultOf_task_react_and_flee_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_anim_on_running_scenario(&self, ped_: u32,
animDict_: Option<String>,
animName_: Option<String>) -> ResultOf_play_anim_on_running_scenario {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
        let success = sdk::natives::play_anim_on_running_scenario(
            ped_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
        );
        
        
        ResultOf_play_anim_on_running_scenario {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_cuffed(&self, ped_: u32) -> ResultOf_is_ped_cuffed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_cuffed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_cuffed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_seek_cover_from_pos(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
allowPeekingAndFiring_: bool) -> ResultOf_task_seek_cover_from_pos {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut allowPeekingAndFiring_ = allowPeekingAndFiring_;
        let success = sdk::natives::task_seek_cover_from_pos(
            ped_,
x_,
y_,
z_,
duration_,
allowPeekingAndFiring_,
        );
        
        
        ResultOf_task_seek_cover_from_pos {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_patrol_route(&self, patrolRoute_: Option<String>) -> ResultOf_delete_patrol_route {
    unsafe {
        let mut patrolRoute_ = sdk_helpers::create_c_string_ptr(patrolRoute_);
        let success = sdk::natives::delete_patrol_route(
            patrolRoute_.as_ref().unwrap(),
        );
        
        
        ResultOf_delete_patrol_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_entity_scripted_anim(&self, entity_: u32,
priorityLowData_: i32,
priorityMidData_: i32,
priorityHighData_: i32,
blendInDelta_: f32,
blendOutDelta_: f32) -> ResultOf_play_entity_scripted_anim {
    unsafe {
        let mut entity_ = entity_;
let mut priorityLowData_ = Default::default();
let mut priorityMidData_ = Default::default();
let mut priorityHighData_ = Default::default();
let mut blendInDelta_ = blendInDelta_;
let mut blendOutDelta_ = blendOutDelta_;
        let success = sdk::natives::play_entity_scripted_anim(
            &mut priorityLowData_,
&mut priorityMidData_,
&mut priorityHighData_,
entity_,
blendInDelta_,
blendOutDelta_,
        );
        let priorityLowData_ = priorityLowData_;
let priorityMidData_ = priorityMidData_;
let priorityHighData_ = priorityHighData_;
        
        ResultOf_play_entity_scripted_anim {
            success,
            ret: (),
            priorityLowData_,
priorityMidData_,
priorityHighData_
        }
    }
}

    fn native_set_ped_path_can_use_ladders(&self, ped_: u32,
Toggle_: bool) -> ResultOf_set_ped_path_can_use_ladders {
    unsafe {
        let mut ped_ = ped_;
let mut Toggle_ = Toggle_;
        let success = sdk::natives::set_ped_path_can_use_ladders(
            ped_,
Toggle_,
        );
        
        
        ResultOf_set_ped_path_can_use_ladders {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_script_task_status(&self, ped_: u32,
taskHash_: u32) -> ResultOf_get_script_task_status {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut taskHash_ = taskHash_;
        let success = sdk::natives::get_script_task_status(
            &mut native_return,
ped_,
taskHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_script_task_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scenario_occupied(&self, x_: f32,
y_: f32,
z_: f32,
maxRange_: f32,
onlyUsersActuallyAtScenario_: bool) -> ResultOf_is_scenario_occupied {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut maxRange_ = maxRange_;
let mut onlyUsersActuallyAtScenario_ = onlyUsersActuallyAtScenario_;
        let success = sdk::natives::is_scenario_occupied(
            &mut native_return,
x_,
y_,
z_,
maxRange_,
onlyUsersActuallyAtScenario_,
        );
        let native_return = native_return;
        
        ResultOf_is_scenario_occupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_exit_cover(&self, ped_: u32,
exitType_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_exit_cover {
    unsafe {
        let mut ped_ = ped_;
let mut exitType_ = exitType_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_exit_cover(
            ped_,
exitType_,
x_,
y_,
z_,
        );
        
        
        ResultOf_task_exit_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_scripted(&self, ped_: u32,
scriptTask_: u32,
disableBlockingClip_: bool,
instantBlendToAim_: bool) -> ResultOf_task_aim_gun_scripted {
    unsafe {
        let mut ped_ = ped_;
let mut scriptTask_ = scriptTask_;
let mut disableBlockingClip_ = disableBlockingClip_;
let mut instantBlendToAim_ = instantBlendToAim_;
        let success = sdk::natives::task_aim_gun_scripted(
            ped_,
scriptTask_,
disableBlockingClip_,
instantBlendToAim_,
        );
        
        
        ResultOf_task_aim_gun_scripted {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shuffle_to_next_vehicle_seat(&self, ped_: u32,
vehicle_: u32,
useAlternateShuffle_: bool) -> ResultOf_task_shuffle_to_next_vehicle_seat {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut useAlternateShuffle_ = useAlternateShuffle_;
        let success = sdk::natives::task_shuffle_to_next_vehicle_seat(
            ped_,
vehicle_,
useAlternateShuffle_,
        );
        
        
        ResultOf_task_shuffle_to_next_vehicle_seat {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sweep_aim_position(&self, ped_: u32,
animDict_: Option<String>,
lowAnimName_: Option<String>,
medAnimName_: Option<String>,
hiAnimName_: Option<String>,
runtime_: i32,
x_: f32,
y_: f32,
z_: f32,
turnRate_: f32,
blendInDuration_: f32) -> ResultOf_task_sweep_aim_position {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut lowAnimName_ = sdk_helpers::create_c_string_ptr(lowAnimName_);
let mut medAnimName_ = sdk_helpers::create_c_string_ptr(medAnimName_);
let mut hiAnimName_ = sdk_helpers::create_c_string_ptr(hiAnimName_);
let mut runtime_ = runtime_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut turnRate_ = turnRate_;
let mut blendInDuration_ = blendInDuration_;
        let success = sdk::natives::task_sweep_aim_position(
            ped_,
animDict_.as_ref().unwrap(),
lowAnimName_.as_ref().unwrap(),
medAnimName_.as_ref().unwrap(),
hiAnimName_.as_ref().unwrap(),
runtime_,
x_,
y_,
z_,
turnRate_,
blendInDuration_,
        );
        
        
        ResultOf_task_sweep_aim_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_hated_targets_around_ped(&self, ped_: u32,
radius_: f32,
combatFlags_: i32) -> ResultOf_task_combat_hated_targets_around_ped {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut combatFlags_ = combatFlags_;
        let success = sdk::natives::task_combat_hated_targets_around_ped(
            ped_,
radius_,
combatFlags_,
        );
        
        
        ResultOf_task_combat_hated_targets_around_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_override_speed(&self, p0_: i32,
p1_: f32,
p2_: bool) -> ResultOf_waypoint_playback_override_speed {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_override_speed(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_waypoint_playback_override_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_everyone_leave_vehicle(&self, vehicle_: u32) -> ResultOf_task_everyone_leave_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::task_everyone_leave_vehicle(
            vehicle_,
        );
        
        
        ResultOf_task_everyone_leave_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_request_route(&self, route_: Option<String>) -> ResultOf_assisted_movement_request_route {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_request_route(
            route_.as_ref().unwrap(),
        );
        
        
        ResultOf_assisted_movement_request_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_play_anim_advanced(&self, ped_: u32,
animDict_: Option<String>,
animName_: Option<String>,
posX_: f32,
posY_: f32,
posZ_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
animEnterSpeed_: f32,
animExitSpeed_: f32,
duration_: i32,
flag_: i32,
animTime_: f32,
rotOrder_: i32,
ikFlags_: i32) -> ResultOf_task_play_anim_advanced {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animName_ = sdk_helpers::create_c_string_ptr(animName_);
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut animEnterSpeed_ = animEnterSpeed_;
let mut animExitSpeed_ = animExitSpeed_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut animTime_ = animTime_;
let mut rotOrder_ = rotOrder_;
let mut ikFlags_ = ikFlags_;
        let success = sdk::natives::task_play_anim_advanced(
            ped_,
animDict_.as_ref().unwrap(),
animName_.as_ref().unwrap(),
posX_,
posY_,
posZ_,
rotX_,
rotY_,
rotZ_,
animEnterSpeed_,
animExitSpeed_,
duration_,
flag_,
animTime_,
rotOrder_,
ikFlags_,
        );
        
        
        ResultOf_task_play_anim_advanced {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_flush_route(&self, ) -> ResultOf_task_flush_route {
    unsafe {
        
        let success = sdk::natives::task_flush_route(
            
        );
        
        
        ResultOf_task_flush_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_anim_set(&self, ped_: u32,
clipSet_: u32,
unkVariableClipSet_: u32) -> ResultOf_set_task_move_network_anim_set {
    unsafe {
        let mut ped_ = ped_;
let mut clipSet_ = clipSet_;
let mut unkVariableClipSet_ = unkVariableClipSet_;
        let success = sdk::natives::set_task_move_network_anim_set(
            ped_,
clipSet_,
unkVariableClipSet_,
        );
        
        
        ResultOf_set_task_move_network_anim_set {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_from_ped(&self, ped_: u32,
target_: u32,
duration_: i32,
allowPeekingAndFiring_: bool) -> ResultOf_task_seek_cover_from_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut allowPeekingAndFiring_ = allowPeekingAndFiring_;
        let success = sdk::natives::task_seek_cover_from_ped(
            ped_,
target_,
duration_,
allowPeekingAndFiring_,
        );
        
        
        ResultOf_task_seek_cover_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_desired_move_blend_ratio(&self, ped_: u32) -> ResultOf_get_ped_desired_move_blend_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_desired_move_blend_ratio(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_desired_move_blend_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_vehicle_subtask_attack_ped(&self, ped_: u32,
target_: u32) -> ResultOf_add_vehicle_subtask_attack_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::add_vehicle_subtask_attack_ped(
            ped_,
target_,
        );
        
        
        ResultOf_add_vehicle_subtask_attack_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_scripted_with_target(&self, ped_: u32,
target_: u32,
x_: f32,
y_: f32,
z_: f32,
gunTaskType_: i32,
disableBlockingClip_: bool,
forceAim_: bool) -> ResultOf_task_aim_gun_scripted_with_target {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut gunTaskType_ = gunTaskType_;
let mut disableBlockingClip_ = disableBlockingClip_;
let mut forceAim_ = forceAim_;
        let success = sdk::natives::task_aim_gun_scripted_with_target(
            ped_,
target_,
x_,
y_,
z_,
gunTaskType_,
disableBlockingClip_,
forceAim_,
        );
        
        
        ResultOf_task_aim_gun_scripted_with_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_signal_float_lerp_rate(&self, ped_: u32,
signalName_: Option<String>,
value_: f32) -> ResultOf_set_task_move_network_signal_float_lerp_rate {
    unsafe {
        let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_float_lerp_rate(
            ped_,
signalName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_task_move_network_signal_float_lerp_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_driveby_task_underneath_driving_task(&self, ped_: u32) -> ResultOf_is_driveby_task_underneath_driving_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_driveby_task_underneath_driving_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_driveby_task_underneath_driving_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_path_climb_cost_modifier(&self, ped_: u32,
modifier_: f32) -> ResultOf_set_ped_path_climb_cost_modifier {
    unsafe {
        let mut ped_ = ped_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_ped_path_climb_cost_modifier(
            ped_,
modifier_,
        );
        
        
        ResultOf_set_ped_path_climb_cost_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_perform_sequence_from_progress(&self, ped_: u32,
taskIndex_: i32,
progress1_: i32,
progress2_: i32) -> ResultOf_task_perform_sequence_from_progress {
    unsafe {
        let mut ped_ = ped_;
let mut taskIndex_ = taskIndex_;
let mut progress1_ = progress1_;
let mut progress2_ = progress2_;
        let success = sdk::natives::task_perform_sequence_from_progress(
            ped_,
taskIndex_,
progress1_,
progress2_,
        );
        
        
        ResultOf_task_perform_sequence_from_progress {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_aiming_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool) -> ResultOf_waypoint_playback_start_aiming_at_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::waypoint_playback_start_aiming_at_coord(
            ped_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOf_waypoint_playback_start_aiming_at_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_climb(&self, ped_: u32,
usePlayerLaunchForce_: bool) -> ResultOf_task_climb {
    unsafe {
        let mut ped_ = ped_;
let mut usePlayerLaunchForce_ = usePlayerLaunchForce_;
        let success = sdk::natives::task_climb(
            ped_,
usePlayerLaunchForce_,
        );
        
        
        ResultOf_task_climb {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_pause(&self, vehicle_: u32) -> ResultOf_vehicle_waypoint_playback_pause {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_pause(
            vehicle_,
        );
        
        
        ResultOf_vehicle_waypoint_playback_pause {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_perform_sequence_locally(&self, ped_: u32,
taskSequenceId_: i32) -> ResultOf_task_perform_sequence_locally {
    unsafe {
        let mut ped_ = ped_;
let mut taskSequenceId_ = taskSequenceId_;
        let success = sdk::natives::task_perform_sequence_locally(
            ped_,
taskSequenceId_,
        );
        
        
        ResultOf_task_perform_sequence_locally {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_chat_to_ped(&self, ped_: u32,
target_: u32,
flags_: i32,
goToLocationX_: f32,
goToLocationY_: f32,
goToLocationZ_: f32,
headingDegs_: f32,
idleTime_: f32) -> ResultOf_task_chat_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut flags_ = flags_;
let mut goToLocationX_ = goToLocationX_;
let mut goToLocationY_ = goToLocationY_;
let mut goToLocationZ_ = goToLocationZ_;
let mut headingDegs_ = headingDegs_;
let mut idleTime_ = idleTime_;
        let success = sdk::natives::task_chat_to_ped(
            ped_,
target_,
flags_,
goToLocationX_,
goToLocationY_,
goToLocationZ_,
headingDegs_,
idleTime_,
        );
        
        
        ResultOf_task_chat_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_high_fall_task(&self, ped_: u32,
minTime_: i32,
maxTime_: i32,
entryType_: i32) -> ResultOf_set_high_fall_task {
    unsafe {
        let mut ped_ = ped_;
let mut minTime_ = minTime_;
let mut maxTime_ = maxTime_;
let mut entryType_ = entryType_;
        let success = sdk::natives::set_high_fall_task(
            ped_,
minTime_,
maxTime_,
entryType_,
        );
        
        
        ResultOf_set_high_fall_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_can_use_climbovers(&self, ped_: u32,
Toggle_: bool) -> ResultOf_set_ped_path_can_use_climbovers {
    unsafe {
        let mut ped_ = ped_;
let mut Toggle_ = Toggle_;
        let success = sdk::natives::set_ped_path_can_use_climbovers(
            ped_,
Toggle_,
        );
        
        
        ResultOf_set_ped_path_can_use_climbovers {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_patrol_route_node(&self, nodeId_: i32,
nodeType_: Option<String>,
posX_: f32,
posY_: f32,
posZ_: f32,
headingX_: f32,
headingY_: f32,
headingZ_: f32,
duration_: i32) -> ResultOf_add_patrol_route_node {
    unsafe {
        let mut nodeId_ = nodeId_;
let mut nodeType_ = sdk_helpers::create_c_string_ptr(nodeType_);
let mut posX_ = posX_;
let mut posY_ = posY_;
let mut posZ_ = posZ_;
let mut headingX_ = headingX_;
let mut headingY_ = headingY_;
let mut headingZ_ = headingZ_;
let mut duration_ = duration_;
        let success = sdk::natives::add_patrol_route_node(
            nodeId_,
nodeType_.as_ref().unwrap(),
posX_,
posY_,
posZ_,
headingX_,
headingY_,
headingZ_,
duration_,
        );
        
        
        ResultOf_add_patrol_route_node {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_play_phone_gesture_animation(&self, ped_: u32,
animDict_: Option<String>,
animation_: Option<String>,
boneMaskType_: Option<String>,
blendInDuration_: f32,
blendOutDuration_: f32,
isLooping_: bool,
holdLastFrame_: bool) -> ResultOf_task_play_phone_gesture_animation {
    unsafe {
        let mut ped_ = ped_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut boneMaskType_ = sdk_helpers::create_c_string_ptr(boneMaskType_);
let mut blendInDuration_ = blendInDuration_;
let mut blendOutDuration_ = blendOutDuration_;
let mut isLooping_ = isLooping_;
let mut holdLastFrame_ = holdLastFrame_;
        let success = sdk::natives::task_play_phone_gesture_animation(
            ped_,
animDict_.as_ref().unwrap(),
animation_.as_ref().unwrap(),
boneMaskType_.as_ref().unwrap(),
blendInDuration_,
blendOutDuration_,
isLooping_,
holdLastFrame_,
        );
        
        
        ResultOf_task_play_phone_gesture_animation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_ambient_idles(&self, ped_: u32,
blockIdleClips_: bool,
removeIdleClipIfPlaying_: bool) -> ResultOf_set_ped_can_play_ambient_idles {
    unsafe {
        let mut ped_ = ped_;
let mut blockIdleClips_ = blockIdleClips_;
let mut removeIdleClipIfPlaying_ = removeIdleClipIfPlaying_;
        let success = sdk::natives::set_ped_can_play_ambient_idles(
            ped_,
blockIdleClips_,
removeIdleClipIfPlaying_,
        );
        
        
        ResultOf_set_ped_can_play_ambient_idles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_being_arrested(&self, ped_: u32) -> ResultOf_is_ped_being_arrested {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_arrested(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_being_arrested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_set_blocking_of_non_temporary_events(&self, ped_: u32,
toggle_: bool) -> ResultOf_task_set_blocking_of_non_temporary_events {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::task_set_blocking_of_non_temporary_events(
            ped_,
toggle_,
        );
        
        
        ResultOf_task_set_blocking_of_non_temporary_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stand_still(&self, ped_: u32,
time_: i32) -> ResultOf_task_stand_still {
    unsafe {
        let mut ped_ = ped_;
let mut time_ = time_;
        let success = sdk::natives::task_stand_still(
            ped_,
time_,
        );
        
        
        ResultOf_task_stand_still {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_task_move_network_active(&self, ped_: u32) -> ResultOf_is_task_move_network_active {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_task_move_network_active(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_task_move_network_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_plane_taxi(&self, pilot_: u32,
aircraft_: u32,
x_: f32,
y_: f32,
z_: f32,
cruiseSpeed_: f32,
targetReached_: f32) -> ResultOf_task_plane_taxi {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut cruiseSpeed_ = cruiseSpeed_;
let mut targetReached_ = targetReached_;
        let success = sdk::natives::task_plane_taxi(
            pilot_,
aircraft_,
x_,
y_,
z_,
cruiseSpeed_,
targetReached_,
        );
        
        
        ResultOf_task_plane_taxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_set_sphere_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_task_set_sphere_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::task_set_sphere_defensive_area(
            ped_,
x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_task_set_sphere_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_achieve_heading(&self, ped_: u32,
heading_: f32,
timeout_: i32) -> ResultOf_task_achieve_heading {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
let mut timeout_ = timeout_;
        let success = sdk::natives::task_achieve_heading(
            ped_,
heading_,
timeout_,
        );
        
        
        ResultOf_task_achieve_heading {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_ped_timed(&self, ped_: u32,
target_: u32,
time_: i32,
flags_: i32) -> ResultOf_task_combat_ped_timed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut time_ = time_;
let mut flags_ = flags_;
        let success = sdk::natives::task_combat_ped_timed(
            ped_,
target_,
time_,
flags_,
        );
        
        
        ResultOf_task_combat_ped_timed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission_ped_target(&self, ped_: u32,
vehicle_: u32,
pedTarget_: u32,
missionType_: i32,
maxSpeed_: f32,
drivingStyle_: i32,
minDistance_: f32,
straightLineDistance_: f32,
DriveAgainstTraffic_: bool) -> ResultOf_task_vehicle_mission_ped_target {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut pedTarget_ = pedTarget_;
let mut missionType_ = missionType_;
let mut maxSpeed_ = maxSpeed_;
let mut drivingStyle_ = drivingStyle_;
let mut minDistance_ = minDistance_;
let mut straightLineDistance_ = straightLineDistance_;
let mut DriveAgainstTraffic_ = DriveAgainstTraffic_;
        let success = sdk::natives::task_vehicle_mission_ped_target(
            ped_,
vehicle_,
pedTarget_,
missionType_,
maxSpeed_,
drivingStyle_,
minDistance_,
straightLineDistance_,
DriveAgainstTraffic_,
        );
        
        
        ResultOf_task_vehicle_mission_ped_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_smart_flee_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
distance_: f32,
time_: i32,
preferPavements_: bool,
quitIfOutOfRange_: bool) -> ResultOf_task_smart_flee_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut distance_ = distance_;
let mut time_ = time_;
let mut preferPavements_ = preferPavements_;
let mut quitIfOutOfRange_ = quitIfOutOfRange_;
        let success = sdk::natives::task_smart_flee_coord(
            ped_,
x_,
y_,
z_,
distance_,
time_,
preferPavements_,
quitIfOutOfRange_,
        );
        
        
        ResultOf_task_smart_flee_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_clear_defensive_area(&self, ped_: u32) -> ResultOf_task_clear_defensive_area {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_clear_defensive_area(
            ped_,
        );
        
        
        ResultOf_task_clear_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_open_vehicle_door(&self, ped_: u32,
vehicle_: u32,
timeOut_: i32,
seat_: i32,
speed_: f32) -> ResultOf_task_open_vehicle_door {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut timeOut_ = timeOut_;
let mut seat_ = seat_;
let mut speed_ = speed_;
        let success = sdk::natives::task_open_vehicle_door(
            ped_,
vehicle_,
timeOut_,
seat_,
speed_,
        );
        
        
        ResultOf_task_open_vehicle_door {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plant_bomb(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOf_task_plant_bomb {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::task_plant_bomb(
            ped_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOf_task_plant_bomb {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_task_aim_gun_scripted_target(&self, ped_: u32,
target_: u32,
x_: f32,
y_: f32,
z_: f32,
disableBlockingClip_: bool) -> ResultOf_update_task_aim_gun_scripted_target {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut disableBlockingClip_ = disableBlockingClip_;
        let success = sdk::natives::update_task_aim_gun_scripted_target(
            ped_,
target_,
x_,
y_,
z_,
disableBlockingClip_,
        );
        
        
        ResultOf_update_task_aim_gun_scripted_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity_while_aiming_at_entity(&self, ped_: u32,
entityToWalkTo_: u32,
entityToAimAt_: u32,
speed_: f32,
shootatEntity_: bool,
targetRadius_: f32,
slowDistance_: f32,
useNavMesh_: bool,
instantBlendToAim_: bool,
firingPattern_: u32) -> ResultOf_task_go_to_entity_while_aiming_at_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entityToWalkTo_ = entityToWalkTo_;
let mut entityToAimAt_ = entityToAimAt_;
let mut speed_ = speed_;
let mut shootatEntity_ = shootatEntity_;
let mut targetRadius_ = targetRadius_;
let mut slowDistance_ = slowDistance_;
let mut useNavMesh_ = useNavMesh_;
let mut instantBlendToAim_ = instantBlendToAim_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_go_to_entity_while_aiming_at_entity(
            ped_,
entityToWalkTo_,
entityToAimAt_,
speed_,
shootatEntity_,
targetRadius_,
slowDistance_,
useNavMesh_,
instantBlendToAim_,
firingPattern_,
        );
        
        
        ResultOf_task_go_to_entity_while_aiming_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_chain_to_coord_warp(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
timeToLeave_: i32) -> ResultOf_task_use_nearest_scenario_chain_to_coord_warp {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut timeToLeave_ = timeToLeave_;
        let success = sdk::natives::task_use_nearest_scenario_chain_to_coord_warp(
            ped_,
x_,
y_,
z_,
radius_,
timeToLeave_,
        );
        
        
        ResultOf_task_use_nearest_scenario_chain_to_coord_warp {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_anim_task(&self, entity_: u32,
animDictionary_: Option<String>,
animationName_: Option<String>,
blendDelta_: f32) -> ResultOf_stop_anim_task {
    unsafe {
        let mut entity_ = entity_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animationName_ = sdk_helpers::create_c_string_ptr(animationName_);
let mut blendDelta_ = blendDelta_;
        let success = sdk::natives::stop_anim_task(
            entity_,
animDictionary_.as_ref().unwrap(),
animationName_.as_ref().unwrap(),
blendDelta_,
        );
        
        
        ResultOf_stop_anim_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_waypoint_progress(&self, vehicle_: u32) -> ResultOf_get_vehicle_waypoint_progress {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_waypoint_progress(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_waypoint_progress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_warp_ped_into_vehicle(&self, ped_: u32,
vehicle_: u32,
seat_: i32) -> ResultOf_task_warp_ped_into_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seat_ = seat_;
        let success = sdk::natives::task_warp_ped_into_vehicle(
            ped_,
vehicle_,
seat_,
        );
        
        
        ResultOf_task_warp_ped_into_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_at_entity(&self, ped_: u32,
entity_: u32,
duration_: i32,
instantBlendToAim_: bool) -> ResultOf_task_aim_gun_at_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
let mut instantBlendToAim_ = instantBlendToAim_;
        let success = sdk::natives::task_aim_gun_at_entity(
            ped_,
entity_,
duration_,
instantBlendToAim_,
        );
        
        
        ResultOf_task_aim_gun_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_get_off_boat(&self, ped_: u32,
boat_: u32) -> ResultOf_task_get_off_boat {
    unsafe {
        let mut ped_ = ped_;
let mut boat_ = boat_;
        let success = sdk::natives::task_get_off_boat(
            ped_,
boat_,
        );
        
        
        ResultOf_task_get_off_boat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_rappel_down_wall_state(&self, ped_: u32) -> ResultOf_get_task_rappel_down_wall_state {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_task_rappel_down_wall_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_task_rappel_down_wall_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_waypoint_recording(&self, name_: Option<String>) -> ResultOf_request_waypoint_recording {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::request_waypoint_recording(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_waypoint_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_chain_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
maxRange_: f32,
timeToLeave_: i32) -> ResultOf_task_use_nearest_scenario_chain_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut maxRange_ = maxRange_;
let mut timeToLeave_ = timeToLeave_;
        let success = sdk::natives::task_use_nearest_scenario_chain_to_coord(
            ped_,
x_,
y_,
z_,
maxRange_,
timeToLeave_,
        );
        
        
        ResultOf_task_use_nearest_scenario_chain_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_swap_weapon(&self, ped_: u32,
drawWeapon_: bool) -> ResultOf_task_swap_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut drawWeapon_ = drawWeapon_;
        let success = sdk::natives::task_swap_weapon(
            ped_,
drawWeapon_,
        );
        
        
        ResultOf_task_swap_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mounted_weapon_task_underneath_driving_task(&self, ped_: u32) -> ResultOf_is_mounted_weapon_task_underneath_driving_task {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_mounted_weapon_task_underneath_driving_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_mounted_weapon_task_underneath_driving_task {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_patrol_route(&self, patrolRoute_: Option<String>) -> ResultOf_open_patrol_route {
    unsafe {
        let mut patrolRoute_ = sdk_helpers::create_c_string_ptr(patrolRoute_);
        let success = sdk::natives::open_patrol_route(
            patrolRoute_.as_ref().unwrap(),
        );
        
        
        ResultOf_open_patrol_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_and_aim_at_hated_entities_near_coord(&self, pedHandle_: u32,
goToLocationX_: f32,
goToLocationY_: f32,
goToLocationZ_: f32,
focusLocationX_: f32,
focusLocationY_: f32,
focusLocationZ_: f32,
speed_: f32,
shootAtEnemies_: bool,
distanceToStopAt_: f32,
noRoadsDistance_: f32,
useNavMesh_: bool,
navFlags_: i32,
taskFlags_: i32,
firingPattern_: u32) -> ResultOf_task_go_to_coord_and_aim_at_hated_entities_near_coord {
    unsafe {
        let mut pedHandle_ = pedHandle_;
let mut goToLocationX_ = goToLocationX_;
let mut goToLocationY_ = goToLocationY_;
let mut goToLocationZ_ = goToLocationZ_;
let mut focusLocationX_ = focusLocationX_;
let mut focusLocationY_ = focusLocationY_;
let mut focusLocationZ_ = focusLocationZ_;
let mut speed_ = speed_;
let mut shootAtEnemies_ = shootAtEnemies_;
let mut distanceToStopAt_ = distanceToStopAt_;
let mut noRoadsDistance_ = noRoadsDistance_;
let mut useNavMesh_ = useNavMesh_;
let mut navFlags_ = navFlags_;
let mut taskFlags_ = taskFlags_;
let mut firingPattern_ = firingPattern_;
        let success = sdk::natives::task_go_to_coord_and_aim_at_hated_entities_near_coord(
            pedHandle_,
goToLocationX_,
goToLocationY_,
goToLocationZ_,
focusLocationX_,
focusLocationY_,
focusLocationZ_,
speed_,
shootAtEnemies_,
distanceToStopAt_,
noRoadsDistance_,
useNavMesh_,
navFlags_,
taskFlags_,
firingPattern_,
        );
        
        
        ResultOf_task_go_to_coord_and_aim_at_hated_entities_near_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_waypoint_distance_along_route(&self, name_: Option<String>,
point_: i32) -> ResultOf_get_waypoint_distance_along_route {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
        let success = sdk::natives::get_waypoint_distance_along_route(
            &mut native_return,
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
        
        ResultOf_get_waypoint_distance_along_route {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_task_move_network_signal_bool(&self, ped_: u32,
signalName_: Option<String>) -> ResultOf_get_task_move_network_signal_bool {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
        let success = sdk::natives::get_task_move_network_signal_bool(
            &mut native_return,
ped_,
signalName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_task_move_network_signal_bool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_scripted_cover_point_exist_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_does_scripted_cover_point_exist_at_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::does_scripted_cover_point_exist_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_does_scripted_cover_point_exist_at_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_task_hands_up_duration(&self, ped_: u32,
duration_: i32) -> ResultOf_update_task_hands_up_duration {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::update_task_hands_up_duration(
            ped_,
duration_,
        );
        
        
        ResultOf_update_task_hands_up_duration {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_aiming(&self, ped_: u32,
target_: u32,
distanceToStopAt_: f32,
StartAimingDist_: f32) -> ResultOf_task_goto_entity_aiming {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut distanceToStopAt_ = distanceToStopAt_;
let mut StartAimingDist_ = StartAimingDist_;
        let success = sdk::natives::task_goto_entity_aiming(
            ped_,
target_,
distanceToStopAt_,
StartAimingDist_,
        );
        
        
        ResultOf_task_goto_entity_aiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_active_in_scenario(&self, ped_: u32) -> ResultOf_is_ped_active_in_scenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_active_in_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_active_in_scenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_stealth_kill(&self, killer_: u32,
target_: u32,
stealthKillActionResultHash_: u32,
desiredMoveBlendRatio_: f32,
stealthFlags_: i32) -> ResultOf_task_stealth_kill {
    unsafe {
        let mut killer_ = killer_;
let mut target_ = target_;
let mut stealthKillActionResultHash_ = stealthKillActionResultHash_;
let mut desiredMoveBlendRatio_ = desiredMoveBlendRatio_;
let mut stealthFlags_ = stealthFlags_;
        let success = sdk::natives::task_stealth_kill(
            killer_,
target_,
stealthKillActionResultHash_,
desiredMoveBlendRatio_,
stealthFlags_,
        );
        
        
        ResultOf_task_stealth_kill {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_tasks_immediately(&self, ped_: u32) -> ResultOf_clear_ped_tasks_immediately {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_tasks_immediately(
            ped_,
        );
        
        
        ResultOf_clear_ped_tasks_immediately {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_expected_clone_next_task_move_network_state(&self, ped_: u32,
state_: Option<String>) -> ResultOf_set_expected_clone_next_task_move_network_state {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut state_ = sdk_helpers::create_c_string_ptr(state_);
        let success = sdk::natives::set_expected_clone_next_task_move_network_state(
            &mut native_return,
ped_,
state_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_set_expected_clone_next_task_move_network_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_still(&self, ped_: u32) -> ResultOf_is_ped_still {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_still(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_still {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_heli_chase(&self, pilot_: u32,
entityToFollow_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_heli_chase {
    unsafe {
        let mut pilot_ = pilot_;
let mut entityToFollow_ = entityToFollow_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_heli_chase(
            pilot_,
entityToFollow_,
x_,
y_,
z_,
        );
        
        
        ResultOf_task_heli_chase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_toggle_duck(&self, ped_: u32,
toggleType_: i32) -> ResultOf_task_toggle_duck {
    unsafe {
        let mut ped_ = ped_;
let mut toggleType_ = toggleType_;
        let success = sdk::natives::task_toggle_duck(
            ped_,
toggleType_,
        );
        
        
        ResultOf_task_toggle_duck {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stand_guard(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
scenarioName_: Option<String>) -> ResultOf_task_stand_guard {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut scenarioName_ = sdk_helpers::create_c_string_ptr(scenarioName_);
        let success = sdk::natives::task_stand_guard(
            ped_,
x_,
y_,
z_,
heading_,
scenarioName_.as_ref().unwrap(),
        );
        
        
        ResultOf_task_stand_guard {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cover_point(&self, coverpoint_: u32) -> ResultOf_remove_cover_point {
    unsafe {
        let mut coverpoint_ = coverpoint_;
        let success = sdk::natives::remove_cover_point(
            coverpoint_,
        );
        
        
        ResultOf_remove_cover_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_patrol_route(&self, ) -> ResultOf_create_patrol_route {
    unsafe {
        
        let success = sdk::natives::create_patrol_route(
            
        );
        
        
        ResultOf_create_patrol_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_patrol_route(&self, ) -> ResultOf_close_patrol_route {
    unsafe {
        
        let success = sdk::natives::close_patrol_route(
            
        );
        
        
        ResultOf_close_patrol_route {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_task_active(&self, ped_: u32,
taskIndex_: i32) -> ResultOf_get_is_task_active {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut taskIndex_ = taskIndex_;
        let success = sdk::natives::get_is_task_active(
            &mut native_return,
ped_,
taskIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_task_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_move_network_signal_bool(&self, ped_: u32,
signalName_: Option<String>,
value_: bool) -> ResultOf_set_task_move_network_signal_bool {
    unsafe {
        let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_bool(
            ped_,
signalName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_task_move_network_signal_bool {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_while_aiming_at_entity(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
aimAtID_: u32,
moveBlendRatio_: f32,
shoot_: bool,
targetRadius_: f32,
slowDistance_: f32,
useNavMesh_: bool,
navFlags_: i32,
instantBlendToAim_: bool,
firingPattern_: u32,
time_: i32) -> ResultOf_task_go_to_coord_while_aiming_at_entity {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut aimAtID_ = aimAtID_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut shoot_ = shoot_;
let mut targetRadius_ = targetRadius_;
let mut slowDistance_ = slowDistance_;
let mut useNavMesh_ = useNavMesh_;
let mut navFlags_ = navFlags_;
let mut instantBlendToAim_ = instantBlendToAim_;
let mut firingPattern_ = firingPattern_;
let mut time_ = time_;
        let success = sdk::natives::task_go_to_coord_while_aiming_at_entity(
            ped_,
x_,
y_,
z_,
aimAtID_,
moveBlendRatio_,
shoot_,
targetRadius_,
slowDistance_,
useNavMesh_,
navFlags_,
instantBlendToAim_,
firingPattern_,
time_,
        );
        
        
        ResultOf_task_go_to_coord_while_aiming_at_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_parachute_to_target(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_task_parachute_to_target {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_parachute_to_target(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOf_task_parachute_to_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_heli_escort_heli(&self, pilot_: u32,
heli1_: u32,
heli2_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32) -> ResultOf_task_heli_escort_heli {
    unsafe {
        let mut pilot_ = pilot_;
let mut heli1_ = heli1_;
let mut heli2_ = heli2_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
        let success = sdk::natives::task_heli_escort_heli(
            pilot_,
heli1_,
heli2_,
offsetX_,
offsetY_,
offsetZ_,
        );
        
        
        ResultOf_task_heli_escort_heli {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_move_network_event(&self, ped_: u32,
eventName_: Option<String>) -> ResultOf_get_task_move_network_event {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut eventName_ = sdk_helpers::create_c_string_ptr(eventName_);
        let success = sdk::natives::get_task_move_network_event(
            &mut native_return,
ped_,
eventName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_task_move_network_event {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_recording_get_closest_waypoint(&self, name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
point_: i32) -> ResultOf_waypoint_recording_get_closest_waypoint {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut point_ = Default::default();
        let success = sdk::natives::waypoint_recording_get_closest_waypoint(
            &mut native_return,
&mut point_,
name_.as_ref().unwrap(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let point_ = point_;
        
        ResultOf_waypoint_recording_get_closest_waypoint {
            success,
            ret: native_return,
            point_
        }
    }
}

    fn native_task_climb_ladder(&self, ped_: u32,
fast_: bool) -> ResultOf_task_climb_ladder {
    unsafe {
        let mut ped_ = ped_;
let mut fast_ = fast_;
        let success = sdk::natives::task_climb_ladder(
            ped_,
fast_,
        );
        
        
        ResultOf_task_climb_ladder {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_playing_phone_gesture_anim(&self, ped_: u32) -> ResultOf_is_playing_phone_gesture_anim {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_playing_phone_gesture_anim(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_playing_phone_gesture_anim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_go_to_coord_any_means_extra_params_with_cruise_speed(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
moveBlendRatio_: f32,
vehicle_: u32,
useLongRangeVehiclePathing_: bool,
drivingFlags_: i32,
maxRangeToShootTargets_: f32,
extraVehToTargetDistToPreferVehicle_: f32,
driveStraightLineDistance_: f32,
extraFlags_: i32,
cruiseSpeed_: f32,
targetArriveDist_: f32) -> ResultOf_task_go_to_coord_any_means_extra_params_with_cruise_speed {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut vehicle_ = vehicle_;
let mut useLongRangeVehiclePathing_ = useLongRangeVehiclePathing_;
let mut drivingFlags_ = drivingFlags_;
let mut maxRangeToShootTargets_ = maxRangeToShootTargets_;
let mut extraVehToTargetDistToPreferVehicle_ = extraVehToTargetDistToPreferVehicle_;
let mut driveStraightLineDistance_ = driveStraightLineDistance_;
let mut extraFlags_ = extraFlags_;
let mut cruiseSpeed_ = cruiseSpeed_;
let mut targetArriveDist_ = targetArriveDist_;
        let success = sdk::natives::task_go_to_coord_any_means_extra_params_with_cruise_speed(
            ped_,
x_,
y_,
z_,
moveBlendRatio_,
vehicle_,
useLongRangeVehiclePathing_,
drivingFlags_,
maxRangeToShootTargets_,
extraVehToTargetDistToPreferVehicle_,
driveStraightLineDistance_,
extraFlags_,
cruiseSpeed_,
targetArriveDist_,
        );
        
        
        ResultOf_task_go_to_coord_any_means_extra_params_with_cruise_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_task_sweep_aim_position(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_update_task_sweep_aim_position {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::update_task_sweep_aim_position(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOf_update_task_sweep_aim_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_wander_standard(&self, ped_: u32,
heading_: f32,
flags_: i32) -> ResultOf_task_wander_standard {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
let mut flags_ = flags_;
        let success = sdk::natives::task_wander_standard(
            ped_,
heading_,
flags_,
        );
        
        
        ResultOf_task_wander_standard {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_mobile_phone(&self, ped_: u32,
usePhone_: bool,
desiredPhoneMode_: i32) -> ResultOf_task_use_mobile_phone {
    unsafe {
        let mut ped_ = ped_;
let mut usePhone_ = usePhone_;
let mut desiredPhoneMode_ = desiredPhoneMode_;
        let success = sdk::natives::task_use_mobile_phone(
            ped_,
usePhone_,
desiredPhoneMode_,
        );
        
        
        ResultOf_task_use_mobile_phone {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_patrol(&self, ped_: u32,
patrolRouteName_: Option<String>,
alertState_: i32,
canChatToPeds_: bool,
useHeadLookAt_: bool) -> ResultOf_task_patrol {
    unsafe {
        let mut ped_ = ped_;
let mut patrolRouteName_ = sdk_helpers::create_c_string_ptr(patrolRouteName_);
let mut alertState_ = alertState_;
let mut canChatToPeds_ = canChatToPeds_;
let mut useHeadLookAt_ = useHeadLookAt_;
        let success = sdk::natives::task_patrol(
            ped_,
patrolRouteName_.as_ref().unwrap(),
alertState_,
canChatToPeds_,
useHeadLookAt_,
        );
        
        
        ResultOf_task_patrol {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_land(&self, pilot_: u32,
plane_: u32,
runwayStartX_: f32,
runwayStartY_: f32,
runwayStartZ_: f32,
runwayEndX_: f32,
runwayEndY_: f32,
runwayEndZ_: f32) -> ResultOf_task_plane_land {
    unsafe {
        let mut pilot_ = pilot_;
let mut plane_ = plane_;
let mut runwayStartX_ = runwayStartX_;
let mut runwayStartY_ = runwayStartY_;
let mut runwayStartZ_ = runwayStartZ_;
let mut runwayEndX_ = runwayEndX_;
let mut runwayEndY_ = runwayEndY_;
let mut runwayEndZ_ = runwayEndZ_;
        let success = sdk::natives::task_plane_land(
            pilot_,
plane_,
runwayStartX_,
runwayStartY_,
runwayStartZ_,
runwayEndX_,
runwayEndY_,
runwayEndZ_,
        );
        
        
        ResultOf_task_plane_land {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_enter_vehicle(&self, ped_: u32,
vehicle_: u32,
timeout_: i32,
seat_: i32,
speed_: f32,
flag_: i32,
overrideEntryClipsetName_: Option<String>) -> ResultOf_task_enter_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut timeout_ = timeout_;
let mut seat_ = seat_;
let mut speed_ = speed_;
let mut flag_ = flag_;
let mut overrideEntryClipsetName_ = sdk_helpers::create_c_string_ptr(overrideEntryClipsetName_);
        let success = sdk::natives::task_enter_vehicle(
            ped_,
vehicle_,
timeout_,
seat_,
speed_,
flag_,
overrideEntryClipsetName_.as_ref().unwrap(),
        );
        
        
        ResultOf_task_enter_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_submarine_goto_and_stop(&self, ped_: u32,
submarine_: u32,
x_: f32,
y_: f32,
z_: f32,
autopilot_: bool) -> ResultOf_task_submarine_goto_and_stop {
    unsafe {
        let mut ped_ = ped_;
let mut submarine_ = submarine_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut autopilot_ = autopilot_;
        let success = sdk::natives::task_submarine_goto_and_stop(
            ped_,
submarine_,
x_,
y_,
z_,
autopilot_,
        );
        
        
        ResultOf_task_submarine_goto_and_stop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_parachute_task_target(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_parachute_task_target {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_parachute_task_target(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_parachute_task_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_driveby_task_underneath_driving_task(&self, ped_: u32) -> ResultOf_clear_driveby_task_underneath_driving_task {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_driveby_task_underneath_driving_task(
            ped_,
        );
        
        
        ResultOf_clear_driveby_task_underneath_driving_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_temp_action(&self, driver_: u32,
vehicle_: u32,
action_: i32,
time_: i32) -> ResultOf_task_vehicle_temp_action {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut action_ = action_;
let mut time_ = time_;
        let success = sdk::natives::task_vehicle_temp_action(
            driver_,
vehicle_,
action_,
time_,
        );
        
        
        ResultOf_task_vehicle_temp_action {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running(&self, ped_: u32) -> ResultOf_is_ped_running {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_navmesh_route_distance_remaining(&self, ped_: u32,
distanceRemaining_: f32,
isPathReady_: bool) -> ResultOf_get_navmesh_route_distance_remaining {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut distanceRemaining_ = Default::default();
let mut isPathReady_ = Default::default();
        let success = sdk::natives::get_navmesh_route_distance_remaining(
            &mut native_return,
&mut distanceRemaining_,
&mut isPathReady_,
ped_,
        );
        let native_return = native_return;
let distanceRemaining_ = distanceRemaining_;
let isPathReady_ = isPathReady_;
        
        ResultOf_get_navmesh_route_distance_remaining {
            success,
            ret: native_return,
            distanceRemaining_,
isPathReady_
        }
    }
}

    fn native_task_guard_sphere_defensive_area(&self, ped_: u32,
defendPositionX_: f32,
defendPositionY_: f32,
defendPositionZ_: f32,
heading_: f32,
maxPatrolProximity_: f32,
time_: i32,
x_: f32,
y_: f32,
z_: f32,
defensiveAreaRadius_: f32) -> ResultOf_task_guard_sphere_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut defendPositionX_ = defendPositionX_;
let mut defendPositionY_ = defendPositionY_;
let mut defendPositionZ_ = defendPositionZ_;
let mut heading_ = heading_;
let mut maxPatrolProximity_ = maxPatrolProximity_;
let mut time_ = time_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut defensiveAreaRadius_ = defensiveAreaRadius_;
        let success = sdk::natives::task_guard_sphere_defensive_area(
            ped_,
defendPositionX_,
defendPositionY_,
defendPositionZ_,
heading_,
maxPatrolProximity_,
time_,
x_,
y_,
z_,
defensiveAreaRadius_,
        );
        
        
        ResultOf_task_guard_sphere_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_waypoint_recording_loaded(&self, name_: Option<String>) -> ResultOf_get_is_waypoint_recording_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_is_waypoint_recording_loaded(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_is_waypoint_recording_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_vehicle_chase_behavior_flag(&self, ped_: u32,
flag_: i32,
set_: bool) -> ResultOf_set_task_vehicle_chase_behavior_flag {
    unsafe {
        let mut ped_ = ped_;
let mut flag_ = flag_;
let mut set_ = set_;
        let success = sdk::natives::set_task_vehicle_chase_behavior_flag(
            ped_,
flag_,
set_,
        );
        
        
        ResultOf_set_task_vehicle_chase_behavior_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mounted_weapon_target(&self, shootingPed_: u32,
targetPed_: u32,
targetVehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
taskMode_: i32,
ignoreTargetVehDeadCheck_: bool) -> ResultOf_set_mounted_weapon_target {
    unsafe {
        let mut shootingPed_ = shootingPed_;
let mut targetPed_ = targetPed_;
let mut targetVehicle_ = targetVehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut taskMode_ = taskMode_;
let mut ignoreTargetVehDeadCheck_ = ignoreTargetVehDeadCheck_;
        let success = sdk::natives::set_mounted_weapon_target(
            shootingPed_,
targetPed_,
targetVehicle_,
x_,
y_,
z_,
taskMode_,
ignoreTargetVehDeadCheck_,
        );
        
        
        ResultOf_set_mounted_weapon_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_writhe(&self, ped_: u32,
target_: u32,
minFireLoops_: i32,
startState_: i32,
forceShootOnGround_: bool,
shootFromGroundTimer_: i32) -> ResultOf_task_writhe {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut minFireLoops_ = minFireLoops_;
let mut startState_ = startState_;
let mut forceShootOnGround_ = forceShootOnGround_;
let mut shootFromGroundTimer_ = shootFromGroundTimer_;
        let success = sdk::natives::task_writhe(
            ped_,
target_,
minFireLoops_,
startState_,
forceShootOnGround_,
shootFromGroundTimer_,
        );
        
        
        ResultOf_task_writhe {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_task_move_network_state_transition(&self, ped_: u32,
name_: Option<String>) -> ResultOf_request_task_move_network_state_transition {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::request_task_move_network_state_transition(
            &mut native_return,
ped_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_request_task_move_network_state_transition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_ped_slide_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
speed_: f32) -> ResultOf_task_ped_slide_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut speed_ = speed_;
        let success = sdk::natives::task_ped_slide_to_coord(
            ped_,
x_,
y_,
z_,
heading_,
speed_,
        );
        
        
        ResultOf_task_ped_slide_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_guard_assigned_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
maxPatrolProximity_: f32,
timer_: i32) -> ResultOf_task_guard_assigned_defensive_area {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut maxPatrolProximity_ = maxPatrolProximity_;
let mut timer_ = timer_;
        let success = sdk::natives::task_guard_assigned_defensive_area(
            ped_,
x_,
y_,
z_,
heading_,
maxPatrolProximity_,
timer_,
        );
        
        
        ResultOf_task_guard_assigned_defensive_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_parachute(&self, ped_: u32,
giveParachuteItem_: bool,
instant_: bool) -> ResultOf_task_parachute {
    unsafe {
        let mut ped_ = ped_;
let mut giveParachuteItem_ = giveParachuteItem_;
let mut instant_ = instant_;
        let success = sdk::natives::task_parachute(
            ped_,
giveParachuteItem_,
instant_,
        );
        
        
        ResultOf_task_parachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_leave_vehicle(&self, ped_: u32,
vehicle_: u32,
flags_: i32) -> ResultOf_task_leave_vehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut flags_ = flags_;
        let success = sdk::natives::task_leave_vehicle(
            ped_,
vehicle_,
flags_,
        );
        
        
        ResultOf_task_leave_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_to_cover_point(&self, ped_: u32,
coverpoint_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
allowPeekingAndFiring_: bool) -> ResultOf_task_seek_cover_to_cover_point {
    unsafe {
        let mut ped_ = ped_;
let mut coverpoint_ = coverpoint_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut allowPeekingAndFiring_ = allowPeekingAndFiring_;
        let success = sdk::natives::task_seek_cover_to_cover_point(
            ped_,
coverpoint_,
x_,
y_,
z_,
time_,
allowPeekingAndFiring_,
        );
        
        
        ResultOf_task_seek_cover_to_cover_point {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_running(&self, ped_: u32) -> ResultOf_is_move_blend_ratio_running {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_running(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_move_blend_ratio_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_assisted_movement_set_route_properties(&self, route_: Option<String>,
props_: i32) -> ResultOf_assisted_movement_set_route_properties {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
let mut props_ = props_;
        let success = sdk::natives::assisted_movement_set_route_properties(
            route_.as_ref().unwrap(),
props_,
        );
        
        
        ResultOf_assisted_movement_set_route_properties {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_advanced_by_name(&self, ped_: u32,
network_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
rotOrder_: i32,
blendDuration_: f32,
allowOverrideCloneUpdate_: bool,
animDict_: Option<String>,
flags_: i32) -> ResultOf_task_move_network_advanced_by_name {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut rotOrder_ = rotOrder_;
let mut blendDuration_ = blendDuration_;
let mut allowOverrideCloneUpdate_ = allowOverrideCloneUpdate_;
let mut animDict_ = sdk_helpers::create_c_string_ptr(animDict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_advanced_by_name(
            ped_,
network_.as_ref().unwrap(),
x_,
y_,
z_,
rotX_,
rotY_,
rotZ_,
rotOrder_,
blendDuration_,
allowOverrideCloneUpdate_,
animDict_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOf_task_move_network_advanced_by_name {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_signal_float(&self, ped_: u32,
signalName_: Option<String>,
value_: f32) -> ResultOf_set_task_move_network_signal_float {
    unsafe {
        let mut ped_ = ped_;
let mut signalName_ = sdk_helpers::create_c_string_ptr(signalName_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_float(
            ped_,
signalName_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOf_set_task_move_network_signal_float {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cover_point(&self, x_: f32,
y_: f32,
z_: f32,
direction_: f32,
usage_: i32,
height_: i32,
arc_: i32,
isPriority_: bool) -> ResultOf_add_cover_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut direction_ = direction_;
let mut usage_ = usage_;
let mut height_ = height_;
let mut arc_ = arc_;
let mut isPriority_ = isPriority_;
        let success = sdk::natives::add_cover_point(
            &mut native_return,
x_,
y_,
z_,
direction_,
usage_,
height_,
arc_,
isPriority_,
        );
        let native_return = native_return;
        
        ResultOf_add_cover_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_go_straight_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
timeout_: i32,
targetHeading_: f32,
distanceToSlide_: f32) -> ResultOf_task_go_straight_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut timeout_ = timeout_;
let mut targetHeading_ = targetHeading_;
let mut distanceToSlide_ = distanceToSlide_;
        let success = sdk::natives::task_go_straight_to_coord(
            ped_,
x_,
y_,
z_,
speed_,
timeout_,
targetHeading_,
distanceToSlide_,
        );
        
        
        ResultOf_task_go_straight_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_driving_style(&self, ped_: u32,
drivingStyle_: i32) -> ResultOf_set_drive_task_driving_style {
    unsafe {
        let mut ped_ = ped_;
let mut drivingStyle_ = drivingStyle_;
        let success = sdk::natives::set_drive_task_driving_style(
            ped_,
drivingStyle_,
        );
        
        
        ResultOf_set_drive_task_driving_style {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_heli_mission(&self, pilot_: u32,
aircraft_: u32,
targetVehicle_: u32,
targetPed_: u32,
destinationX_: f32,
destinationY_: f32,
destinationZ_: f32,
missionFlag_: i32,
maxSpeed_: f32,
radius_: f32,
targetHeading_: f32,
maxHeight_: i32,
minHeight_: i32,
slowDownDistance_: f32,
behaviorFlags_: i32) -> ResultOf_task_heli_mission {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut targetVehicle_ = targetVehicle_;
let mut targetPed_ = targetPed_;
let mut destinationX_ = destinationX_;
let mut destinationY_ = destinationY_;
let mut destinationZ_ = destinationZ_;
let mut missionFlag_ = missionFlag_;
let mut maxSpeed_ = maxSpeed_;
let mut radius_ = radius_;
let mut targetHeading_ = targetHeading_;
let mut maxHeight_ = maxHeight_;
let mut minHeight_ = minHeight_;
let mut slowDownDistance_ = slowDownDistance_;
let mut behaviorFlags_ = behaviorFlags_;
        let success = sdk::natives::task_heli_mission(
            pilot_,
aircraft_,
targetVehicle_,
targetPed_,
destinationX_,
destinationY_,
destinationZ_,
missionFlag_,
maxSpeed_,
radius_,
targetHeading_,
maxHeight_,
minHeight_,
slowDownDistance_,
behaviorFlags_,
        );
        
        
        ResultOf_task_heli_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_cover_blocking_areas(&self, ) -> ResultOf_remove_all_cover_blocking_areas {
    unsafe {
        
        let success = sdk::natives::remove_all_cover_blocking_areas(
            
        );
        
        
        ResultOf_remove_all_cover_blocking_areas {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_primary_vehicle_task(&self, vehicle_: u32) -> ResultOf_clear_primary_vehicle_task {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_primary_vehicle_task(
            vehicle_,
        );
        
        
        ResultOf_clear_primary_vehicle_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_resume(&self, vehicle_: u32) -> ResultOf_vehicle_waypoint_playback_resume {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_resume(
            vehicle_,
        );
        
        
        ResultOf_vehicle_waypoint_playback_resume {
            success,
            ret: (),
            
        }
    }
}

    fn native_control_mounted_weapon(&self, ped_: u32) -> ResultOf_control_mounted_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::control_mounted_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_control_mounted_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_scenario_groups_enabled(&self, ) -> ResultOf_reset_scenario_groups_enabled {
    unsafe {
        
        let success = sdk::natives::reset_scenario_groups_enabled(
            
        );
        
        
        ResultOf_reset_scenario_groups_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_phase(&self, entity_: u32,
phase_: f32,
priority_: i32,
secondary_: bool) -> ResultOf_set_anim_phase {
    unsafe {
        let mut entity_ = entity_;
let mut phase_ = phase_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_phase(
            entity_,
phase_,
priority_,
secondary_,
        );
        
        
        ResultOf_set_anim_phase {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_walking(&self, ped_: u32) -> ResultOf_is_ped_walking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_walking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_walking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_writhe(&self, ped_: u32) -> ResultOf_is_ped_in_writhe {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_writhe(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_in_writhe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_waypoint_playback_going_on_for_ped(&self, ped_: u32) -> ResultOf_is_waypoint_playback_going_on_for_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_waypoint_playback_going_on_for_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_waypoint_playback_going_on_for_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_wander_in_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
minimalLength_: f32,
timeBetweenWalks_: f32) -> ResultOf_task_wander_in_area {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut minimalLength_ = minimalLength_;
let mut timeBetweenWalks_ = timeBetweenWalks_;
        let success = sdk::natives::task_wander_in_area(
            ped_,
x_,
y_,
z_,
radius_,
minimalLength_,
timeBetweenWalks_,
        );
        
        
        ResultOf_task_wander_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_tasks(&self, ped_: u32) -> ResultOf_clear_ped_tasks {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_tasks(
            ped_,
        );
        
        
        ResultOf_clear_ped_tasks {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_to_coord(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
p6_: i32,
vehicleModel_: u32,
drivingMode_: i32,
stopRange_: f32,
straightLineDistance_: f32) -> ResultOf_task_vehicle_drive_to_coord {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut p6_ = p6_;
let mut vehicleModel_ = vehicleModel_;
let mut drivingMode_ = drivingMode_;
let mut stopRange_ = stopRange_;
let mut straightLineDistance_ = straightLineDistance_;
        let success = sdk::natives::task_vehicle_drive_to_coord(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
p6_,
vehicleModel_,
drivingMode_,
stopRange_,
straightLineDistance_,
        );
        
        
        ResultOf_task_vehicle_drive_to_coord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_can_drop_from_height(&self, ped_: u32,
Toggle_: bool) -> ResultOf_set_ped_path_can_drop_from_height {
    unsafe {
        let mut ped_ = ped_;
let mut Toggle_ = Toggle_;
        let success = sdk::natives::set_ped_path_can_drop_from_height(
            ped_,
Toggle_,
        );
        
        
        ResultOf_set_ped_path_can_drop_from_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_offset(&self, ped_: u32,
entity_: u32,
time_: i32,
seekRadius_: f32,
seekAngleDeg_: f32,
moveBlendRatio_: f32,
gotoEntityOffsetFlags_: i32) -> ResultOf_task_goto_entity_offset {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut time_ = time_;
let mut seekRadius_ = seekRadius_;
let mut seekAngleDeg_ = seekAngleDeg_;
let mut moveBlendRatio_ = moveBlendRatio_;
let mut gotoEntityOffsetFlags_ = gotoEntityOffsetFlags_;
        let success = sdk::natives::task_goto_entity_offset(
            ped_,
entity_,
time_,
seekRadius_,
seekAngleDeg_,
moveBlendRatio_,
gotoEntityOffsetFlags_,
        );
        
        
        ResultOf_task_goto_entity_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_aim_at_ped(&self, ped_: u32,
target_: u32) -> ResultOf_task_vehicle_aim_at_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::task_vehicle_aim_at_ped(
            ped_,
target_,
        );
        
        
        ResultOf_task_vehicle_aim_at_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_strafing(&self, ped_: u32) -> ResultOf_is_ped_strafing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_strafing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_strafing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_task_sweep_aim_entity(&self, ped_: u32,
entity_: u32) -> ResultOf_update_task_sweep_aim_entity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
        let success = sdk::natives::update_task_sweep_aim_entity(
            ped_,
entity_,
        );
        
        
        ResultOf_update_task_sweep_aim_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_driveby_task_target(&self, shootingPed_: u32,
targetPed_: u32,
targetVehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_driveby_task_target {
    unsafe {
        let mut shootingPed_ = shootingPed_;
let mut targetPed_ = targetPed_;
let mut targetVehicle_ = targetVehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_driveby_task_target(
            shootingPed_,
targetPed_,
targetVehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_driveby_task_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stay_in_cover(&self, ped_: u32) -> ResultOf_task_stay_in_cover {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_stay_in_cover(
            ped_,
        );
        
        
        ResultOf_task_stay_in_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_waypoint_distance(&self, p0_: i32) -> ResultOf_get_ped_waypoint_distance {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_ped_waypoint_distance(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_waypoint_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_playback_start_shooting_at_ped(&self, ped_: u32,
ped2_: u32,
p2_: bool,
p3_: bool) -> ResultOf_waypoint_playback_start_shooting_at_ped {
    unsafe {
        let mut ped_ = ped_;
let mut ped2_ = ped2_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::waypoint_playback_start_shooting_at_ped(
            ped_,
ped2_,
p2_,
p3_,
        );
        
        
        ResultOf_waypoint_playback_start_shooting_at_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_pause(&self, ped_: u32,
ms_: i32) -> ResultOf_task_pause {
    unsafe {
        let mut ped_ = ped_;
let mut ms_ = ms_;
        let success = sdk::natives::task_pause(
            ped_,
ms_,
        );
        
        
        ResultOf_task_pause {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_sequence_task(&self, taskSequenceId_: i32) -> ResultOf_open_sequence_task {
    unsafe {
        let mut taskSequenceId_ = Default::default();
        let success = sdk::natives::open_sequence_task(
            &mut taskSequenceId_,
        );
        let taskSequenceId_ = taskSequenceId_;
        
        ResultOf_open_sequence_task {
            success,
            ret: (),
            taskSequenceId_
        }
    }
}

    fn native_task_play_anim(&self, ped_: u32,
animDictionary_: Option<String>,
animationName_: Option<String>,
blendInSpeed_: f32,
blendOutSpeed_: f32,
duration_: i32,
flag_: i32,
playbackRate_: f32,
lockX_: bool,
lockY_: bool,
lockZ_: bool) -> ResultOf_task_play_anim {
    unsafe {
        let mut ped_ = ped_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animationName_ = sdk_helpers::create_c_string_ptr(animationName_);
let mut blendInSpeed_ = blendInSpeed_;
let mut blendOutSpeed_ = blendOutSpeed_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut playbackRate_ = playbackRate_;
let mut lockX_ = lockX_;
let mut lockY_ = lockY_;
let mut lockZ_ = lockZ_;
        let success = sdk::natives::task_play_anim(
            ped_,
animDictionary_.as_ref().unwrap(),
animationName_.as_ref().unwrap(),
blendInSpeed_,
blendOutSpeed_,
duration_,
flag_,
playbackRate_,
lockX_,
lockY_,
lockZ_,
        );
        
        
        ResultOf_task_play_anim {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_rappel_down_wall_using_clipset_override(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
minZ_: f32,
ropeHandle_: i32,
clipSet_: Option<String>,
p10_: i32) -> ResultOf_task_rappel_down_wall_using_clipset_override {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut minZ_ = minZ_;
let mut ropeHandle_ = ropeHandle_;
let mut clipSet_ = sdk_helpers::create_c_string_ptr(clipSet_);
let mut p10_ = p10_;
        let success = sdk::natives::task_rappel_down_wall_using_clipset_override(
            ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
minZ_,
ropeHandle_,
clipSet_.as_ref().unwrap(),
p10_,
        );
        
        
        ResultOf_task_rappel_down_wall_using_clipset_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_type_enabled(&self, scenarioType_: Option<String>,
toggle_: bool) -> ResultOf_set_scenario_type_enabled {
    unsafe {
        let mut scenarioType_ = sdk_helpers::create_c_string_ptr(scenarioType_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scenario_type_enabled(
            scenarioType_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOf_set_scenario_type_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_set_decision_maker(&self, ped_: u32,
decisionMakerId_: u32) -> ResultOf_task_set_decision_maker {
    unsafe {
        let mut ped_ = ped_;
let mut decisionMakerId_ = decisionMakerId_;
        let success = sdk::natives::task_set_decision_maker(
            ped_,
decisionMakerId_,
        );
        
        
        ResultOf_task_set_decision_maker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_waypoint_route_offset(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_ped_waypoint_route_offset {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_ped_waypoint_route_offset(
            &mut native_return,
ped_,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_waypoint_route_offset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_anim_playback(&self, entity_: u32,
priority_: i32,
secondary_: bool) -> ResultOf_stop_anim_playback {
    unsafe {
        let mut entity_ = entity_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::stop_anim_playback(
            entity_,
priority_,
secondary_,
        );
        
        
        ResultOf_stop_anim_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_synchronized_scene(&self, ped_: u32,
scene_: i32,
animDictionary_: Option<String>,
animationName_: Option<String>,
blendIn_: f32,
blendOut_: f32,
flags_: i32,
ragdollBlockingFlags_: i32,
moverBlendDelta_: f32,
ikFlags_: i32) -> ResultOf_task_synchronized_scene {
    unsafe {
        let mut ped_ = ped_;
let mut scene_ = scene_;
let mut animDictionary_ = sdk_helpers::create_c_string_ptr(animDictionary_);
let mut animationName_ = sdk_helpers::create_c_string_ptr(animationName_);
let mut blendIn_ = blendIn_;
let mut blendOut_ = blendOut_;
let mut flags_ = flags_;
let mut ragdollBlockingFlags_ = ragdollBlockingFlags_;
let mut moverBlendDelta_ = moverBlendDelta_;
let mut ikFlags_ = ikFlags_;
        let success = sdk::natives::task_synchronized_scene(
            ped_,
scene_,
animDictionary_.as_ref().unwrap(),
animationName_.as_ref().unwrap(),
blendIn_,
blendOut_,
flags_,
ragdollBlockingFlags_,
moverBlendDelta_,
ikFlags_,
        );
        
        
        ResultOf_task_synchronized_scene {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission_coors_target(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
mission_: i32,
cruiseSpeed_: f32,
drivingStyle_: i32,
targetReached_: f32,
straightLineDistance_: f32,
DriveAgainstTraffic_: bool) -> ResultOf_task_vehicle_mission_coors_target {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut mission_ = mission_;
let mut cruiseSpeed_ = cruiseSpeed_;
let mut drivingStyle_ = drivingStyle_;
let mut targetReached_ = targetReached_;
let mut straightLineDistance_ = straightLineDistance_;
let mut DriveAgainstTraffic_ = DriveAgainstTraffic_;
        let success = sdk::natives::task_vehicle_mission_coors_target(
            ped_,
vehicle_,
x_,
y_,
z_,
mission_,
cruiseSpeed_,
drivingStyle_,
targetReached_,
straightLineDistance_,
DriveAgainstTraffic_,
        );
        
        
        ResultOf_task_vehicle_mission_coors_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_walking(&self, ped_: u32) -> ResultOf_is_move_blend_ratio_walking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_walking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_move_blend_ratio_walking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_combat_ped(&self, ped_: u32,
targetPed_: u32,
combatFlags_: i32,
threatResponseFlags_: i32) -> ResultOf_task_combat_ped {
    unsafe {
        let mut ped_ = ped_;
let mut targetPed_ = targetPed_;
let mut combatFlags_ = combatFlags_;
let mut threatResponseFlags_ = threatResponseFlags_;
        let success = sdk::natives::task_combat_ped(
            ped_,
targetPed_,
combatFlags_,
threatResponseFlags_,
        );
        
        
        ResultOf_task_combat_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_desired_move_state(&self, nextMoveState_: f32) -> ResultOf_set_next_desired_move_state {
    unsafe {
        let mut nextMoveState_ = nextMoveState_;
        let success = sdk::natives::set_next_desired_move_state(
            nextMoveState_,
        );
        
        
        ResultOf_set_next_desired_move_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_hands_up(&self, ped_: u32,
duration_: i32,
facingPed_: u32,
timeToFacePed_: i32,
flags_: i32) -> ResultOf_task_hands_up {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
let mut facingPed_ = facingPed_;
let mut timeToFacePed_ = timeToFacePed_;
let mut flags_ = flags_;
        let success = sdk::natives::task_hands_up(
            ped_,
duration_,
facingPed_,
timeToFacePed_,
flags_,
        );
        
        
        ResultOf_task_hands_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_may_enter_water(&self, ped_: u32,
mayEnterWater_: bool) -> ResultOf_set_ped_path_may_enter_water {
    unsafe {
        let mut ped_ = ped_;
let mut mayEnterWater_ = mayEnterWater_;
        let success = sdk::natives::set_ped_path_may_enter_water(
            ped_,
mayEnterWater_,
        );
        
        
        ResultOf_set_ped_path_may_enter_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_arrest_ped(&self, ped_: u32,
target_: u32) -> ResultOf_task_arrest_ped {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::task_arrest_ped(
            ped_,
target_,
        );
        
        
        ResultOf_task_arrest_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_waypoint_playback_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOf_is_waypoint_playback_going_on_for_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_waypoint_playback_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_waypoint_playback_going_on_for_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_plane_goto_precise_vtol(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
flightHeight_: i32,
minHeightAboveTerrain_: i32,
useDesiredOrientation_: bool,
desiredOrientation_: f32,
autopilot_: bool) -> ResultOf_task_plane_goto_precise_vtol {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flightHeight_ = flightHeight_;
let mut minHeightAboveTerrain_ = minHeightAboveTerrain_;
let mut useDesiredOrientation_ = useDesiredOrientation_;
let mut desiredOrientation_ = desiredOrientation_;
let mut autopilot_ = autopilot_;
        let success = sdk::natives::task_plane_goto_precise_vtol(
            ped_,
vehicle_,
x_,
y_,
z_,
flightHeight_,
minHeightAboveTerrain_,
useDesiredOrientation_,
desiredOrientation_,
autopilot_,
        );
        
        
        ResultOf_task_plane_goto_precise_vtol {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_group_exist(&self, scenarioGroup_: Option<String>) -> ResultOf_does_scenario_group_exist {
    unsafe {
        let mut native_return = Default::default();
let mut scenarioGroup_ = sdk_helpers::create_c_string_ptr(scenarioGroup_);
        let success = sdk::natives::does_scenario_group_exist(
            &mut native_return,
scenarioGroup_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_scenario_group_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_start_scenario_at_position(&self, ped_: u32,
scenarioName_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
duration_: i32,
sittingScenario_: bool,
teleport_: bool) -> ResultOf_task_start_scenario_at_position {
    unsafe {
        let mut ped_ = ped_;
let mut scenarioName_ = sdk_helpers::create_c_string_ptr(scenarioName_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut duration_ = duration_;
let mut sittingScenario_ = sittingScenario_;
let mut teleport_ = teleport_;
        let success = sdk::natives::task_start_scenario_at_position(
            ped_,
scenarioName_.as_ref().unwrap(),
x_,
y_,
z_,
heading_,
duration_,
sittingScenario_,
teleport_,
        );
        
        
        ResultOf_task_start_scenario_at_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cover_blocking_areas_at_position(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_remove_cover_blocking_areas_at_position {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::remove_cover_blocking_areas_at_position(
            x_,
y_,
z_,
        );
        
        
        ResultOf_remove_cover_blocking_areas_at_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_follow(&self, driver_: u32,
vehicle_: u32,
targetEntity_: u32,
speed_: f32,
drivingStyle_: i32,
minDistance_: i32) -> ResultOf_task_vehicle_follow {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut targetEntity_ = targetEntity_;
let mut speed_ = speed_;
let mut drivingStyle_ = drivingStyle_;
let mut minDistance_ = minDistance_;
        let success = sdk::natives::task_vehicle_follow(
            driver_,
vehicle_,
targetEntity_,
speed_,
drivingStyle_,
minDistance_,
        );
        
        
        ResultOf_task_vehicle_follow {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_waypoint_recording(&self, name_: Option<String>) -> ResultOf_remove_waypoint_recording {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::remove_waypoint_recording(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_waypoint_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_high_detail_model(&self, vehicle_: u32) -> ResultOf_remove_vehicle_high_detail_model {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_high_detail_model(
            vehicle_,
        );
        
        
        ResultOf_remove_vehicle_high_detail_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_mod_gen9_exclusive(&self, vehicle_: u32,
modType_: i32,
modIndex_: i32) -> ResultOf_is_vehicle_mod_gen9_exclusive {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modIndex_ = modIndex_;
        let success = sdk::natives::is_vehicle_mod_gen9_exclusive(
            &mut native_return,
vehicle_,
modType_,
modIndex_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_mod_gen9_exclusive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_estimated_max_speed(&self, vehicleClass_: i32) -> ResultOf_get_vehicle_class_estimated_max_speed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleClass_ = vehicleClass_;
        let success = sdk::natives::get_vehicle_class_estimated_max_speed(
            &mut native_return,
vehicleClass_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_estimated_max_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tyre_wear_rate(&self, vehicle_: u32,
wheelIndex_: i32,
multiplier_: f32) -> ResultOf_set_tyre_wear_rate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_wear_rate(
            vehicle_,
wheelIndex_,
multiplier_,
        );
        
        
        ResultOf_set_tyre_wear_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_arrive_distance_override_for_vehicle_persuit_attack(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_arrive_distance_override_for_vehicle_persuit_attack {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_arrive_distance_override_for_vehicle_persuit_attack(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_arrive_distance_override_for_vehicle_persuit_attack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_been_driven_flag(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_has_been_driven_flag {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_been_driven_flag(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_has_been_driven_flag {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_override_extenable_side_ratio(&self, p0_: i32,
p1_: i32) -> ResultOf_vehicle_set_override_extenable_side_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_override_extenable_side_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_vehicle_set_override_extenable_side_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_last_shunt_vehicle(&self, vehicle_: u32) -> ResultOf_get_last_shunt_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_last_shunt_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_last_shunt_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_vehicle_disabled_by_emp(&self, vehicle_: u32) -> ResultOf_get_is_vehicle_disabled_by_emp {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_disabled_by_emp(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_vehicle_disabled_by_emp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_vehicle_model_in_memory(&self, p0_: bool,
modelHash_: u32,
successIndicator_: i32) -> ResultOf_get_random_vehicle_model_in_memory {
    unsafe {
        let mut p0_ = p0_;
let mut modelHash_ = Default::default();
let mut successIndicator_ = Default::default();
        let success = sdk::natives::get_random_vehicle_model_in_memory(
            &mut modelHash_,
&mut successIndicator_,
p0_,
        );
        let modelHash_ = modelHash_;
let successIndicator_ = successIndicator_;
        
        ResultOf_get_random_vehicle_model_in_memory {
            success,
            ret: (),
            modelHash_,
successIndicator_
        }
    }
}

    fn native_set_vehicle_turret_target(&self, vehicle_: u32,
p1_: bool,
x_: f32,
y_: f32,
z_: f32,
p5_: bool) -> ResultOf_set_vehicle_turret_target {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
        let success = sdk::natives::set_vehicle_turret_target(
            vehicle_,
p1_,
x_,
y_,
z_,
p5_,
        );
        
        
        ResultOf_set_vehicle_turret_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_should_lerp_from_ai_to_full_recording(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_should_lerp_from_ai_to_full_recording {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_should_lerp_from_ai_to_full_recording(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_should_lerp_from_ai_to_full_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_inactive_during_playback(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_inactive_during_playback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_inactive_during_playback(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_inactive_during_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_eject_passengers_if_locked(&self, p0_: i32,
p1_: i32) -> ResultOf_set_vehicle_can_eject_passengers_if_locked {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_can_eject_passengers_if_locked(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_can_eject_passengers_if_locked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_drops_money_when_blown_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_drops_money_when_blown_up {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_drops_money_when_blown_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_drops_money_when_blown_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_preload_mods_finished(&self, vehicle_: u32) -> ResultOf_has_preload_mods_finished {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::has_preload_mods_finished(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_has_preload_mods_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_racing(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_is_racing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_is_racing(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_is_racing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_train_carriage(&self, train_: u32,
trailerNumber_: i32) -> ResultOf_get_train_carriage {
    unsafe {
        let mut native_return = Default::default();
let mut train_ = train_;
let mut trailerNumber_ = trailerNumber_;
        let success = sdk::natives::get_train_carriage(
            &mut native_return,
train_,
trailerNumber_,
        );
        let native_return = native_return;
        
        ResultOf_get_train_carriage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_submarine_number_of_air_leaks(&self, submarine_: u32) -> ResultOf_get_submarine_number_of_air_leaks {
    unsafe {
        let mut native_return = Default::default();
let mut submarine_ = submarine_;
        let success = sdk::natives::get_submarine_number_of_air_leaks(
            &mut native_return,
submarine_,
        );
        let native_return = native_return;
        
        ResultOf_get_submarine_number_of_air_leaks {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_rudder_broken(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_rudder_broken {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_rudder_broken(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_rudder_broken {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_combat_offset(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_heli_combat_offset {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_heli_combat_offset(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_heli_combat_offset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_generator_area_of_interest(&self, ) -> ResultOf_clear_vehicle_generator_area_of_interest {
    unsafe {
        
        let success = sdk::natives::clear_vehicle_generator_area_of_interest(
            
        );
        
        
        ResultOf_clear_vehicle_generator_area_of_interest {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_disable_avoidance(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_boat_disable_avoidance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_boat_disable_avoidance(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_boat_disable_avoidance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_influences_wanted_level(&self, p0_: i32,
p1_: bool) -> ResultOf_set_vehicle_influences_wanted_level {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_influences_wanted_level(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_influences_wanted_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hydraulic_suspension_raise_factor(&self, vehicle_: u32,
wheelId_: i32) -> ResultOf_get_hydraulic_suspension_raise_factor {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheelId_ = wheelId_;
        let success = sdk::natives::get_hydraulic_suspension_raise_factor(
            &mut native_return,
vehicle_,
wheelId_,
        );
        let native_return = native_return;
        
        ResultOf_get_hydraulic_suspension_raise_factor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_plane_section_damage_scale(&self, vehicle_: u32,
p1_: i32,
p2_: i32) -> ResultOf_set_plane_section_damage_scale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_plane_section_damage_scale(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_set_plane_section_damage_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_start_parachuting(&self, vehicle_: u32,
active_: bool) -> ResultOf_vehicle_start_parachuting {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut active_ = active_;
        let success = sdk::natives::vehicle_start_parachuting(
            vehicle_,
active_,
        );
        
        
        ResultOf_vehicle_start_parachuting {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_deform_wheels(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_deform_wheels {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_deform_wheels(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_deform_wheels {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_rope_type(&self, p0_: i32,
p1_: i32) -> ResultOf_set_cargobob_pickup_rope_type {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_rope_type(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_rope_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_cargobob(&self, vehicle_: u32,
cargobob_: u32) -> ResultOf_detach_vehicle_from_cargobob {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
        let success = sdk::natives::detach_vehicle_from_cargobob(
            vehicle_,
cargobob_,
        );
        
        
        ResultOf_detach_vehicle_from_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_total_duration_of_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOf_get_total_duration_of_vehicle_recording {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_total_duration_of_vehicle_recording(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_total_duration_of_vehicle_recording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_window_tint(&self, vehicle_: u32) -> ResultOf_get_vehicle_window_tint {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_window_tint(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_window_tint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_boat_boom_to_animate(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_allow_boat_boom_to_animate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_boat_boom_to_animate(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_allow_boat_boom_to_animate {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_all_garage_activity(&self, ) -> ResultOf_stop_all_garage_activity {
    unsafe {
        
        let success = sdk::natives::stop_all_garage_activity(
            
        );
        
        
        ResultOf_stop_all_garage_activity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_model_is_suppressed(&self, model_: u32,
suppressed_: bool) -> ResultOf_set_vehicle_model_is_suppressed {
    unsafe {
        let mut model_ = model_;
let mut suppressed_ = suppressed_;
        let success = sdk::natives::set_vehicle_model_is_suppressed(
            model_,
suppressed_,
        );
        
        
        ResultOf_set_vehicle_model_is_suppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_total_duration_of_vehicle_recording_id(&self, id_: i32) -> ResultOf_get_total_duration_of_vehicle_recording_id {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::get_total_duration_of_vehicle_recording_id(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOf_get_total_duration_of_vehicle_recording_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_road_node_speed_zone(&self, speedzone_: i32) -> ResultOf_remove_road_node_speed_zone {
    unsafe {
        let mut native_return = Default::default();
let mut speedzone_ = speedzone_;
        let success = sdk::natives::remove_road_node_speed_zone(
            &mut native_return,
speedzone_,
        );
        let native_return = native_return;
        
        ResultOf_remove_road_node_speed_zone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_handling_override(&self, vehicle_: u32,
hash_: u32) -> ResultOf_set_vehicle_handling_override {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut hash_ = hash_;
        let success = sdk::natives::set_vehicle_handling_override(
            vehicle_,
hash_,
        );
        
        
        ResultOf_set_vehicle_handling_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_short_slowdown_for_landing(&self, vehicle_: u32) -> ResultOf_set_short_slowdown_for_landing {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_short_slowdown_for_landing(
            vehicle_,
        );
        
        
        ResultOf_set_short_slowdown_for_landing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dont_process_vehicle_glass(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_dont_process_vehicle_glass {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dont_process_vehicle_glass(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_dont_process_vehicle_glass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_turret_speed_this_frame(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_vehicle_turret_speed_this_frame {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_turret_speed_this_frame(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_vehicle_turret_speed_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_fixed(&self, vehicle_: u32) -> ResultOf_set_vehicle_fixed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_fixed(
            vehicle_,
        );
        
        
        ResultOf_set_vehicle_fixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_all_vehicle_windows_intact(&self, vehicle_: u32) -> ResultOf_are_all_vehicle_windows_intact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_all_vehicle_windows_intact(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_are_all_vehicle_windows_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_use_hydraulics(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_can_use_hydraulics {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_use_hydraulics(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_can_use_hydraulics {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_extra_exist(&self, vehicle_: u32,
extraId_: i32) -> ResultOf_does_extra_exist {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extraId_ = extraId_;
        let success = sdk::natives::does_extra_exist(
            &mut native_return,
vehicle_,
extraId_,
        );
        let native_return = native_return;
        
        ResultOf_does_extra_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_in_burnout(&self, vehicle_: u32) -> ResultOf_is_vehicle_in_burnout {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_burnout(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_in_burnout {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheelie_enabled(&self, vehicle_: u32,
enabled_: bool) -> ResultOf_set_wheelie_enabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_wheelie_enabled(
            vehicle_,
enabled_,
        );
        
        
        ResultOf_set_wheelie_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vehicle_explosions_damage(&self, toggle_: bool) -> ResultOf_set_disable_vehicle_explosions_damage {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_explosions_damage(
            toggle_,
        );
        
        
        ResultOf_set_disable_vehicle_explosions_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_attached_to_tow_truck(&self, towTruck_: u32,
vehicle_: u32) -> ResultOf_is_vehicle_attached_to_tow_truck {
    unsafe {
        let mut native_return = Default::default();
let mut towTruck_ = towTruck_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_attached_to_tow_truck(
            &mut native_return,
towTruck_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_attached_to_tow_truck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_searchlight(&self, heli_: u32,
toggle_: bool,
canBeUsedByAI_: bool) -> ResultOf_set_vehicle_searchlight {
    unsafe {
        let mut heli_ = heli_;
let mut toggle_ = toggle_;
let mut canBeUsedByAI_ = canBeUsedByAI_;
        let success = sdk::natives::set_vehicle_searchlight(
            heli_,
toggle_,
canBeUsedByAI_,
        );
        
        
        ResultOf_set_vehicle_searchlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_train_cruise_speed(&self, train_: u32,
speed_: f32) -> ResultOf_set_train_cruise_speed {
    unsafe {
        let mut train_ = train_;
let mut speed_ = speed_;
        let success = sdk::natives::set_train_cruise_speed(
            train_,
speed_,
        );
        
        
        ResultOf_set_train_cruise_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_on_to_trailer(&self, vehicle_: u32,
trailer_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32,
coordsX_: f32,
coordsY_: f32,
coordsZ_: f32,
rotationX_: f32,
rotationY_: f32,
rotationZ_: f32,
disableCollisions_: f32) -> ResultOf_attach_vehicle_on_to_trailer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut trailer_ = trailer_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
let mut coordsX_ = coordsX_;
let mut coordsY_ = coordsY_;
let mut coordsZ_ = coordsZ_;
let mut rotationX_ = rotationX_;
let mut rotationY_ = rotationY_;
let mut rotationZ_ = rotationZ_;
let mut disableCollisions_ = disableCollisions_;
        let success = sdk::natives::attach_vehicle_on_to_trailer(
            vehicle_,
trailer_,
offsetX_,
offsetY_,
offsetZ_,
coordsX_,
coordsY_,
coordsZ_,
rotationX_,
rotationY_,
rotationZ_,
disableCollisions_,
        );
        
        
        ResultOf_attach_vehicle_on_to_trailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cargobob_have_pick_up_rope(&self, cargobob_: u32) -> ResultOf_does_cargobob_have_pick_up_rope {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::does_cargobob_have_pick_up_rope(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOf_does_cargobob_have_pick_up_rope {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_custom_path_node_streaming_radius(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_vehicle_custom_path_node_streaming_radius {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_custom_path_node_streaming_radius(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_custom_path_node_streaming_radius {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_friction_override(&self, vehicle_: u32,
friction_: f32) -> ResultOf_set_vehicle_friction_override {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut friction_ = friction_;
        let success = sdk::natives::set_vehicle_friction_override(
            vehicle_,
friction_,
        );
        
        
        ResultOf_set_vehicle_friction_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_leak_petrol(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_leak_petrol {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_leak_petrol(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_leak_petrol {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_convertible_roof_latch_state(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_convertible_roof_latch_state {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_convertible_roof_latch_state(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_convertible_roof_latch_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_unbreakable_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_has_unbreakable_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_unbreakable_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_has_unbreakable_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_open_rear_doors_on_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_open_rear_doors_on_explosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_open_rear_doors_on_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_open_rear_doors_on_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_enable_ramp_car_side_impulse(&self, p0_: i32,
p1_: i32) -> ResultOf_vehicle_set_enable_ramp_car_side_impulse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_enable_ramp_car_side_impulse(
            p0_,
p1_,
        );
        
        
        ResultOf_vehicle_set_enable_ramp_car_side_impulse {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_asset_loaded(&self, vehicleAsset_: i32) -> ResultOf_has_vehicle_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleAsset_ = vehicleAsset_;
        let success = sdk::natives::has_vehicle_asset_loaded(
            &mut native_return,
vehicleAsset_,
        );
        let native_return = native_return;
        
        ResultOf_has_vehicle_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_playback_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOf_is_playback_going_on_for_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_playback_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_playback_going_on_for_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_trailer_vehicle(&self, vehicle_: u32,
trailer_: u32) -> ResultOf_get_vehicle_trailer_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut trailer_ = Default::default();
        let success = sdk::natives::get_vehicle_trailer_vehicle(
            &mut native_return,
&mut trailer_,
vehicle_,
        );
        let native_return = native_return;
let trailer_ = trailer_;
        
        ResultOf_get_vehicle_trailer_vehicle {
            success,
            ret: native_return,
            trailer_
        }
    }
}

    fn native_set_vehicle_stays_frozen_when_cleaned_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_stays_frozen_when_cleaned_up {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_stays_frozen_when_cleaned_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_stays_frozen_when_cleaned_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_alternate_handling(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_use_alternate_handling {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_alternate_handling(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_use_alternate_handling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_wheels_retracted(&self, vehicle_: u32) -> ResultOf_get_is_wheels_retracted {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_wheels_retracted(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_wheels_retracted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_allow_homing_missle_lockon_synced(&self, vehicle_: u32,
canBeLockedOn_: bool,
p2_: bool) -> ResultOf_set_vehicle_allow_homing_missle_lockon_synced {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut canBeLockedOn_ = canBeLockedOn_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_allow_homing_missle_lockon_synced(
            vehicle_,
canBeLockedOn_,
p2_,
        );
        
        
        ResultOf_set_vehicle_allow_homing_missle_lockon_synced {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_high_detail(&self, vehicle_: u32) -> ResultOf_is_vehicle_high_detail {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_high_detail(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_high_detail {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_mod_kit(&self, vehicle_: u32,
modKit_: i32) -> ResultOf_set_vehicle_mod_kit {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modKit_ = modKit_;
        let success = sdk::natives::set_vehicle_mod_kit(
            vehicle_,
modKit_,
        );
        
        
        ResultOf_set_vehicle_mod_kit {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_playback_recorded_vehicle_update(&self, vehicle_: u32,
p1_: bool) -> ResultOf_force_playback_recorded_vehicle_update {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::force_playback_recorded_vehicle_update(
            vehicle_,
p1_,
        );
        
        
        ResultOf_force_playback_recorded_vehicle_update {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_exclude_from_pickup_entity(&self, p0_: i32,
p1_: i32) -> ResultOf_set_cargobob_exclude_from_pickup_entity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_exclude_from_pickup_entity(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cargobob_exclude_from_pickup_entity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_act_as_if_high_speed_for_frag_smashing(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_act_as_if_high_speed_for_frag_smashing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_act_as_if_high_speed_for_frag_smashing(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_act_as_if_high_speed_for_frag_smashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_headlight_shadows(&self, vehicle_: u32,
p1_: i32) -> ResultOf_set_vehicle_headlight_shadows {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_headlight_shadows(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_headlight_shadows {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra_colours(&self, vehicle_: u32,
pearlescentColor_: i32,
wheelColor_: i32) -> ResultOf_set_vehicle_extra_colours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut pearlescentColor_ = pearlescentColor_;
let mut wheelColor_ = wheelColor_;
        let success = sdk::natives::set_vehicle_extra_colours(
            vehicle_,
pearlescentColor_,
wheelColor_,
        );
        
        
        ResultOf_set_vehicle_extra_colours {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_all_teams(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_doors_locked_for_all_teams {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_all_teams(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_doors_locked_for_all_teams {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rotation_of_vehicle_recording_at_time(&self, recording_: i32,
time_: f32,
script_: Option<String>) -> ResultOf_get_rotation_of_vehicle_recording_at_time {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut recording_ = recording_;
let mut time_ = time_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_rotation_of_vehicle_recording_at_time(
            native_return.pin_mut(),
recording_,
time_,
script_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_rotation_of_vehicle_recording_at_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_engine_missfire(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_engine_missfire {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_engine_missfire(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_engine_missfire {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_active_for_ped_navigation(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_active_for_ped_navigation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_active_for_ped_navigation(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_active_for_ped_navigation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_weapon_blade_forces(&self, toggle_: bool) -> ResultOf_set_disable_weapon_blade_forces {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_weapon_blade_forces(
            toggle_,
        );
        
        
        ResultOf_set_disable_weapon_blade_forces {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_recording_id(&self, recording_: i32,
script_: Option<String>) -> ResultOf_get_vehicle_recording_id {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_vehicle_recording_id(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_recording_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_using_vehicle_door(&self, vehicle_: u32,
doord_: i32) -> ResultOf_get_ped_using_vehicle_door {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doord_ = doord_;
        let success = sdk::natives::get_ped_using_vehicle_door(
            &mut native_return,
vehicle_,
doord_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_using_vehicle_door {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_train_track_spawn_frequency(&self, trackIndex_: i32,
frequency_: i32) -> ResultOf_set_train_track_spawn_frequency {
    unsafe {
        let mut trackIndex_ = trackIndex_;
let mut frequency_ = frequency_;
        let success = sdk::natives::set_train_track_spawn_frequency(
            trackIndex_,
frequency_,
        );
        
        
        ResultOf_set_train_track_spawn_frequency {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_wheels(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_reset_vehicle_wheels {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::reset_vehicle_wheels(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_reset_vehicle_wheels {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_script_vehicle_generator(&self, vehicleGenerator_: i32) -> ResultOf_delete_script_vehicle_generator {
    unsafe {
        let mut vehicleGenerator_ = vehicleGenerator_;
        let success = sdk::natives::delete_script_vehicle_generator(
            vehicleGenerator_,
        );
        
        
        ResultOf_delete_script_vehicle_generator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_reduce_grip(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_reduce_grip {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_reduce_grip(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_reduce_grip {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_seat_free(&self, vehicle_: u32,
seatIndex_: i32,
isTaskRunning_: bool) -> ResultOf_is_vehicle_seat_free {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
let mut isTaskRunning_ = isTaskRunning_;
        let success = sdk::natives::is_vehicle_seat_free(
            &mut native_return,
vehicle_,
seatIndex_,
isTaskRunning_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_seat_free {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_train_to_be_removed_by_population(&self, p0_: i32) -> ResultOf_allow_train_to_be_removed_by_population {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::allow_train_to_be_removed_by_population(
            p0_,
        );
        
        
        ResultOf_allow_train_to_be_removed_by_population {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_respects_locks_when_has_driver(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_respects_locks_when_has_driver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_respects_locks_when_has_driver(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_respects_locks_when_has_driver {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_plane_aileron(&self, vehicle_: u32,
p1_: bool,
p2_: bool) -> ResultOf_disable_plane_aileron {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::disable_plane_aileron(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_disable_plane_aileron {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOf_set_vehicle_density_multiplier_this_frame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOf_set_vehicle_density_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_engine_on(&self, vehicle_: u32,
value_: bool,
instantly_: bool,
disableAutoStart_: bool) -> ResultOf_set_vehicle_engine_on {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
let mut instantly_ = instantly_;
let mut disableAutoStart_ = disableAutoStart_;
        let success = sdk::natives::set_vehicle_engine_on(
            vehicle_,
value_,
instantly_,
disableAutoStart_,
        );
        
        
        ResultOf_set_vehicle_engine_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_of_passengers(&self, vehicle_: u32,
includeDriver_: bool,
includeDeadOccupants_: bool) -> ResultOf_get_vehicle_number_of_passengers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut includeDriver_ = includeDriver_;
let mut includeDeadOccupants_ = includeDeadOccupants_;
        let success = sdk::natives::get_vehicle_number_of_passengers(
            &mut native_return,
vehicle_,
includeDriver_,
includeDeadOccupants_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_number_of_passengers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_anchor_boat_here_ignore_players(&self, vehicle_: u32) -> ResultOf_can_anchor_boat_here_ignore_players {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_anchor_boat_here_ignore_players(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_can_anchor_boat_here_ignore_players {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_pretend_occupants(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_pretend_occupants {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_pretend_occupants(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_pretend_occupants {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_door_lock_status(&self, vehicle_: u32) -> ResultOf_get_vehicle_door_lock_status {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_door_lock_status(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_door_lock_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_vehicle_have_weapons(&self, vehicle_: u32) -> ResultOf_does_vehicle_have_weapons {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_weapons(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_have_weapons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bring_vehicle_to_halt(&self, vehicle_: u32,
distance_: f32,
duration_: i32,
p3_: bool) -> ResultOf_bring_vehicle_to_halt {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut distance_ = distance_;
let mut duration_ = duration_;
let mut p3_ = p3_;
        let success = sdk::natives::bring_vehicle_to_halt(
            vehicle_,
distance_,
duration_,
p3_,
        );
        
        
        ResultOf_bring_vehicle_to_halt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_far_draw_vehicles(&self, toggle_: bool) -> ResultOf_set_far_draw_vehicles {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_far_draw_vehicles(
            toggle_,
        );
        
        
        ResultOf_set_far_draw_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_anchor_boat_here(&self, vehicle_: u32) -> ResultOf_can_anchor_boat_here {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_anchor_boat_here(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_can_anchor_boat_here {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_bmx_extra_trick_forces(&self, p0_: i32) -> ResultOf_set_disable_bmx_extra_trick_forces {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_disable_bmx_extra_trick_forces(
            p0_,
        );
        
        
        ResultOf_set_disable_bmx_extra_trick_forces {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_explode_from_body_damage_on_collision(&self, vehicle_: u32,
value_: f32) -> ResultOf_set_disable_explode_from_body_damage_on_collision {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_disable_explode_from_body_damage_on_collision(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_disable_explode_from_body_damage_on_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_generates_engine_shocking_events(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_generates_engine_shocking_events {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_generates_engine_shocking_events(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_generates_engine_shocking_events {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_bumper_bouncing(&self, vehicle_: u32,
frontBumper_: bool) -> ResultOf_is_vehicle_bumper_bouncing {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut frontBumper_ = frontBumper_;
        let success = sdk::natives::is_vehicle_bumper_bouncing(
            &mut native_return,
vehicle_,
frontBumper_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_bumper_bouncing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_hydraulics_control(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_hydraulics_control {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_hydraulics_control(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_hydraulics_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_ramp_and_ramming_cars_take_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_vehicle_set_ramp_and_ramming_cars_take_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::vehicle_set_ramp_and_ramming_cars_take_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_vehicle_set_ramp_and_ramming_cars_take_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_layout_hash(&self, vehicle_: u32) -> ResultOf_get_vehicle_layout_hash {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_layout_hash(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_layout_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_ped_rappelling_from_heli(&self, vehicle_: u32) -> ResultOf_is_any_ped_rappelling_from_heli {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_any_ped_rappelling_from_heli(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_ped_rappelling_from_heli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class(&self, vehicle_: u32) -> ResultOf_get_vehicle_class {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_class(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stopped_at_traffic_lights(&self, vehicle_: u32) -> ResultOf_is_vehicle_stopped_at_traffic_lights {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stopped_at_traffic_lights(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_stopped_at_traffic_lights {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_increase_wheel_crush_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_increase_wheel_crush_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_increase_wheel_crush_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_increase_wheel_crush_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_to_tow_truck(&self, towTruck_: u32,
vehicle_: u32,
rear_: bool,
hookOffsetX_: f32,
hookOffsetY_: f32,
hookOffsetZ_: f32) -> ResultOf_attach_vehicle_to_tow_truck {
    unsafe {
        let mut towTruck_ = towTruck_;
let mut vehicle_ = vehicle_;
let mut rear_ = rear_;
let mut hookOffsetX_ = hookOffsetX_;
let mut hookOffsetY_ = hookOffsetY_;
let mut hookOffsetZ_ = hookOffsetZ_;
        let success = sdk::natives::attach_vehicle_to_tow_truck(
            towTruck_,
vehicle_,
rear_,
hookOffsetX_,
hookOffsetY_,
hookOffsetZ_,
        );
        
        
        ResultOf_attach_vehicle_to_tow_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_wheels_can_break(&self, vehicle_: u32,
enabled_: bool) -> ResultOf_set_vehicle_wheels_can_break {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_vehicle_wheels_can_break(
            vehicle_,
enabled_,
        );
        
        
        ResultOf_set_vehicle_wheels_can_break {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_playback_recorded_vehicle_using_ai(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
speed_: f32,
drivingStyle_: i32) -> ResultOf_start_playback_recorded_vehicle_using_ai {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut speed_ = speed_;
let mut drivingStyle_ = drivingStyle_;
        let success = sdk::natives::start_playback_recorded_vehicle_using_ai(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
speed_,
drivingStyle_,
        );
        
        
        ResultOf_start_playback_recorded_vehicle_using_ai {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_vehicle_mod(&self, vehicle_: u32,
modType_: i32,
toggle_: bool) -> ResultOf_toggle_vehicle_mod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_vehicle_mod(
            vehicle_,
modType_,
toggle_,
        );
        
        
        ResultOf_toggle_vehicle_mod {
            success,
            ret: (),
            
        }
    }
}

    fn native_transform_to_car(&self, vehicle_: u32,
noAnimation_: bool) -> ResultOf_transform_to_car {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut noAnimation_ = noAnimation_;
        let success = sdk::natives::transform_to_car(
            vehicle_,
noAnimation_,
        );
        
        
        ResultOf_transform_to_car {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_engine_health(&self, vehicle_: u32,
health_: f32) -> ResultOf_set_plane_engine_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_plane_engine_health(
            vehicle_,
health_,
        );
        
        
        ResultOf_set_plane_engine_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_inverse_mass_scale(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_trailer_inverse_mass_scale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_trailer_inverse_mass_scale(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_trailer_inverse_mass_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_neon_enabled(&self, vehicle_: u32,
index_: i32,
toggle_: bool) -> ResultOf_set_vehicle_neon_enabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_neon_enabled(
            vehicle_,
index_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_neon_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_number_of_seats(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_number_of_seats {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_number_of_seats(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_number_of_seats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_garbage_trucks(&self, toggle_: bool) -> ResultOf_set_garbage_trucks {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_garbage_trucks(
            toggle_,
        );
        
        
        ResultOf_set_garbage_trucks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_been_owned_by_player(&self, vehicle_: u32,
owned_: bool) -> ResultOf_set_vehicle_has_been_owned_by_player {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut owned_ = owned_;
        let success = sdk::natives::set_vehicle_has_been_owned_by_player(
            vehicle_,
owned_,
        );
        
        
        ResultOf_set_vehicle_has_been_owned_by_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_towing(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_disable_towing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_disable_towing(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_disable_towing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery(&self, vehicle_: u32) -> ResultOf_get_vehicle_livery {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_livery {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_cargobob_pick_up_entity(&self, p0_: i32,
p1_: i32) -> ResultOf_can_cargobob_pick_up_entity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::can_cargobob_pick_up_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_can_cargobob_pick_up_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_will_tell_others_to_hurry(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_will_tell_others_to_hurry {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_will_tell_others_to_hurry(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_will_tell_others_to_hurry {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_num_of_broken_loosen_parts(&self, vehicle_: u32) -> ResultOf_get_vehicle_num_of_broken_loosen_parts {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_num_of_broken_loosen_parts(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_num_of_broken_loosen_parts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_road_node_speed_zone(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
speed_: f32,
p5_: bool) -> ResultOf_add_road_node_speed_zone {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut speed_ = speed_;
let mut p5_ = p5_;
        let success = sdk::natives::add_road_node_speed_zone(
            &mut native_return,
x_,
y_,
z_,
radius_,
speed_,
p5_,
        );
        let native_return = native_return;
        
        ResultOf_add_road_node_speed_zone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_any_vehicle_seats_free(&self, vehicle_: u32) -> ResultOf_are_any_vehicle_seats_free {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_any_vehicle_seats_free(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_are_any_vehicle_seats_free {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_hover_mode_flight(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_hover_mode_flight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_hover_mode_flight(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_hover_mode_flight {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_in_recording(&self, vehicle_: u32) -> ResultOf_get_position_in_recording {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_position_in_recording(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_position_in_recording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_timed_explosion(&self, vehicle_: u32,
ped_: u32,
toggle_: bool) -> ResultOf_set_vehicle_timed_explosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_timed_explosion(
            vehicle_,
ped_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_timed_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_drift_tyres_set(&self, vehicle_: u32) -> ResultOf_get_drift_tyres_set {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_drift_tyres_set(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_drift_tyres_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_max_acceleration(&self, vehicleClass_: i32) -> ResultOf_get_vehicle_class_max_acceleration {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleClass_ = vehicleClass_;
        let success = sdk::natives::get_vehicle_class_max_acceleration(
            &mut native_return,
vehicleClass_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_max_acceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_door_allowed_to_be_broken_off(&self, vehicle_: u32,
doorId_: i32,
isBreakable_: bool) -> ResultOf_set_door_allowed_to_be_broken_off {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut isBreakable_ = isBreakable_;
        let success = sdk::natives::set_door_allowed_to_be_broken_off(
            vehicle_,
doorId_,
isBreakable_,
        );
        
        
        ResultOf_set_door_allowed_to_be_broken_off {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_attachment_enabled(&self, p0_: i32,
p1_: i32) -> ResultOf_set_trailer_attachment_enabled {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_trailer_attachment_enabled(
            p0_,
p1_,
        );
        
        
        ResultOf_set_trailer_attachment_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_stuck_check_with_warp(&self, p0_: i32,
p1_: f32,
p2_: i32,
p3_: bool,
p4_: bool,
p5_: bool,
p6_: i32) -> ResultOf_add_vehicle_stuck_check_with_warp {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::add_vehicle_stuck_check_with_warp(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOf_add_vehicle_stuck_check_with_warp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_be_used_by_fleeing_peds(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_be_used_by_fleeing_peds {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_be_used_by_fleeing_peds(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_be_used_by_fleeing_peds {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_recording_been_loaded(&self, recording_: i32,
script_: Option<String>) -> ResultOf_has_vehicle_recording_been_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::has_vehicle_recording_been_loaded(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_has_vehicle_recording_been_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_shuffle_seat(&self, vehicle_: u32,
seatIndex_: i32) -> ResultOf_can_shuffle_seat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::can_shuffle_seat(
            &mut native_return,
vehicle_,
seatIndex_,
        );
        let native_return = native_return;
        
        ResultOf_can_shuffle_seat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_flight_nozzle_position(&self, vehicle_: u32,
angleRatio_: f32) -> ResultOf_set_vehicle_flight_nozzle_position {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut angleRatio_ = angleRatio_;
        let success = sdk::natives::set_vehicle_flight_nozzle_position(
            vehicle_,
angleRatio_,
        );
        
        
        ResultOf_set_vehicle_flight_nozzle_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_render_train_as_derailed(&self, train_: u32,
toggle_: bool) -> ResultOf_set_render_train_as_derailed {
    unsafe {
        let mut train_ = train_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_render_train_as_derailed(
            train_,
toggle_,
        );
        
        
        ResultOf_set_render_train_as_derailed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_is_considered_by_player(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_is_considered_by_player {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_is_considered_by_player(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_is_considered_by_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_turret_movement_this_frame(&self, vehicle_: u32) -> ResultOf_disable_vehicle_turret_movement_this_frame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::disable_vehicle_turret_movement_this_frame(
            vehicle_,
        );
        
        
        ResultOf_disable_vehicle_turret_movement_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_submarine_surface_mode(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_force_submarine_surface_mode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::force_submarine_surface_mode(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_force_submarine_surface_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_colour_combination(&self, vehicle_: u32,
colorCombination_: i32) -> ResultOf_set_vehicle_colour_combination {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut colorCombination_ = colorCombination_;
        let success = sdk::natives::set_vehicle_colour_combination(
            vehicle_,
colorCombination_,
        );
        
        
        ResultOf_set_vehicle_colour_combination {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_mod_kits(&self, vehicle_: u32) -> ResultOf_get_num_mod_kits {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_num_mod_kits(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_mod_kits {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_allow_vehicle_explodes_on_contact(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_allow_vehicle_explodes_on_contact {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_vehicle_explodes_on_contact(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_allow_vehicle_explodes_on_contact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_vehicle_generators_active(&self, ) -> ResultOf_set_all_vehicle_generators_active {
    unsafe {
        
        let success = sdk::natives::set_all_vehicle_generators_active(
            
        );
        
        
        ResultOf_set_all_vehicle_generators_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_lights(&self, vehicle_: u32,
state_: i32) -> ResultOf_set_vehicle_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_lights(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_vehicle_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_bomb_bay_doors(&self, vehicle_: u32) -> ResultOf_close_bomb_bay_doors {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::close_bomb_bay_doors(
            vehicle_,
        );
        
        
        ResultOf_close_bomb_bay_doors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_occupants_take_explosive_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_occupants_take_explosive_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_occupants_take_explosive_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_occupants_take_explosive_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_vehicle_neon_enabled(&self, p0_: bool) -> ResultOf_set_ambient_vehicle_neon_enabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ambient_vehicle_neon_enabled(
            p0_,
        );
        
        
        ResultOf_set_ambient_vehicle_neon_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_current_time_in_slip_stream(&self, vehicle_: u32) -> ResultOf_get_vehicle_current_time_in_slip_stream {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_current_time_in_slip_stream(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_current_time_in_slip_stream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_custom_secondary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_vehicle_custom_secondary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_custom_secondary_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_vehicle_custom_secondary_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_has_rocket_boost(&self, vehicle_: u32) -> ResultOf_get_has_rocket_boost {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_rocket_boost(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_has_rocket_boost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_combat_mode(&self, toggle_: bool) -> ResultOf_set_vehicle_combat_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_combat_mode(
            toggle_,
        );
        
        
        ResultOf_set_vehicle_combat_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_stabilise_entity_attached_to_heli(&self, vehicle_: u32,
entity_: u32,
p2_: f32) -> ResultOf_stabilise_entity_attached_to_heli {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::stabilise_entity_attached_to_heli(
            vehicle_,
entity_,
p2_,
        );
        
        
        ResultOf_stabilise_entity_attached_to_heli {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_be_targetted(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_vehicle_can_be_targetted {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_can_be_targetted(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_vehicle_can_be_targetted {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_handler_vehicle_container_is_attached_to(&self, entity_: u32) -> ResultOf_find_handler_vehicle_container_is_attached_to {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::find_handler_vehicle_container_is_attached_to(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_find_handler_vehicle_container_is_attached_to {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_vehicle_petrol_tank_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_vehicle_petrol_tank_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_petrol_tank_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_vehicle_petrol_tank_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_forklift_fork_height(&self, vehicle_: u32,
height_: f32) -> ResultOf_set_forklift_fork_height {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut height_ = height_;
        let success = sdk::natives::set_forklift_fork_height(
            vehicle_,
height_,
        );
        
        
        ResultOf_set_forklift_fork_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
flags_: i32) -> ResultOf_get_random_vehicle_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut flags_ = flags_;
        let success = sdk::natives::get_random_vehicle_in_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
modelHash_,
flags_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_vehicle_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tyre_wear_rate_scale(&self, vehicle_: u32,
wheelIndex_: i32,
multiplier_: f32) -> ResultOf_set_tyre_wear_rate_scale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_wear_rate_scale(
            vehicle_,
wheelIndex_,
multiplier_,
        );
        
        
        ResultOf_set_tyre_wear_rate_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_quadbike(&self, model_: u32) -> ResultOf_is_this_model_a_quadbike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_quadbike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_quadbike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_reduced_suspension_force(&self, vehicle_: u32,
enable_: bool) -> ResultOf_set_reduced_suspension_force {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enable_ = enable_;
        let success = sdk::natives::set_reduced_suspension_force(
            vehicle_,
enable_,
        );
        
        
        ResultOf_set_reduced_suspension_force {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_outriggers_deployed(&self, vehicle_: u32) -> ResultOf_get_outriggers_deployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_outriggers_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_outriggers_deployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_enveff_scale(&self, vehicle_: u32,
fade_: f32) -> ResultOf_set_vehicle_enveff_scale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut fade_ = fade_;
        let success = sdk::natives::set_vehicle_enveff_scale(
            vehicle_,
fade_,
        );
        
        
        ResultOf_set_vehicle_enveff_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_auto_lock(&self, vehicle_: u32,
doorId_: i32,
toggle_: bool) -> ResultOf_set_vehicle_door_auto_lock {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_door_auto_lock(
            vehicle_,
doorId_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_door_auto_lock {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_vehicle_colours(&self, vehicle_: u32) -> ResultOf_get_number_of_vehicle_colours {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_number_of_vehicle_colours(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_vehicle_colours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_extra_colours(&self, vehicle_: u32,
pearlescentColor_: i32,
wheelColor_: i32) -> ResultOf_get_vehicle_extra_colours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut pearlescentColor_ = Default::default();
let mut wheelColor_ = Default::default();
        let success = sdk::natives::get_vehicle_extra_colours(
            &mut pearlescentColor_,
&mut wheelColor_,
vehicle_,
        );
        let pearlescentColor_ = pearlescentColor_;
let wheelColor_ = wheelColor_;
        
        ResultOf_get_vehicle_extra_colours {
            success,
            ret: (),
            pearlescentColor_,
wheelColor_
        }
    }
}

    fn native_attach_vehicle_to_trailer(&self, vehicle_: u32,
trailer_: u32,
radius_: f32) -> ResultOf_attach_vehicle_to_trailer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut trailer_ = trailer_;
let mut radius_ = radius_;
        let success = sdk::natives::attach_vehicle_to_trailer(
            vehicle_,
trailer_,
radius_,
        );
        
        
        ResultOf_attach_vehicle_to_trailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_rocket_boost_active(&self, vehicle_: u32) -> ResultOf_is_rocket_boost_active {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_rocket_boost_active(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_rocket_boost_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_parachute_deployed(&self, vehicle_: u32) -> ResultOf_is_vehicle_parachute_deployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_parachute_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_parachute_deployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_xenon_light_color_index(&self, vehicle_: u32) -> ResultOf_get_vehicle_xenon_light_color_index {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_xenon_light_color_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_xenon_light_color_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_submarine_is_under_design_depth(&self, submarine_: u32) -> ResultOf_get_submarine_is_under_design_depth {
    unsafe {
        let mut native_return = Default::default();
let mut submarine_ = submarine_;
        let success = sdk::natives::get_submarine_is_under_design_depth(
            &mut native_return,
submarine_,
        );
        let native_return = native_return;
        
        ResultOf_get_submarine_is_under_design_depth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_strong(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_strong {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_strong(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_strong {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_door_fully_open(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_is_vehicle_door_fully_open {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::is_vehicle_door_fully_open(
            &mut native_return,
vehicle_,
doorId_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_door_fully_open {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_tail_boom_can_break_off(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_heli_tail_boom_can_break_off {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_tail_boom_can_break_off(
            &mut native_return,
vehicle_,
toggle_,
        );
        let native_return = native_return;
        
        ResultOf_set_heli_tail_boom_can_break_off {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_playback_recorded_vehicle(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
p3_: bool) -> ResultOf_start_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut p3_ = p3_;
        let success = sdk::natives::start_playback_recorded_vehicle(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOf_start_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_main_rotor_health(&self, vehicle_: u32,
health_: f32) -> ResultOf_set_heli_main_rotor_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_heli_main_rotor_health(
            vehicle_,
health_,
        );
        
        
        ResultOf_set_heli_main_rotor_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_homing_lockedonto_state(&self, p0_: i32,
p1_: i32) -> ResultOf_set_vehicle_homing_lockedonto_state {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_homing_lockedonto_state(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_homing_lockedonto_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ai_can_use_exclusive_seats(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_ai_can_use_exclusive_seats {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_ai_can_use_exclusive_seats(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_ai_can_use_exclusive_seats {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_to_cargobob(&self, vehicle_: u32,
cargobob_: u32,
p2_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_attach_vehicle_to_cargobob {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
let mut p2_ = p2_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::attach_vehicle_to_cargobob(
            vehicle_,
cargobob_,
p2_,
x_,
y_,
z_,
        );
        
        
        ResultOf_attach_vehicle_to_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_boost_button_for_wheel_retract(&self, toggle_: bool) -> ResultOf_set_vehicle_use_boost_button_for_wheel_retract {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_boost_button_for_wheel_retract(
            toggle_,
        );
        
        
        ResultOf_set_vehicle_use_boost_button_for_wheel_retract {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_plane_landing_gear_intact(&self, plane_: u32) -> ResultOf_is_plane_landing_gear_intact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::is_plane_landing_gear_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOf_is_plane_landing_gear_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_transform_to_submarine_uses_alternate_input(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_transform_to_submarine_uses_alternate_input {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_transform_to_submarine_uses_alternate_input(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_transform_to_submarine_uses_alternate_input {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_model(&self, vehicle_: u32,
model_: u32) -> ResultOf_is_vehicle_model {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut model_ = model_;
        let success = sdk::natives::is_vehicle_model(
            &mut native_return,
vehicle_,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_formation_leader(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: f32) -> ResultOf_set_formation_leader {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::set_formation_leader(
            vehicle_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOf_set_formation_leader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_save_in_garage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_save_in_garage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_save_in_garage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_save_in_garage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_num_of_broken_off_parts(&self, vehicle_: u32) -> ResultOf_get_vehicle_num_of_broken_off_parts {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_num_of_broken_off_parts(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_num_of_broken_off_parts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_steer_bias(&self, vehicle_: u32,
value_: f32) -> ResultOf_set_vehicle_steer_bias {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_steer_bias(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_vehicle_steer_bias {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_playback_for_vehicle(&self, vehicle_: u32) -> ResultOf_get_current_playback_for_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_current_playback_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_current_playback_for_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ground_effect_reduces_drag(&self, toggle_: bool) -> ResultOf_set_ground_effect_reduces_drag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ground_effect_reduces_drag(
            toggle_,
        );
        
        
        ResultOf_set_ground_effect_reduces_drag {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_alarm_activated(&self, vehicle_: u32) -> ResultOf_is_vehicle_alarm_activated {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_alarm_activated(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_alarm_activated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_target_ratio(&self, vehicle_: u32,
targetRatio_: f32) -> ResultOf_set_special_flight_mode_target_ratio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut targetRatio_ = targetRatio_;
        let success = sdk::natives::set_special_flight_mode_target_ratio(
            vehicle_,
targetRatio_,
        );
        
        
        ResultOf_set_special_flight_mode_target_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_mod_color_1(&self, vehicle_: u32,
paintType_: i32,
color_: i32,
pearlescentColor_: i32) -> ResultOf_set_vehicle_mod_color_1 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paintType_ = paintType_;
let mut color_ = color_;
let mut pearlescentColor_ = pearlescentColor_;
        let success = sdk::natives::set_vehicle_mod_color_1(
            vehicle_,
paintType_,
color_,
pearlescentColor_,
        );
        
        
        ResultOf_set_vehicle_mod_color_1 {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_petroltank_fire_culprit(&self, vehicle_: u32) -> ResultOf_clear_vehicle_petroltank_fire_culprit {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_petroltank_fire_culprit(
            vehicle_,
        );
        
        
        ResultOf_clear_vehicle_petroltank_fire_culprit {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_preload_mods(&self, vehicle_: u32) -> ResultOf_release_preload_mods {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::release_preload_mods(
            vehicle_,
        );
        
        
        ResultOf_release_preload_mods {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_weapon_restricted_ammo(&self, vehicle_: u32,
weaponIndex_: i32,
capacity_: i32) -> ResultOf_set_vehicle_weapon_restricted_ammo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut weaponIndex_ = weaponIndex_;
let mut capacity_ = capacity_;
        let success = sdk::natives::set_vehicle_weapon_restricted_ammo(
            vehicle_,
weaponIndex_,
capacity_,
        );
        
        
        ResultOf_set_vehicle_weapon_restricted_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_identifier_hash(&self, vehicle_: u32,
modType_: i32,
modIndex_: i32) -> ResultOf_get_vehicle_mod_identifier_hash {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modIndex_ = modIndex_;
        let success = sdk::natives::get_vehicle_mod_identifier_hash(
            &mut native_return,
vehicle_,
modType_,
modIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod_identifier_hash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_weapon_damage_scale(&self, vehicle_: u32,
multiplier_: f32) -> ResultOf_set_vehicle_weapon_damage_scale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_weapon_damage_scale(
            &mut native_return,
vehicle_,
multiplier_,
        );
        let native_return = native_return;
        
        ResultOf_set_vehicle_weapon_damage_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_boat(&self, model_: u32) -> ResultOf_is_this_model_a_boat {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_boat(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_boat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_engine_health(&self, vehicle_: u32,
health_: f32) -> ResultOf_set_vehicle_engine_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_vehicle_engine_health(
            vehicle_,
health_,
        );
        
        
        ResultOf_set_vehicle_engine_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vehicle_petrol_tank_fires(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_vehicle_petrol_tank_fires {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_petrol_tank_fires(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_vehicle_petrol_tank_fires {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_bumper_broken_off(&self, vehicle_: u32,
frontBumper_: bool) -> ResultOf_is_vehicle_bumper_broken_off {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut frontBumper_ = frontBumper_;
        let success = sdk::natives::is_vehicle_bumper_broken_off(
            &mut native_return,
vehicle_,
frontBumper_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_bumper_broken_off {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicles_from_generators_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOf_remove_vehicles_from_generators_in_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::remove_vehicles_from_generators_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOf_remove_vehicles_from_generators_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_window_intact(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_is_vehicle_window_intact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::is_vehicle_window_intact(
            &mut native_return,
vehicle_,
windowIndex_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_window_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_wheel_type(&self, vehicle_: u32,
WheelType_: i32) -> ResultOf_set_vehicle_wheel_type {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut WheelType_ = WheelType_;
        let success = sdk::natives::set_vehicle_wheel_type(
            vehicle_,
WheelType_,
        );
        
        
        ResultOf_set_vehicle_wheel_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_instantly_fill_vehicle_population(&self, ) -> ResultOf_instantly_fill_vehicle_population {
    unsafe {
        
        let success = sdk::natives::instantly_fill_vehicle_population(
            
        );
        
        
        ResultOf_instantly_fill_vehicle_population {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_producing_slip_stream(&self, vehicle_: u32) -> ResultOf_is_vehicle_producing_slip_stream {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_producing_slip_stream(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_producing_slip_stream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color_2_name(&self, vehicle_: u32) -> ResultOf_get_vehicle_mod_color_2_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_color_2_name(
            native_return.pin_mut(),
vehicle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_vehicle_mod_color_2_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_on_ground_properly(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_vehicle_on_ground_properly {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_on_ground_properly(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_set_vehicle_on_ground_properly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_transform_rate_for_animation(&self, vehicle_: u32,
transformRate_: f32) -> ResultOf_set_transform_rate_for_animation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut transformRate_ = transformRate_;
        let success = sdk::natives::set_transform_rate_for_animation(
            vehicle_,
transformRate_,
        );
        
        
        ResultOf_set_transform_rate_for_animation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_wanted_cones_response(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_wanted_cones_response {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_wanted_cones_response(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_wanted_cones_response {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_stolen(&self, vehicle_: u32) -> ResultOf_is_vehicle_stolen {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stolen(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_stolen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_max_braking(&self, vehicleClass_: i32) -> ResultOf_get_vehicle_class_max_braking {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleClass_ = vehicleClass_;
        let success = sdk::natives::get_vehicle_class_max_braking(
            &mut native_return,
vehicleClass_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_max_braking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_driveable(&self, vehicle_: u32,
isOnFireCheck_: bool) -> ResultOf_is_vehicle_driveable {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut isOnFireCheck_ = isOnFireCheck_;
        let success = sdk::natives::is_vehicle_driveable(
            &mut native_return,
vehicle_,
isOnFireCheck_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_driveable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_vehicle_number_plates(&self, ) -> ResultOf_get_number_of_vehicle_number_plates {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_vehicle_number_plates(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_vehicle_number_plates {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_be_visibly_damaged(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_vehicle_can_be_visibly_damaged {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_can_be_visibly_damaged(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_vehicle_can_be_visibly_damaged {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_propeller_health(&self, plane_: u32,
health_: f32) -> ResultOf_set_plane_propeller_health {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
let mut health_ = health_;
        let success = sdk::natives::set_plane_propeller_health(
            &mut native_return,
plane_,
health_,
        );
        let native_return = native_return;
        
        ResultOf_set_plane_propeller_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_siren_on(&self, vehicle_: u32) -> ResultOf_is_vehicle_siren_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_siren_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_siren_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vehicle_set_parachute_model_override(&self, vehicle_: u32,
modelHash_: u32) -> ResultOf_vehicle_set_parachute_model_override {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modelHash_ = modelHash_;
        let success = sdk::natives::vehicle_set_parachute_model_override(
            vehicle_,
modelHash_,
        );
        
        
        ResultOf_vehicle_set_parachute_model_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_vehicle_engine_damage_by_bullet(&self, p0_: i32,
p1_: bool) -> ResultOf_set_force_vehicle_engine_damage_by_bullet {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_force_vehicle_engine_damage_by_bullet(
            p0_,
p1_,
        );
        
        
        ResultOf_set_force_vehicle_engine_damage_by_bullet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_damage_scale(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_vehicle_damage_scale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_damage_scale(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_set_vehicle_damage_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_vehicle_allow_rappel(&self, vehicle_: u32) -> ResultOf_does_vehicle_allow_rappel {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_allow_rappel(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_allow_rappel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_police_focus_will_track_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_police_focus_will_track_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_focus_will_track_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_police_focus_will_track_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_deformation_at_pos(&self, vehicle_: u32,
offsetX_: f32,
offsetY_: f32,
offsetZ_: f32) -> ResultOf_get_vehicle_deformation_at_pos {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut offsetX_ = offsetX_;
let mut offsetY_ = offsetY_;
let mut offsetZ_ = offsetZ_;
        let success = sdk::natives::get_vehicle_deformation_at_pos(
            native_return.pin_mut(),
vehicle_,
offsetX_,
offsetY_,
offsetZ_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_vehicle_deformation_at_pos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_colours(&self, vehicle_: u32,
colorPrimary_: i32,
colorSecondary_: i32) -> ResultOf_set_vehicle_colours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut colorPrimary_ = colorPrimary_;
let mut colorSecondary_ = colorSecondary_;
        let success = sdk::natives::set_vehicle_colours(
            vehicle_,
colorPrimary_,
colorSecondary_,
        );
        
        
        ResultOf_set_vehicle_colours {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_max_agility(&self, vehicleClass_: i32) -> ResultOf_get_vehicle_class_max_agility {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleClass_ = vehicleClass_;
        let success = sdk::natives::get_vehicle_class_max_agility(
            &mut native_return,
vehicleClass_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_max_agility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_individual_plane_propeller(&self, vehicle_: u32,
propeller_: i32) -> ResultOf_disable_individual_plane_propeller {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut propeller_ = propeller_;
        let success = sdk::natives::disable_individual_plane_propeller(
            vehicle_,
propeller_,
        );
        
        
        ResultOf_disable_individual_plane_propeller {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_has_kers(&self, vehicle_: u32) -> ResultOf_get_vehicle_has_kers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_kers(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_has_kers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_player(&self, vehicle_: u32,
player_: u32,
toggle_: bool) -> ResultOf_set_vehicle_doors_locked_for_player {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_player(
            vehicle_,
player_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_doors_locked_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_leak_oil(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_leak_oil {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_leak_oil(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_leak_oil {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_enable_empty_crowding_vehicles_removal(&self, toggle_: bool) -> ResultOf_network_enable_empty_crowding_vehicles_removal {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_enable_empty_crowding_vehicles_removal(
            toggle_,
        );
        
        
        ResultOf_network_enable_empty_crowding_vehicles_removal {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mod_slot_name(&self, vehicle_: u32,
modType_: i32) -> ResultOf_get_mod_slot_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::get_mod_slot_name(
            native_return.pin_mut(),
vehicle_,
modType_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_mod_slot_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_can_vehicle_be_placed_here(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
rotX_: f32,
rotY_: f32,
rotZ_: f32,
p7_: i32,
p8_: i32) -> ResultOf_get_can_vehicle_be_placed_here {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rotX_ = rotX_;
let mut rotY_ = rotY_;
let mut rotZ_ = rotZ_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_can_vehicle_be_placed_here(
            &mut native_return,
vehicle_,
x_,
y_,
z_,
rotX_,
rotY_,
rotZ_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOf_get_can_vehicle_be_placed_here {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_respray_vehicle(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_can_respray_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_can_respray_vehicle(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_can_respray_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_a_convertible(&self, vehicle_: u32,
p1_: bool) -> ResultOf_is_vehicle_a_convertible {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::is_vehicle_a_convertible(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_a_convertible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheels_retracted_instantly(&self, vehicle_: u32) -> ResultOf_set_wheels_retracted_instantly {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_wheels_retracted_instantly(
            vehicle_,
        );
        
        
        ResultOf_set_wheels_retracted_instantly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_acceleration_max_mods(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_acceleration_max_mods {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_acceleration_max_mods(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_acceleration_max_mods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_extra_broken_off(&self, vehicle_: u32,
extraId_: i32) -> ResultOf_is_extra_broken_off {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extraId_ = extraId_;
        let success = sdk::natives::is_extra_broken_off(
            &mut native_return,
vehicle_,
extraId_,
        );
        let native_return = native_return;
        
        ResultOf_is_extra_broken_off {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_fake_suspension_lowering_amount(&self, vehicle_: u32) -> ResultOf_get_fake_suspension_lowering_amount {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_fake_suspension_lowering_amount(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_fake_suspension_lowering_amount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_traction(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_max_traction {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_max_traction(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_max_traction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_estimated_max_speed(&self, vehicle_: u32) -> ResultOf_get_vehicle_estimated_max_speed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_estimated_max_speed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_estimated_max_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_glider_active(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_glider_active {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_glider_active(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_glider_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOf_stop_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::stop_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOf_stop_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_combat_angled_avoidance_area(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32) -> ResultOf_add_vehicle_combat_angled_avoidance_area {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::add_vehicle_combat_angled_avoidance_area(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_add_vehicle_combat_angled_avoidance_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_vehicle_custom_primary_colour(&self, vehicle_: u32) -> ResultOf_clear_vehicle_custom_primary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_custom_primary_colour(
            vehicle_,
        );
        
        
        ResultOf_clear_vehicle_custom_primary_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tyre_health(&self, vehicle_: u32,
wheelIndex_: i32) -> ResultOf_get_tyre_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
        let success = sdk::natives::get_tyre_health(
            &mut native_return,
vehicle_,
wheelIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_tyre_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_weapon_disabled(&self, weaponHash_: u32,
vehicle_: u32,
owner_: u32) -> ResultOf_is_vehicle_weapon_disabled {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
let mut vehicle_ = vehicle_;
let mut owner_ = owner_;
        let success = sdk::natives::is_vehicle_weapon_disabled(
            &mut native_return,
weaponHash_,
vehicle_,
owner_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_weapon_disabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tank_turret_position(&self, vehicle_: u32,
position_: f32,
p2_: bool) -> ResultOf_set_vehicle_tank_turret_position {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_tank_turret_position(
            vehicle_,
position_,
p2_,
        );
        
        
        ResultOf_set_vehicle_tank_turret_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_ensure_pickup_entity_upright(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_cargobob_pickup_magnet_ensure_pickup_entity_upright {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_ensure_pickup_entity_upright(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_ensure_pickup_entity_upright {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_force_dont_detach_vehicle(&self, cargobob_: u32,
toggle_: bool) -> ResultOf_set_cargobob_force_dont_detach_vehicle {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cargobob_force_dont_detach_vehicle(
            cargobob_,
toggle_,
        );
        
        
        ResultOf_set_cargobob_force_dont_detach_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_stopped(&self, vehicle_: u32) -> ResultOf_is_vehicle_stopped {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stopped(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_stopped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_position_in_recording(&self, vehicle_: u32) -> ResultOf_get_time_position_in_recording {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_time_position_in_recording(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_time_position_in_recording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_handler_frame(&self, vehicle_: u32,
entity_: u32) -> ResultOf_is_entity_attached_to_handler_frame {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_handler_frame(
            &mut native_return,
vehicle_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_entity_attached_to_handler_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_window_tint(&self, vehicle_: u32,
tint_: i32) -> ResultOf_set_vehicle_window_tint {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut tint_ = tint_;
        let success = sdk::natives::set_vehicle_window_tint(
            vehicle_,
tint_,
        );
        
        
        ResultOf_set_vehicle_window_tint {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_stuck_vehicle_check(&self, vehicle_: u32) -> ResultOf_does_vehicle_have_stuck_vehicle_check {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_stuck_vehicle_check(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_have_stuck_vehicle_check {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tail_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_tail_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_tail_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_tail_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_additional_rotation_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: i32) -> ResultOf_set_additional_rotation_for_recorded_vehicle_playback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::set_additional_rotation_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOf_set_additional_rotation_for_recorded_vehicle_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_value(&self, vehicleModel_: u32) -> ResultOf_get_vehicle_model_value {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleModel_ = vehicleModel_;
        let success = sdk::natives::get_vehicle_model_value(
            &mut native_return,
vehicleModel_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_train_coords(&self, train_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_mission_train_coords {
    unsafe {
        let mut train_ = train_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_mission_train_coords(
            train_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_mission_train_coords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_taxi_lights(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_taxi_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_taxi_lights(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_taxi_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_wings_of_plane_intact(&self, plane_: u32) -> ResultOf_are_wings_of_plane_intact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::are_wings_of_plane_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOf_are_wings_of_plane_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_break(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_can_break {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_break(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_can_break {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_peds_can_fall_off_this_vehicle_from_large_fall_damage(&self, vehicle_: u32,
toggle_: bool,
p2_: f32) -> ResultOf_set_peds_can_fall_off_this_vehicle_from_large_fall_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_peds_can_fall_off_this_vehicle_from_large_fall_damage(
            vehicle_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_peds_can_fall_off_this_vehicle_from_large_fall_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_boat_vehicle_model_agility(&self, modelHash_: u32) -> ResultOf_get_boat_vehicle_model_agility {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_boat_vehicle_model_agility(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_boat_vehicle_model_agility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drift_tyres(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_drift_tyres {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_drift_tyres(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_drift_tyres {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_provides_cover(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_provides_cover {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_provides_cover(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_provides_cover {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_mission_train(&self, train_: u32) -> ResultOf_delete_mission_train {
    unsafe {
        let mut train_ = Default::default();
        let success = sdk::natives::delete_mission_train(
            &mut train_,
        );
        let train_ = train_;
        
        ResultOf_delete_mission_train {
            success,
            ret: (),
            train_
        }
    }
}

    fn native_set_invert_vehicle_controls(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_invert_vehicle_controls {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_invert_vehicle_controls(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_invert_vehicle_controls {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_petroltank_set_on_fire_by_entity(&self, p0_: i32,
p1_: i32) -> ResultOf_has_vehicle_petroltank_set_on_fire_by_entity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::has_vehicle_petroltank_set_on_fire_by_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_has_vehicle_petroltank_set_on_fire_by_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_double_click_for_car_jump(&self, toggle_: bool) -> ResultOf_set_use_double_click_for_car_jump {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_double_click_for_car_jump(
            toggle_,
        );
        
        
        ResultOf_set_use_double_click_for_car_jump {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_allow_no_passengers_lockon(&self, veh_: u32,
toggle_: bool) -> ResultOf_set_vehicle_allow_no_passengers_lockon {
    unsafe {
        let mut veh_ = veh_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_allow_no_passengers_lockon(
            veh_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_allow_no_passengers_lockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_acceleration(&self, vehicle_: u32) -> ResultOf_get_vehicle_acceleration {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_acceleration(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_acceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_no_explosion_damage_from_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_no_explosion_damage_from_driver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_no_explosion_damage_from_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_no_explosion_damage_from_driver {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery2_count(&self, vehicle_: u32) -> ResultOf_get_vehicle_livery2_count {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery2_count(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_livery2_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_plane_damage_threhsold(&self, vehicle_: u32,
health_: f32) -> ResultOf_override_plane_damage_threhsold {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::override_plane_damage_threhsold(
            vehicle_,
health_,
        );
        
        
        ResultOf_override_plane_damage_threhsold {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_left_vehicle_headlight_damaged(&self, vehicle_: u32) -> ResultOf_get_is_left_vehicle_headlight_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_left_vehicle_headlight_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_left_vehicle_headlight_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_vehicle_custom_secondary_colour(&self, vehicle_: u32) -> ResultOf_clear_vehicle_custom_secondary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_custom_secondary_colour(
            vehicle_,
        );
        
        
        ResultOf_clear_vehicle_custom_secondary_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery2(&self, vehicle_: u32) -> ResultOf_get_vehicle_livery2 {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery2(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_livery2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_roll_up_window(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_roll_up_window {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::roll_up_window(
            vehicle_,
windowIndex_,
        );
        
        
        ResultOf_roll_up_window {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_low_priority_vehicle_generators_active(&self, active_: bool) -> ResultOf_set_all_low_priority_vehicle_generators_active {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_all_low_priority_vehicle_generators_active(
            active_,
        );
        
        
        ResultOf_set_all_low_priority_vehicle_generators_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra_colour_6(&self, vehicle_: u32,
color_: i32) -> ResultOf_set_vehicle_extra_colour_6 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_extra_colour_6(
            vehicle_,
color_,
        );
        
        
        ResultOf_set_vehicle_extra_colour_6 {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_livery(&self, vehicle_: u32,
livery_: i32) -> ResultOf_set_vehicle_livery {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut livery_ = livery_;
        let success = sdk::natives::set_vehicle_livery(
            vehicle_,
livery_,
        );
        
        
        ResultOf_set_vehicle_livery {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_vehicle_near_point(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_is_any_vehicle_near_point {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_vehicle_near_point(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_vehicle_near_point {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_entity_attached_to_handler_frame(&self, vehicle_: u32) -> ResultOf_is_any_entity_attached_to_handler_frame {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_any_entity_attached_to_handler_frame(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_any_entity_attached_to_handler_frame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_kit(&self, vehicle_: u32) -> ResultOf_get_vehicle_mod_kit {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_kit(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod_kit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOf_pause_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::pause_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOf_pause_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_an_amphibious_car(&self, model_: u32) -> ResultOf_is_this_model_an_amphibious_car {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_an_amphibious_car(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_an_amphibious_car {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_heli_landing_area_blocked(&self, vehicle_: u32) -> ResultOf_is_heli_landing_area_blocked {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_heli_landing_area_blocked(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_heli_landing_area_blocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entry_point_for_seat_clear(&self, ped_: u32,
vehicle_: u32,
seatIndex_: i32,
side_: bool,
onEnter_: bool) -> ResultOf_is_entry_point_for_seat_clear {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
let mut side_ = side_;
let mut onEnter_ = onEnter_;
        let success = sdk::natives::is_entry_point_for_seat_clear(
            &mut native_return,
ped_,
vehicle_,
seatIndex_,
side_,
onEnter_,
        );
        let native_return = native_return;
        
        ResultOf_is_entry_point_for_seat_clear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_mission_train(&self, unkVariation_: i32,
x_: f32,
y_: f32,
z_: f32,
direction_: bool,
p5_: i32,
p6_: i32) -> ResultOf_create_mission_train {
    unsafe {
        let mut native_return = Default::default();
let mut unkVariation_ = unkVariation_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut direction_ = direction_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::create_mission_train(
            &mut native_return,
unkVariation_,
x_,
y_,
z_,
direction_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_create_mission_train {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_track_vehicle_visibility(&self, vehicle_: u32) -> ResultOf_track_vehicle_visibility {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::track_vehicle_visibility(
            vehicle_,
        );
        
        
        ResultOf_track_vehicle_visibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_door_valid(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_get_is_door_valid {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::get_is_door_valid(
            &mut native_return,
vehicle_,
doorId_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_door_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_forward_speed_xy(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_vehicle_forward_speed_xy {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_forward_speed_xy(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_vehicle_forward_speed_xy {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_slow_down_effect_disabled(&self, disabled_: bool) -> ResultOf_set_slow_down_effect_disabled {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_slow_down_effect_disabled(
            disabled_,
        );
        
        
        ResultOf_set_slow_down_effect_disabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_boat_boom_position_ratio(&self, vehicle_: u32) -> ResultOf_get_boat_boom_position_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_boat_boom_position_ratio(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_boat_boom_position_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playback_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_playback_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_playback_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_playback_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_reduced_strength(&self, cargobob_: u32,
p1_: f32) -> ResultOf_set_cargobob_pickup_magnet_reduced_strength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_reduced_strength(
            cargobob_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_reduced_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_override_vehicle_door_torque(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_set_override_vehicle_door_torque {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_override_vehicle_door_torque(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_override_vehicle_door_torque {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_tyres_can_burst(&self, vehicle_: u32) -> ResultOf_get_vehicle_tyres_can_burst {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_tyres_can_burst(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_tyres_can_burst {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stuck_timer_up(&self, vehicle_: u32,
p1_: i32,
ms_: i32) -> ResultOf_is_vehicle_stuck_timer_up {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut ms_ = ms_;
        let success = sdk::natives::is_vehicle_stuck_timer_up(
            &mut native_return,
vehicle_,
p1_,
ms_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_stuck_timer_up {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_stolen(&self, vehicle_: u32,
isStolen_: bool) -> ResultOf_set_vehicle_is_stolen {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut isStolen_ = isStolen_;
        let success = sdk::natives::set_vehicle_is_stolen(
            vehicle_,
isStolen_,
        );
        
        
        ResultOf_set_vehicle_is_stolen {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_handbrake(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_handbrake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_handbrake(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_handbrake {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_pull_rope_length(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_cargobob_pickup_magnet_pull_rope_length {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_pull_rope_length(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_pull_rope_length {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colour_combination(&self, vehicle_: u32) -> ResultOf_get_vehicle_colour_combination {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_colour_combination(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_colour_combination {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_impatience_timer(&self, vehicle_: u32,
p1_: i32) -> ResultOf_set_vehicle_impatience_timer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_impatience_timer(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_impatience_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_container_to_handler_frame_when_lined_up(&self, vehicle_: u32,
entity_: u32) -> ResultOf_attach_container_to_handler_frame_when_lined_up {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::attach_container_to_handler_frame_when_lined_up(
            vehicle_,
entity_,
        );
        
        
        ResultOf_attach_container_to_handler_frame_when_lined_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_phone_explosive_device(&self, ) -> ResultOf_has_vehicle_phone_explosive_device {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_vehicle_phone_explosive_device(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_vehicle_phone_explosive_device {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_mod(&self, vehicle_: u32,
modType_: i32,
modIndex_: i32,
customTires_: bool) -> ResultOf_set_vehicle_mod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modIndex_ = modIndex_;
let mut customTires_ = customTires_;
        let success = sdk::natives::set_vehicle_mod(
            vehicle_,
modType_,
modIndex_,
customTires_,
        );
        
        
        ResultOf_set_vehicle_mod {
            success,
            ret: (),
            
        }
    }
}

    fn native_pop_out_vehicle_windscreen(&self, vehicle_: u32) -> ResultOf_pop_out_vehicle_windscreen {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::pop_out_vehicle_windscreen(
            vehicle_,
        );
        
        
        ResultOf_pop_out_vehicle_windscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_route_history(&self, vehicle_: u32) -> ResultOf_clear_vehicle_route_history {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_route_history(
            vehicle_,
        );
        
        
        ResultOf_clear_vehicle_route_history {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_reduced_falloff(&self, cargobob_: u32,
p1_: f32) -> ResultOf_set_cargobob_pickup_magnet_reduced_falloff {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_reduced_falloff(
            cargobob_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_reduced_falloff {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_reduce_grip_level(&self, vehicle_: u32,
val_: i32) -> ResultOf_set_vehicle_reduce_grip_level {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut val_ = val_;
        let success = sdk::natives::set_vehicle_reduce_grip_level(
            vehicle_,
val_,
        );
        
        
        ResultOf_set_vehicle_reduce_grip_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_control_lagging_rate_scalar(&self, helicopter_: u32,
multiplier_: f32) -> ResultOf_set_heli_control_lagging_rate_scalar {
    unsafe {
        let mut helicopter_ = helicopter_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_heli_control_lagging_rate_scalar(
            helicopter_,
multiplier_,
        );
        
        
        ResultOf_set_heli_control_lagging_rate_scalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cargobob_have_pickup_magnet(&self, cargobob_: u32) -> ResultOf_does_cargobob_have_pickup_magnet {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::does_cargobob_have_pickup_magnet(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOf_does_cargobob_have_pickup_magnet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tyre_fixed(&self, vehicle_: u32,
tyreIndex_: i32) -> ResultOf_set_vehicle_tyre_fixed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut tyreIndex_ = tyreIndex_;
        let success = sdk::natives::set_vehicle_tyre_fixed(
            vehicle_,
tyreIndex_,
        );
        
        
        ResultOf_set_vehicle_tyre_fixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tyre_wear_rate(&self, vehicle_: u32,
wheelIndex_: i32) -> ResultOf_get_tyre_wear_rate {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
        let success = sdk::natives::get_tyre_wear_rate(
            &mut native_return,
vehicle_,
wheelIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_tyre_wear_rate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playback_to_use_ai_try_to_revert_back_later(&self, vehicle_: u32,
time_: i32,
drivingStyle_: i32,
p3_: bool) -> ResultOf_set_playback_to_use_ai_try_to_revert_back_later {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
let mut drivingStyle_ = drivingStyle_;
let mut p3_ = p3_;
        let success = sdk::natives::set_playback_to_use_ai_try_to_revert_back_later(
            vehicle_,
time_,
drivingStyle_,
p3_,
        );
        
        
        ResultOf_set_playback_to_use_ai_try_to_revert_back_later {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_homing_lockedonto_state(&self, p0_: i32) -> ResultOf_get_vehicle_homing_lockedonto_state {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_vehicle_homing_lockedonto_state(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_homing_lockedonto_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_stop_instantly_when_player_inactive(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_stop_instantly_when_player_inactive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_stop_instantly_when_player_inactive(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_stop_instantly_when_player_inactive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hover_mode_wing_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOf_set_hover_mode_wing_ratio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::set_hover_mode_wing_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOf_set_hover_mode_wing_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_petrol_tank_health(&self, vehicle_: u32,
health_: f32) -> ResultOf_set_vehicle_petrol_tank_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_vehicle_petrol_tank_health(
            vehicle_,
health_,
        );
        
        
        ResultOf_set_vehicle_petrol_tank_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_custom_primary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_vehicle_custom_primary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_custom_primary_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_vehicle_custom_primary_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_does_vehicle_have_tombstone(&self, vehicle_: u32) -> ResultOf_get_does_vehicle_have_tombstone {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_does_vehicle_have_tombstone(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_does_vehicle_have_tombstone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_explodes_on_high_explosion_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_explodes_on_high_explosion_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_explodes_on_high_explosion_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_explodes_on_high_explosion_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_exta_pickup_range(&self, p0_: i32,
p1_: i32) -> ResultOf_set_cargobob_exta_pickup_range {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_exta_pickup_range(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cargobob_exta_pickup_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bike_easy_to_land(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_bike_easy_to_land {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_bike_easy_to_land(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_bike_easy_to_land {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_all_trains(&self, ) -> ResultOf_delete_all_trains {
    unsafe {
        
        let success = sdk::natives::delete_all_trains(
            
        );
        
        
        ResultOf_delete_all_trains {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tank_stationary(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_tank_stationary {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_tank_stationary(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_tank_stationary {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tyre_health(&self, vehicle_: u32,
wheelIndex_: i32,
health_: f32) -> ResultOf_set_tyre_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
let mut health_ = health_;
        let success = sdk::natives::set_tyre_health(
            vehicle_,
wheelIndex_,
health_,
        );
        
        
        ResultOf_set_tyre_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_shoot_at_target(&self, driver_: u32,
entity_: u32,
xTarget_: f32,
yTarget_: f32,
zTarget_: f32) -> ResultOf_set_vehicle_shoot_at_target {
    unsafe {
        let mut driver_ = driver_;
let mut entity_ = entity_;
let mut xTarget_ = xTarget_;
let mut yTarget_ = yTarget_;
let mut zTarget_ = zTarget_;
        let success = sdk::natives::set_vehicle_shoot_at_target(
            driver_,
entity_,
xTarget_,
yTarget_,
zTarget_,
        );
        
        
        ResultOf_set_vehicle_shoot_at_target {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_taxi_light_on(&self, vehicle_: u32) -> ResultOf_is_taxi_light_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_taxi_light_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_taxi_light_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_plane_propellers_intact(&self, plane_: u32) -> ResultOf_are_plane_propellers_intact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::are_plane_propellers_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOf_are_plane_propellers_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_map_collision(&self, vehicle_: u32) -> ResultOf_set_disable_map_collision {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_disable_map_collision(
            vehicle_,
        );
        
        
        ResultOf_set_disable_map_collision {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(&self, p0_: i32,
p1_: i32) -> ResultOf_vehicle_set_enable_normalise_ramp_car_vertical_veloctiy {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(
            p0_,
p1_,
        );
        
        
        ResultOf_vehicle_set_enable_normalise_ramp_car_vertical_veloctiy {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_vehicle_mod(&self, vehicle_: u32,
modType_: i32,
modIndex_: i32) -> ResultOf_preload_vehicle_mod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modIndex_ = modIndex_;
        let success = sdk::natives::preload_vehicle_mod(
            vehicle_,
modType_,
modIndex_,
        );
        
        
        ResultOf_preload_vehicle_mod {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_anchor(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_boat_anchor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_anchor(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_boat_anchor {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_neon_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_vehicle_neon_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_vehicle_neon_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_vehicle_neon_colour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_dont_terminate_task_when_achieved(&self, vehicle_: u32) -> ResultOf_set_vehicle_dont_terminate_task_when_achieved {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_dont_terminate_task_when_achieved(
            vehicle_,
        );
        
        
        ResultOf_set_vehicle_dont_terminate_task_when_achieved {
            success,
            ret: (),
            
        }
    }
}

    fn native_fix_vehicle_window(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_fix_vehicle_window {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::fix_vehicle_window(
            vehicle_,
windowIndex_,
        );
        
        
        ResultOf_fix_vehicle_window {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod(&self, vehicle_: u32,
modType_: i32) -> ResultOf_get_vehicle_mod {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::get_vehicle_mod(
            &mut native_return,
vehicle_,
modType_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_doors_shut(&self, vehicle_: u32,
closeInstantly_: bool) -> ResultOf_set_vehicle_doors_shut {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut closeInstantly_ = closeInstantly_;
        let success = sdk::natives::set_vehicle_doors_shut(
            vehicle_,
closeInstantly_,
        );
        
        
        ResultOf_set_vehicle_doors_shut {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_vehicle_in_cutscene(&self, vehicle_: u32,
p1_: bool) -> ResultOf_explode_vehicle_in_cutscene {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::explode_vehicle_in_cutscene(
            vehicle_,
p1_,
        );
        
        
        ResultOf_explode_vehicle_in_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_should_reset_turret_in_scripted_cameras(&self, vehicle_: u32,
shouldReset_: bool) -> ResultOf_set_should_reset_turret_in_scripted_cameras {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut shouldReset_ = shouldReset_;
        let success = sdk::natives::set_should_reset_turret_in_scripted_cameras(
            vehicle_,
shouldReset_,
        );
        
        
        ResultOf_set_should_reset_turret_in_scripted_cameras {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_position_offset_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_position_offset_for_recorded_vehicle_playback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_position_offset_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_position_offset_for_recorded_vehicle_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_dirt_level(&self, vehicle_: u32,
dirtLevel_: f32) -> ResultOf_set_vehicle_dirt_level {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut dirtLevel_ = dirtLevel_;
        let success = sdk::natives::set_vehicle_dirt_level(
            vehicle_,
dirtLevel_,
        );
        
        
        ResultOf_set_vehicle_dirt_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extended_removal_range(&self, vehicle_: u32,
range_: i32) -> ResultOf_set_vehicle_extended_removal_range {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut range_ = range_;
        let success = sdk::natives::set_vehicle_extended_removal_range(
            vehicle_,
range_,
        );
        
        
        ResultOf_set_vehicle_extended_removal_range {
            success,
            ret: (),
            
        }
    }
}

    fn native_roll_down_window(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_roll_down_window {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::roll_down_window(
            vehicle_,
windowIndex_,
        );
        
        
        ResultOf_roll_down_window {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_speed_boost_effect_disabled(&self, disabled_: bool) -> ResultOf_set_speed_boost_effect_disabled {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_speed_boost_effect_disabled(
            disabled_,
        );
        
        
        ResultOf_set_speed_boost_effect_disabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_pick_up_rope_for_cargobob(&self, cargobob_: u32,
state_: i32) -> ResultOf_create_pick_up_rope_for_cargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut state_ = state_;
        let success = sdk::natives::create_pick_up_rope_for_cargobob(
            cargobob_,
state_,
        );
        
        
        ResultOf_create_pick_up_rope_for_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_container_from_handler_frame(&self, vehicle_: u32) -> ResultOf_detach_container_from_handler_frame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_container_from_handler_frame(
            vehicle_,
        );
        
        
        ResultOf_detach_container_from_handler_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_bringing_vehicle_to_halt(&self, vehicle_: u32) -> ResultOf_stop_bringing_vehicle_to_halt {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::stop_bringing_vehicle_to_halt(
            vehicle_,
        );
        
        
        ResultOf_stop_bringing_vehicle_to_halt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_open(&self, vehicle_: u32,
doorId_: i32,
loose_: bool,
openInstantly_: bool) -> ResultOf_set_vehicle_door_open {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut loose_ = loose_;
let mut openInstantly_ = openInstantly_;
        let success = sdk::natives::set_vehicle_door_open(
            vehicle_,
doorId_,
loose_,
openInstantly_,
        );
        
        
        ResultOf_set_vehicle_door_open {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_plate_text(&self, vehicle_: u32) -> ResultOf_get_vehicle_number_plate_text {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_number_plate_text(
            native_return.pin_mut(),
vehicle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_vehicle_number_plate_text {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_extra_colour_5(&self, vehicle_: u32,
color_: i32) -> ResultOf_get_vehicle_extra_colour_5 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = Default::default();
        let success = sdk::natives::get_vehicle_extra_colour_5(
            &mut color_,
vehicle_,
        );
        let color_ = color_;
        
        ResultOf_get_vehicle_extra_colour_5 {
            success,
            ret: (),
            color_
        }
    }
}

    fn native_get_vehicle_petrol_tank_health(&self, vehicle_: u32) -> ResultOf_get_vehicle_petrol_tank_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_petrol_tank_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_petrol_tank_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_allow_homing_missle_lockon(&self, vehicle_: u32,
toggle_: bool,
p2_: bool) -> ResultOf_set_vehicle_allow_homing_missle_lockon {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_allow_homing_missle_lockon(
            vehicle_,
toggle_,
p2_,
        );
        
        
        ResultOf_set_vehicle_allow_homing_missle_lockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_playback_recorded_vehicle_with_flags(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
flags_: i32,
time_: i32,
drivingStyle_: i32) -> ResultOf_start_playback_recorded_vehicle_with_flags {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut flags_ = flags_;
let mut time_ = time_;
let mut drivingStyle_ = drivingStyle_;
        let success = sdk::natives::start_playback_recorded_vehicle_with_flags(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
flags_,
time_,
drivingStyle_,
        );
        
        
        ResultOf_start_playback_recorded_vehicle_with_flags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra(&self, vehicle_: u32,
extraId_: i32,
disable_: bool) -> ResultOf_set_vehicle_extra {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut extraId_ = extraId_;
let mut disable_ = disable_;
        let success = sdk::natives::set_vehicle_extra(
            vehicle_,
extraId_,
disable_,
        );
        
        
        ResultOf_set_vehicle_extra {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cop_vehicle_in_area_3d(&self, x1_: f32,
x2_: f32,
y1_: f32,
y2_: f32,
z1_: f32,
z2_: f32) -> ResultOf_is_cop_vehicle_in_area_3d {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut x2_ = x2_;
let mut y1_ = y1_;
let mut y2_ = y2_;
let mut z1_ = z1_;
let mut z2_ = z2_;
        let success = sdk::natives::is_cop_vehicle_in_area_3d(
            &mut native_return,
x1_,
x2_,
y1_,
y2_,
z1_,
z2_,
        );
        let native_return = native_return;
        
        ResultOf_is_cop_vehicle_in_area_3d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_car(&self, model_: u32) -> ResultOf_is_this_model_a_car {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_car(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_car {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_resist_to_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_heli_resist_to_explosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_resist_to_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_heli_resist_to_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native__get_vehicle_trailer_parent_vehicle(&self, trailer_: u32) -> ResultOf__get_vehicle_trailer_parent_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut trailer_ = trailer_;
        let success = sdk::natives::_get_vehicle_trailer_parent_vehicle(
            &mut native_return,
trailer_,
        );
        let native_return = native_return;
        
        ResultOf__get_vehicle_trailer_parent_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_trains(&self, toggle_: bool) -> ResultOf_set_random_trains {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_trains(
            toggle_,
        );
        
        
        ResultOf_set_random_trains {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_ramming_soop_or_ramp(&self, p0_: i32,
p1_: i32) -> ResultOf_set_allow_ramming_soop_or_ramp {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_allow_ramming_soop_or_ramp(
            p0_,
p1_,
        );
        
        
        ResultOf_set_allow_ramming_soop_or_ramp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_color_2(&self, vehicle_: u32,
paintType_: i32,
color_: i32) -> ResultOf_get_vehicle_mod_color_2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paintType_ = Default::default();
let mut color_ = Default::default();
        let success = sdk::natives::get_vehicle_mod_color_2(
            &mut paintType_,
&mut color_,
vehicle_,
        );
        let paintType_ = paintType_;
let color_ = color_;
        
        ResultOf_get_vehicle_mod_color_2 {
            success,
            ret: (),
            paintType_,
color_
        }
    }
}

    fn native_set_vehicle_mod_color_2(&self, vehicle_: u32,
paintType_: i32,
color_: i32) -> ResultOf_set_vehicle_mod_color_2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paintType_ = paintType_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_mod_color_2(
            vehicle_,
paintType_,
color_,
        );
        
        
        ResultOf_set_vehicle_mod_color_2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_weapon_restricted_ammo(&self, vehicle_: u32,
weaponIndex_: i32) -> ResultOf_get_vehicle_weapon_restricted_ammo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut weaponIndex_ = weaponIndex_;
        let success = sdk::natives::get_vehicle_weapon_restricted_ammo(
            &mut native_return,
vehicle_,
weaponIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_weapon_restricted_ammo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_asset(&self, vehicleHash_: u32,
vehicleAsset_: i32) -> ResultOf_request_vehicle_asset {
    unsafe {
        let mut vehicleHash_ = vehicleHash_;
let mut vehicleAsset_ = vehicleAsset_;
        let success = sdk::natives::request_vehicle_asset(
            vehicleHash_,
vehicleAsset_,
        );
        
        
        ResultOf_request_vehicle_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_rocket_boost_active(&self, vehicle_: u32,
active_: bool) -> ResultOf_set_rocket_boost_active {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut active_ = active_;
        let success = sdk::natives::set_rocket_boost_active(
            vehicle_,
active_,
        );
        
        
        ResultOf_set_rocket_boost_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ped_stand_on_top(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_ped_stand_on_top {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_ped_stand_on_top(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_ped_stand_on_top {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_detonation_mode(&self, toggle_: bool) -> ResultOf_set_vehicle_detonation_mode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_detonation_mode(
            toggle_,
        );
        
        
        ResultOf_set_vehicle_detonation_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_stuck_check(&self, vehicle_: u32) -> ResultOf_remove_vehicle_stuck_check {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_stuck_check(
            vehicle_,
        );
        
        
        ResultOf_remove_vehicle_stuck_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_custom_secondary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_vehicle_custom_secondary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_vehicle_custom_secondary_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_vehicle_custom_secondary_colour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_suppress_neons_on_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_suppress_neons_on_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::suppress_neons_on_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_suppress_neons_on_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_ped_in_vehicle_seat(&self, vehicle_: u32,
seatIndex_: i32) -> ResultOf_get_last_ped_in_vehicle_seat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::get_last_ped_in_vehicle_seat(
            &mut native_return,
vehicle_,
seatIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_last_ped_in_vehicle_seat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_boats(&self, toggle_: bool) -> ResultOf_set_random_boats {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_boats(
            toggle_,
        );
        
        
        ResultOf_set_random_boats {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_toggle_mod_on(&self, vehicle_: u32,
modType_: i32) -> ResultOf_is_toggle_mod_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::is_toggle_mod_on(
            &mut native_return,
vehicle_,
modType_,
        );
        let native_return = native_return;
        
        ResultOf_is_toggle_mod_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_hydraulic_suspension_raise_factor(&self, vehicle_: u32,
wheelId_: i32,
value_: f32) -> ResultOf_set_hydraulic_suspension_raise_factor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelId_ = wheelId_;
let mut value_ = value_;
        let success = sdk::natives::set_hydraulic_suspension_raise_factor(
            vehicle_,
wheelId_,
value_,
        );
        
        
        ResultOf_set_hydraulic_suspension_raise_factor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_car_high_speed_bump_severity_multiplier(&self, multiplier_: f32) -> ResultOf_set_car_high_speed_bump_severity_multiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_car_high_speed_bump_severity_multiplier(
            multiplier_,
        );
        
        
        ResultOf_set_car_high_speed_bump_severity_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_is_dummy(&self, p0_: i32) -> ResultOf_get_vehicle_is_dummy {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_vehicle_is_dummy(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_is_dummy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_roll_down_windows(&self, vehicle_: u32) -> ResultOf_roll_down_windows {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::roll_down_windows(
            vehicle_,
        );
        
        
        ResultOf_roll_down_windows {
            success,
            ret: (),
            
        }
    }
}

    fn native__set_bounds_affect_water_probes(&self, vehicle_: u32,
toggle_: bool) -> ResultOf__set_bounds_affect_water_probes {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::_set_bounds_affect_water_probes(
            vehicle_,
toggle_,
        );
        
        
        ResultOf__set_bounds_affect_water_probes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_planes_small_pitch_change(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ignore_planes_small_pitch_change {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ignore_planes_small_pitch_change(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ignore_planes_small_pitch_change {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_weapon_can_target_objects(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_weapon_can_target_objects {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_weapon_can_target_objects(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_weapon_can_target_objects {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_bobblehead_velocity(&self, x_: f32,
y_: f32,
p2_: f32) -> ResultOf_set_vehicle_bobblehead_velocity {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_bobblehead_velocity(
            x_,
y_,
p2_,
        );
        
        
        ResultOf_set_vehicle_bobblehead_velocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_attached_to_cargobob(&self, cargobob_: u32) -> ResultOf_get_vehicle_attached_to_cargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::get_vehicle_attached_to_cargobob(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_attached_to_cargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_rope_length_for_cargobob(&self, cargobob_: u32,
length1_: f32,
length2_: f32,
p3_: bool) -> ResultOf_set_pickup_rope_length_for_cargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut length1_ = length1_;
let mut length2_ = length2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_pickup_rope_length_for_cargobob(
            cargobob_,
length1_,
length2_,
p3_,
        );
        
        
        ResultOf_set_pickup_rope_length_for_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_legs_lowered(&self, vehicle_: u32) -> ResultOf_set_trailer_legs_lowered {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_trailer_legs_lowered(
            vehicle_,
        );
        
        
        ResultOf_set_trailer_legs_lowered {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery_count(&self, vehicle_: u32) -> ResultOf_get_vehicle_livery_count {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery_count(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_livery_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_bomb_bay_doors(&self, vehicle_: u32) -> ResultOf_open_bomb_bay_doors {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::open_bomb_bay_doors(
            vehicle_,
        );
        
        
        ResultOf_open_bomb_bay_doors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_interiorlight(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_force_interiorlight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_force_interiorlight(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_force_interiorlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_unpause_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOf_unpause_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::unpause_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOf_unpause_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_fix_link_matrices(&self, vehicle_: u32) -> ResultOf_set_force_fix_link_matrices {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_force_fix_link_matrices(
            vehicle_,
        );
        
        
        ResultOf_set_force_fix_link_matrices {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_more_restrictive_spawn_checks(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_use_more_restrictive_spawn_checks {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_use_more_restrictive_spawn_checks(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_use_more_restrictive_spawn_checks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mod_text_label(&self, vehicle_: u32,
modType_: i32,
modValue_: i32) -> ResultOf_get_mod_text_label {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modValue_ = modValue_;
        let success = sdk::natives::get_mod_text_label(
            native_return.pin_mut(),
vehicle_,
modType_,
modValue_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_mod_text_label {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_handler_frame_lined_up_with_container(&self, vehicle_: u32,
entity_: u32) -> ResultOf_is_handler_frame_lined_up_with_container {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::is_handler_frame_lined_up_with_container(
            &mut native_return,
vehicle_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_is_handler_frame_lined_up_with_container {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_gravity(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_gravity {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_gravity(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_gravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_height_map_avoidance(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_disable_height_map_avoidance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_disable_height_map_avoidance(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_disable_height_map_avoidance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_undriveable(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_undriveable {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_undriveable(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_undriveable {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_roof(&self, vehicle_: u32) -> ResultOf_does_vehicle_have_roof {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_roof(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_have_roof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_fullbeam(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_fullbeam {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_fullbeam(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_fullbeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_automatically_attaches(&self, vehicle_: u32,
p1_: bool,
p2_: i32) -> ResultOf_set_vehicle_automatically_attaches {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_automatically_attaches(
            &mut native_return,
vehicle_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_set_vehicle_automatically_attaches {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_acceleration(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_acceleration {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_acceleration(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_acceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_neon_enabled(&self, vehicle_: u32,
index_: i32) -> ResultOf_get_vehicle_neon_enabled {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut index_ = index_;
        let success = sdk::natives::get_vehicle_neon_enabled(
            &mut native_return,
vehicle_,
index_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_neon_enabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_sprayable(&self, vehicle_: u32) -> ResultOf_is_vehicle_sprayable {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_sprayable(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_sprayable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_find_spawn_coordinates_for_heli(&self, ped_: u32) -> ResultOf_find_spawn_coordinates_for_heli {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
        let success = sdk::natives::find_spawn_coordinates_for_heli(
            native_return.pin_mut(),
ped_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_find_spawn_coordinates_for_heli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_neon_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_vehicle_neon_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_neon_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_vehicle_neon_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hydraulic_vehicle_state(&self, vehicle_: u32,
state_: i32) -> ResultOf_set_hydraulic_vehicle_state {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_hydraulic_vehicle_state(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_hydraulic_vehicle_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_retracting_weapon_blades(&self, toggle_: bool) -> ResultOf_set_disable_retracting_weapon_blades {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_retracting_weapon_blades(
            toggle_,
        );
        
        
        ResultOf_set_disable_retracting_weapon_blades {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_dirt_level(&self, vehicle_: u32) -> ResultOf_get_vehicle_dirt_level {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_dirt_level(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_dirt_level {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_lock_on_target(&self, vehicle_: u32,
entity_: u32) -> ResultOf_get_vehicle_lock_on_target {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = Default::default();
        let success = sdk::natives::get_vehicle_lock_on_target(
            &mut native_return,
&mut entity_,
vehicle_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOf_get_vehicle_lock_on_target {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_raise_convertible_roof(&self, vehicle_: u32,
instantlyRaise_: bool) -> ResultOf_raise_convertible_roof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut instantlyRaise_ = instantlyRaise_;
        let success = sdk::natives::raise_convertible_roof(
            vehicle_,
instantlyRaise_,
        );
        
        
        ResultOf_raise_convertible_roof {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_sinks_when_wrecked(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_boat_sinks_when_wrecked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_sinks_when_wrecked(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_boat_sinks_when_wrecked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_steering_bias_scalar(&self, p0_: i32,
p1_: f32) -> ResultOf_set_vehicle_steering_bias_scalar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_steering_bias_scalar(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_steering_bias_scalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_trailer(&self, vehicle_: u32) -> ResultOf_detach_vehicle_from_trailer {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_trailer(
            vehicle_,
        );
        
        
        ResultOf_detach_vehicle_from_trailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_car_has_jump(&self, vehicle_: u32) -> ResultOf_get_car_has_jump {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_car_has_jump(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_car_has_jump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_number_plate_text_index(&self, vehicle_: u32,
plateIndex_: i32) -> ResultOf_set_vehicle_number_plate_text_index {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut plateIndex_ = plateIndex_;
        let success = sdk::natives::set_vehicle_number_plate_text_index(
            vehicle_,
plateIndex_,
        );
        
        
        ResultOf_set_vehicle_number_plate_text_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_modifier_value(&self, vehicle_: u32,
modType_: i32,
modIndex_: i32) -> ResultOf_get_vehicle_mod_modifier_value {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
let mut modIndex_ = modIndex_;
        let success = sdk::natives::get_vehicle_mod_modifier_value(
            &mut native_return,
vehicle_,
modType_,
modIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod_modifier_value {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_vehicle_range_multiplier_this_frame(&self, value_: f32) -> ResultOf_set_ambient_vehicle_range_multiplier_this_frame {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_ambient_vehicle_range_multiplier_this_frame(
            value_,
        );
        
        
        ResultOf_set_ambient_vehicle_range_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_secondary_colour_custom(&self, vehicle_: u32) -> ResultOf_get_is_vehicle_secondary_colour_custom {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_secondary_colour_custom(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_vehicle_secondary_colour_custom {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_vehicle_engine_fires(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_vehicle_engine_fires {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_engine_fires(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_vehicle_engine_fires {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_instant_fill_vehicle_population_finished(&self, ) -> ResultOf_has_instant_fill_vehicle_population_finished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_instant_fill_vehicle_population_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_has_instant_fill_vehicle_population_finished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lower_forklift_forks(&self, forklift_: u32) -> ResultOf_lower_forklift_forks {
    unsafe {
        let mut forklift_ = forklift_;
        let success = sdk::natives::lower_forklift_forks(
            forklift_,
        );
        
        
        ResultOf_lower_forklift_forks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_of_vehicle_recording_id_at_time(&self, id_: i32,
time_: f32) -> ResultOf_get_position_of_vehicle_recording_id_at_time {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
let mut time_ = time_;
        let success = sdk::natives::get_position_of_vehicle_recording_id_at_time(
            native_return.pin_mut(),
id_,
time_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_position_of_vehicle_recording_id_at_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_vehicle_doors(&self, vehicle_: u32) -> ResultOf_get_number_of_vehicle_doors {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_number_of_vehicle_doors(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_number_of_vehicle_doors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_brake_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_brake_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_brake_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_brake_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_mod(&self, vehicle_: u32,
modType_: i32) -> ResultOf_remove_vehicle_mod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::remove_vehicle_mod(
            vehicle_,
modType_,
        );
        
        
        ResultOf_remove_vehicle_mod {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_strong_axles(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_has_strong_axles {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_strong_axles(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_has_strong_axles {
            success,
            ret: (),
            
        }
    }
}

    fn native_modify_vehicle_top_speed(&self, vehicle_: u32,
value_: f32) -> ResultOf_modify_vehicle_top_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::modify_vehicle_top_speed(
            vehicle_,
value_,
        );
        
        
        ResultOf_modify_vehicle_top_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_lod_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOf_set_vehicle_lod_multiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_lod_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOf_set_vehicle_lod_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_shut(&self, vehicle_: u32,
doorId_: i32,
closeInstantly_: bool) -> ResultOf_set_vehicle_door_shut {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut closeInstantly_ = closeInstantly_;
        let success = sdk::natives::set_vehicle_door_shut(
            vehicle_,
doorId_,
closeInstantly_,
        );
        
        
        ResultOf_set_vehicle_door_shut {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_time_in_playback_recorded_vehicle(&self, vehicle_: u32,
time_: f32) -> ResultOf_skip_time_in_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
        let success = sdk::natives::skip_time_in_playback_recorded_vehicle(
            vehicle_,
time_,
        );
        
        
        ResultOf_skip_time_in_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_can_pickup_entity_that_has_pick_up_disabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_heli_can_pickup_entity_that_has_pick_up_disabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_can_pickup_entity_that_has_pick_up_disabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_heli_can_pickup_entity_that_has_pick_up_disabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_jetski(&self, model_: u32) -> ResultOf_is_this_model_a_jetski {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_jetski(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_jetski {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_deformation_fixed(&self, vehicle_: u32) -> ResultOf_set_vehicle_deformation_fixed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_deformation_fixed(
            vehicle_,
        );
        
        
        ResultOf_set_vehicle_deformation_fixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_exist_with_decorator(&self, decorator_: Option<String>) -> ResultOf_does_vehicle_exist_with_decorator {
    unsafe {
        let mut native_return = Default::default();
let mut decorator_ = sdk_helpers::create_c_string_ptr(decorator_);
        let success = sdk::natives::does_vehicle_exist_with_decorator(
            &mut native_return,
decorator_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_exist_with_decorator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_number_plate_text(&self, vehicle_: u32,
plateText_: Option<String>) -> ResultOf_set_vehicle_number_plate_text {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut plateText_ = sdk_helpers::create_c_string_ptr(plateText_);
        let success = sdk::natives::set_vehicle_number_plate_text(
            vehicle_,
plateText_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_vehicle_number_plate_text {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_legs_raised(&self, vehicle_: u32) -> ResultOf_set_trailer_legs_raised {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_trailer_legs_raised(
            vehicle_,
        );
        
        
        ResultOf_set_trailer_legs_raised {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_damage_scales(&self, vehicle_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOf_set_vehicle_damage_scales {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_vehicle_damage_scales(
            vehicle_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_vehicle_damage_scales {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_non_script_players(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_doors_locked_for_non_script_players {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_non_script_players(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_doors_locked_for_non_script_players {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pick_up_rope_for_cargobob(&self, cargobob_: u32) -> ResultOf_remove_pick_up_rope_for_cargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
        let success = sdk::natives::remove_pick_up_rope_for_cargobob(
            cargobob_,
        );
        
        
        ResultOf_remove_pick_up_rope_for_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_automatic_crash_task(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_automatic_crash_task {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_automatic_crash_task(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_automatic_crash_task {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_hd_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_force_hd_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_hd_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_force_hd_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_engine_can_degrade(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_engine_can_degrade {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_engine_can_degrade(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_engine_can_degrade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_causes_swerving(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_causes_swerving {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_causes_swerving(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_causes_swerving {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_searchlight(&self, vehicle_: u32) -> ResultOf_does_vehicle_have_searchlight {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_searchlight(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_does_vehicle_have_searchlight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_attached_to_cargobob(&self, p0_: i32) -> ResultOf_get_entity_attached_to_cargobob {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_entity_attached_to_cargobob(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_attached_to_cargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_shunt_on_stick(&self, toggle_: bool) -> ResultOf_set_vehicle_shunt_on_stick {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_shunt_on_stick(
            toggle_,
        );
        
        
        ResultOf_set_vehicle_shunt_on_stick {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_phone_explosive_device(&self, vehicle_: u32) -> ResultOf_add_vehicle_phone_explosive_device {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::add_vehicle_phone_explosive_device(
            vehicle_,
        );
        
        
        ResultOf_add_vehicle_phone_explosive_device {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_kers_allowed(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_kers_allowed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_kers_allowed(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_kers_allowed {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_sub_throttle_for_time(&self, vehicle_: u32,
p1_: f32,
p2_: f32) -> ResultOf_force_sub_throttle_for_time {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::force_sub_throttle_for_time(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_force_sub_throttle_for_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_active(&self, cargobob_: u32,
isActive_: bool) -> ResultOf_set_cargobob_pickup_magnet_active {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut isActive_ = isActive_;
        let success = sdk::natives::set_cargobob_pickup_magnet_active(
            cargobob_,
isActive_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_active {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_generator_area_of_interest(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOf_set_vehicle_generator_area_of_interest {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_vehicle_generator_area_of_interest(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOf_set_vehicle_generator_area_of_interest {
            success,
            ret: (),
            
        }
    }
}

    fn native_have_vehicle_mods_streamed_in(&self, vehicle_: u32) -> ResultOf_have_vehicle_mods_streamed_in {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::have_vehicle_mods_streamed_in(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_have_vehicle_mods_streamed_in {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_flight_nozzle_position_immediate(&self, vehicle_: u32,
angle_: f32) -> ResultOf_set_vehicle_flight_nozzle_position_immediate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut angle_ = angle_;
        let success = sdk::natives::set_vehicle_flight_nozzle_position_immediate(
            vehicle_,
angle_,
        );
        
        
        ResultOf_set_vehicle_flight_nozzle_position_immediate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_landing_gear_state(&self, vehicle_: u32) -> ResultOf_get_landing_gear_state {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_landing_gear_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_landing_gear_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_all_vehicles(&self, vehsStruct_: i32) -> ResultOf_get_all_vehicles {
    unsafe {
        let mut native_return = Default::default();
let mut vehsStruct_ = Default::default();
        let success = sdk::natives::get_all_vehicles(
            &mut native_return,
&mut vehsStruct_,
        );
        let native_return = native_return;
let vehsStruct_ = vehsStruct_;
        
        ResultOf_get_all_vehicles {
            success,
            ret: native_return,
            vehsStruct_
        }
    }
}

    fn native_set_vehicle_countermeasure_ammo(&self, vehicle_: u32,
counterMeasureCount_: i32) -> ResultOf_set_vehicle_countermeasure_ammo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut counterMeasureCount_ = counterMeasureCount_;
        let success = sdk::natives::set_vehicle_countermeasure_ammo(
            vehicle_,
counterMeasureCount_,
        );
        
        
        ResultOf_set_vehicle_countermeasure_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_set_ambient_mode(&self, vehicle_: u32,
p1_: bool,
p2_: bool) -> ResultOf_set_cargobob_pickup_magnet_set_ambient_mode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_cargobob_pickup_magnet_set_ambient_mode(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_set_ambient_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_act_as_if_has_siren_on(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_act_as_if_has_siren_on {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_act_as_if_has_siren_on(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_act_as_if_has_siren_on {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_vehicle_horn(&self, vehicle_: u32,
duration_: i32,
mode_: u32,
forever_: bool) -> ResultOf_start_vehicle_horn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut duration_ = duration_;
let mut mode_ = mode_;
let mut forever_ = forever_;
        let success = sdk::natives::start_vehicle_horn(
            vehicle_,
duration_,
mode_,
forever_,
        );
        
        
        ResultOf_start_vehicle_horn {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_plate_type(&self, vehicle_: u32) -> ResultOf_get_vehicle_plate_type {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_plate_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_plate_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bike_on_stand(&self, vehicle_: u32,
x_: f32,
y_: f32) -> ResultOf_set_bike_on_stand {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_bike_on_stand(
            vehicle_,
x_,
y_,
        );
        
        
        ResultOf_set_bike_on_stand {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_vehicle_window_tints(&self, ) -> ResultOf_get_num_vehicle_window_tints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_vehicle_window_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_num_vehicle_window_tints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vehicle_set_jet_wash_force_enabled(&self, p0_: i32) -> ResultOf_vehicle_set_jet_wash_force_enabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::vehicle_set_jet_wash_force_enabled(
            p0_,
        );
        
        
        ResultOf_vehicle_set_jet_wash_force_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_in_car_mod_shop(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_in_car_mod_shop {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_in_car_mod_shop(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_in_car_mod_shop {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_script_vehicle_generator(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p4_: f32,
p5_: f32,
modelHash_: u32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: bool,
p12_: bool,
p13_: bool,
p14_: bool,
p15_: bool,
p16_: i32) -> ResultOf_create_script_vehicle_generator {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut modelHash_ = modelHash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
let mut p14_ = p14_;
let mut p15_ = p15_;
let mut p16_ = p16_;
        let success = sdk::natives::create_script_vehicle_generator(
            &mut native_return,
x_,
y_,
z_,
heading_,
p4_,
p5_,
modelHash_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
p14_,
p15_,
p16_,
        );
        let native_return = native_return;
        
        ResultOf_create_script_vehicle_generator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_smash_vehicle_window(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_smash_vehicle_window {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::smash_vehicle_window(
            vehicle_,
windowIndex_,
        );
        
        
        ResultOf_smash_vehicle_window {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_big_vehicle(&self, vehicle_: u32) -> ResultOf_is_big_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_big_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_big_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_blip_throttle_randomly(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_blip_throttle_randomly {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_blip_throttle_randomly(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_blip_throttle_randomly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_in_vehicle_clipset_hash_for_seat(&self, vehicle_: u32,
p1_: i32) -> ResultOf_get_in_vehicle_clipset_hash_for_seat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_in_vehicle_clipset_hash_for_seat(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_in_vehicle_clipset_hash_for_seat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_plane(&self, model_: u32) -> ResultOf_is_this_model_a_plane {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_plane(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_plane {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_traction(&self, vehicle_: u32) -> ResultOf_get_vehicle_max_traction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_traction(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_max_traction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_blades_full_speed(&self, vehicle_: u32) -> ResultOf_set_heli_blades_full_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_heli_blades_full_speed(
            vehicle_,
        );
        
        
        ResultOf_set_heli_blades_full_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_falloff(&self, cargobob_: u32,
p1_: f32) -> ResultOf_set_cargobob_pickup_magnet_falloff {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_falloff(
            cargobob_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_falloff {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colours(&self, vehicle_: u32,
colorPrimary_: i32,
colorSecondary_: i32) -> ResultOf_get_vehicle_colours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut colorPrimary_ = Default::default();
let mut colorSecondary_ = Default::default();
        let success = sdk::natives::get_vehicle_colours(
            &mut colorPrimary_,
&mut colorSecondary_,
vehicle_,
        );
        let colorPrimary_ = colorPrimary_;
let colorSecondary_ = colorSecondary_;
        
        ResultOf_get_vehicle_colours {
            success,
            ret: (),
            colorPrimary_,
colorSecondary_
        }
    }
}

    fn native_is_this_model_an_amphibious_quadbike(&self, model_: u32) -> ResultOf_is_this_model_an_amphibious_quadbike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_an_amphibious_quadbike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_an_amphibious_quadbike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_damage(&self, vehicle_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
damage_: f32,
radius_: f32,
focusOnModel_: bool) -> ResultOf_set_vehicle_damage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut damage_ = damage_;
let mut radius_ = radius_;
let mut focusOnModel_ = focusOnModel_;
        let success = sdk::natives::set_vehicle_damage(
            vehicle_,
xOffset_,
yOffset_,
zOffset_,
damage_,
radius_,
focusOnModel_,
        );
        
        
        ResultOf_set_vehicle_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_cargobob(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOf_attach_entity_to_cargobob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_to_cargobob(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOf_attach_entity_to_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_shunting(&self, vehicle_: u32) -> ResultOf_get_is_vehicle_shunting {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_shunting(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_vehicle_shunting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fleeing_vehicles_use_switched_off_nodes(&self, p0_: i32) -> ResultOf_set_fleeing_vehicles_use_switched_off_nodes {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_fleeing_vehicles_use_switched_off_nodes(
            p0_,
        );
        
        
        ResultOf_set_fleeing_vehicles_use_switched_off_nodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_all_players(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_doors_locked_for_all_players {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_all_players(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_doors_locked_for_all_players {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_wheels_can_break_off_when_blow_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_wheels_can_break_off_when_blow_up {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_wheels_can_break_off_when_blow_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_wheels_can_break_off_when_blow_up {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ceiling_height(&self, vehicle_: u32,
height_: f32) -> ResultOf_set_vehicle_ceiling_height {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut height_ = height_;
        let success = sdk::natives::set_vehicle_ceiling_height(
            vehicle_,
height_,
        );
        
        
        ResultOf_set_vehicle_ceiling_height {
            success,
            ret: (),
            
        }
    }
}

    fn native_generate_vehicle_creation_pos_from_paths(&self, outVec_: Option<shared::Vector3>,
p1_: i32,
outVec1_: Option<shared::Vector3>,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32) -> ResultOf_generate_vehicle_creation_pos_from_paths {
    unsafe {
        let mut native_return = Default::default();
let mut outVec_ = sdk_helpers::create_vector3_ptr(outVec_);
let mut p1_ = p1_;
let mut outVec1_ = sdk_helpers::create_vector3_ptr(outVec1_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::generate_vehicle_creation_pos_from_paths(
            &mut native_return,
outVec_.pin_mut(),
outVec1_.pin_mut(),
p1_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
let outVec_ = sdk_helpers::read_cpp_vector3(outVec_);
let outVec1_ = sdk_helpers::read_cpp_vector3(outVec1_);
        
        ResultOf_generate_vehicle_creation_pos_from_paths {
            success,
            ret: native_return,
            outVec_,
outVec1_
        }
    }
}

    fn native_network_cap_empty_crowding_vehicles_removal(&self, p0_: i32) -> ResultOf_network_cap_empty_crowding_vehicles_removal {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_cap_empty_crowding_vehicles_removal(
            p0_,
        );
        
        
        ResultOf_network_cap_empty_crowding_vehicles_removal {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_playback_to_use_ai(&self, vehicle_: u32,
drivingStyle_: i32) -> ResultOf_set_playback_to_use_ai {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut drivingStyle_ = drivingStyle_;
        let success = sdk::natives::set_playback_to_use_ai(
            vehicle_,
drivingStyle_,
        );
        
        
        ResultOf_set_playback_to_use_ai {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_mod_colors(&self, paintType_: i32,
p1_: bool) -> ResultOf_get_num_mod_colors {
    unsafe {
        let mut native_return = Default::default();
let mut paintType_ = paintType_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_mod_colors(
            &mut native_return,
paintType_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_mod_colors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_latched(&self, vehicle_: u32,
doorId_: i32,
p2_: bool,
p3_: bool,
p4_: bool) -> ResultOf_set_vehicle_door_latched {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_vehicle_door_latched(
            vehicle_,
doorId_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOf_set_vehicle_door_latched {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_livery2(&self, vehicle_: u32,
livery_: i32) -> ResultOf_set_vehicle_livery2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut livery_ = livery_;
        let success = sdk::natives::set_vehicle_livery2(
            vehicle_,
livery_,
        );
        
        
        ResultOf_set_vehicle_livery2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_vehicle_high_detail_model(&self, vehicle_: u32) -> ResultOf_request_vehicle_high_detail_model {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::request_vehicle_high_detail_model(
            vehicle_,
        );
        
        
        ResultOf_request_vehicle_high_detail_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_window(&self, vehicle_: u32,
windowIndex_: i32) -> ResultOf_remove_vehicle_window {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut windowIndex_ = windowIndex_;
        let success = sdk::natives::remove_vehicle_window(
            vehicle_,
windowIndex_,
        );
        
        
        ResultOf_remove_vehicle_window {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_parachute_model_tint_index(&self, vehicle_: u32,
textureVariation_: i32) -> ResultOf_vehicle_set_parachute_model_tint_index {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut textureVariation_ = textureVariation_;
        let success = sdk::natives::vehicle_set_parachute_model_tint_index(
            vehicle_,
textureVariation_,
        );
        
        
        ResultOf_vehicle_set_parachute_model_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_in_submarine_mode(&self, vehicle_: u32) -> ResultOf_is_vehicle_in_submarine_mode {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_submarine_mode(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_in_submarine_mode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_number_of_passengers(&self, vehicle_: u32) -> ResultOf_get_vehicle_max_number_of_passengers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_number_of_passengers(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_max_number_of_passengers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_adjust_ground_clearance(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_can_adjust_ground_clearance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_can_adjust_ground_clearance(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_can_adjust_ground_clearance {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_right_vehicle_headlight_damaged(&self, vehicle_: u32) -> ResultOf_get_is_right_vehicle_headlight_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_right_vehicle_headlight_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_right_vehicle_headlight_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_enveff_scale(&self, vehicle_: u32) -> ResultOf_get_vehicle_enveff_scale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_enveff_scale(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_enveff_scale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_can_deploy_parachute(&self, vehicle_: u32) -> ResultOf_get_vehicle_can_deploy_parachute {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_can_deploy_parachute(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_can_deploy_parachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_visible(&self, vehicle_: u32) -> ResultOf_is_vehicle_visible {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_visible(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_visible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_train_speed(&self, train_: u32,
speed_: f32) -> ResultOf_set_train_speed {
    unsafe {
        let mut train_ = train_;
let mut speed_ = speed_;
        let success = sdk::natives::set_train_speed(
            train_,
speed_,
        );
        
        
        ResultOf_set_train_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_phone_explosive_device(&self, ) -> ResultOf_clear_vehicle_phone_explosive_device {
    unsafe {
        
        let success = sdk::natives::clear_vehicle_phone_explosive_device(
            
        );
        
        
        ResultOf_clear_vehicle_phone_explosive_device {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dip_straight_down_when_crashing_plane(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_dip_straight_down_when_crashing_plane {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dip_straight_down_when_crashing_plane(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_dip_straight_down_when_crashing_plane {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_not_stealable_ambiently(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_not_stealable_ambiently {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_not_stealable_ambiently(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_not_stealable_ambiently {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_goon_boss_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_goon_boss_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_goon_boss_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_goon_boss_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_forward_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_vehicle_forward_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_forward_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_vehicle_forward_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_to_end_and_stop_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOf_skip_to_end_and_stop_playback_recorded_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::skip_to_end_and_stop_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOf_skip_to_end_and_stop_playback_recorded_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_train(&self, model_: u32) -> ResultOf_is_this_model_a_train {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_train(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_train {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heli_tail_boom_health(&self, vehicle_: u32) -> ResultOf_get_heli_tail_boom_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_tail_boom_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_heli_tail_boom_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicle_asset(&self, vehicleAsset_: i32) -> ResultOf_remove_vehicle_asset {
    unsafe {
        let mut vehicleAsset_ = vehicleAsset_;
        let success = sdk::natives::remove_vehicle_asset(
            vehicleAsset_,
        );
        
        
        ResultOf_remove_vehicle_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_last_driven_vehicle(&self, vehicle_: u32) -> ResultOf_set_last_driven_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_last_driven_vehicle(
            vehicle_,
        );
        
        
        ResultOf_set_last_driven_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_turbulence_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOf_set_plane_turbulence_multiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_plane_turbulence_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOf_set_plane_turbulence_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_train(&self, train_: u32) -> ResultOf_is_mission_train {
    unsafe {
        let mut native_return = Default::default();
let mut train_ = train_;
        let success = sdk::natives::is_mission_train(
            &mut native_return,
train_,
        );
        let native_return = native_return;
        
        ResultOf_is_mission_train {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_braking(&self, vehicle_: u32) -> ResultOf_get_vehicle_max_braking {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_braking(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_max_braking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_vehicle_from_any_cargobob(&self, vehicle_: u32) -> ResultOf_detach_vehicle_from_any_cargobob {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_any_cargobob(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_detach_vehicle_from_any_cargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_vehicle_engine_running(&self, vehicle_: u32) -> ResultOf_get_is_vehicle_engine_running {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_engine_running(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_vehicle_engine_running {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_tombstone(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_hide_tombstone {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_tombstone(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_hide_tombstone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_heli_tail_rotor_health(&self, vehicle_: u32) -> ResultOf_get_heli_tail_rotor_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_tail_rotor_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_heli_tail_rotor_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_playback_using_ai_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOf_is_playback_using_ai_going_on_for_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_playback_using_ai_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_playback_using_ai_going_on_for_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_folding_wings_deployed(&self, vehicle_: u32) -> ResultOf_are_folding_wings_deployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_folding_wings_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_are_folding_wings_deployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_entity_from_cargobob(&self, cargobob_: u32,
entity_: u32) -> ResultOf_detach_entity_from_cargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
let mut entity_ = entity_;
        let success = sdk::natives::detach_entity_from_cargobob(
            &mut native_return,
cargobob_,
entity_,
        );
        let native_return = native_return;
        
        ResultOf_detach_entity_from_cargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_vehicle(&self, modelHash_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
isNetwork_: bool,
bScriptHostVeh_: bool,
p7_: bool) -> ResultOf_create_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut isNetwork_ = isNetwork_;
let mut bScriptHostVeh_ = bScriptHostVeh_;
let mut p7_ = p7_;
        let success = sdk::natives::create_vehicle(
            &mut native_return,
modelHash_,
x_,
y_,
z_,
heading_,
isNetwork_,
bScriptHostVeh_,
p7_,
        );
        let native_return = native_return;
        
        ResultOf_create_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOf_request_vehicle_recording {
    unsafe {
        let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::request_vehicle_recording(
            recording_,
script_.as_ref().unwrap(),
        );
        
        
        ResultOf_request_vehicle_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_collision_upon_creation(&self, vehicle_: u32,
disable_: bool) -> ResultOf_set_vehicle_disable_collision_upon_creation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut disable_ = disable_;
        let success = sdk::natives::set_vehicle_disable_collision_upon_creation(
            vehicle_,
disable_,
        );
        
        
        ResultOf_set_vehicle_disable_collision_upon_creation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_afterburner(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_force_afterburner {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_force_afterburner(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_force_afterburner {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_superdummy(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_disable_superdummy {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_superdummy(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_disable_superdummy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_exclusive_driver_of_vehicle(&self, ped_: u32,
vehicle_: u32,
outIndex_: i32) -> ResultOf_is_ped_exclusive_driver_of_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut outIndex_ = Default::default();
        let success = sdk::natives::is_ped_exclusive_driver_of_vehicle(
            &mut native_return,
&mut outIndex_,
ped_,
vehicle_,
        );
        let native_return = native_return;
let outIndex_ = outIndex_;
        
        ResultOf_is_ped_exclusive_driver_of_vehicle {
            success,
            ret: native_return,
            outIndex_
        }
    }
}

    fn native_is_boat_anchored(&self, vehicle_: u32) -> ResultOf_is_boat_anchored {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_boat_anchored(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_boat_anchored {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_on_all_wheels(&self, vehicle_: u32) -> ResultOf_is_vehicle_on_all_wheels {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_on_all_wheels(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_on_all_wheels {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_display_name_from_vehicle_model(&self, modelHash_: u32) -> ResultOf_get_display_name_from_vehicle_model {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_display_name_from_vehicle_model(
            native_return.pin_mut(),
modelHash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_display_name_from_vehicle_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_deploy_folding_wings(&self, vehicle_: u32,
deploy_: bool,
p2_: bool) -> ResultOf_set_deploy_folding_wings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut deploy_ = deploy_;
let mut p2_ = p2_;
        let success = sdk::natives::set_deploy_folding_wings(
            vehicle_,
deploy_,
p2_,
        );
        
        
        ResultOf_set_deploy_folding_wings {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_ambient_vehicles_to_avoid_adverse_conditions(&self, vehicle_: u32) -> ResultOf_allow_ambient_vehicles_to_avoid_adverse_conditions {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::allow_ambient_vehicles_to_avoid_adverse_conditions(
            vehicle_,
        );
        
        
        ResultOf_allow_ambient_vehicles_to_avoid_adverse_conditions {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_low_lod_anchor_mode(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_force_low_lod_anchor_mode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_force_low_lod_anchor_mode(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_force_low_lod_anchor_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_driven_vehicle(&self, ) -> ResultOf_get_last_driven_vehicle {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_last_driven_vehicle(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_last_driven_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_clear_freeze_waiting_on_collision_once_player_enters(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_clear_freeze_waiting_on_collision_once_player_enters {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_clear_freeze_waiting_on_collision_once_player_enters(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_clear_freeze_waiting_on_collision_once_player_enters {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_light_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOf_set_vehicle_light_multiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_light_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOf_set_vehicle_light_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_variation(&self, vehicle_: u32,
modType_: i32) -> ResultOf_get_vehicle_mod_variation {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::get_vehicle_mod_variation(
            &mut native_return,
vehicle_,
modType_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod_variation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOf_set_random_vehicle_density_multiplier_this_frame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_random_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOf_set_random_vehicle_density_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_wheel_type(&self, vehicle_: u32) -> ResultOf_get_vehicle_wheel_type {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_wheel_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_wheel_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color_1_name(&self, vehicle_: u32,
p1_: bool) -> ResultOf_get_vehicle_mod_color_1_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_vehicle_mod_color_1_name(
            native_return.pin_mut(),
vehicle_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_vehicle_mod_color_1_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stuck_on_roof(&self, vehicle_: u32) -> ResultOf_is_vehicle_stuck_on_roof {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stuck_on_roof(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_stuck_on_roof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_livery_name(&self, vehicle_: u32,
liveryIndex_: i32) -> ResultOf_get_livery_name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut liveryIndex_ = liveryIndex_;
        let success = sdk::natives::get_livery_name(
            native_return.pin_mut(),
vehicle_,
liveryIndex_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_livery_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_vehicle_back_bumper_in_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_get_random_vehicle_back_bumper_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_random_vehicle_back_bumper_in_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_vehicle_back_bumper_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_bike(&self, model_: u32) -> ResultOf_is_this_model_a_bike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_bike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_bike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_cheat_power_increase(&self, vehicle_: u32,
value_: f32) -> ResultOf_set_vehicle_cheat_power_increase {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_cheat_power_increase(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_vehicle_cheat_power_increase {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tyre_smoke_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_set_vehicle_tyre_smoke_color {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_tyre_smoke_color(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOf_set_vehicle_tyre_smoke_color {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_exclusive_driver(&self, vehicle_: u32,
ped_: u32,
index_: i32) -> ResultOf_set_vehicle_exclusive_driver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_vehicle_exclusive_driver(
            vehicle_,
ped_,
index_,
        );
        
        
        ResultOf_set_vehicle_exclusive_driver {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_siren_audio_on(&self, vehicle_: u32) -> ResultOf_is_vehicle_siren_audio_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_siren_audio_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_siren_audio_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_indicator_lights(&self, vehicle_: u32,
turnSignal_: i32,
toggle_: bool) -> ResultOf_set_vehicle_indicator_lights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut turnSignal_ = turnSignal_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_indicator_lights(
            vehicle_,
turnSignal_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_indicator_lights {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_tyre_smoke_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_vehicle_tyre_smoke_color {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_vehicle_tyre_smoke_color(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_vehicle_tyre_smoke_color {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_get_vehicle_custom_primary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_vehicle_custom_primary_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_vehicle_custom_primary_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_vehicle_custom_primary_colour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_doors_locked(&self, vehicle_: u32,
doorLockStatus_: i32) -> ResultOf_set_vehicle_doors_locked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorLockStatus_ = doorLockStatus_;
        let success = sdk::natives::set_vehicle_doors_locked(
            vehicle_,
doorLockStatus_,
        );
        
        
        ResultOf_set_vehicle_doors_locked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_desired_z_cruise_speed_for_landing(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_use_desired_z_cruise_speed_for_landing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_desired_z_cruise_speed_for_landing(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_use_desired_z_cruise_speed_for_landing {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_upsidedown_check(&self, vehicle_: u32) -> ResultOf_add_vehicle_upsidedown_check {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::add_vehicle_upsidedown_check(
            vehicle_,
        );
        
        
        ResultOf_add_vehicle_upsidedown_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_extra_colour_6(&self, vehicle_: u32,
color_: i32) -> ResultOf_get_vehicle_extra_colour_6 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = Default::default();
        let success = sdk::natives::get_vehicle_extra_colour_6(
            &mut color_,
vehicle_,
        );
        let color_ = color_;
        
        ResultOf_get_vehicle_extra_colour_6 {
            success,
            ret: (),
            color_
        }
    }
}

    fn native_set_vehicle_body_health(&self, vehicle_: u32,
value_: f32) -> ResultOf_set_vehicle_body_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_body_health(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_vehicle_body_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_team(&self, vehicle_: u32,
team_: i32,
toggle_: bool) -> ResultOf_set_vehicle_doors_locked_for_team {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_team(
            vehicle_,
team_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_doors_locked_for_team {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_vehicle_goto_plane_min_height_above_terrain(&self, plane_: u32,
height_: i32) -> ResultOf_set_task_vehicle_goto_plane_min_height_above_terrain {
    unsafe {
        let mut plane_ = plane_;
let mut height_ = height_;
        let success = sdk::natives::set_task_vehicle_goto_plane_min_height_above_terrain(
            plane_,
height_,
        );
        
        
        ResultOf_set_task_vehicle_goto_plane_min_height_above_terrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_door_damaged(&self, veh_: u32,
doorID_: i32) -> ResultOf_is_vehicle_door_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut veh_ = veh_;
let mut doorID_ = doorID_;
        let success = sdk::natives::is_vehicle_door_damaged(
            &mut native_return,
veh_,
doorID_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_door_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_health_percentage(&self, vehicle_: u32,
maxEngineHealth_: f32,
maxPetrolTankHealth_: f32,
maxBodyHealth_: f32,
maxMainRotorHealth_: f32,
maxTailRotorHealth_: f32,
maxUnkHealth_: f32) -> ResultOf_get_vehicle_health_percentage {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut maxEngineHealth_ = maxEngineHealth_;
let mut maxPetrolTankHealth_ = maxPetrolTankHealth_;
let mut maxBodyHealth_ = maxBodyHealth_;
let mut maxMainRotorHealth_ = maxMainRotorHealth_;
let mut maxTailRotorHealth_ = maxTailRotorHealth_;
let mut maxUnkHealth_ = maxUnkHealth_;
        let success = sdk::natives::get_vehicle_health_percentage(
            &mut native_return,
vehicle_,
maxEngineHealth_,
maxPetrolTankHealth_,
maxBodyHealth_,
maxMainRotorHealth_,
maxTailRotorHealth_,
maxUnkHealth_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_health_percentage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_keep_engine_on_when_abandoned(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_keep_engine_on_when_abandoned {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_keep_engine_on_when_abandoned(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_keep_engine_on_when_abandoned {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_vehicle_alarm(&self, vehicle_: u32) -> ResultOf_start_vehicle_alarm {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::start_vehicle_alarm(
            vehicle_,
        );
        
        
        ResultOf_start_vehicle_alarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_lights_state(&self, vehicle_: u32,
lightsOn_: bool,
highbeamsOn_: bool) -> ResultOf_get_vehicle_lights_state {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut lightsOn_ = Default::default();
let mut highbeamsOn_ = Default::default();
        let success = sdk::natives::get_vehicle_lights_state(
            &mut native_return,
&mut lightsOn_,
&mut highbeamsOn_,
vehicle_,
        );
        let native_return = native_return;
let lightsOn_ = lightsOn_;
let highbeamsOn_ = highbeamsOn_;
        
        ResultOf_get_vehicle_lights_state {
            success,
            ret: native_return,
            lightsOn_,
highbeamsOn_
        }
    }
}

    fn native_set_vehicle_neon_index_colour(&self, vehicle_: u32,
index_: i32) -> ResultOf_set_vehicle_neon_index_colour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
        let success = sdk::natives::set_vehicle_neon_index_colour(
            vehicle_,
index_,
        );
        
        
        ResultOf_set_vehicle_neon_index_colour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_carjack_mission_removal_parameters(&self, p0_: i32,
p1_: i32) -> ResultOf_set_carjack_mission_removal_parameters {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_carjack_mission_removal_parameters(
            p0_,
p1_,
        );
        
        
        ResultOf_set_carjack_mission_removal_parameters {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_tyre_burst(&self, vehicle_: u32,
wheelID_: i32,
completely_: bool) -> ResultOf_is_vehicle_tyre_burst {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheelID_ = wheelID_;
let mut completely_ = completely_;
        let success = sdk::natives::is_vehicle_tyre_burst(
            &mut native_return,
vehicle_,
wheelID_,
completely_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_tyre_burst {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_explode_vehicle(&self, vehicle_: u32,
isAudible_: bool,
isInvisible_: bool) -> ResultOf_explode_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut isAudible_ = isAudible_;
let mut isInvisible_ = isInvisible_;
        let success = sdk::natives::explode_vehicle(
            vehicle_,
isAudible_,
isInvisible_,
        );
        
        
        ResultOf_explode_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_boat_capsized(&self, vehicle_: u32) -> ResultOf_get_is_boat_capsized {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_boat_capsized(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_boat_capsized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_max_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_vehicle_max_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_max_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_vehicle_max_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_uses_mp_player_damage_multiplier(&self, p0_: i32,
p1_: i32) -> ResultOf_set_vehicle_uses_mp_player_damage_multiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_uses_mp_player_damage_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOf_set_vehicle_uses_mp_player_damage_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_in_vehicle_seat(&self, vehicle_: u32,
seatIndex_: i32,
p2_: bool) -> ResultOf_get_ped_in_vehicle_seat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_in_vehicle_seat(
            &mut native_return,
vehicle_,
seatIndex_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_in_vehicle_seat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_train_as_no_longer_needed(&self, train_: u32,
p1_: bool) -> ResultOf_set_mission_train_as_no_longer_needed {
    unsafe {
        let mut train_ = Default::default();
let mut p1_ = p1_;
        let success = sdk::natives::set_mission_train_as_no_longer_needed(
            &mut train_,
p1_,
        );
        let train_ = train_;
        
        ResultOf_set_mission_train_as_no_longer_needed {
            success,
            ret: (),
            train_
        }
    }
}

    fn native_set_vehicle_interiorlight(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_interiorlight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_interiorlight(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_interiorlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_lights_cutoff_distance_tweak(&self, distance_: f32) -> ResultOf_set_lights_cutoff_distance_tweak {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::set_lights_cutoff_distance_tweak(
            distance_,
        );
        
        
        ResultOf_set_lights_cutoff_distance_tweak {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_heli_part_broken(&self, vehicle_: u32,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_is_heli_part_broken {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_heli_part_broken(
            &mut native_return,
vehicle_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_is_heli_part_broken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_has_parachute(&self, vehicle_: u32) -> ResultOf_get_vehicle_has_parachute {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_parachute(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_has_parachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_strength(&self, cargobob_: u32,
strength_: f32) -> ResultOf_set_cargobob_pickup_magnet_strength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut strength_ = strength_;
        let success = sdk::natives::set_cargobob_pickup_magnet_strength(
            cargobob_,
strength_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_does_vehicle_have_damage_decals(&self, vehicle_: u32) -> ResultOf_get_does_vehicle_have_damage_decals {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_does_vehicle_have_damage_decals(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_does_vehicle_have_damage_decals {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_players_last_vehicle(&self, vehicle_: u32) -> ResultOf_set_players_last_vehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_players_last_vehicle(
            vehicle_,
        );
        
        
        ResultOf_set_players_last_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_wrecked(&self, vehicle_: u32) -> ResultOf_set_boat_wrecked {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_boat_wrecked(
            vehicle_,
        );
        
        
        ResultOf_set_boat_wrecked {
            success,
            ret: (),
            
        }
    }
}

    fn native_transform_to_submarine(&self, vehicle_: u32,
noAnimation_: bool) -> ResultOf_transform_to_submarine {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut noAnimation_ = noAnimation_;
        let success = sdk::natives::transform_to_submarine(
            &mut native_return,
vehicle_,
noAnimation_,
        );
        let native_return = native_return;
        
        ResultOf_transform_to_submarine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_will_force_other_vehicles_to_stop(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_will_force_other_vehicles_to_stop {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_will_force_other_vehicles_to_stop(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_will_force_other_vehicles_to_stop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_individual_doors_locked(&self, vehicle_: u32,
doorId_: i32,
doorLockStatus_: i32) -> ResultOf_set_vehicle_individual_doors_locked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut doorLockStatus_ = doorLockStatus_;
        let success = sdk::natives::set_vehicle_individual_doors_locked(
            vehicle_,
doorId_,
doorLockStatus_,
        );
        
        
        ResultOf_set_vehicle_individual_doors_locked {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_bicycle(&self, model_: u32) -> ResultOf_is_this_model_a_bicycle {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_bicycle(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_bicycle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_braking_max_mods(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_max_braking_max_mods {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_max_braking_max_mods(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_max_braking_max_mods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_name_debug(&self, vehicle_: u32,
name_: Option<String>) -> ResultOf_set_vehicle_name_debug {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_vehicle_name_debug(
            vehicle_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOf_set_vehicle_name_debug {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entry_point_position(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_get_entry_point_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::get_entry_point_position(
            native_return.pin_mut(),
vehicle_,
doorId_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_entry_point_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_rope_length_without_creating_rope_for_cargobob(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOf_set_pickup_rope_length_without_creating_rope_for_cargobob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_pickup_rope_length_without_creating_rope_for_cargobob(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOf_set_pickup_rope_length_without_creating_rope_for_cargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_searchlight_on(&self, vehicle_: u32) -> ResultOf_is_vehicle_searchlight_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_searchlight_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_searchlight_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_vehicle_generators_active_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
toggle_: bool,
p7_: bool) -> ResultOf_set_all_vehicle_generators_active_in_area {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut toggle_ = toggle_;
let mut p7_ = p7_;
        let success = sdk::natives::set_all_vehicle_generators_active_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
toggle_,
p7_,
        );
        
        
        ResultOf_set_all_vehicle_generators_active_in_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_swing_boat_boom_freely(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_swing_boat_boom_freely {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::swing_boat_boom_freely(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_swing_boat_boom_freely {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hydraulic_wheel_state(&self, vehicle_: u32,
wheelId_: i32,
state_: i32,
value_: f32,
p4_: i32) -> ResultOf_set_hydraulic_wheel_state {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelId_ = wheelId_;
let mut state_ = state_;
let mut value_ = value_;
let mut p4_ = p4_;
        let success = sdk::natives::set_hydraulic_wheel_state(
            vehicle_,
wheelId_,
state_,
value_,
p4_,
        );
        
        
        ResultOf_set_hydraulic_wheel_state {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_tow_truck(&self, towTruck_: u32,
vehicle_: u32) -> ResultOf_detach_vehicle_from_tow_truck {
    unsafe {
        let mut towTruck_ = towTruck_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_tow_truck(
            towTruck_,
vehicle_,
        );
        
        
        ResultOf_detach_vehicle_from_tow_truck {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_broken_parts_dont_affect_ai_handling(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_broken_parts_dont_affect_ai_handling {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_broken_parts_dont_affect_ai_handling(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_broken_parts_dont_affect_ai_handling {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_player_light_settings(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_use_player_light_settings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_player_light_settings(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_use_player_light_settings {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_engine_health(&self, vehicle_: u32) -> ResultOf_get_vehicle_engine_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_engine_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_engine_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_remove_aggressive_carjack_mission(&self, p0_: i32) -> ResultOf_set_vehicle_remove_aggressive_carjack_mission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_remove_aggressive_carjack_mission(
            p0_,
        );
        
        
        ResultOf_set_vehicle_remove_aggressive_carjack_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_limit_speed_when_player_inactive(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_limit_speed_when_player_inactive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_limit_speed_when_player_inactive(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_limit_speed_when_player_inactive {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_upsidedown_check(&self, vehicle_: u32) -> ResultOf_remove_vehicle_upsidedown_check {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_upsidedown_check(
            vehicle_,
        );
        
        
        ResultOf_remove_vehicle_upsidedown_check {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_front_bumper_in_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOf_get_random_vehicle_front_bumper_in_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_random_vehicle_front_bumper_in_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOf_get_random_vehicle_front_bumper_in_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_submarine_crush_depths(&self, vehicle_: u32,
p1_: bool,
depth1_: f32,
depth2_: f32,
depth3_: f32) -> ResultOf_set_submarine_crush_depths {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut depth1_ = depth1_;
let mut depth2_ = depth2_;
let mut depth3_ = depth3_;
        let success = sdk::natives::set_submarine_crush_depths(
            vehicle_,
p1_,
depth1_,
depth2_,
depth3_,
        );
        
        
        ResultOf_set_submarine_crush_depths {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_turret_hidden(&self, vehicle_: u32,
index_: i32,
toggle_: bool) -> ResultOf_set_turret_hidden {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_turret_hidden(
            vehicle_,
index_,
toggle_,
        );
        
        
        ResultOf_set_turret_hidden {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_submarine_neurtal_buoyancy(&self, p0_: i32,
p1_: i32) -> ResultOf_force_submarine_neurtal_buoyancy {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_submarine_neurtal_buoyancy(
            p0_,
p1_,
        );
        
        
        ResultOf_force_submarine_neurtal_buoyancy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_being_brought_to_halt(&self, vehicle_: u32) -> ResultOf_is_vehicle_being_brought_to_halt {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_being_brought_to_halt(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_being_brought_to_halt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_flying_vehicle_model_agility(&self, modelHash_: u32) -> ResultOf_get_flying_vehicle_model_agility {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_flying_vehicle_model_agility(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_flying_vehicle_model_agility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_nitrous_level(&self, vehicle_: u32,
toggle_: bool,
level_: f32,
power_: f32,
rechargeTime_: f32,
disableSound_: bool) -> ResultOf_set_override_nitrous_level {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut level_ = level_;
let mut power_ = power_;
let mut rechargeTime_ = rechargeTime_;
let mut disableSound_ = disableSound_;
        let success = sdk::natives::set_override_nitrous_level(
            vehicle_,
toggle_,
level_,
power_,
rechargeTime_,
disableSound_,
        );
        
        
        ResultOf_set_override_nitrous_level {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tyre_maximum_grip_difference_due_to_wear_rate(&self, vehicle_: u32,
wheelIndex_: i32,
multiplier_: f32) -> ResultOf_set_tyre_maximum_grip_difference_due_to_wear_rate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheelIndex_ = wheelIndex_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_maximum_grip_difference_due_to_wear_rate(
            vehicle_,
wheelIndex_,
multiplier_,
        );
        
        
        ResultOf_set_tyre_maximum_grip_difference_due_to_wear_rate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_individual_door_lock_status(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_get_vehicle_individual_door_lock_status {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::get_vehicle_individual_door_lock_status(
            &mut native_return,
vehicle_,
doorId_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_individual_door_lock_status {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_number_of_parked_vehicles(&self, value_: i32) -> ResultOf_set_number_of_parked_vehicles {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_number_of_parked_vehicles(
            value_,
        );
        
        
        ResultOf_set_number_of_parked_vehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_uses_large_rear_ramp(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_uses_large_rear_ramp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_uses_large_rear_ramp(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_uses_large_rear_ramp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_attached_pick_up_hook_position(&self, cargobob_: u32) -> ResultOf_get_attached_pick_up_hook_position {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::get_attached_pick_up_hook_position(
            native_return.pin_mut(),
cargobob_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_attached_pick_up_hook_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_alarm(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_vehicle_alarm {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_alarm(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_vehicle_alarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vertical_flight_mode_transition(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_disable_vertical_flight_mode_transition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vertical_flight_mode_transition(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_disable_vertical_flight_mode_transition {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_in_garage_area(&self, garageName_: Option<String>,
vehicle_: u32) -> ResultOf_is_vehicle_in_garage_area {
    unsafe {
        let mut native_return = Default::default();
let mut garageName_ = sdk_helpers::create_c_string_ptr(garageName_);
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_garage_area(
            &mut native_return,
garageName_.as_ref().unwrap(),
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_in_garage_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cargobob_pickup_rope_damping_multiplier(&self, p0_: i32,
p1_: i32) -> ResultOf_set_cargobob_pickup_rope_damping_multiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_rope_damping_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_rope_damping_multiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ready_for_cleanup(&self, p0_: i32) -> ResultOf_set_vehicle_ready_for_cleanup {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_ready_for_cleanup(
            p0_,
        );
        
        
        ResultOf_set_vehicle_ready_for_cleanup {
            success,
            ret: (),
            
        }
    }
}

    fn native_control_landing_gear(&self, vehicle_: u32,
state_: i32) -> ResultOf_control_landing_gear {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::control_landing_gear(
            vehicle_,
state_,
        );
        
        
        ResultOf_control_landing_gear {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_doors_when_no_longer_needed(&self, vehicle_: u32) -> ResultOf_lock_doors_when_no_longer_needed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::lock_doors_when_no_longer_needed(
            vehicle_,
        );
        
        
        ResultOf_lock_doors_when_no_longer_needed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_are_bomb_bay_doors_open(&self, aircraft_: u32) -> ResultOf_get_are_bomb_bay_doors_open {
    unsafe {
        let mut native_return = Default::default();
let mut aircraft_ = aircraft_;
        let success = sdk::natives::get_are_bomb_bay_doors_open(
            &mut native_return,
aircraft_,
        );
        let native_return = native_return;
        
        ResultOf_get_are_bomb_bay_doors_open {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_vehicle_from_any_tow_truck(&self, vehicle_: u32) -> ResultOf_detach_vehicle_from_any_tow_truck {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_any_tow_truck(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_detach_vehicle_from_any_tow_truck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOf_set_special_flight_mode_ratio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::set_special_flight_mode_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOf_set_special_flight_mode_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_of_vehicle_recording_at_time(&self, recording_: i32,
time_: f32,
script_: Option<String>) -> ResultOf_get_position_of_vehicle_recording_at_time {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut recording_ = recording_;
let mut time_ = time_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_position_of_vehicle_recording_at_time(
            native_return.pin_mut(),
recording_,
time_,
script_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_position_of_vehicle_recording_at_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_extra_turned_on(&self, vehicle_: u32,
extraId_: i32) -> ResultOf_is_vehicle_extra_turned_on {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extraId_ = extraId_;
        let success = sdk::natives::is_vehicle_extra_turned_on(
            &mut native_return,
vehicle_,
extraId_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_extra_turned_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_avoid_player_vehicle_riot_van_mission(&self, p0_: i32) -> ResultOf_set_vehicle_avoid_player_vehicle_riot_van_mission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_avoid_player_vehicle_riot_van_mission(
            p0_,
        );
        
        
        ResultOf_set_vehicle_avoid_player_vehicle_riot_van_mission {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_override_side_ratio(&self, p0_: i32,
p1_: i32) -> ResultOf_vehicle_set_override_side_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_override_side_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_vehicle_set_override_side_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_attached_to_cargobob(&self, cargobob_: u32,
vehicleAttached_: u32) -> ResultOf_is_vehicle_attached_to_cargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
let mut vehicleAttached_ = vehicleAttached_;
        let success = sdk::natives::is_vehicle_attached_to_cargobob(
            &mut native_return,
cargobob_,
vehicleAttached_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_attached_to_cargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_damage_with_picked_up_entity(&self, p0_: i32,
p1_: i32) -> ResultOf_set_disable_damage_with_picked_up_entity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_damage_with_picked_up_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_set_disable_damage_with_picked_up_entity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_random_trains_this_frame(&self, toggle_: bool) -> ResultOf_set_disable_random_trains_this_frame {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_random_trains_this_frame(
            toggle_,
        );
        
        
        ResultOf_set_disable_random_trains_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_is_mercenary(&self, vehicle_: u32) -> ResultOf_get_vehicle_is_mercenary {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_is_mercenary(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_is_mercenary {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_broken(&self, vehicle_: u32,
doorId_: i32,
deleteDoor_: bool) -> ResultOf_set_vehicle_door_broken {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut deleteDoor_ = deleteDoor_;
        let success = sdk::natives::set_vehicle_door_broken(
            vehicle_,
doorId_,
deleteDoor_,
        );
        
        
        ResultOf_set_vehicle_door_broken {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_explodes_on_explosion_damage_at_zero_body_health(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_explodes_on_explosion_damage_at_zero_body_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_explodes_on_explosion_damage_at_zero_body_health(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_explodes_on_explosion_damage_at_zero_body_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_stuck_timer(&self, vehicle_: u32,
nullAttributes_: i32) -> ResultOf_reset_vehicle_stuck_timer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut nullAttributes_ = nullAttributes_;
        let success = sdk::natives::reset_vehicle_stuck_timer(
            vehicle_,
nullAttributes_,
        );
        
        
        ResultOf_reset_vehicle_stuck_timer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_muted_sirens(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_has_muted_sirens {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_muted_sirens(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_has_muted_sirens {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_vehicle_generator(&self, vehicleGenerator_: i32,
enabled_: bool) -> ResultOf_set_script_vehicle_generator {
    unsafe {
        let mut vehicleGenerator_ = vehicleGenerator_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_script_vehicle_generator(
            vehicleGenerator_,
enabled_,
        );
        
        
        ResultOf_set_script_vehicle_generator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_random_boats_mp(&self, toggle_: bool) -> ResultOf_set_random_boats_mp {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_boats_mp(
            toggle_,
        );
        
        
        ResultOf_set_random_boats_mp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_flight_nozzle_position(&self, plane_: u32) -> ResultOf_get_vehicle_flight_nozzle_position {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::get_vehicle_flight_nozzle_position(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_flight_nozzle_position {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_dial(&self, vehicle_: u32) -> ResultOf_request_vehicle_dial {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::request_vehicle_dial(
            vehicle_,
        );
        
        
        ResultOf_request_vehicle_dial {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dont_allow_player_to_enter_vehicle_if_locked_for_player(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_dont_allow_player_to_enter_vehicle_if_locked_for_player {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dont_allow_player_to_enter_vehicle_if_locked_for_player(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_dont_allow_player_to_enter_vehicle_if_locked_for_player {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_max_traction(&self, vehicleClass_: i32) -> ResultOf_get_vehicle_class_max_traction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleClass_ = vehicleClass_;
        let success = sdk::natives::get_vehicle_class_max_traction(
            &mut native_return,
vehicleClass_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_max_traction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_braking(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_max_braking {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_max_braking(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_max_braking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_has_retractable_wheels(&self, vehicle_: u32) -> ResultOf_get_has_retractable_wheels {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_retractable_wheels(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_has_retractable_wheels {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_heli(&self, model_: u32) -> ResultOf_is_this_model_a_heli {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_heli(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOf_is_this_model_a_heli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_steer_for_buildings(&self, vehicle_: u32,
p1_: i32) -> ResultOf_set_vehicle_steer_for_buildings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_steer_for_buildings(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_steer_for_buildings {
            success,
            ret: (),
            
        }
    }
}

    fn native_lower_convertible_roof(&self, vehicle_: u32,
instantlyLower_: bool) -> ResultOf_lower_convertible_roof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut instantlyLower_ = instantlyLower_;
        let success = sdk::natives::lower_convertible_roof(
            vehicle_,
instantlyLower_,
        );
        
        
        ResultOf_lower_convertible_roof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_from_name(&self, modelHash_: u32) -> ResultOf_get_vehicle_class_from_name {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_class_from_name(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_class_from_name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_size(&self, vehicle_: u32,
out1_: Option<shared::Vector3>,
out2_: Option<shared::Vector3>) -> ResultOf_get_vehicle_size {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut out1_ = sdk_helpers::create_vector3_ptr(out1_);
let mut out2_ = sdk_helpers::create_vector3_ptr(out2_);
        let success = sdk::natives::get_vehicle_size(
            out1_.pin_mut(),
out2_.pin_mut(),
vehicle_,
        );
        let out1_ = sdk_helpers::read_cpp_vector3(out1_);
let out2_ = sdk_helpers::read_cpp_vector3(out2_);
        
        ResultOf_get_vehicle_size {
            success,
            ret: (),
            out1_,
out2_
        }
    }
}

    fn native_set_vehicle_active_during_playback(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_active_during_playback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_active_during_playback(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_active_during_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_rocket_boost_recharge_time(&self, vehicle_: u32,
seconds_: f32) -> ResultOf_set_script_rocket_boost_recharge_time {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut seconds_ = seconds_;
        let success = sdk::natives::set_script_rocket_boost_recharge_time(
            vehicle_,
seconds_,
        );
        
        
        ResultOf_set_script_rocket_boost_recharge_time {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_last_driven_vehicle(&self, ) -> ResultOf_clear_last_driven_vehicle {
    unsafe {
        
        let success = sdk::natives::clear_last_driven_vehicle(
            
        );
        
        
        ResultOf_clear_last_driven_vehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_cutscene_wheel_compression(&self, p0_: u32,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOf_set_vehicle_use_cutscene_wheel_compression {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_vehicle_use_cutscene_wheel_compression(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_set_vehicle_use_cutscene_wheel_compression {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_used_for_pilot_school(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_used_for_pilot_school {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_used_for_pilot_school(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_used_for_pilot_school {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_resist_to_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_plane_resist_to_explosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_plane_resist_to_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_plane_resist_to_explosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_formation_leader(&self, ) -> ResultOf_reset_formation_leader {
    unsafe {
        
        let success = sdk::natives::reset_formation_leader(
            
        );
        
        
        ResultOf_reset_formation_leader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_set_targeted_mode(&self, vehicle_: u32,
cargobob_: u32) -> ResultOf_set_cargobob_pickup_magnet_set_targeted_mode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
        let success = sdk::natives::set_cargobob_pickup_magnet_set_targeted_mode(
            vehicle_,
cargobob_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_set_targeted_mode {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_combat_avoidance_area(&self, p0_: i32) -> ResultOf_remove_vehicle_combat_avoidance_area {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_vehicle_combat_avoidance_area(
            p0_,
        );
        
        
        ResultOf_remove_vehicle_combat_avoidance_area {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_turret_seat(&self, vehicle_: u32,
seatIndex_: i32) -> ResultOf_is_turret_seat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::is_turret_seat(
            &mut native_return,
vehicle_,
seatIndex_,
        );
        let native_return = native_return;
        
        ResultOf_is_turret_seat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pop_off_vehicle_roof_with_impulse(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_pop_off_vehicle_roof_with_impulse {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::pop_off_vehicle_roof_with_impulse(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOf_pop_off_vehicle_roof_with_impulse {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_vehicle_mods(&self, vehicle_: u32,
modType_: i32) -> ResultOf_get_num_vehicle_mods {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut modType_ = modType_;
        let success = sdk::natives::get_num_vehicle_mods(
            &mut native_return,
vehicle_,
modType_,
        );
        let native_return = native_return;
        
        ResultOf_get_num_vehicle_mods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_boat_remains_anchored_while_player_is_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_boat_remains_anchored_while_player_is_driver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_remains_anchored_while_player_is_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_boat_remains_anchored_while_player_is_driver {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_xenon_light_color_index(&self, vehicle_: u32,
colorIndex_: i32) -> ResultOf_set_vehicle_xenon_light_color_index {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut colorIndex_ = colorIndex_;
        let success = sdk::natives::set_vehicle_xenon_light_color_index(
            vehicle_,
colorIndex_,
        );
        
        
        ResultOf_set_vehicle_xenon_light_color_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_has_landing_gear(&self, vehicle_: u32) -> ResultOf_get_vehicle_has_landing_gear {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_landing_gear(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_has_landing_gear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_copy_vehicle_damages(&self, sourceVehicle_: u32,
targetVehicle_: u32) -> ResultOf_copy_vehicle_damages {
    unsafe {
        let mut sourceVehicle_ = sourceVehicle_;
let mut targetVehicle_ = targetVehicle_;
        let success = sdk::natives::copy_vehicle_damages(
            sourceVehicle_,
targetVehicle_,
        );
        
        
        ResultOf_copy_vehicle_damages {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_cause_of_destruction(&self, vehicle_: u32) -> ResultOf_get_vehicle_cause_of_destruction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_cause_of_destruction(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_cause_of_destruction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heli_main_rotor_health(&self, vehicle_: u32) -> ResultOf_get_heli_main_rotor_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_main_rotor_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_heli_main_rotor_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_brake(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_brake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_brake(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_brake {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aircraft_pilot_skill_noise_scalar(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_aircraft_pilot_skill_noise_scalar {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_aircraft_pilot_skill_noise_scalar(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_aircraft_pilot_skill_noise_scalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_turret_movement(&self, vehicle_: u32,
turretId_: i32) -> ResultOf_set_disable_turret_movement {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut turretId_ = turretId_;
        let success = sdk::natives::set_disable_turret_movement(
            vehicle_,
turretId_,
        );
        
        
        ResultOf_set_disable_turret_movement {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_homing_lockon_state(&self, vehicle_: u32) -> ResultOf_get_vehicle_homing_lockon_state {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_homing_lockon_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_homing_lockon_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_vehicle_slipstreaming(&self, toggle_: bool) -> ResultOf_set_enable_vehicle_slipstreaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_vehicle_slipstreaming(
            toggle_,
        );
        
        
        ResultOf_set_enable_vehicle_slipstreaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_turbulence_scalar(&self, vehicle_: u32,
p1_: f32) -> ResultOf_set_heli_turbulence_scalar {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_heli_turbulence_scalar(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_heli_turbulence_scalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_attached_to_trailer(&self, vehicle_: u32) -> ResultOf_is_vehicle_attached_to_trailer {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_attached_to_trailer(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_is_vehicle_attached_to_trailer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_boat_low_lod_anchor_distance(&self, vehicle_: u32,
value_: f32) -> ResultOf_set_boat_low_lod_anchor_distance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_boat_low_lod_anchor_distance(
            vehicle_,
value_,
        );
        
        
        ResultOf_set_boat_low_lod_anchor_distance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_may_be_used_by_goto_point_any_means(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_vehicle_may_be_used_by_goto_point_any_means {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_may_be_used_by_goto_point_any_means(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_vehicle_may_be_used_by_goto_point_any_means {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_has_vehicle_been_hit_by_shunt(&self, vehicle_: u32) -> ResultOf_get_has_vehicle_been_hit_by_shunt {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_vehicle_been_hit_by_shunt(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_has_vehicle_been_hit_by_shunt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color_1(&self, vehicle_: u32,
paintType_: i32,
color_: i32,
pearlescentColor_: i32) -> ResultOf_get_vehicle_mod_color_1 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paintType_ = Default::default();
let mut color_ = Default::default();
let mut pearlescentColor_ = Default::default();
        let success = sdk::natives::get_vehicle_mod_color_1(
            &mut paintType_,
&mut color_,
&mut pearlescentColor_,
vehicle_,
        );
        let paintType_ = paintType_;
let color_ = color_;
let pearlescentColor_ = pearlescentColor_;
        
        ResultOf_get_vehicle_mod_color_1 {
            success,
            ret: (),
            paintType_,
color_,
pearlescentColor_
        }
    }
}

    fn native_get_vehicle_bomb_ammo(&self, vehicle_: u32) -> ResultOf_get_vehicle_bomb_ammo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_bomb_ammo(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_bomb_ammo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_vehicle(&self, vehicle_: u32) -> ResultOf_delete_vehicle {
    unsafe {
        let mut vehicle_ = Default::default();
        let success = sdk::natives::delete_vehicle(
            &mut vehicle_,
        );
        let vehicle_ = vehicle_;
        
        ResultOf_delete_vehicle {
            success,
            ret: (),
            vehicle_
        }
    }
}

    fn native_set_parked_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOf_set_parked_vehicle_density_multiplier_this_frame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_parked_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOf_set_parked_vehicle_density_multiplier_this_frame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tyres_can_burst(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_tyres_can_burst {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_tyres_can_burst(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_tyres_can_burst {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_use_high_precision_train_blending(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_network_use_high_precision_train_blending {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_use_high_precision_train_blending(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_network_use_high_precision_train_blending {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_both_vehicle_headlights_damaged(&self, vehicle_: u32) -> ResultOf_get_both_vehicle_headlights_damaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_both_vehicle_headlights_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_both_vehicle_headlights_damaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tyre_burst(&self, vehicle_: u32,
index_: i32,
onRim_: bool,
p3_: f32) -> ResultOf_set_vehicle_tyre_burst {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut onRim_ = onRim_;
let mut p3_ = p3_;
        let success = sdk::natives::set_vehicle_tyre_burst(
            vehicle_,
index_,
onRim_,
p3_,
        );
        
        
        ResultOf_set_vehicle_tyre_burst {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_ignore_land_probes(&self, p0_: i32,
p1_: i32) -> ResultOf_set_boat_ignore_land_probes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_boat_ignore_land_probes(
            p0_,
p1_,
        );
        
        
        ResultOf_set_boat_ignore_land_probes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_pull_strength(&self, cargobob_: u32,
p1_: f32) -> ResultOf_set_cargobob_pickup_magnet_pull_strength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_pull_strength(
            cargobob_,
p1_,
        );
        
        
        ResultOf_set_cargobob_pickup_magnet_pull_strength {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_heli_explode_from_body_damage(&self, p0_: i32,
p1_: i32) -> ResultOf_set_disable_heli_explode_from_body_damage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_heli_explode_from_body_damage(
            p0_,
p1_,
        );
        
        
        ResultOf_set_disable_heli_explode_from_body_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colours_which_can_be_set(&self, vehicle_: u32) -> ResultOf_get_vehicle_colours_which_can_be_set {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_colours_which_can_be_set(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_colours_which_can_be_set {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detonate_vehicle_phone_explosive_device(&self, ) -> ResultOf_detonate_vehicle_phone_explosive_device {
    unsafe {
        
        let success = sdk::natives::detonate_vehicle_phone_explosive_device(
            
        );
        
        
        ResultOf_detonate_vehicle_phone_explosive_device {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_check_for_enough_room_for_ped(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_check_for_enough_room_for_ped {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_check_for_enough_room_for_ped(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_check_for_enough_room_for_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_ramp_impulse_scale(&self, vehicle_: u32,
impulseScale_: f32) -> ResultOf_set_script_ramp_impulse_scale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut impulseScale_ = impulseScale_;
        let success = sdk::natives::set_script_ramp_impulse_scale(
            vehicle_,
impulseScale_,
        );
        
        
        ResultOf_set_script_ramp_impulse_scale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_attached_to_tow_truck(&self, towTruck_: u32) -> ResultOf_get_entity_attached_to_tow_truck {
    unsafe {
        let mut native_return = Default::default();
let mut towTruck_ = towTruck_;
        let success = sdk::natives::get_entity_attached_to_tow_truck(
            &mut native_return,
towTruck_,
        );
        let native_return = native_return;
        
        ResultOf_get_entity_attached_to_tow_truck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_slipstreaming_should_time_out(&self, toggle_: bool) -> ResultOf_set_vehicle_slipstreaming_should_time_out {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_slipstreaming_should_time_out(
            toggle_,
        );
        
        
        ResultOf_set_vehicle_slipstreaming_should_time_out {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_higher_car_jump(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_use_higher_car_jump {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_higher_car_jump(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_use_higher_car_jump {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_primary_colour_custom(&self, vehicle_: u32) -> ResultOf_get_is_vehicle_primary_colour_custom {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_primary_colour_custom(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_vehicle_primary_colour_custom {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_vehcile_dynamic_ambient_scales(&self, vehicle_: u32,
p1_: i32,
p2_: i32) -> ResultOf_disable_vehcile_dynamic_ambient_scales {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::disable_vehcile_dynamic_ambient_scales(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOf_disable_vehcile_dynamic_ambient_scales {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rotation_of_vehicle_recording_id_at_time(&self, id_: i32,
time_: f32) -> ResultOf_get_rotation_of_vehicle_recording_id_at_time {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
let mut time_ = time_;
        let success = sdk::natives::get_rotation_of_vehicle_recording_id_at_time(
            native_return.pin_mut(),
id_,
time_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOf_get_rotation_of_vehicle_recording_id_at_time {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOf_remove_vehicle_recording {
    unsafe {
        let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::remove_vehicle_recording(
            recording_,
script_.as_ref().unwrap(),
        );
        
        
        ResultOf_remove_vehicle_recording {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_plate_text_index(&self, vehicle_: u32) -> ResultOf_get_vehicle_number_plate_text_index {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_number_plate_text_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_number_plate_text_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_allowed(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_special_flight_mode_allowed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_special_flight_mode_allowed(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_special_flight_mode_allowed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_out_of_control(&self, vehicle_: u32,
killDriver_: bool,
explodeOnImpact_: bool) -> ResultOf_set_vehicle_out_of_control {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut killDriver_ = killDriver_;
let mut explodeOnImpact_ = explodeOnImpact_;
        let success = sdk::natives::set_vehicle_out_of_control(
            vehicle_,
killDriver_,
explodeOnImpact_,
        );
        
        
        ResultOf_set_vehicle_out_of_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_explosion_break_off_parts(&self, ) -> ResultOf_disable_vehicle_explosion_break_off_parts {
    unsafe {
        
        let success = sdk::natives::disable_vehicle_explosion_break_off_parts(
            
        );
        
        
        ResultOf_disable_vehicle_explosion_break_off_parts {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_body_health(&self, vehicle_: u32) -> ResultOf_get_vehicle_body_health {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_body_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_body_health {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_control(&self, vehicle_: u32,
doorId_: i32,
speed_: i32,
angle_: f32) -> ResultOf_set_vehicle_door_control {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
let mut speed_ = speed_;
let mut angle_ = angle_;
        let success = sdk::natives::set_vehicle_door_control(
            vehicle_,
doorId_,
speed_,
angle_,
        );
        
        
        ResultOf_set_vehicle_door_control {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_convertible_roof(&self, vehicle_: u32,
p1_: bool) -> ResultOf_set_convertible_roof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_convertible_roof(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_convertible_roof {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_extenable_side_target_ratio(&self, p0_: i32,
p1_: i32) -> ResultOf_vehicle_set_extenable_side_target_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_extenable_side_target_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_vehicle_set_extenable_side_target_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOf_get_vehicle_color {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = Default::default();
let mut g_ = Default::default();
let mut b_ = Default::default();
        let success = sdk::natives::get_vehicle_color(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOf_get_vehicle_color {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_extra_colour_5(&self, vehicle_: u32,
color_: i32) -> ResultOf_set_vehicle_extra_colour_5 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_extra_colour_5(
            vehicle_,
color_,
        );
        
        
        ResultOf_set_vehicle_extra_colour_5 {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_estimated_max_speed(&self, modelHash_: u32) -> ResultOf_get_vehicle_model_estimated_max_speed {
    unsafe {
        let mut native_return = Default::default();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_vehicle_model_estimated_max_speed(
            &mut native_return,
modelHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_model_estimated_max_speed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_swing_boat_boom_to_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOf_swing_boat_boom_to_ratio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::swing_boat_boom_to_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOf_swing_boat_boom_to_ratio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_siren(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_siren {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_siren(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_siren {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_bomb_ammo(&self, vehicle_: u32,
bombCount_: i32) -> ResultOf_set_vehicle_bomb_ammo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut bombCount_ = bombCount_;
        let success = sdk::natives::set_vehicle_bomb_ammo(
            vehicle_,
bombCount_,
        );
        
        
        ResultOf_set_vehicle_bomb_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_weapon(&self, disabled_: bool,
weaponHash_: u32,
vehicle_: u32,
owner_: u32) -> ResultOf_disable_vehicle_weapon {
    unsafe {
        let mut disabled_ = disabled_;
let mut weaponHash_ = weaponHash_;
let mut vehicle_ = vehicle_;
let mut owner_ = owner_;
        let success = sdk::natives::disable_vehicle_weapon(
            disabled_,
weaponHash_,
vehicle_,
owner_,
        );
        
        
        ResultOf_disable_vehicle_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_script_vehicle_generator_exist(&self, vehicleGenerator_: i32) -> ResultOf_does_script_vehicle_generator_exist {
    unsafe {
        let mut native_return = Default::default();
let mut vehicleGenerator_ = vehicleGenerator_;
        let success = sdk::natives::does_script_vehicle_generator_exist(
            &mut native_return,
vehicleGenerator_,
        );
        let native_return = native_return;
        
        ResultOf_does_script_vehicle_generator_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheels_extended_instantly(&self, vehicle_: u32) -> ResultOf_set_wheels_extended_instantly {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_wheels_extended_instantly(
            vehicle_,
        );
        
        
        ResultOf_set_wheels_extended_instantly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_doors_locked_for_player(&self, vehicle_: u32,
player_: u32) -> ResultOf_get_vehicle_doors_locked_for_player {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut player_ = player_;
        let success = sdk::natives::get_vehicle_doors_locked_for_player(
            &mut native_return,
vehicle_,
player_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_doors_locked_for_player {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
modelHash_: u32,
flags_: i32) -> ResultOf_get_closest_vehicle {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut modelHash_ = modelHash_;
let mut flags_ = flags_;
        let success = sdk::natives::get_closest_vehicle(
            &mut native_return,
x_,
y_,
z_,
radius_,
modelHash_,
flags_,
        );
        let native_return = native_return;
        
        ResultOf_get_closest_vehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_plane_control_panels_intact(&self, vehicle_: u32,
p1_: bool) -> ResultOf_are_plane_control_panels_intact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::are_plane_control_panels_intact(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_are_plane_control_panels_intact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_distant_cars_enabled(&self, toggle_: bool) -> ResultOf_set_distant_cars_enabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_distant_cars_enabled(
            toggle_,
        );
        
        
        ResultOf_set_distant_cars_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_make_name_from_vehicle_model(&self, modelHash_: u32) -> ResultOf_get_make_name_from_vehicle_model {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut modelHash_ = modelHash_;
        let success = sdk::natives::get_make_name_from_vehicle_model(
            native_return.pin_mut(),
modelHash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_make_name_from_vehicle_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_wanted(&self, vehicle_: u32,
state_: bool) -> ResultOf_set_vehicle_is_wanted {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_is_wanted(
            vehicle_,
state_,
        );
        
        
        ResultOf_set_vehicle_is_wanted {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_seat_warp_only(&self, vehicle_: u32,
seatIndex_: i32) -> ResultOf_is_seat_warp_only {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seatIndex_ = seatIndex_;
        let success = sdk::natives::is_seat_warp_only(
            &mut native_return,
vehicle_,
seatIndex_,
        );
        let native_return = native_return;
        
        ResultOf_is_seat_warp_only {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_countermeasure_ammo(&self, vehicle_: u32) -> ResultOf_get_vehicle_countermeasure_ammo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_countermeasure_ammo(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_countermeasure_ammo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_vehicle_dynamic_ambient_scales(&self, vehicle_: u32) -> ResultOf_enable_vehicle_dynamic_ambient_scales {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::enable_vehicle_dynamic_ambient_scales(
            vehicle_,
        );
        
        
        ResultOf_enable_vehicle_dynamic_ambient_scales {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aircraft_ignore_hightmap_optimisation(&self, vehicle_: u32,
p1_: i32) -> ResultOf_set_aircraft_ignore_hightmap_optimisation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_aircraft_ignore_hightmap_optimisation(
            vehicle_,
p1_,
        );
        
        
        ResultOf_set_aircraft_ignore_hightmap_optimisation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_convertible_roof_state(&self, vehicle_: u32) -> ResultOf_get_convertible_roof_state {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_convertible_roof_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_convertible_roof_state {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_bulldozer_arm_position(&self, vehicle_: u32,
position_: f32,
p2_: bool) -> ResultOf_set_vehicle_bulldozer_arm_position {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_bulldozer_arm_position(
            vehicle_,
position_,
p2_,
        );
        
        
        ResultOf_set_vehicle_bulldozer_arm_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_position_offset_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_set_global_position_offset_for_recorded_vehicle_playback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_global_position_offset_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOf_set_global_position_offset_for_recorded_vehicle_playback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_burnout(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_burnout {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_burnout(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_burnout {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_needs_to_be_hotwired(&self, vehicle_: u32,
toggle_: bool) -> ResultOf_set_vehicle_needs_to_be_hotwired {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_needs_to_be_hotwired(
            vehicle_,
toggle_,
        );
        
        
        ResultOf_set_vehicle_needs_to_be_hotwired {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_kit_type(&self, vehicle_: u32) -> ResultOf_get_vehicle_mod_kit_type {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_kit_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_mod_kit_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_car_boot_open(&self, vehicle_: u32) -> ResultOf_set_car_boot_open {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_car_boot_open(
            vehicle_,
        );
        
        
        ResultOf_set_car_boot_open {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_blades_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOf_set_heli_blades_speed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_heli_blades_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOf_set_heli_blades_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_train_track(&self, trackId_: i32,
state_: bool) -> ResultOf_switch_train_track {
    unsafe {
        let mut trackId_ = trackId_;
let mut state_ = state_;
        let success = sdk::natives::switch_train_track(
            trackId_,
state_,
        );
        
        
        ResultOf_switch_train_track {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_tail_rotor_health(&self, vehicle_: u32,
health_: f32) -> ResultOf_set_heli_tail_rotor_health {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_heli_tail_rotor_health(
            vehicle_,
health_,
        );
        
        
        ResultOf_set_heli_tail_rotor_health {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_door_angle_ratio(&self, vehicle_: u32,
doorId_: i32) -> ResultOf_get_vehicle_door_angle_ratio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doorId_ = doorId_;
        let success = sdk::natives::get_vehicle_door_angle_ratio(
            &mut native_return,
vehicle_,
doorId_,
        );
        let native_return = native_return;
        
        ResultOf_get_vehicle_door_angle_ratio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tow_truck_arm_position(&self, vehicle_: u32,
position_: f32) -> ResultOf_set_vehicle_tow_truck_arm_position {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
        let success = sdk::natives::set_vehicle_tow_truck_arm_position(
            vehicle_,
position_,
        );
        
        
        ResultOf_set_vehicle_tow_truck_arm_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_rocket_boost_fill(&self, vehicle_: u32,
percentage_: f32) -> ResultOf_set_rocket_boost_fill {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut percentage_ = percentage_;
        let success = sdk::natives::set_rocket_boost_fill(
            vehicle_,
percentage_,
        );
        
        
        ResultOf_set_rocket_boost_fill {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_deep_ocean_scaler(&self, ) -> ResultOf_get_deep_ocean_scaler {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_deep_ocean_scaler(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOf_get_deep_ocean_scaler {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_test_vertical_probe_against_all_water(&self, x_: f32,
y_: f32,
z_: f32,
flags_: i32,
waterHeight_: f32) -> ResultOf_test_vertical_probe_against_all_water {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flags_ = flags_;
let mut waterHeight_ = Default::default();
        let success = sdk::natives::test_vertical_probe_against_all_water(
            &mut native_return,
&mut waterHeight_,
x_,
y_,
z_,
flags_,
        );
        let native_return = native_return;
let waterHeight_ = waterHeight_;
        
        ResultOf_test_vertical_probe_against_all_water {
            success,
            ret: native_return,
            waterHeight_
        }
    }
}

    fn native_set_calmed_wave_height_scaler(&self, height_: f32) -> ResultOf_set_calmed_wave_height_scaler {
    unsafe {
        let mut height_ = height_;
        let success = sdk::natives::set_calmed_wave_height_scaler(
            height_,
        );
        
        
        ResultOf_set_calmed_wave_height_scaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_deep_ocean_scaler(&self, ) -> ResultOf_reset_deep_ocean_scaler {
    unsafe {
        
        let success = sdk::natives::reset_deep_ocean_scaler(
            
        );
        
        
        ResultOf_reset_deep_ocean_scaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_test_probe_against_all_water(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
waterHeight_: f32) -> ResultOf_test_probe_against_all_water {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut waterHeight_ = Default::default();
        let success = sdk::natives::test_probe_against_all_water(
            &mut native_return,
&mut waterHeight_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
        );
        let native_return = native_return;
let waterHeight_ = waterHeight_;
        
        ResultOf_test_probe_against_all_water {
            success,
            ret: native_return,
            waterHeight_
        }
    }
}

    fn native_get_water_height_no_waves(&self, x_: f32,
y_: f32,
z_: f32,
height_: f32) -> ResultOf_get_water_height_no_waves {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut height_ = Default::default();
        let success = sdk::natives::get_water_height_no_waves(
            &mut native_return,
&mut height_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let height_ = height_;
        
        ResultOf_get_water_height_no_waves {
            success,
            ret: native_return,
            height_
        }
    }
}

    fn native_remove_extra_calming_quad(&self, calmingQuad_: i32) -> ResultOf_remove_extra_calming_quad {
    unsafe {
        let mut calmingQuad_ = calmingQuad_;
        let success = sdk::natives::remove_extra_calming_quad(
            calmingQuad_,
        );
        
        
        ResultOf_remove_extra_calming_quad {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_deep_ocean_scaler(&self, intensity_: f32) -> ResultOf_set_deep_ocean_scaler {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::set_deep_ocean_scaler(
            intensity_,
        );
        
        
        ResultOf_set_deep_ocean_scaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_modify_water(&self, x_: f32,
y_: f32,
radius_: f32,
height_: f32) -> ResultOf_modify_water {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut radius_ = radius_;
let mut height_ = height_;
        let success = sdk::natives::modify_water(
            x_,
y_,
radius_,
height_,
        );
        
        
        ResultOf_modify_water {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_water_height(&self, x_: f32,
y_: f32,
z_: f32,
height_: f32) -> ResultOf_get_water_height {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut height_ = Default::default();
        let success = sdk::natives::get_water_height(
            &mut native_return,
&mut height_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let height_ = height_;
        
        ResultOf_get_water_height {
            success,
            ret: native_return,
            height_
        }
    }
}

    fn native_add_extra_calming_quad(&self, xLow_: f32,
yLow_: f32,
xHigh_: f32,
yHigh_: f32,
height_: f32) -> ResultOf_add_extra_calming_quad {
    unsafe {
        let mut native_return = Default::default();
let mut xLow_ = xLow_;
let mut yLow_ = yLow_;
let mut xHigh_ = xHigh_;
let mut yHigh_ = yHigh_;
let mut height_ = height_;
        let success = sdk::natives::add_extra_calming_quad(
            &mut native_return,
xLow_,
yLow_,
xHigh_,
yHigh_,
height_,
        );
        let native_return = native_return;
        
        ResultOf_add_extra_calming_quad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_test_probe_against_water(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
result_: Option<shared::Vector3>) -> ResultOf_test_probe_against_water {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut result_ = sdk_helpers::create_vector3_ptr(result_);
        let success = sdk::natives::test_probe_against_water(
            &mut native_return,
result_.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
let result_ = sdk_helpers::read_cpp_vector3(result_);
        
        ResultOf_test_probe_against_water {
            success,
            ret: native_return,
            result_
        }
    }
}

    fn native_get_ammo_in_ped_weapon(&self, ped_: u32,
weaponhash_: u32) -> ResultOf_get_ammo_in_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponhash_ = weaponhash_;
        let success = sdk::natives::get_ammo_in_ped_weapon(
            &mut native_return,
ped_,
weaponhash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ammo_in_ped_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_time_between_shots(&self, weaponHash_: u32) -> ResultOf_get_weapon_time_between_shots {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapon_time_between_shots(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_time_between_shots {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_current_weapon_visible(&self, ped_: u32,
visible_: bool,
deselectWeapon_: bool,
p3_: bool,
p4_: bool) -> ResultOf_set_ped_current_weapon_visible {
    unsafe {
        let mut ped_ = ped_;
let mut visible_ = visible_;
let mut deselectWeapon_ = deselectWeapon_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_current_weapon_visible(
            ped_,
visible_,
deselectWeapon_,
p3_,
p4_,
        );
        
        
        ResultOf_set_ped_current_weapon_visible {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_selected_ped_weapon(&self, ped_: u32) -> ResultOf_get_selected_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_selected_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_selected_ped_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_air_defence_sphere(&self, zoneId_: i32) -> ResultOf_remove_air_defence_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut zoneId_ = zoneId_;
        let success = sdk::natives::remove_air_defence_sphere(
            &mut native_return,
zoneId_,
        );
        let native_return = native_return;
        
        ResultOf_remove_air_defence_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_weapon_component_active(&self, ped_: u32,
weaponHash_: u32,
componentHash_: u32) -> ResultOf_is_ped_weapon_component_active {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::is_ped_weapon_component_active(
            &mut native_return,
ped_,
weaponHash_,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_weapon_component_active {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_component_type_model(&self, componentHash_: u32) -> ResultOf_get_weapon_component_type_model {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_weapon_component_type_model(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_component_type_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_last_weapon_damage(&self, ped_: u32) -> ResultOf_clear_ped_last_weapon_damage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_last_weapon_damage(
            ped_,
        );
        
        
        ResultOf_clear_ped_last_weapon_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_ped_vehicle_weapon(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_current_ped_vehicle_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = Default::default();
        let success = sdk::natives::get_current_ped_vehicle_weapon(
            &mut native_return,
&mut weaponHash_,
ped_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_get_current_ped_vehicle_weapon {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_set_weapon_animation_override(&self, ped_: u32,
animStyle_: u32) -> ResultOf_set_weapon_animation_override {
    unsafe {
        let mut ped_ = ped_;
let mut animStyle_ = animStyle_;
        let success = sdk::natives::set_weapon_animation_override(
            ped_,
animStyle_,
        );
        
        
        ResultOf_set_weapon_animation_override {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_been_damaged_by_weapon(&self, entity_: u32,
weaponHash_: u32,
weaponType_: i32) -> ResultOf_has_entity_been_damaged_by_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut weaponHash_ = weaponHash_;
let mut weaponType_ = weaponType_;
        let success = sdk::natives::has_entity_been_damaged_by_weapon(
            &mut native_return,
entity_,
weaponHash_,
weaponType_,
        );
        let native_return = native_return;
        
        ResultOf_has_entity_been_damaged_by_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo(&self, ped_: u32,
weaponHash_: u32,
ammo_: i32,
p3_: bool) -> ResultOf_set_ped_ammo {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammo_ = ammo_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_ammo(
            ped_,
weaponHash_,
ammo_,
p3_,
        );
        
        
        ResultOf_set_ped_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_infinite_ammo_clip(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_infinite_ammo_clip {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_infinite_ammo_clip(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_infinite_ammo_clip {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_air_defence_spheres(&self, ) -> ResultOf_remove_all_air_defence_spheres {
    unsafe {
        
        let success = sdk::natives::remove_all_air_defence_spheres(
            
        );
        
        
        ResultOf_remove_all_air_defence_spheres {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_component_from_ped(&self, ped_: u32,
weaponHash_: u32,
componentHash_: u32) -> ResultOf_remove_weapon_component_from_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::remove_weapon_component_from_ped(
            ped_,
weaponHash_,
componentHash_,
        );
        
        
        ResultOf_remove_weapon_component_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_inventory_weapon(&self, ped_: u32,
weaponHash_: u32,
xOffset_: f32,
yOffset_: f32,
zOffset_: f32,
ammoCount_: i32) -> ResultOf_set_ped_drops_inventory_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut xOffset_ = xOffset_;
let mut yOffset_ = yOffset_;
let mut zOffset_ = zOffset_;
let mut ammoCount_ = ammoCount_;
        let success = sdk::natives::set_ped_drops_inventory_weapon(
            ped_,
weaponHash_,
xOffset_,
yOffset_,
zOffset_,
ammoCount_,
        );
        
        
        ResultOf_set_ped_drops_inventory_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_make_ped_reload(&self, ped_: u32) -> ResultOf_make_ped_reload {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::make_ped_reload(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_make_ped_reload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ped_ammo_by_type(&self, ped_: u32,
ammoTypeHash_: u32,
ammo_: i32) -> ResultOf_add_ped_ammo_by_type {
    unsafe {
        let mut ped_ = ped_;
let mut ammoTypeHash_ = ammoTypeHash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::add_ped_ammo_by_type(
            ped_,
ammoTypeHash_,
ammo_,
        );
        
        
        ResultOf_add_ped_ammo_by_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stun_gun_finite_ammo(&self, p0_: i32,
p1_: i32) -> ResultOf_set_ped_stun_gun_finite_ammo {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_stun_gun_finite_ammo(
            p0_,
p1_,
        );
        
        
        ResultOf_set_ped_stun_gun_finite_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapon_tint_index(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_ped_weapon_tint_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_ped_weapon_tint_index(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_weapon_tint_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_been_damaged_by_weapon(&self, ped_: u32,
weaponHash_: u32,
weaponType_: i32) -> ResultOf_has_ped_been_damaged_by_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut weaponType_ = weaponType_;
        let success = sdk::natives::has_ped_been_damaged_by_weapon(
            &mut native_return,
ped_,
weaponHash_,
weaponType_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_been_damaged_by_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ammo_in_clip(&self, ped_: u32,
weaponHash_: u32,
ammo_: i32) -> ResultOf_get_ammo_in_clip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammo_ = Default::default();
        let success = sdk::natives::get_ammo_in_clip(
            &mut native_return,
&mut ammo_,
ped_,
weaponHash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOf_get_ammo_in_clip {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_get_weapon_damage(&self, weaponHash_: u32,
componentHash_: u32) -> ResultOf_get_weapon_damage {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_weapon_damage(
            &mut native_return,
weaponHash_,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_damage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_weapon_component_to_weapon_object(&self, weaponObject_: u32,
componentHash_: u32) -> ResultOf_give_weapon_component_to_weapon_object {
    unsafe {
        let mut weaponObject_ = weaponObject_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::give_weapon_component_to_weapon_object(
            weaponObject_,
componentHash_,
        );
        
        
        ResultOf_give_weapon_component_to_weapon_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_weapon_asset_loaded(&self, weaponHash_: u32) -> ResultOf_has_weapon_asset_loaded {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::has_weapon_asset_loaded(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_has_weapon_asset_loaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_ammo_by_type(&self, ped_: u32,
ammoTypeHash_: u32) -> ResultOf_get_ped_ammo_by_type {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut ammoTypeHash_ = ammoTypeHash_;
        let success = sdk::natives::get_ped_ammo_by_type(
            &mut native_return,
ped_,
ammoTypeHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_ammo_by_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_ped_weapon(&self, ped_: u32,
weaponHash_: u32,
p2_: bool) -> ResultOf_get_current_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = Default::default();
let mut p2_ = p2_;
        let success = sdk::natives::get_current_ped_weapon(
            &mut native_return,
&mut weaponHash_,
ped_,
p2_,
        );
        let native_return = native_return;
let weaponHash_ = weaponHash_;
        
        ResultOf_get_current_ped_weapon {
            success,
            ret: native_return,
            weaponHash_
        }
    }
}

    fn native_get_current_ped_weapon_entity_index(&self, ped_: u32,
p1_: i32) -> ResultOf_get_current_ped_weapon_entity_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_current_ped_weapon_entity_index(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_current_ped_weapon_entity_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_damage_type(&self, weaponHash_: u32) -> ResultOf_get_weapon_damage_type {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapon_damage_type(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_damage_type {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_infinite_ammo(&self, ped_: u32,
toggle_: bool,
weaponHash_: u32) -> ResultOf_set_ped_infinite_ammo {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::set_ped_infinite_ammo(
            ped_,
toggle_,
weaponHash_,
        );
        
        
        ResultOf_set_ped_infinite_ammo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_slot(&self, weaponHash_: u32) -> ResultOf_get_weapontype_slot {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapontype_slot(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapontype_slot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fire_air_defence_sphere_weapon_at_position(&self, zoneId_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOf_fire_air_defence_sphere_weapon_at_position {
    unsafe {
        let mut zoneId_ = zoneId_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::fire_air_defence_sphere_weapon_at_position(
            zoneId_,
x_,
y_,
z_,
        );
        
        
        ResultOf_fire_air_defence_sphere_weapon_at_position {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_armed(&self, ped_: u32,
typeFlags_: i32) -> ResultOf_is_ped_armed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut typeFlags_ = typeFlags_;
        let success = sdk::natives::is_ped_armed(
            &mut native_return,
ped_,
typeFlags_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_armed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_damage_modifier(&self, weaponHash_: u32,
damageMultiplier_: f32) -> ResultOf_set_weapon_damage_modifier {
    unsafe {
        let mut weaponHash_ = weaponHash_;
let mut damageMultiplier_ = damageMultiplier_;
        let success = sdk::natives::set_weapon_damage_modifier(
            weaponHash_,
damageMultiplier_,
        );
        
        
        ResultOf_set_weapon_damage_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_weapons_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_ped_drops_weapons_when_dead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_drops_weapons_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_ped_drops_weapons_when_dead {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_weapon_high_detail_model(&self, weaponObject_: u32) -> ResultOf_request_weapon_high_detail_model {
    unsafe {
        let mut weaponObject_ = weaponObject_;
        let success = sdk::natives::request_weapon_high_detail_model(
            weaponObject_,
        );
        
        
        ResultOf_request_weapon_high_detail_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_from_ped(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_remove_weapon_from_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::remove_weapon_from_ped(
            ped_,
weaponHash_,
        );
        
        
        ResultOf_remove_weapon_from_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_aoe_modifier(&self, weaponHash_: u32,
multiplier_: f32) -> ResultOf_set_weapon_aoe_modifier {
    unsafe {
        let mut weaponHash_ = weaponHash_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_weapon_aoe_modifier(
            weaponHash_,
multiplier_,
        );
        
        
        ResultOf_set_weapon_aoe_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_flash_light_on(&self, ped_: u32) -> ResultOf_is_flash_light_on {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_flash_light_on(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_flash_light_on {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_component_variant_extra_model(&self, componentHash_: u32,
extraComponentIndex_: i32) -> ResultOf_get_weapon_component_variant_extra_model {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
let mut extraComponentIndex_ = extraComponentIndex_;
        let success = sdk::natives::get_weapon_component_variant_extra_model(
            &mut native_return,
componentHash_,
extraComponentIndex_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_component_variant_extra_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cycle_vehicle_weapons_only(&self, ped_: u32) -> ResultOf_set_ped_cycle_vehicle_weapons_only {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_cycle_vehicle_weapons_only(
            ped_,
        );
        
        
        ResultOf_set_ped_cycle_vehicle_weapons_only {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_weapon_tint_index(&self, ped_: u32,
weaponHash_: u32,
tintIndex_: i32) -> ResultOf_set_ped_weapon_tint_index {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut tintIndex_ = tintIndex_;
        let success = sdk::natives::set_ped_weapon_tint_index(
            ped_,
weaponHash_,
tintIndex_,
        );
        
        
        ResultOf_set_ped_weapon_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_weapon_asset(&self, weaponHash_: u32,
p1_: i32,
p2_: i32) -> ResultOf_request_weapon_asset {
    unsafe {
        let mut weaponHash_ = weaponHash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_weapon_asset(
            weaponHash_,
p1_,
p2_,
        );
        
        
        ResultOf_request_weapon_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_clip_size(&self, weaponHash_: u32) -> ResultOf_get_weapon_clip_size {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapon_clip_size(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_clip_size {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_ammo_by_type(&self, ped_: u32,
ammoTypeHash_: u32,
ammo_: i32) -> ResultOf_get_max_ammo_by_type {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut ammoTypeHash_ = ammoTypeHash_;
let mut ammo_ = Default::default();
        let success = sdk::natives::get_max_ammo_by_type(
            &mut native_return,
&mut ammo_,
ped_,
ammoTypeHash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOf_get_max_ammo_by_type {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_does_weapon_take_weapon_component(&self, weaponHash_: u32,
componentHash_: u32) -> ResultOf_does_weapon_take_weapon_component {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::does_weapon_take_weapon_component(
            &mut native_return,
weaponHash_,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_does_weapon_take_weapon_component {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_object_component_tint_index(&self, weaponObject_: u32,
camoComponentHash_: u32,
colorIndex_: i32) -> ResultOf_set_weapon_object_component_tint_index {
    unsafe {
        let mut weaponObject_ = weaponObject_;
let mut camoComponentHash_ = camoComponentHash_;
let mut colorIndex_ = colorIndex_;
        let success = sdk::natives::set_weapon_object_component_tint_index(
            weaponObject_,
camoComponentHash_,
colorIndex_,
        );
        
        
        ResultOf_set_weapon_object_component_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_tint_count(&self, weaponHash_: u32) -> ResultOf_get_weapon_tint_count {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapon_tint_count(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_tint_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo_by_type(&self, ped_: u32,
ammoTypeHash_: u32,
ammo_: i32) -> ResultOf_set_ped_ammo_by_type {
    unsafe {
        let mut ped_ = ped_;
let mut ammoTypeHash_ = ammoTypeHash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::set_ped_ammo_by_type(
            ped_,
ammoTypeHash_,
ammo_,
        );
        
        
        ResultOf_set_ped_ammo_by_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_component_variant_extra_count(&self, componentHash_: u32) -> ResultOf_get_weapon_component_variant_extra_count {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
        let success = sdk::natives::get_weapon_component_variant_extra_count(
            &mut native_return,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_component_variant_extra_count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_current_weapon_silenced(&self, ped_: u32) -> ResultOf_is_ped_current_weapon_silenced {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_current_weapon_silenced(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_current_weapon_silenced {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_loadout_to_ped(&self, ped_: u32,
loadoutHash_: u32) -> ResultOf_give_loadout_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut loadoutHash_ = loadoutHash_;
        let success = sdk::natives::give_loadout_to_ped(
            ped_,
loadoutHash_,
        );
        
        
        ResultOf_give_loadout_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_weapon(&self, ped_: u32) -> ResultOf_set_ped_drops_weapon {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_drops_weapon(
            ped_,
        );
        
        
        ResultOf_set_ped_drops_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_last_weapon_impact_coord(&self, ped_: u32,
coords_: Option<shared::Vector3>) -> ResultOf_get_ped_last_weapon_impact_coord {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut coords_ = sdk_helpers::create_vector3_ptr(coords_);
        let success = sdk::natives::get_ped_last_weapon_impact_coord(
            &mut native_return,
coords_.pin_mut(),
ped_,
        );
        let native_return = native_return;
let coords_ = sdk_helpers::read_cpp_vector3(coords_);
        
        ResultOf_get_ped_last_weapon_impact_coord {
            success,
            ret: native_return,
            coords_
        }
    }
}

    fn native_hide_ped_weapon_for_scripted_cutscene(&self, ped_: u32,
toggle_: bool) -> ResultOf_hide_ped_weapon_for_scripted_cutscene {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_ped_weapon_for_scripted_cutscene(
            ped_,
toggle_,
        );
        
        
        ResultOf_hide_ped_weapon_for_scripted_cutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_got_projectile_attached(&self, driver_: u32,
vehicle_: u32,
weaponHash_: u32,
p3_: i32) -> ResultOf_has_vehicle_got_projectile_attached {
    unsafe {
        let mut native_return = Default::default();
let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut weaponHash_ = weaponHash_;
let mut p3_ = p3_;
        let success = sdk::natives::has_vehicle_got_projectile_attached(
            &mut native_return,
driver_,
vehicle_,
weaponHash_,
p3_,
        );
        let native_return = native_return;
        
        ResultOf_has_vehicle_got_projectile_attached {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_current_ped_vehicle_weapon(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_set_current_ped_vehicle_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::set_current_ped_vehicle_weapon(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_set_current_ped_vehicle_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_weapon_got_weapon_component(&self, weapon_: u32,
componentHash_: u32) -> ResultOf_has_weapon_got_weapon_component {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_ = weapon_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::has_weapon_got_weapon_component(
            &mut native_return,
weapon_,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_has_weapon_got_weapon_component {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ammo_to_ped(&self, ped_: u32,
weaponHash_: u32,
ammo_: i32) -> ResultOf_add_ammo_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::add_ammo_to_ped(
            ped_,
weaponHash_,
ammo_,
        );
        
        
        ResultOf_add_ammo_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_ammo_type_from_weapon(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_ped_ammo_type_from_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_ped_ammo_type_from_weapon(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_ammo_type_from_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_range_of_current_ped_weapon(&self, ped_: u32) -> ResultOf_get_max_range_of_current_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_max_range_of_current_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_max_range_of_current_ped_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_chance_of_firing_blanks(&self, ped_: u32,
xBias_: f32,
yBias_: f32) -> ResultOf_set_ped_chance_of_firing_blanks {
    unsafe {
        let mut ped_ = ped_;
let mut xBias_ = xBias_;
let mut yBias_ = yBias_;
        let success = sdk::natives::set_ped_chance_of_firing_blanks(
            ped_,
xBias_,
yBias_,
        );
        
        
        ResultOf_set_ped_chance_of_firing_blanks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_lockon_distance_of_current_ped_weapon(&self, ped_: u32) -> ResultOf_get_lockon_distance_of_current_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_lockon_distance_of_current_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_get_lockon_distance_of_current_ped_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_best_ped_weapon(&self, ped_: u32,
p1_: bool) -> ResultOf_get_best_ped_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_best_ped_weapon(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_best_ped_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refill_ammo_instantly(&self, ped_: u32) -> ResultOf_refill_ammo_instantly {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::refill_ammo_instantly(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_refill_ammo_instantly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_got_weapon(&self, ped_: u32,
weaponHash_: u32,
p2_: bool) -> ResultOf_has_ped_got_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut p2_ = p2_;
        let success = sdk::natives::has_ped_got_weapon(
            &mut native_return,
ped_,
weaponHash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_got_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_air_defence_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
weaponHash_: u32) -> ResultOf_create_air_defence_sphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::create_air_defence_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_air_defence_sphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_weapon_valid(&self, weaponHash_: u32) -> ResultOf_is_weapon_valid {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::is_weapon_valid(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_is_weapon_valid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_weapon_object(&self, weaponHash_: u32,
ammoCount_: i32,
x_: f32,
y_: f32,
z_: f32,
showWorldModel_: bool,
scale_: f32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOf_create_weapon_object {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
let mut ammoCount_ = ammoCount_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut showWorldModel_ = showWorldModel_;
let mut scale_ = scale_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_weapon_object(
            &mut native_return,
weaponHash_,
ammoCount_,
x_,
y_,
z_,
showWorldModel_,
scale_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOf_create_weapon_object {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_object_camo_index(&self, weaponObject_: u32,
p1_: i32) -> ResultOf_set_weapon_object_camo_index {
    unsafe {
        let mut weaponObject_ = weaponObject_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_object_camo_index(
            weaponObject_,
p1_,
        );
        
        
        ResultOf_set_weapon_object_camo_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flash_light_active_history(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_flash_light_active_history {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_flash_light_active_history(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_flash_light_active_history {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_air_defence_angled_area(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
radius_: f32,
weaponHash_: u32) -> ResultOf_create_air_defence_angled_area {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut radius_ = radius_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::create_air_defence_angled_area(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
radius_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_create_air_defence_angled_area {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_weapon_component_tint_index(&self, ped_: u32,
weaponHash_: u32,
camoComponentHash_: u32,
colorIndex_: i32) -> ResultOf_set_ped_weapon_component_tint_index {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut camoComponentHash_ = camoComponentHash_;
let mut colorIndex_ = colorIndex_;
        let success = sdk::natives::set_ped_weapon_component_tint_index(
            ped_,
weaponHash_,
camoComponentHash_,
colorIndex_,
        );
        
        
        ResultOf_set_ped_weapon_component_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapon_camo_index(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_ped_weapon_camo_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_ped_weapon_camo_index(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_weapon_camo_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_ammo_in_clip(&self, ped_: u32,
weaponHash_: u32,
p2_: bool) -> ResultOf_get_max_ammo_in_clip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut p2_ = p2_;
        let success = sdk::natives::get_max_ammo_in_clip(
            &mut native_return,
ped_,
weaponHash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOf_get_max_ammo_in_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo_to_drop(&self, ped_: u32,
p1_: i32) -> ResultOf_set_ped_ammo_to_drop {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_ammo_to_drop(
            ped_,
p1_,
        );
        
        
        ResultOf_set_ped_ammo_to_drop {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_asset(&self, weaponHash_: u32) -> ResultOf_remove_weapon_asset {
    unsafe {
        let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::remove_weapon_asset(
            weaponHash_,
        );
        
        
        ResultOf_remove_weapon_asset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_entity_last_weapon_damage(&self, entity_: u32) -> ResultOf_clear_entity_last_weapon_damage {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_entity_last_weapon_damage(
            entity_,
        );
        
        
        ResultOf_clear_entity_last_weapon_damage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_current_ped_weapon(&self, ped_: u32,
weaponHash_: u32,
bForceInHand_: bool) -> ResultOf_set_current_ped_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut bForceInHand_ = bForceInHand_;
        let success = sdk::natives::set_current_ped_weapon(
            ped_,
weaponHash_,
bForceInHand_,
        );
        
        
        ResultOf_set_current_ped_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_weapon_object_to_ped(&self, weaponObject_: u32,
ped_: u32) -> ResultOf_give_weapon_object_to_ped {
    unsafe {
        let mut weaponObject_ = weaponObject_;
let mut ped_ = ped_;
        let success = sdk::natives::give_weapon_object_to_ped(
            weaponObject_,
ped_,
        );
        
        
        ResultOf_give_weapon_object_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_delayed_weapon_to_ped(&self, ped_: u32,
weaponHash_: u32,
ammoCount_: i32,
bForceInHand_: bool) -> ResultOf_give_delayed_weapon_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammoCount_ = ammoCount_;
let mut bForceInHand_ = bForceInHand_;
        let success = sdk::natives::give_delayed_weapon_to_ped(
            ped_,
weaponHash_,
ammoCount_,
bForceInHand_,
        );
        
        
        ResultOf_give_delayed_weapon_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_component_hud_stats(&self, componentHash_: u32,
outData_: i32) -> ResultOf_get_weapon_component_hud_stats {
    unsafe {
        let mut native_return = Default::default();
let mut componentHash_ = componentHash_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_weapon_component_hud_stats(
            &mut native_return,
&mut outData_,
componentHash_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_weapon_component_hud_stats {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_get_weapon_object_component_tint_index(&self, weaponObject_: u32,
camoComponentHash_: u32) -> ResultOf_get_weapon_object_component_tint_index {
    unsafe {
        let mut native_return = Default::default();
let mut weaponObject_ = weaponObject_;
let mut camoComponentHash_ = camoComponentHash_;
        let success = sdk::natives::get_weapon_object_component_tint_index(
            &mut native_return,
weaponObject_,
camoComponentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_object_component_tint_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_ped_select_inventory_weapon(&self, ped_: u32,
weaponHash_: u32,
toggle_: bool) -> ResultOf_set_can_ped_select_inventory_weapon {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_ped_select_inventory_weapon(
            ped_,
weaponHash_,
toggle_,
        );
        
        
        ResultOf_set_can_ped_select_inventory_weapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_shoot_ordnance_weapon(&self, ped_: u32,
p1_: f32) -> ResultOf_set_ped_shoot_ordnance_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_shoot_ordnance_weapon(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_set_ped_shoot_ordnance_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_weapon_ready_to_shoot(&self, ped_: u32) -> ResultOf_is_ped_weapon_ready_to_shoot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_weapon_ready_to_shoot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOf_is_ped_weapon_ready_to_shoot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_use_weapon_on_parachute(&self, weaponHash_: u32) -> ResultOf_can_use_weapon_on_parachute {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::can_use_weapon_on_parachute(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_can_use_weapon_on_parachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_weapon_to_ped(&self, ped_: u32,
weaponHash_: u32,
ammoCount_: i32,
isHidden_: bool,
bForceInHand_: bool) -> ResultOf_give_weapon_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammoCount_ = ammoCount_;
let mut isHidden_ = isHidden_;
let mut bForceInHand_ = bForceInHand_;
        let success = sdk::natives::give_weapon_to_ped(
            ped_,
weaponHash_,
ammoCount_,
isHidden_,
bForceInHand_,
        );
        
        
        ResultOf_give_weapon_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_group(&self, weaponHash_: u32) -> ResultOf_get_weapontype_group {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapontype_group(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapontype_group {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_got_weapon_component(&self, ped_: u32,
weaponHash_: u32,
componentHash_: u32) -> ResultOf_has_ped_got_weapon_component {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::has_ped_got_weapon_component(
            &mut native_return,
ped_,
weaponHash_,
componentHash_,
        );
        let native_return = native_return;
        
        ResultOf_has_ped_got_weapon_component {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_laser_sight_rendering(&self, toggle_: bool) -> ResultOf_enable_laser_sight_rendering {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_laser_sight_rendering(
            toggle_,
        );
        
        
        ResultOf_enable_laser_sight_rendering {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_object_from_ped(&self, ped_: u32,
p1_: bool) -> ResultOf_get_weapon_object_from_ped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_weapon_object_from_ped(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_object_from_ped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_object_tint_index(&self, weapon_: u32) -> ResultOf_get_weapon_object_tint_index {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_ = weapon_;
        let success = sdk::natives::get_weapon_object_tint_index(
            &mut native_return,
weapon_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapon_object_tint_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_air_defence_sphere_exist(&self, zoneId_: i32) -> ResultOf_does_air_defence_sphere_exist {
    unsafe {
        let mut native_return = Default::default();
let mut zoneId_ = zoneId_;
        let success = sdk::natives::does_air_defence_sphere_exist(
            &mut native_return,
zoneId_,
        );
        let native_return = native_return;
        
        ResultOf_does_air_defence_sphere_exist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_flash_light_fade_distance(&self, distance_: f32) -> ResultOf_set_flash_light_fade_distance {
    unsafe {
        let mut native_return = Default::default();
let mut distance_ = distance_;
        let success = sdk::natives::set_flash_light_fade_distance(
            &mut native_return,
distance_,
        );
        let native_return = native_return;
        
        ResultOf_set_flash_light_fade_distance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gadget(&self, ped_: u32,
gadgetHash_: u32,
p2_: bool) -> ResultOf_set_ped_gadget {
    unsafe {
        let mut ped_ = ped_;
let mut gadgetHash_ = gadgetHash_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_gadget(
            ped_,
gadgetHash_,
p2_,
        );
        
        
        ResultOf_set_ped_gadget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_hud_stats(&self, weaponHash_: u32,
outData_: i32) -> ResultOf_get_weapon_hud_stats {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
let mut outData_ = Default::default();
        let success = sdk::natives::get_weapon_hud_stats(
            &mut native_return,
&mut outData_,
weaponHash_,
        );
        let native_return = native_return;
let outData_ = outData_;
        
        ResultOf_get_weapon_hud_stats {
            success,
            ret: native_return,
            outData_
        }
    }
}

    fn native_give_weapon_component_to_ped(&self, ped_: u32,
weaponHash_: u32,
componentHash_: u32) -> ResultOf_give_weapon_component_to_ped {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::give_weapon_component_to_ped(
            ped_,
weaponHash_,
componentHash_,
        );
        
        
        ResultOf_give_weapon_component_to_ped {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_air_defence_sphere_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
outZoneId_: i32) -> ResultOf_is_air_defence_sphere_in_area {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut outZoneId_ = Default::default();
        let success = sdk::natives::is_air_defence_sphere_in_area(
            &mut native_return,
&mut outZoneId_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
let outZoneId_ = outZoneId_;
        
        ResultOf_is_air_defence_sphere_in_area {
            success,
            ret: native_return,
            outZoneId_
        }
    }
}

    fn native_get_max_ammo(&self, ped_: u32,
weaponHash_: u32,
ammo_: i32) -> ResultOf_get_max_ammo {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammo_ = Default::default();
        let success = sdk::natives::get_max_ammo(
            &mut native_return,
&mut ammo_,
ped_,
weaponHash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOf_get_max_ammo {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_set_ammo_in_clip(&self, ped_: u32,
weaponHash_: u32,
ammo_: i32) -> ResultOf_set_ammo_in_clip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::set_ammo_in_clip(
            &mut native_return,
ped_,
weaponHash_,
ammo_,
        );
        let native_return = native_return;
        
        ResultOf_set_ammo_in_clip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_eqipped_weapon_start_spinning_at_full_speed(&self, ped_: u32) -> ResultOf_set_eqipped_weapon_start_spinning_at_full_speed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_eqipped_weapon_start_spinning_at_full_speed(
            ped_,
        );
        
        
        ResultOf_set_eqipped_weapon_start_spinning_at_full_speed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_ammo_amount_scaler(&self, p0_: f32) -> ResultOf_set_pickup_ammo_amount_scaler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pickup_ammo_amount_scaler(
            p0_,
        );
        
        
        ResultOf_set_pickup_ammo_amount_scaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_effect_duration_modifier(&self, p0_: u32,
p1_: f32) -> ResultOf_set_weapon_effect_duration_modifier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_effect_duration_modifier(
            p0_,
p1_,
        );
        
        
        ResultOf_set_weapon_effect_duration_modifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_targettable_for_air_defence_sphere(&self, player_: u32,
zoneId_: i32,
enable_: bool) -> ResultOf_set_player_targettable_for_air_defence_sphere {
    unsafe {
        let mut player_ = player_;
let mut zoneId_ = zoneId_;
let mut enable_ = enable_;
        let success = sdk::natives::set_player_targettable_for_air_defence_sphere(
            player_,
zoneId_,
enable_,
        );
        
        
        ResultOf_set_player_targettable_for_air_defence_sphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_ped_select_all_weapons(&self, ped_: u32,
toggle_: bool) -> ResultOf_set_can_ped_select_all_weapons {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_ped_select_all_weapons(
            ped_,
toggle_,
        );
        
        
        ResultOf_set_can_ped_select_all_weapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapontype_in_slot(&self, ped_: u32,
weaponSlot_: u32) -> ResultOf_get_ped_weapontype_in_slot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponSlot_ = weaponSlot_;
        let success = sdk::natives::get_ped_weapontype_in_slot(
            &mut native_return,
ped_,
weaponSlot_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_weapontype_in_slot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_weapon_component_tint_index(&self, ped_: u32,
weaponHash_: u32,
camoComponentHash_: u32) -> ResultOf_get_ped_weapon_component_tint_index {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut camoComponentHash_ = camoComponentHash_;
        let success = sdk::natives::get_ped_weapon_component_tint_index(
            &mut native_return,
ped_,
weaponHash_,
camoComponentHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_weapon_component_tint_index {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_all_ped_weapons(&self, ped_: u32,
p1_: bool) -> ResultOf_remove_all_ped_weapons {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_all_ped_weapons(
            ped_,
p1_,
        );
        
        
        ResultOf_remove_all_ped_weapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_model(&self, weaponHash_: u32) -> ResultOf_get_weapontype_model {
    unsafe {
        let mut native_return = Default::default();
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_weapontype_model(
            &mut native_return,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_weapontype_model {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_original_ammo_type_from_weapon(&self, ped_: u32,
weaponHash_: u32) -> ResultOf_get_ped_original_ammo_type_from_weapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
        let success = sdk::natives::get_ped_original_ammo_type_from_weapon(
            &mut native_return,
ped_,
weaponHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_ped_original_ammo_type_from_weapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_ped_gadget_equipped(&self, ped_: u32,
gadgetHash_: u32) -> ResultOf_get_is_ped_gadget_equipped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut gadgetHash_ = gadgetHash_;
        let success = sdk::natives::get_is_ped_gadget_equipped(
            &mut native_return,
ped_,
gadgetHash_,
        );
        let native_return = native_return;
        
        ResultOf_get_is_ped_gadget_equipped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_weapon_component_from_weapon_object(&self, object_: u32,
componentHash_: u32) -> ResultOf_remove_weapon_component_from_weapon_object {
    unsafe {
        let mut object_ = object_;
let mut componentHash_ = componentHash_;
        let success = sdk::natives::remove_weapon_component_from_weapon_object(
            object_,
componentHash_,
        );
        
        
        ResultOf_remove_weapon_component_from_weapon_object {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_object_tint_index(&self, weapon_: u32,
tintIndex_: i32) -> ResultOf_set_weapon_object_tint_index {
    unsafe {
        let mut weapon_ = weapon_;
let mut tintIndex_ = tintIndex_;
        let success = sdk::natives::set_weapon_object_tint_index(
            weapon_,
tintIndex_,
        );
        
        
        ResultOf_set_weapon_object_tint_index {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_projectiles(&self, ped_: u32,
weaponHash_: u32,
p2_: bool) -> ResultOf_explode_projectiles {
    unsafe {
        let mut ped_ = ped_;
let mut weaponHash_ = weaponHash_;
let mut p2_ = p2_;
        let success = sdk::natives::explode_projectiles(
            ped_,
weaponHash_,
p2_,
        );
        
        
        ResultOf_explode_projectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_projectiles_of_type(&self, weaponHash_: u32,
explode_: bool) -> ResultOf_remove_all_projectiles_of_type {
    unsafe {
        let mut weaponHash_ = weaponHash_;
let mut explode_ = explode_;
        let success = sdk::natives::remove_all_projectiles_of_type(
            weaponHash_,
explode_,
        );
        
        
        ResultOf_remove_all_projectiles_of_type {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_zone_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_zone_at_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_zone_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_get_zone_at_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_zone_popschedule(&self, zoneId_: i32) -> ResultOf_get_zone_popschedule {
    unsafe {
        let mut native_return = Default::default();
let mut zoneId_ = zoneId_;
        let success = sdk::natives::get_zone_popschedule(
            &mut native_return,
zoneId_,
        );
        let native_return = native_return;
        
        ResultOf_get_zone_popschedule {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_popschedule_override_vehicle_model(&self, scheduleId_: i32) -> ResultOf_clear_popschedule_override_vehicle_model {
    unsafe {
        let mut scheduleId_ = scheduleId_;
        let success = sdk::natives::clear_popschedule_override_vehicle_model(
            scheduleId_,
        );
        
        
        ResultOf_clear_popschedule_override_vehicle_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_zone_scumminess(&self, zoneId_: i32) -> ResultOf_get_zone_scumminess {
    unsafe {
        let mut native_return = Default::default();
let mut zoneId_ = zoneId_;
        let success = sdk::natives::get_zone_scumminess(
            &mut native_return,
zoneId_,
        );
        let native_return = native_return;
        
        ResultOf_get_zone_scumminess {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_popschedule_vehicle_model(&self, scheduleId_: i32,
vehicleHash_: u32) -> ResultOf_override_popschedule_vehicle_model {
    unsafe {
        let mut scheduleId_ = scheduleId_;
let mut vehicleHash_ = vehicleHash_;
        let success = sdk::natives::override_popschedule_vehicle_model(
            scheduleId_,
vehicleHash_,
        );
        
        
        ResultOf_override_popschedule_vehicle_model {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hash_of_map_area_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_hash_of_map_area_at_coords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_hash_of_map_area_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOf_get_hash_of_map_area_at_coords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_zone_from_name_id(&self, zoneName_: Option<String>) -> ResultOf_get_zone_from_name_id {
    unsafe {
        let mut native_return = Default::default();
let mut zoneName_ = sdk_helpers::create_c_string_ptr(zoneName_);
        let success = sdk::natives::get_zone_from_name_id(
            &mut native_return,
zoneName_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOf_get_zone_from_name_id {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_zone_enabled(&self, zoneId_: i32,
toggle_: bool) -> ResultOf_set_zone_enabled {
    unsafe {
        let mut zoneId_ = zoneId_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_zone_enabled(
            zoneId_,
toggle_,
        );
        
        
        ResultOf_set_zone_enabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_name_of_zone(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOf_get_name_of_zone {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_name_of_zone(
            native_return.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOf_get_name_of_zone {
            success,
            ret: native_return,
            
        }
    }
}

}
